Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-67 -67 34 -67] -67] [[93 93 93 -50] -50] [[54 54 54 -79] -79] [[-50 2 -50 -50] -50] [[88 -40 88 88] -40] [[61 61 61 40] 40] [[68 68 68 -95] -95] [[-7 -77 -77 -77] -77] [[47 -16 -16 -16] -16] [[42 -24 42 42] -24] [(67 67 67 67) 67] [(-10 -10 -10 -10) -10] [(21 21 21 21) 21] [(-9 -9 -9 -9) -9] [(-18 -18 -18 -18) -18] [(52 12 17 14) 12] [(92 25 2 43) 2] [(42 27 82 8) 8] [(61 3 51 74) 3] [(34 81 11 34) 11] [(78 63 23 44) 23] [(37 32 90 67) 32] [(29 99 92 95) 29] [(32 95 18 3) 3] [(35 11 66 63) 11] [(81 8 18 99) 8] [(58 91 43 4) 4] [(95 91 3 33) 3] [(74 58 64 29) 29] [(25 69 34 98) 25] [(15 53 45 25) 15] [(12 83 38 42) 12] [(36 21 62 23) 21] [(58 38 96 48) 38] [(95 7 94 69) 7] [(27 15 -50 -90) -90] [(12 72 73 93) 12] [(95 -26 -94 -66) -94] [(1 -24 73 4) -24] [(-100 -64 -40 93) -100] [(-11 -23 61 33) -23] [(12 -15 71 87) -15] [(-50 91 -86 54) -86] [(95 17 77 -85) -85] [(20 47 -94 -3) -94] [(-2 -29 25 77) -29] [(-20 47 66 35) -20] [(67 67 -68 56) -68] [(-47 2 23 -94) -94] [(41 51 16 18) 16] [(57 37 94 5) 5] [(17 83 13 62) 13] [(92 75 20 -49) -49] [(-44 26 9 -5) -44] [(-10 40 -52 -31) -52] [(97 65 -85 -7) -85] [(-35 -22 41 -58) -58] [(70 11 -9 -22) -22] [(67 -97 -87 -91) -97] [(99 -83 -32 93) -83] [(-12 -58 -60 -11) -60] [(-4 32 37 -5) -5] [(-51 5 -94 58) -94] [(-68 62 58 -18) -68] [(-89 77 62 -90) -90] [(3 -93 -57 -39) -93] [(-39 22 20 39) -39] [(72 24 -53 -23) -53] [(-40 -82 59 61) -82] [(80 -94 -69 94) -94] [(10 -78 -34 73) -78] [(-37 -53 -27 72) -53] [(-44 65 89 25) -44] [(87 -92 34 -57) -92] [(81 14 -94 -15) -94] [(-88 85 -28 43) -88] [(70 9 -57 32) -57] [(-29 55 71 -5) -29] [(-51 -34 -6 -60) -60] [(2 -80 -46 -8) -80] [(44 -87 74 -92) -92] [(47 -74 22 -8) -74] [(52 -57 -76 -26) -76] [(-7 -80 -3 -29) -80] [(-85 -44 -94 -46) -94] [(58 -24 53 -33) -33] [(-59 40 -31 -37) -59] [(-73 31 -50 85) -73] [(-76 66 19 -14) -76] [(-6 55 -86 96) -86] [(55 -46 -96 -17) -96] [(-37 -60 52 4) -60] [(-74 100 -47 -41) -74] [(100 -44 -8 49) -44] [(26 -8 -74 -36) -74])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-67 -67 34 -67] -67]
Train Case:   6 | Input/Output: [[93 93 93 -50] -50]
Train Case:   7 | Input/Output: [[54 54 54 -79] -79]
Train Case:   8 | Input/Output: [[-50 2 -50 -50] -50]
Train Case:   9 | Input/Output: [[88 -40 88 88] -40]
Train Case:  10 | Input/Output: [[61 61 61 40] 40]
Train Case:  11 | Input/Output: [[68 68 68 -95] -95]
Train Case:  12 | Input/Output: [[-7 -77 -77 -77] -77]
Train Case:  13 | Input/Output: [[47 -16 -16 -16] -16]
Train Case:  14 | Input/Output: [[42 -24 42 42] -24]
Train Case:  15 | Input/Output: [(67 67 67 67) 67]
Train Case:  16 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  17 | Input/Output: [(21 21 21 21) 21]
Train Case:  18 | Input/Output: [(-9 -9 -9 -9) -9]
Train Case:  19 | Input/Output: [(-18 -18 -18 -18) -18]
Train Case:  20 | Input/Output: [(52 12 17 14) 12]
Train Case:  21 | Input/Output: [(92 25 2 43) 2]
Train Case:  22 | Input/Output: [(42 27 82 8) 8]
Train Case:  23 | Input/Output: [(61 3 51 74) 3]
Train Case:  24 | Input/Output: [(34 81 11 34) 11]
Train Case:  25 | Input/Output: [(78 63 23 44) 23]
Train Case:  26 | Input/Output: [(37 32 90 67) 32]
Train Case:  27 | Input/Output: [(29 99 92 95) 29]
Train Case:  28 | Input/Output: [(32 95 18 3) 3]
Train Case:  29 | Input/Output: [(35 11 66 63) 11]
Train Case:  30 | Input/Output: [(81 8 18 99) 8]
Train Case:  31 | Input/Output: [(58 91 43 4) 4]
Train Case:  32 | Input/Output: [(95 91 3 33) 3]
Train Case:  33 | Input/Output: [(74 58 64 29) 29]
Train Case:  34 | Input/Output: [(25 69 34 98) 25]
Train Case:  35 | Input/Output: [(15 53 45 25) 15]
Train Case:  36 | Input/Output: [(12 83 38 42) 12]
Train Case:  37 | Input/Output: [(36 21 62 23) 21]
Train Case:  38 | Input/Output: [(58 38 96 48) 38]
Train Case:  39 | Input/Output: [(95 7 94 69) 7]
Train Case:  40 | Input/Output: [(27 15 -50 -90) -90]
Train Case:  41 | Input/Output: [(12 72 73 93) 12]
Train Case:  42 | Input/Output: [(95 -26 -94 -66) -94]
Train Case:  43 | Input/Output: [(1 -24 73 4) -24]
Train Case:  44 | Input/Output: [(-100 -64 -40 93) -100]
Train Case:  45 | Input/Output: [(-11 -23 61 33) -23]
Train Case:  46 | Input/Output: [(12 -15 71 87) -15]
Train Case:  47 | Input/Output: [(-50 91 -86 54) -86]
Train Case:  48 | Input/Output: [(95 17 77 -85) -85]
Train Case:  49 | Input/Output: [(20 47 -94 -3) -94]
Train Case:  50 | Input/Output: [(-2 -29 25 77) -29]
Train Case:  51 | Input/Output: [(-20 47 66 35) -20]
Train Case:  52 | Input/Output: [(67 67 -68 56) -68]
Train Case:  53 | Input/Output: [(-47 2 23 -94) -94]
Train Case:  54 | Input/Output: [(41 51 16 18) 16]
Train Case:  55 | Input/Output: [(57 37 94 5) 5]
Train Case:  56 | Input/Output: [(17 83 13 62) 13]
Train Case:  57 | Input/Output: [(92 75 20 -49) -49]
Train Case:  58 | Input/Output: [(-44 26 9 -5) -44]
Train Case:  59 | Input/Output: [(-10 40 -52 -31) -52]
Train Case:  60 | Input/Output: [(97 65 -85 -7) -85]
Train Case:  61 | Input/Output: [(-35 -22 41 -58) -58]
Train Case:  62 | Input/Output: [(70 11 -9 -22) -22]
Train Case:  63 | Input/Output: [(67 -97 -87 -91) -97]
Train Case:  64 | Input/Output: [(99 -83 -32 93) -83]
Train Case:  65 | Input/Output: [(-12 -58 -60 -11) -60]
Train Case:  66 | Input/Output: [(-4 32 37 -5) -5]
Train Case:  67 | Input/Output: [(-51 5 -94 58) -94]
Train Case:  68 | Input/Output: [(-68 62 58 -18) -68]
Train Case:  69 | Input/Output: [(-89 77 62 -90) -90]
Train Case:  70 | Input/Output: [(3 -93 -57 -39) -93]
Train Case:  71 | Input/Output: [(-39 22 20 39) -39]
Train Case:  72 | Input/Output: [(72 24 -53 -23) -53]
Train Case:  73 | Input/Output: [(-40 -82 59 61) -82]
Train Case:  74 | Input/Output: [(80 -94 -69 94) -94]
Train Case:  75 | Input/Output: [(10 -78 -34 73) -78]
Train Case:  76 | Input/Output: [(-37 -53 -27 72) -53]
Train Case:  77 | Input/Output: [(-44 65 89 25) -44]
Train Case:  78 | Input/Output: [(87 -92 34 -57) -92]
Train Case:  79 | Input/Output: [(81 14 -94 -15) -94]
Train Case:  80 | Input/Output: [(-88 85 -28 43) -88]
Train Case:  81 | Input/Output: [(70 9 -57 32) -57]
Train Case:  82 | Input/Output: [(-29 55 71 -5) -29]
Train Case:  83 | Input/Output: [(-51 -34 -6 -60) -60]
Train Case:  84 | Input/Output: [(2 -80 -46 -8) -80]
Train Case:  85 | Input/Output: [(44 -87 74 -92) -92]
Train Case:  86 | Input/Output: [(47 -74 22 -8) -74]
Train Case:  87 | Input/Output: [(52 -57 -76 -26) -76]
Train Case:  88 | Input/Output: [(-7 -80 -3 -29) -80]
Train Case:  89 | Input/Output: [(-85 -44 -94 -46) -94]
Train Case:  90 | Input/Output: [(58 -24 53 -33) -33]
Train Case:  91 | Input/Output: [(-59 40 -31 -37) -59]
Train Case:  92 | Input/Output: [(-73 31 -50 85) -73]
Train Case:  93 | Input/Output: [(-76 66 19 -14) -76]
Train Case:  94 | Input/Output: [(-6 55 -86 96) -86]
Train Case:  95 | Input/Output: [(55 -46 -96 -17) -96]
Train Case:  96 | Input/Output: [(-37 -60 52 4) -60]
Train Case:  97 | Input/Output: [(-74 100 -47 -41) -74]
Train Case:  98 | Input/Output: [(100 -44 -8 49) -44]
Train Case:  99 | Input/Output: [(26 -8 -74 -36) -74]
Test Case:   0 | Input/Output: [[-8 -8 -29 -8] -29]
Test Case:   1 | Input/Output: [[41 43 41 41] 41]
Test Case:   2 | Input/Output: [[-88 -88 -88 -6] -88]
Test Case:   3 | Input/Output: [[-58 -58 -58 10] -58]
Test Case:   4 | Input/Output: [[47 47 47 18] 18]
Test Case:   5 | Input/Output: [[88 88 88 59] 59]
Test Case:   6 | Input/Output: [[10 -66 10 10] -66]
Test Case:   7 | Input/Output: [[94 57 57 57] 57]
Test Case:   8 | Input/Output: [[-8 -61 -61 -61] -61]
Test Case:   9 | Input/Output: [[-81 -81 -63 -81] -81]
Test Case:  10 | Input/Output: [[35 -56 -56 -56] -56]
Test Case:  11 | Input/Output: [[-67 -67 -14 -67] -67]
Test Case:  12 | Input/Output: [[71 71 89 71] 71]
Test Case:  13 | Input/Output: [[-51 -51 -51 77] -51]
Test Case:  14 | Input/Output: [[-13 -27 -13 -13] -27]
Test Case:  15 | Input/Output: [[-60 -23 -23 -23] -60]
Test Case:  16 | Input/Output: [[20 20 20 12] 12]
Test Case:  17 | Input/Output: [[22 22 22 20] 20]
Test Case:  18 | Input/Output: [[41 -13 -13 -13] -13]
Test Case:  19 | Input/Output: [[46 46 -17 46] -17]
Test Case:  20 | Input/Output: [[-63 -63 82 -63] -63]
Test Case:  21 | Input/Output: [[-57 -57 -57 -58] -58]
Test Case:  22 | Input/Output: [[2 2 -23 2] -23]
Test Case:  23 | Input/Output: [[-78 -78 -57 -78] -78]
Test Case:  24 | Input/Output: [[11 11 11 -51] -51]
Test Case:  25 | Input/Output: [[100 100 19 100] 19]
Test Case:  26 | Input/Output: [[-65 -65 -65 -55] -65]
Test Case:  27 | Input/Output: [[-16 20 -16 -16] -16]
Test Case:  28 | Input/Output: [[28 -80 -80 -80] -80]
Test Case:  29 | Input/Output: [[-20 69 69 69] -20]
Test Case:  30 | Input/Output: [[-7 -7 -59 -7] -59]
Test Case:  31 | Input/Output: [[19 93 93 93] 19]
Test Case:  32 | Input/Output: [[30 30 30 98] 30]
Test Case:  33 | Input/Output: [[63 63 63 -86] -86]
Test Case:  34 | Input/Output: [[74 74 74 21] 21]
Test Case:  35 | Input/Output: [[-84 -96 -84 -84] -96]
Test Case:  36 | Input/Output: [[96 -75 -75 -75] -75]
Test Case:  37 | Input/Output: [[-29 25 -29 -29] -29]
Test Case:  38 | Input/Output: [[-98 -98 18 -98] -98]
Test Case:  39 | Input/Output: [[-86 -54 -86 -86] -86]
Test Case:  40 | Input/Output: [[81 81 11 81] 11]
Test Case:  41 | Input/Output: [[-68 -68 -68 44] -68]
Test Case:  42 | Input/Output: [[-22 -30 -22 -22] -30]
Test Case:  43 | Input/Output: [[-32 7 7 7] -32]
Test Case:  44 | Input/Output: [[-12 -6 -12 -12] -12]
Test Case:  45 | Input/Output: [[-76 -76 -76 8] -76]
Test Case:  46 | Input/Output: [[11 4 4 4] 4]
Test Case:  47 | Input/Output: [[14 14 24 14] 14]
Test Case:  48 | Input/Output: [[-4 -4 -4 -21] -21]
Test Case:  49 | Input/Output: [[58 58 48 58] 48]
Test Case:  50 | Input/Output: [[79 67 67 67] 67]
Test Case:  51 | Input/Output: [[73 73 73 73] 73]
Test Case:  52 | Input/Output: [[60 0 60 60] 0]
Test Case:  53 | Input/Output: [[-35 -40 -40 -40] -40]
Test Case:  54 | Input/Output: [[-32 -30 -32 -32] -32]
Test Case:  55 | Input/Output: [[82 -56 82 82] -56]
Test Case:  56 | Input/Output: [[-1 21 21 21] -1]
Test Case:  57 | Input/Output: [[-86 -95 -95 -95] -95]
Test Case:  58 | Input/Output: [[22 97 97 97] 22]
Test Case:  59 | Input/Output: [[-76 38 38 38] -76]
Test Case:  60 | Input/Output: [[-59 -59 -59 16] -59]
Test Case:  61 | Input/Output: [[49 8 8 8] 8]
Test Case:  62 | Input/Output: [[12 -56 12 12] -56]
Test Case:  63 | Input/Output: [[44 -85 -85 -85] -85]
Test Case:  64 | Input/Output: [[-84 -84 -84 -23] -84]
Test Case:  65 | Input/Output: [[-87 -87 18 -87] -87]
Test Case:  66 | Input/Output: [[-35 -35 -35 87] -35]
Test Case:  67 | Input/Output: [[-52 -52 -52 -31] -52]
Test Case:  68 | Input/Output: [[33 33 51 33] 33]
Test Case:  69 | Input/Output: [[-39 -39 -15 -39] -39]
Test Case:  70 | Input/Output: [[6 -12 6 6] -12]
Test Case:  71 | Input/Output: [[-70 -40 -70 -70] -70]
Test Case:  72 | Input/Output: [[62 -56 62 62] -56]
Test Case:  73 | Input/Output: [[27 1 27 27] 1]
Test Case:  74 | Input/Output: [[-34 -59 -59 -59] -59]
Test Case:  75 | Input/Output: [[65 65 65 99] 65]
Test Case:  76 | Input/Output: [[-82 45 -82 -82] -82]
Test Case:  77 | Input/Output: [[92 92 43 92] 43]
Test Case:  78 | Input/Output: [[90 90 -53 90] -53]
Test Case:  79 | Input/Output: [[-71 -71 79 -71] -71]
Test Case:  80 | Input/Output: [[-82 38 38 38] -82]
Test Case:  81 | Input/Output: [[80 80 80 99] 80]
Test Case:  82 | Input/Output: [[-38 -38 -38 19] -38]
Test Case:  83 | Input/Output: [[90 93 93 93] 90]
Test Case:  84 | Input/Output: [[69 -1 -1 -1] -1]
Test Case:  85 | Input/Output: [[-39 -39 -39 -52] -52]
Test Case:  86 | Input/Output: [[41 -93 -93 -93] -93]
Test Case:  87 | Input/Output: [[-58 -58 -58 37] -58]
Test Case:  88 | Input/Output: [[75 75 -59 75] -59]
Test Case:  89 | Input/Output: [[75 75 -27 75] -27]
Test Case:  90 | Input/Output: [[-86 -86 -86 84] -86]
Test Case:  91 | Input/Output: [[64 64 -15 64] -15]
Test Case:  92 | Input/Output: [[-96 50 -96 -96] -96]
Test Case:  93 | Input/Output: [[-9 3 -9 -9] -9]
Test Case:  94 | Input/Output: [[12 100 12 12] 12]
Test Case:  95 | Input/Output: [[35 16 35 35] 16]
Test Case:  96 | Input/Output: [[-46 21 21 21] -46]
Test Case:  97 | Input/Output: [[8 29 8 8] 8]
Test Case:  98 | Input/Output: [[-50 -50 -49 -50] -50]
Test Case:  99 | Input/Output: [[81 -74 81 81] -74]
Test Case: 100 | Input/Output: [(72 72 72 72) 72]
Test Case: 101 | Input/Output: [(15 15 15 15) 15]
Test Case: 102 | Input/Output: [(30 30 30 30) 30]
Test Case: 103 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 104 | Input/Output: [(32 32 32 32) 32]
Test Case: 105 | Input/Output: [(36 36 36 36) 36]
Test Case: 106 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 107 | Input/Output: [(41 41 41 41) 41]
Test Case: 108 | Input/Output: [(16 16 16 16) 16]
Test Case: 109 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 110 | Input/Output: [(47 47 47 47) 47]
Test Case: 111 | Input/Output: [(5 5 5 5) 5]
Test Case: 112 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 113 | Input/Output: [(66 66 66 66) 66]
Test Case: 114 | Input/Output: [(26 26 26 26) 26]
Test Case: 115 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 116 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 117 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 118 | Input/Output: [(45 45 45 45) 45]
Test Case: 119 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 120 | Input/Output: [(67 67 67 67) 67]
Test Case: 121 | Input/Output: [(2 2 2 2) 2]
Test Case: 122 | Input/Output: [(68 68 68 68) 68]
Test Case: 123 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 124 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 125 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 126 | Input/Output: [(58 58 58 58) 58]
Test Case: 127 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 128 | Input/Output: [(34 34 34 34) 34]
Test Case: 129 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 130 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 131 | Input/Output: [(16 16 16 16) 16]
Test Case: 132 | Input/Output: [(92 92 92 92) 92]
Test Case: 133 | Input/Output: [(62 62 62 62) 62]
Test Case: 134 | Input/Output: [(18 18 18 18) 18]
Test Case: 135 | Input/Output: [(43 43 43 43) 43]
Test Case: 136 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 137 | Input/Output: [(77 77 77 77) 77]
Test Case: 138 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 139 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 140 | Input/Output: [(92 92 92 92) 92]
Test Case: 141 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 142 | Input/Output: [(46 46 46 46) 46]
Test Case: 143 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 144 | Input/Output: [(62 62 62 62) 62]
Test Case: 145 | Input/Output: [(82 82 82 82) 82]
Test Case: 146 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 147 | Input/Output: [(54 54 54 54) 54]
Test Case: 148 | Input/Output: [(90 90 90 90) 90]
Test Case: 149 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 150 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 151 | Input/Output: [(56 56 56 56) 56]
Test Case: 152 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 153 | Input/Output: [(26 26 26 26) 26]
Test Case: 154 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 155 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 156 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 157 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 158 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 159 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 160 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 161 | Input/Output: [(29 29 29 29) 29]
Test Case: 162 | Input/Output: [(86 86 86 86) 86]
Test Case: 163 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 164 | Input/Output: [(94 94 94 94) 94]
Test Case: 165 | Input/Output: [(46 46 46 46) 46]
Test Case: 166 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 167 | Input/Output: [(87 87 87 87) 87]
Test Case: 168 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 169 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 170 | Input/Output: [(48 48 48 48) 48]
Test Case: 171 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 172 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 173 | Input/Output: [(5 5 5 5) 5]
Test Case: 174 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 175 | Input/Output: [(83 83 83 83) 83]
Test Case: 176 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 177 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 178 | Input/Output: [(73 73 73 73) 73]
Test Case: 179 | Input/Output: [(54 54 54 54) 54]
Test Case: 180 | Input/Output: [(32 32 32 32) 32]
Test Case: 181 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 182 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 183 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 184 | Input/Output: [(83 83 83 83) 83]
Test Case: 185 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 186 | Input/Output: [(10 10 10 10) 10]
Test Case: 187 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 188 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 189 | Input/Output: [(27 27 27 27) 27]
Test Case: 190 | Input/Output: [(23 23 23 23) 23]
Test Case: 191 | Input/Output: [(28 28 28 28) 28]
Test Case: 192 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 193 | Input/Output: [(75 75 75 75) 75]
Test Case: 194 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 195 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 196 | Input/Output: [(39 39 39 39) 39]
Test Case: 197 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 198 | Input/Output: [(83 83 83 83) 83]
Test Case: 199 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 200 | Input/Output: [(26 69 59 66) 26]
Test Case: 201 | Input/Output: [(17 97 4 24) 4]
Test Case: 202 | Input/Output: [(78 76 6 50) 6]
Test Case: 203 | Input/Output: [(6 13 20 62) 6]
Test Case: 204 | Input/Output: [(12 32 85 1) 1]
Test Case: 205 | Input/Output: [(8 6 35 49) 6]
Test Case: 206 | Input/Output: [(47 100 76 78) 47]
Test Case: 207 | Input/Output: [(68 34 8 15) 8]
Test Case: 208 | Input/Output: [(86 40 20 1) 1]
Test Case: 209 | Input/Output: [(80 91 61 16) 16]
Test Case: 210 | Input/Output: [(51 36 82 96) 36]
Test Case: 211 | Input/Output: [(55 79 11 30) 11]
Test Case: 212 | Input/Output: [(60 27 17 9) 9]
Test Case: 213 | Input/Output: [(57 67 26 85) 26]
Test Case: 214 | Input/Output: [(11 24 83 14) 11]
Test Case: 215 | Input/Output: [(62 82 8 87) 8]
Test Case: 216 | Input/Output: [(93 89 4 6) 4]
Test Case: 217 | Input/Output: [(14 81 80 28) 14]
Test Case: 218 | Input/Output: [(34 43 100 47) 34]
Test Case: 219 | Input/Output: [(87 96 26 93) 26]
Test Case: 220 | Input/Output: [(15 100 86 29) 15]
Test Case: 221 | Input/Output: [(69 98 33 40) 33]
Test Case: 222 | Input/Output: [(64 36 27 48) 27]
Test Case: 223 | Input/Output: [(62 55 93 57) 55]
Test Case: 224 | Input/Output: [(24 17 93 23) 17]
Test Case: 225 | Input/Output: [(55 88 53 46) 46]
Test Case: 226 | Input/Output: [(17 50 47 29) 17]
Test Case: 227 | Input/Output: [(83 27 0 7) 0]
Test Case: 228 | Input/Output: [(99 17 2 34) 2]
Test Case: 229 | Input/Output: [(24 82 18 100) 18]
Test Case: 230 | Input/Output: [(1 30 96 72) 1]
Test Case: 231 | Input/Output: [(33 65 33 82) 33]
Test Case: 232 | Input/Output: [(77 42 44 28) 28]
Test Case: 233 | Input/Output: [(100 80 9 62) 9]
Test Case: 234 | Input/Output: [(76 69 95 81) 69]
Test Case: 235 | Input/Output: [(96 88 73 14) 14]
Test Case: 236 | Input/Output: [(21 2 72 78) 2]
Test Case: 237 | Input/Output: [(98 56 24 1) 1]
Test Case: 238 | Input/Output: [(79 32 4 18) 4]
Test Case: 239 | Input/Output: [(78 83 9 41) 9]
Test Case: 240 | Input/Output: [(61 40 17 41) 17]
Test Case: 241 | Input/Output: [(80 14 11 81) 11]
Test Case: 242 | Input/Output: [(15 71 10 16) 10]
Test Case: 243 | Input/Output: [(93 11 86 83) 11]
Test Case: 244 | Input/Output: [(30 69 22 59) 22]
Test Case: 245 | Input/Output: [(87 31 5 75) 5]
Test Case: 246 | Input/Output: [(38 12 89 39) 12]
Test Case: 247 | Input/Output: [(10 33 29 83) 10]
Test Case: 248 | Input/Output: [(57 100 84 30) 30]
Test Case: 249 | Input/Output: [(45 71 17 88) 17]
Test Case: 250 | Input/Output: [(46 45 20 95) 20]
Test Case: 251 | Input/Output: [(63 60 59 36) 36]
Test Case: 252 | Input/Output: [(15 84 94 85) 15]
Test Case: 253 | Input/Output: [(50 64 24 59) 24]
Test Case: 254 | Input/Output: [(49 21 85 10) 10]
Test Case: 255 | Input/Output: [(74 64 49 18) 18]
Test Case: 256 | Input/Output: [(74 7 10 28) 7]
Test Case: 257 | Input/Output: [(29 52 22 44) 22]
Test Case: 258 | Input/Output: [(96 7 33 98) 7]
Test Case: 259 | Input/Output: [(97 92 67 62) 62]
Test Case: 260 | Input/Output: [(3 50 34 13) 3]
Test Case: 261 | Input/Output: [(8 15 91 56) 8]
Test Case: 262 | Input/Output: [(42 64 49 13) 13]
Test Case: 263 | Input/Output: [(8 9 82 2) 2]
Test Case: 264 | Input/Output: [(96 70 47 56) 47]
Test Case: 265 | Input/Output: [(23 51 31 62) 23]
Test Case: 266 | Input/Output: [(41 92 14 80) 14]
Test Case: 267 | Input/Output: [(63 73 19 68) 19]
Test Case: 268 | Input/Output: [(47 10 1 96) 1]
Test Case: 269 | Input/Output: [(18 27 74 61) 18]
Test Case: 270 | Input/Output: [(63 37 97 90) 37]
Test Case: 271 | Input/Output: [(57 76 84 21) 21]
Test Case: 272 | Input/Output: [(70 5 15 84) 5]
Test Case: 273 | Input/Output: [(74 68 71 75) 68]
Test Case: 274 | Input/Output: [(44 69 77 1) 1]
Test Case: 275 | Input/Output: [(89 81 69 60) 60]
Test Case: 276 | Input/Output: [(12 48 35 58) 12]
Test Case: 277 | Input/Output: [(76 60 52 49) 49]
Test Case: 278 | Input/Output: [(69 14 49 16) 14]
Test Case: 279 | Input/Output: [(57 26 3 32) 3]
Test Case: 280 | Input/Output: [(60 73 28 59) 28]
Test Case: 281 | Input/Output: [(67 38 74 92) 38]
Test Case: 282 | Input/Output: [(15 96 15 64) 15]
Test Case: 283 | Input/Output: [(59 94 78 67) 59]
Test Case: 284 | Input/Output: [(59 36 77 22) 22]
Test Case: 285 | Input/Output: [(12 63 27 47) 12]
Test Case: 286 | Input/Output: [(88 80 5 75) 5]
Test Case: 287 | Input/Output: [(86 55 100 73) 55]
Test Case: 288 | Input/Output: [(88 69 43 76) 43]
Test Case: 289 | Input/Output: [(41 4 53 67) 4]
Test Case: 290 | Input/Output: [(92 91 49 23) 23]
Test Case: 291 | Input/Output: [(11 92 24 57) 11]
Test Case: 292 | Input/Output: [(46 60 86 75) 46]
Test Case: 293 | Input/Output: [(66 31 13 31) 13]
Test Case: 294 | Input/Output: [(55 10 6 2) 2]
Test Case: 295 | Input/Output: [(94 20 14 40) 14]
Test Case: 296 | Input/Output: [(71 10 31 95) 10]
Test Case: 297 | Input/Output: [(57 37 77 100) 37]
Test Case: 298 | Input/Output: [(25 16 52 84) 16]
Test Case: 299 | Input/Output: [(36 85 81 90) 36]
Test Case: 300 | Input/Output: [(88 98 57 78) 57]
Test Case: 301 | Input/Output: [(13 3 52 39) 3]
Test Case: 302 | Input/Output: [(58 80 6 27) 6]
Test Case: 303 | Input/Output: [(40 98 3 24) 3]
Test Case: 304 | Input/Output: [(64 41 21 27) 21]
Test Case: 305 | Input/Output: [(73 5 15 74) 5]
Test Case: 306 | Input/Output: [(58 22 8 42) 8]
Test Case: 307 | Input/Output: [(73 88 38 78) 38]
Test Case: 308 | Input/Output: [(98 45 17 40) 17]
Test Case: 309 | Input/Output: [(2 51 92 83) 2]
Test Case: 310 | Input/Output: [(42 72 19 5) 5]
Test Case: 311 | Input/Output: [(33 85 86 68) 33]
Test Case: 312 | Input/Output: [(61 17 91 53) 17]
Test Case: 313 | Input/Output: [(11 84 39 96) 11]
Test Case: 314 | Input/Output: [(99 91 90 50) 50]
Test Case: 315 | Input/Output: [(89 92 57 27) 27]
Test Case: 316 | Input/Output: [(70 100 84 1) 1]
Test Case: 317 | Input/Output: [(34 18 91 99) 18]
Test Case: 318 | Input/Output: [(0 3 97 37) 0]
Test Case: 319 | Input/Output: [(29 8 19 12) 8]
Test Case: 320 | Input/Output: [(43 13 25 61) 13]
Test Case: 321 | Input/Output: [(52 61 54 47) 47]
Test Case: 322 | Input/Output: [(89 79 56 98) 56]
Test Case: 323 | Input/Output: [(81 13 9 70) 9]
Test Case: 324 | Input/Output: [(12 36 36 36) 12]
Test Case: 325 | Input/Output: [(44 76 66 33) 33]
Test Case: 326 | Input/Output: [(89 28 9 12) 9]
Test Case: 327 | Input/Output: [(37 54 36 16) 16]
Test Case: 328 | Input/Output: [(26 95 50 86) 26]
Test Case: 329 | Input/Output: [(15 66 70 50) 15]
Test Case: 330 | Input/Output: [(12 61 30 93) 12]
Test Case: 331 | Input/Output: [(80 71 12 75) 12]
Test Case: 332 | Input/Output: [(4 55 66 97) 4]
Test Case: 333 | Input/Output: [(55 33 84 87) 33]
Test Case: 334 | Input/Output: [(2 62 18 42) 2]
Test Case: 335 | Input/Output: [(85 61 28 85) 28]
Test Case: 336 | Input/Output: [(58 28 35 98) 28]
Test Case: 337 | Input/Output: [(65 20 27 91) 20]
Test Case: 338 | Input/Output: [(82 64 86 88) 64]
Test Case: 339 | Input/Output: [(94 91 95 37) 37]
Test Case: 340 | Input/Output: [(15 47 61 77) 15]
Test Case: 341 | Input/Output: [(25 1 11 90) 1]
Test Case: 342 | Input/Output: [(39 16 49 92) 16]
Test Case: 343 | Input/Output: [(63 58 71 65) 58]
Test Case: 344 | Input/Output: [(23 47 39 79) 23]
Test Case: 345 | Input/Output: [(36 66 33 68) 33]
Test Case: 346 | Input/Output: [(46 66 93 7) 7]
Test Case: 347 | Input/Output: [(17 95 90 100) 17]
Test Case: 348 | Input/Output: [(40 80 21 36) 21]
Test Case: 349 | Input/Output: [(99 15 50 17) 15]
Test Case: 350 | Input/Output: [(68 28 53 78) 28]
Test Case: 351 | Input/Output: [(40 3 52 85) 3]
Test Case: 352 | Input/Output: [(37 0 8 15) 0]
Test Case: 353 | Input/Output: [(60 58 4 66) 4]
Test Case: 354 | Input/Output: [(71 15 34 20) 15]
Test Case: 355 | Input/Output: [(19 52 66 51) 19]
Test Case: 356 | Input/Output: [(8 11 47 69) 8]
Test Case: 357 | Input/Output: [(26 94 71 15) 15]
Test Case: 358 | Input/Output: [(32 80 91 82) 32]
Test Case: 359 | Input/Output: [(21 90 66 7) 7]
Test Case: 360 | Input/Output: [(96 31 48 88) 31]
Test Case: 361 | Input/Output: [(62 11 59 24) 11]
Test Case: 362 | Input/Output: [(57 57 34 28) 28]
Test Case: 363 | Input/Output: [(14 75 63 56) 14]
Test Case: 364 | Input/Output: [(30 36 51 60) 30]
Test Case: 365 | Input/Output: [(50 2 73 74) 2]
Test Case: 366 | Input/Output: [(94 28 18 45) 18]
Test Case: 367 | Input/Output: [(38 9 85 79) 9]
Test Case: 368 | Input/Output: [(66 14 27 51) 14]
Test Case: 369 | Input/Output: [(16 27 10 25) 10]
Test Case: 370 | Input/Output: [(5 57 2 90) 2]
Test Case: 371 | Input/Output: [(33 46 5 59) 5]
Test Case: 372 | Input/Output: [(79 12 78 54) 12]
Test Case: 373 | Input/Output: [(42 86 28 75) 28]
Test Case: 374 | Input/Output: [(22 18 89 71) 18]
Test Case: 375 | Input/Output: [(28 49 30 30) 28]
Test Case: 376 | Input/Output: [(89 54 58 41) 41]
Test Case: 377 | Input/Output: [(32 36 52 11) 11]
Test Case: 378 | Input/Output: [(19 39 91 60) 19]
Test Case: 379 | Input/Output: [(11 35 32 11) 11]
Test Case: 380 | Input/Output: [(10 79 57 41) 10]
Test Case: 381 | Input/Output: [(91 91 21 22) 21]
Test Case: 382 | Input/Output: [(56 87 68 60) 56]
Test Case: 383 | Input/Output: [(8 51 76 68) 8]
Test Case: 384 | Input/Output: [(85 51 96 10) 10]
Test Case: 385 | Input/Output: [(59 26 3 50) 3]
Test Case: 386 | Input/Output: [(1 100 4 19) 1]
Test Case: 387 | Input/Output: [(61 51 55 58) 51]
Test Case: 388 | Input/Output: [(14 13 65 21) 13]
Test Case: 389 | Input/Output: [(10 79 83 74) 10]
Test Case: 390 | Input/Output: [(68 62 54 95) 54]
Test Case: 391 | Input/Output: [(3 99 45 92) 3]
Test Case: 392 | Input/Output: [(41 92 94 23) 23]
Test Case: 393 | Input/Output: [(11 4 82 95) 4]
Test Case: 394 | Input/Output: [(100 92 40 94) 40]
Test Case: 395 | Input/Output: [(70 37 76 37) 37]
Test Case: 396 | Input/Output: [(11 49 23 62) 11]
Test Case: 397 | Input/Output: [(15 99 74 82) 15]
Test Case: 398 | Input/Output: [(33 9 76 40) 9]
Test Case: 399 | Input/Output: [(35 68 78 85) 35]
Test Case: 400 | Input/Output: [(-20 28 35 -46) -46]
Test Case: 401 | Input/Output: [(-95 -9 49 37) -95]
Test Case: 402 | Input/Output: [(-35 26 92 82) -35]
Test Case: 403 | Input/Output: [(6 33 -8 -56) -56]
Test Case: 404 | Input/Output: [(95 44 18 -77) -77]
Test Case: 405 | Input/Output: [(-84 4 39 -4) -84]
Test Case: 406 | Input/Output: [(-2 -38 50 36) -38]
Test Case: 407 | Input/Output: [(88 28 -32 10) -32]
Test Case: 408 | Input/Output: [(-17 26 34 55) -17]
Test Case: 409 | Input/Output: [(62 91 22 -29) -29]
Test Case: 410 | Input/Output: [(-85 -6 37 30) -85]
Test Case: 411 | Input/Output: [(80 39 -21 31) -21]
Test Case: 412 | Input/Output: [(39 81 -6 72) -6]
Test Case: 413 | Input/Output: [(26 -17 -40 -15) -40]
Test Case: 414 | Input/Output: [(-72 -76 -59 -39) -76]
Test Case: 415 | Input/Output: [(-71 88 -48 82) -71]
Test Case: 416 | Input/Output: [(55 20 -70 -91) -91]
Test Case: 417 | Input/Output: [(-80 79 21 -59) -80]
Test Case: 418 | Input/Output: [(-3 7 17 -70) -70]
Test Case: 419 | Input/Output: [(-56 42 -56 -42) -56]
Test Case: 420 | Input/Output: [(1 67 97 92) 1]
Test Case: 421 | Input/Output: [(47 67 -55 60) -55]
Test Case: 422 | Input/Output: [(64 -87 -31 1) -87]
Test Case: 423 | Input/Output: [(-13 -35 81 37) -35]
Test Case: 424 | Input/Output: [(-32 -41 67 -86) -86]
Test Case: 425 | Input/Output: [(-11 46 8 68) -11]
Test Case: 426 | Input/Output: [(-96 -51 99 -89) -96]
Test Case: 427 | Input/Output: [(-27 -46 50 55) -46]
Test Case: 428 | Input/Output: [(-82 35 -44 -5) -82]
Test Case: 429 | Input/Output: [(-100 -61 41 -8) -100]
Test Case: 430 | Input/Output: [(-5 100 86 -92) -92]
Test Case: 431 | Input/Output: [(-35 -100 -7 34) -100]
Test Case: 432 | Input/Output: [(14 46 -29 -71) -71]
Test Case: 433 | Input/Output: [(96 79 -8 27) -8]
Test Case: 434 | Input/Output: [(-34 22 27 -89) -89]
Test Case: 435 | Input/Output: [(-48 46 39 -40) -48]
Test Case: 436 | Input/Output: [(31 82 -93 47) -93]
Test Case: 437 | Input/Output: [(-64 -12 85 -81) -81]
Test Case: 438 | Input/Output: [(-26 -49 -66 -29) -66]
Test Case: 439 | Input/Output: [(24 -52 -85 80) -85]
Test Case: 440 | Input/Output: [(62 22 80 -90) -90]
Test Case: 441 | Input/Output: [(12 -96 -2 -69) -96]
Test Case: 442 | Input/Output: [(-58 11 13 -10) -58]
Test Case: 443 | Input/Output: [(73 86 -63 6) -63]
Test Case: 444 | Input/Output: [(-56 -75 -79 -30) -79]
Test Case: 445 | Input/Output: [(-97 28 -23 -99) -99]
Test Case: 446 | Input/Output: [(31 -58 62 -41) -58]
Test Case: 447 | Input/Output: [(81 -33 20 98) -33]
Test Case: 448 | Input/Output: [(6 68 -24 -84) -84]
Test Case: 449 | Input/Output: [(-90 -41 66 -71) -90]
Test Case: 450 | Input/Output: [(49 -11 -12 84) -12]
Test Case: 451 | Input/Output: [(19 73 -85 -88) -88]
Test Case: 452 | Input/Output: [(-56 16 -37 -46) -56]
Test Case: 453 | Input/Output: [(78 18 2 -19) -19]
Test Case: 454 | Input/Output: [(-14 -100 96 -60) -100]
Test Case: 455 | Input/Output: [(-54 66 23 11) -54]
Test Case: 456 | Input/Output: [(39 -81 34 94) -81]
Test Case: 457 | Input/Output: [(3 53 -65 98) -65]
Test Case: 458 | Input/Output: [(75 -36 -29 0) -36]
Test Case: 459 | Input/Output: [(-79 61 -44 10) -79]
Test Case: 460 | Input/Output: [(-9 -86 -95 76) -95]
Test Case: 461 | Input/Output: [(-20 67 -47 64) -47]
Test Case: 462 | Input/Output: [(-17 70 -30 93) -30]
Test Case: 463 | Input/Output: [(41 82 -82 -45) -82]
Test Case: 464 | Input/Output: [(75 -58 -95 -45) -95]
Test Case: 465 | Input/Output: [(56 96 -34 64) -34]
Test Case: 466 | Input/Output: [(82 22 77 70) 22]
Test Case: 467 | Input/Output: [(6 35 98 -24) -24]
Test Case: 468 | Input/Output: [(-72 -8 0 75) -72]
Test Case: 469 | Input/Output: [(-85 82 -53 72) -85]
Test Case: 470 | Input/Output: [(-75 -72 69 2) -75]
Test Case: 471 | Input/Output: [(65 77 95 -93) -93]
Test Case: 472 | Input/Output: [(0 -44 92 -1) -44]
Test Case: 473 | Input/Output: [(-1 -92 0 92) -92]
Test Case: 474 | Input/Output: [(97 -63 74 96) -63]
Test Case: 475 | Input/Output: [(-40 100 98 -22) -40]
Test Case: 476 | Input/Output: [(-81 84 -41 -63) -81]
Test Case: 477 | Input/Output: [(46 66 -86 -20) -86]
Test Case: 478 | Input/Output: [(11 18 -59 -11) -59]
Test Case: 479 | Input/Output: [(70 2 70 16) 2]
Test Case: 480 | Input/Output: [(-100 97 40 -55) -100]
Test Case: 481 | Input/Output: [(92 48 55 -37) -37]
Test Case: 482 | Input/Output: [(-13 14 33 -18) -18]
Test Case: 483 | Input/Output: [(18 73 58 26) 18]
Test Case: 484 | Input/Output: [(49 41 -57 -97) -97]
Test Case: 485 | Input/Output: [(-34 21 -86 -28) -86]
Test Case: 486 | Input/Output: [(67 44 77 -6) -6]
Test Case: 487 | Input/Output: [(82 -97 -98 72) -98]
Test Case: 488 | Input/Output: [(9 16 -29 52) -29]
Test Case: 489 | Input/Output: [(-80 16 -8 9) -80]
Test Case: 490 | Input/Output: [(-53 37 -48 23) -53]
Test Case: 491 | Input/Output: [(7 70 -20 -77) -77]
Test Case: 492 | Input/Output: [(-42 92 78 81) -42]
Test Case: 493 | Input/Output: [(27 36 25 -60) -60]
Test Case: 494 | Input/Output: [(-4 83 5 49) -4]
Test Case: 495 | Input/Output: [(-22 -89 -85 -3) -89]
Test Case: 496 | Input/Output: [(72 -8 -8 29) -8]
Test Case: 497 | Input/Output: [(-29 82 -40 77) -40]
Test Case: 498 | Input/Output: [(26 42 -35 -91) -91]
Test Case: 499 | Input/Output: [(-90 66 -5 86) -90]
Test Case: 500 | Input/Output: [(-65 -85 83 -10) -85]
Test Case: 501 | Input/Output: [(77 85 -60 87) -60]
Test Case: 502 | Input/Output: [(12 90 -95 34) -95]
Test Case: 503 | Input/Output: [(-9 -44 -76 4) -76]
Test Case: 504 | Input/Output: [(67 -52 -94 46) -94]
Test Case: 505 | Input/Output: [(28 26 25 -94) -94]
Test Case: 506 | Input/Output: [(-8 91 88 81) -8]
Test Case: 507 | Input/Output: [(68 -96 -14 33) -96]
Test Case: 508 | Input/Output: [(97 -38 73 -65) -65]
Test Case: 509 | Input/Output: [(27 85 -38 -34) -38]
Test Case: 510 | Input/Output: [(-44 62 -70 -59) -70]
Test Case: 511 | Input/Output: [(57 80 3 67) 3]
Test Case: 512 | Input/Output: [(-91 13 44 34) -91]
Test Case: 513 | Input/Output: [(94 -30 -54 -49) -54]
Test Case: 514 | Input/Output: [(47 57 93 -78) -78]
Test Case: 515 | Input/Output: [(54 -12 77 43) -12]
Test Case: 516 | Input/Output: [(-81 -21 -13 -25) -81]
Test Case: 517 | Input/Output: [(94 98 -29 -79) -79]
Test Case: 518 | Input/Output: [(-7 -32 33 -70) -70]
Test Case: 519 | Input/Output: [(-73 -75 -80 -19) -80]
Test Case: 520 | Input/Output: [(47 -65 35 19) -65]
Test Case: 521 | Input/Output: [(42 31 95 -18) -18]
Test Case: 522 | Input/Output: [(-1 -11 -83 43) -83]
Test Case: 523 | Input/Output: [(-20 -28 -6 -14) -28]
Test Case: 524 | Input/Output: [(-15 54 51 -73) -73]
Test Case: 525 | Input/Output: [(-20 -2 63 -12) -20]
Test Case: 526 | Input/Output: [(42 97 -94 35) -94]
Test Case: 527 | Input/Output: [(-44 -35 -95 71) -95]
Test Case: 528 | Input/Output: [(-92 45 -34 -98) -98]
Test Case: 529 | Input/Output: [(-66 32 -39 -93) -93]
Test Case: 530 | Input/Output: [(-100 78 -13 82) -100]
Test Case: 531 | Input/Output: [(-2 -2 -66 -92) -92]
Test Case: 532 | Input/Output: [(-26 -37 79 -32) -37]
Test Case: 533 | Input/Output: [(-3 -78 -1 43) -78]
Test Case: 534 | Input/Output: [(-21 21 -3 46) -21]
Test Case: 535 | Input/Output: [(6 -6 -37 63) -37]
Test Case: 536 | Input/Output: [(38 -8 3 27) -8]
Test Case: 537 | Input/Output: [(-27 42 -83 -61) -83]
Test Case: 538 | Input/Output: [(38 -87 93 21) -87]
Test Case: 539 | Input/Output: [(39 37 -8 -75) -75]
Test Case: 540 | Input/Output: [(-46 55 33 52) -46]
Test Case: 541 | Input/Output: [(82 56 -85 92) -85]
Test Case: 542 | Input/Output: [(-3 -87 -35 20) -87]
Test Case: 543 | Input/Output: [(-22 43 5 35) -22]
Test Case: 544 | Input/Output: [(-7 49 69 75) -7]
Test Case: 545 | Input/Output: [(-91 4 -39 -15) -91]
Test Case: 546 | Input/Output: [(66 -71 3 96) -71]
Test Case: 547 | Input/Output: [(51 -74 84 100) -74]
Test Case: 548 | Input/Output: [(-77 62 -49 -15) -77]
Test Case: 549 | Input/Output: [(73 76 63 -59) -59]
Test Case: 550 | Input/Output: [(-50 53 43 -21) -50]
Test Case: 551 | Input/Output: [(20 47 59 -42) -42]
Test Case: 552 | Input/Output: [(-21 18 5 -39) -39]
Test Case: 553 | Input/Output: [(-24 78 -28 -37) -37]
Test Case: 554 | Input/Output: [(-72 -83 93 0) -83]
Test Case: 555 | Input/Output: [(-7 -53 -8 18) -53]
Test Case: 556 | Input/Output: [(1 -63 70 -98) -98]
Test Case: 557 | Input/Output: [(55 -95 62 88) -95]
Test Case: 558 | Input/Output: [(99 2 16 51) 2]
Test Case: 559 | Input/Output: [(-86 -15 -80 -1) -86]
Test Case: 560 | Input/Output: [(-84 -40 -81 -32) -84]
Test Case: 561 | Input/Output: [(17 68 28 -75) -75]
Test Case: 562 | Input/Output: [(-96 -41 -65 26) -96]
Test Case: 563 | Input/Output: [(81 -95 49 -69) -95]
Test Case: 564 | Input/Output: [(-90 -96 38 42) -96]
Test Case: 565 | Input/Output: [(16 -85 21 -52) -85]
Test Case: 566 | Input/Output: [(23 66 44 98) 23]
Test Case: 567 | Input/Output: [(-14 -15 -19 72) -19]
Test Case: 568 | Input/Output: [(67 70 -42 -26) -42]
Test Case: 569 | Input/Output: [(-90 -87 100 41) -90]
Test Case: 570 | Input/Output: [(13 24 54 97) 13]
Test Case: 571 | Input/Output: [(-91 -95 57 100) -95]
Test Case: 572 | Input/Output: [(7 -71 5 25) -71]
Test Case: 573 | Input/Output: [(77 9 36 68) 9]
Test Case: 574 | Input/Output: [(-61 43 80 -7) -61]
Test Case: 575 | Input/Output: [(-14 -45 -60 40) -60]
Test Case: 576 | Input/Output: [(-27 6 100 -47) -47]
Test Case: 577 | Input/Output: [(-53 57 -100 41) -100]
Test Case: 578 | Input/Output: [(50 -88 40 9) -88]
Test Case: 579 | Input/Output: [(93 30 25 -71) -71]
Test Case: 580 | Input/Output: [(56 100 -55 8) -55]
Test Case: 581 | Input/Output: [(75 12 -95 33) -95]
Test Case: 582 | Input/Output: [(23 93 31 62) 23]
Test Case: 583 | Input/Output: [(73 -61 35 -87) -87]
Test Case: 584 | Input/Output: [(92 77 -64 71) -64]
Test Case: 585 | Input/Output: [(-17 -65 48 -82) -82]
Test Case: 586 | Input/Output: [(16 -41 72 -85) -85]
Test Case: 587 | Input/Output: [(-73 46 -33 -93) -93]
Test Case: 588 | Input/Output: [(95 -32 19 -45) -45]
Test Case: 589 | Input/Output: [(-88 -89 80 -16) -89]
Test Case: 590 | Input/Output: [(-64 25 -46 -99) -99]
Test Case: 591 | Input/Output: [(72 -94 39 -59) -94]
Test Case: 592 | Input/Output: [(-55 65 -46 -51) -55]
Test Case: 593 | Input/Output: [(-43 -48 5 18) -48]
Test Case: 594 | Input/Output: [(34 -37 -14 77) -37]
Test Case: 595 | Input/Output: [(-51 -30 82 8) -51]
Test Case: 596 | Input/Output: [(-86 86 -23 87) -86]
Test Case: 597 | Input/Output: [(-60 -3 43 -47) -60]
Test Case: 598 | Input/Output: [(46 31 56 -79) -79]
Test Case: 599 | Input/Output: [(92 36 -98 66) -98]
Test Case: 600 | Input/Output: [(18 65 7 -77) -77]
Test Case: 601 | Input/Output: [(-14 9 -53 -51) -53]
Test Case: 602 | Input/Output: [(95 -6 -3 14) -6]
Test Case: 603 | Input/Output: [(-69 97 -90 -47) -90]
Test Case: 604 | Input/Output: [(-96 55 89 0) -96]
Test Case: 605 | Input/Output: [(57 78 -5 -9) -9]
Test Case: 606 | Input/Output: [(56 -50 -79 1) -79]
Test Case: 607 | Input/Output: [(-82 -55 68 -82) -82]
Test Case: 608 | Input/Output: [(26 13 -43 -45) -45]
Test Case: 609 | Input/Output: [(-35 -59 50 -91) -91]
Test Case: 610 | Input/Output: [(-8 -40 -69 -49) -69]
Test Case: 611 | Input/Output: [(82 -55 -99 -7) -99]
Test Case: 612 | Input/Output: [(-58 -76 60 40) -76]
Test Case: 613 | Input/Output: [(-53 -43 -94 32) -94]
Test Case: 614 | Input/Output: [(29 -94 -43 -20) -94]
Test Case: 615 | Input/Output: [(-66 45 69 35) -66]
Test Case: 616 | Input/Output: [(-93 -34 -83 79) -93]
Test Case: 617 | Input/Output: [(61 65 46 39) 39]
Test Case: 618 | Input/Output: [(38 40 99 -42) -42]
Test Case: 619 | Input/Output: [(-21 85 25 -17) -21]
Test Case: 620 | Input/Output: [(-33 -99 -45 -87) -99]
Test Case: 621 | Input/Output: [(-44 2 73 47) -44]
Test Case: 622 | Input/Output: [(-73 47 -40 -82) -82]
Test Case: 623 | Input/Output: [(-34 25 19 -1) -34]
Test Case: 624 | Input/Output: [(-85 97 -34 -19) -85]
Test Case: 625 | Input/Output: [(-11 -17 78 99) -17]
Test Case: 626 | Input/Output: [(34 -7 45 -88) -88]
Test Case: 627 | Input/Output: [(-23 2 95 -42) -42]
Test Case: 628 | Input/Output: [(61 53 92 -34) -34]
Test Case: 629 | Input/Output: [(62 -42 31 52) -42]
Test Case: 630 | Input/Output: [(-99 89 48 -26) -99]
Test Case: 631 | Input/Output: [(-7 72 68 66) -7]
Test Case: 632 | Input/Output: [(-100 -64 37 -8) -100]
Test Case: 633 | Input/Output: [(94 49 -77 -41) -77]
Test Case: 634 | Input/Output: [(31 13 12 99) 12]
Test Case: 635 | Input/Output: [(-32 38 -28 21) -32]
Test Case: 636 | Input/Output: [(61 36 -20 -2) -20]
Test Case: 637 | Input/Output: [(29 71 -87 39) -87]
Test Case: 638 | Input/Output: [(13 49 89 79) 13]
Test Case: 639 | Input/Output: [(-18 -80 7 31) -80]
Test Case: 640 | Input/Output: [(34 1 14 16) 1]
Test Case: 641 | Input/Output: [(22 -79 -66 56) -79]
Test Case: 642 | Input/Output: [(-34 -75 -89 29) -89]
Test Case: 643 | Input/Output: [(90 -11 -6 1) -11]
Test Case: 644 | Input/Output: [(-64 84 -84 69) -84]
Test Case: 645 | Input/Output: [(83 55 93 13) 13]
Test Case: 646 | Input/Output: [(22 -84 -31 71) -84]
Test Case: 647 | Input/Output: [(-38 94 67 -28) -38]
Test Case: 648 | Input/Output: [(94 -84 -91 63) -91]
Test Case: 649 | Input/Output: [(6 -88 77 20) -88]
Test Case: 650 | Input/Output: [(45 -42 77 -32) -42]
Test Case: 651 | Input/Output: [(-76 -77 -58 -11) -77]
Test Case: 652 | Input/Output: [(61 61 -81 -2) -81]
Test Case: 653 | Input/Output: [(-40 -69 70 74) -69]
Test Case: 654 | Input/Output: [(13 -89 -23 94) -89]
Test Case: 655 | Input/Output: [(-87 35 -99 -2) -99]
Test Case: 656 | Input/Output: [(-87 -91 73 -89) -91]
Test Case: 657 | Input/Output: [(32 -69 -82 81) -82]
Test Case: 658 | Input/Output: [(89 77 -97 63) -97]
Test Case: 659 | Input/Output: [(73 30 15 86) 15]
Test Case: 660 | Input/Output: [(-3 -22 47 76) -22]
Test Case: 661 | Input/Output: [(47 5 -100 13) -100]
Test Case: 662 | Input/Output: [(-31 14 23 -10) -31]
Test Case: 663 | Input/Output: [(86 3 -15 36) -15]
Test Case: 664 | Input/Output: [(28 -31 -97 86) -97]
Test Case: 665 | Input/Output: [(26 28 -25 -4) -25]
Test Case: 666 | Input/Output: [(82 -68 -74 -91) -91]
Test Case: 667 | Input/Output: [(-2 7 61 -72) -72]
Test Case: 668 | Input/Output: [(0 43 20 28) 0]
Test Case: 669 | Input/Output: [(29 -68 54 37) -68]
Test Case: 670 | Input/Output: [(-13 -4 20 -93) -93]
Test Case: 671 | Input/Output: [(82 69 -18 -53) -53]
Test Case: 672 | Input/Output: [(63 -87 3 26) -87]
Test Case: 673 | Input/Output: [(99 10 4 -38) -38]
Test Case: 674 | Input/Output: [(52 -5 -15 -37) -37]
Test Case: 675 | Input/Output: [(13 49 72 75) 13]
Test Case: 676 | Input/Output: [(86 48 71 67) 48]
Test Case: 677 | Input/Output: [(-46 -52 37 -33) -52]
Test Case: 678 | Input/Output: [(-76 8 76 50) -76]
Test Case: 679 | Input/Output: [(93 49 19 -25) -25]
Test Case: 680 | Input/Output: [(50 62 24 -77) -77]
Test Case: 681 | Input/Output: [(8 -32 -59 -60) -60]
Test Case: 682 | Input/Output: [(42 -20 -97 -44) -97]
Test Case: 683 | Input/Output: [(-52 31 80 60) -52]
Test Case: 684 | Input/Output: [(-83 -54 -14 54) -83]
Test Case: 685 | Input/Output: [(5 -74 54 59) -74]
Test Case: 686 | Input/Output: [(24 32 57 -12) -12]
Test Case: 687 | Input/Output: [(26 -91 34 20) -91]
Test Case: 688 | Input/Output: [(-20 -59 -91 -55) -91]
Test Case: 689 | Input/Output: [(76 -34 -63 26) -63]
Test Case: 690 | Input/Output: [(80 -78 59 -63) -78]
Test Case: 691 | Input/Output: [(58 -20 -40 -60) -60]
Test Case: 692 | Input/Output: [(95 -89 38 63) -89]
Test Case: 693 | Input/Output: [(40 -44 -65 73) -65]
Test Case: 694 | Input/Output: [(19 -78 -44 52) -78]
Test Case: 695 | Input/Output: [(9 -58 91 20) -58]
Test Case: 696 | Input/Output: [(-18 49 12 16) -18]
Test Case: 697 | Input/Output: [(67 32 -26 61) -26]
Test Case: 698 | Input/Output: [(12 -50 77 -41) -50]
Test Case: 699 | Input/Output: [(49 79 24 -70) -70]
Test Case: 700 | Input/Output: [(-41 -54 83 -4) -54]
Test Case: 701 | Input/Output: [(-24 -6 36 93) -24]
Test Case: 702 | Input/Output: [(-8 64 17 21) -8]
Test Case: 703 | Input/Output: [(-63 39 75 -57) -63]
Test Case: 704 | Input/Output: [(85 -54 -12 30) -54]
Test Case: 705 | Input/Output: [(46 44 5 18) 5]
Test Case: 706 | Input/Output: [(-16 85 17 59) -16]
Test Case: 707 | Input/Output: [(-80 21 -48 -75) -80]
Test Case: 708 | Input/Output: [(21 -84 3 84) -84]
Test Case: 709 | Input/Output: [(-63 -54 67 -25) -63]
Test Case: 710 | Input/Output: [(14 -56 -86 -3) -86]
Test Case: 711 | Input/Output: [(79 68 78 26) 26]
Test Case: 712 | Input/Output: [(80 -29 71 56) -29]
Test Case: 713 | Input/Output: [(-45 48 3 97) -45]
Test Case: 714 | Input/Output: [(17 85 1 6) 1]
Test Case: 715 | Input/Output: [(83 -90 -70 -68) -90]
Test Case: 716 | Input/Output: [(-38 3 17 12) -38]
Test Case: 717 | Input/Output: [(-94 65 21 -78) -94]
Test Case: 718 | Input/Output: [(-40 25 2 -32) -40]
Test Case: 719 | Input/Output: [(20 -31 78 -48) -48]
Test Case: 720 | Input/Output: [(61 -9 75 47) -9]
Test Case: 721 | Input/Output: [(-89 -39 -69 -99) -99]
Test Case: 722 | Input/Output: [(59 -44 -12 -14) -44]
Test Case: 723 | Input/Output: [(-49 -11 -38 -75) -75]
Test Case: 724 | Input/Output: [(-55 37 26 63) -55]
Test Case: 725 | Input/Output: [(-36 -35 25 -55) -55]
Test Case: 726 | Input/Output: [(-6 94 56 -24) -24]
Test Case: 727 | Input/Output: [(60 65 31 82) 31]
Test Case: 728 | Input/Output: [(45 98 85 29) 29]
Test Case: 729 | Input/Output: [(89 -74 -66 -51) -74]
Test Case: 730 | Input/Output: [(28 44 -30 22) -30]
Test Case: 731 | Input/Output: [(-60 90 29 -75) -75]
Test Case: 732 | Input/Output: [(-9 -95 38 -52) -95]
Test Case: 733 | Input/Output: [(39 -98 88 5) -98]
Test Case: 734 | Input/Output: [(-76 -6 87 -61) -76]
Test Case: 735 | Input/Output: [(-100 13 76 23) -100]
Test Case: 736 | Input/Output: [(-12 52 -73 48) -73]
Test Case: 737 | Input/Output: [(-25 -67 86 -81) -81]
Test Case: 738 | Input/Output: [(4 -79 68 -93) -93]
Test Case: 739 | Input/Output: [(-16 40 -14 -6) -16]
Test Case: 740 | Input/Output: [(-44 -8 -46 65) -46]
Test Case: 741 | Input/Output: [(-2 -40 28 82) -40]
Test Case: 742 | Input/Output: [(-53 -38 98 30) -53]
Test Case: 743 | Input/Output: [(-75 -51 77 -4) -75]
Test Case: 744 | Input/Output: [(-56 70 -59 14) -59]
Test Case: 745 | Input/Output: [(-59 -57 -89 77) -89]
Test Case: 746 | Input/Output: [(-41 57 35 -91) -91]
Test Case: 747 | Input/Output: [(-98 -23 15 99) -98]
Test Case: 748 | Input/Output: [(-90 -77 -61 98) -90]
Test Case: 749 | Input/Output: [(84 70 84 52) 52]
Test Case: 750 | Input/Output: [(-32 70 -19 -78) -78]
Test Case: 751 | Input/Output: [(59 -3 -51 -88) -88]
Test Case: 752 | Input/Output: [(33 42 89 42) 33]
Test Case: 753 | Input/Output: [(-40 36 37 74) -40]
Test Case: 754 | Input/Output: [(25 64 10 -78) -78]
Test Case: 755 | Input/Output: [(54 -40 80 61) -40]
Test Case: 756 | Input/Output: [(-7 -41 60 54) -41]
Test Case: 757 | Input/Output: [(26 49 -68 19) -68]
Test Case: 758 | Input/Output: [(-75 -81 91 -17) -81]
Test Case: 759 | Input/Output: [(93 -13 -89 -7) -89]
Test Case: 760 | Input/Output: [(12 -35 22 94) -35]
Test Case: 761 | Input/Output: [(-8 38 97 -79) -79]
Test Case: 762 | Input/Output: [(-43 -32 69 -52) -52]
Test Case: 763 | Input/Output: [(-10 77 3 50) -10]
Test Case: 764 | Input/Output: [(27 73 -30 -51) -51]
Test Case: 765 | Input/Output: [(44 92 74 60) 44]
Test Case: 766 | Input/Output: [(-92 -77 19 -54) -92]
Test Case: 767 | Input/Output: [(64 -36 -39 83) -39]
Test Case: 768 | Input/Output: [(58 20 -44 50) -44]
Test Case: 769 | Input/Output: [(6 -65 59 73) -65]
Test Case: 770 | Input/Output: [(-20 18 -36 -43) -43]
Test Case: 771 | Input/Output: [(43 -100 -38 10) -100]
Test Case: 772 | Input/Output: [(44 -73 -29 -39) -73]
Test Case: 773 | Input/Output: [(-1 20 -79 0) -79]
Test Case: 774 | Input/Output: [(-92 58 -98 -56) -98]
Test Case: 775 | Input/Output: [(-22 32 -42 -60) -60]
Test Case: 776 | Input/Output: [(68 10 -43 9) -43]
Test Case: 777 | Input/Output: [(83 -40 -30 95) -40]
Test Case: 778 | Input/Output: [(57 -41 -100 -100) -100]
Test Case: 779 | Input/Output: [(-62 -1 -13 92) -62]
Test Case: 780 | Input/Output: [(-5 92 36 -88) -88]
Test Case: 781 | Input/Output: [(-12 -52 33 16) -52]
Test Case: 782 | Input/Output: [(-97 29 93 2) -97]
Test Case: 783 | Input/Output: [(-24 19 3 -72) -72]
Test Case: 784 | Input/Output: [(23 83 20 -39) -39]
Test Case: 785 | Input/Output: [(-41 15 15 -48) -48]
Test Case: 786 | Input/Output: [(54 -85 45 70) -85]
Test Case: 787 | Input/Output: [(-5 -66 100 -60) -66]
Test Case: 788 | Input/Output: [(-36 92 24 20) -36]
Test Case: 789 | Input/Output: [(-65 -14 95 -28) -65]
Test Case: 790 | Input/Output: [(83 43 75 72) 43]
Test Case: 791 | Input/Output: [(54 -19 98 7) -19]
Test Case: 792 | Input/Output: [(3 -27 40 56) -27]
Test Case: 793 | Input/Output: [(74 11 34 9) 9]
Test Case: 794 | Input/Output: [(-8 31 -12 -44) -44]
Test Case: 795 | Input/Output: [(0 -20 -39 -94) -94]
Test Case: 796 | Input/Output: [(31 -81 -44 -49) -81]
Test Case: 797 | Input/Output: [(-76 35 43 84) -76]
Test Case: 798 | Input/Output: [(-78 -13 -32 57) -78]
Test Case: 799 | Input/Output: [(-59 -1 6 76) -59]
Test Case: 800 | Input/Output: [(-65 11 -6 -42) -65]
Test Case: 801 | Input/Output: [(-70 40 43 -89) -89]
Test Case: 802 | Input/Output: [(15 70 -1 82) -1]
Test Case: 803 | Input/Output: [(90 35 -33 67) -33]
Test Case: 804 | Input/Output: [(-71 70 4 -70) -71]
Test Case: 805 | Input/Output: [(-12 -95 -40 -47) -95]
Test Case: 806 | Input/Output: [(-24 -1 90 2) -24]
Test Case: 807 | Input/Output: [(26 72 -67 -65) -67]
Test Case: 808 | Input/Output: [(95 93 73 18) 18]
Test Case: 809 | Input/Output: [(-90 -33 -55 -33) -90]
Test Case: 810 | Input/Output: [(-15 -9 90 -2) -15]
Test Case: 811 | Input/Output: [(-28 13 -27 82) -28]
Test Case: 812 | Input/Output: [(47 -94 -96 -19) -96]
Test Case: 813 | Input/Output: [(-1 -97 -55 51) -97]
Test Case: 814 | Input/Output: [(-34 37 66 29) -34]
Test Case: 815 | Input/Output: [(100 -42 19 77) -42]
Test Case: 816 | Input/Output: [(-45 -31 5 100) -45]
Test Case: 817 | Input/Output: [(18 -78 -13 -27) -78]
Test Case: 818 | Input/Output: [(-77 -3 -75 50) -77]
Test Case: 819 | Input/Output: [(51 -56 28 -99) -99]
Test Case: 820 | Input/Output: [(16 -24 23 -41) -41]
Test Case: 821 | Input/Output: [(-60 -1 -5 100) -60]
Test Case: 822 | Input/Output: [(-82 87 28 83) -82]
Test Case: 823 | Input/Output: [(-28 59 -12 84) -28]
Test Case: 824 | Input/Output: [(-55 -61 -60 -36) -61]
Test Case: 825 | Input/Output: [(47 27 51 -36) -36]
Test Case: 826 | Input/Output: [(-72 37 -29 -27) -72]
Test Case: 827 | Input/Output: [(53 -39 64 -27) -39]
Test Case: 828 | Input/Output: [(-14 -15 -43 -86) -86]
Test Case: 829 | Input/Output: [(-61 -31 -50 -66) -66]
Test Case: 830 | Input/Output: [(-20 -27 86 -70) -70]
Test Case: 831 | Input/Output: [(19 -58 -39 -21) -58]
Test Case: 832 | Input/Output: [(-4 -11 -79 2) -79]
Test Case: 833 | Input/Output: [(88 -57 39 -55) -57]
Test Case: 834 | Input/Output: [(62 -85 80 -27) -85]
Test Case: 835 | Input/Output: [(9 -68 13 -85) -85]
Test Case: 836 | Input/Output: [(78 -2 42 23) -2]
Test Case: 837 | Input/Output: [(46 15 97 92) 15]
Test Case: 838 | Input/Output: [(66 -100 36 -58) -100]
Test Case: 839 | Input/Output: [(100 65 30 -42) -42]
Test Case: 840 | Input/Output: [(-78 -54 -88 57) -88]
Test Case: 841 | Input/Output: [(-10 30 14 8) -10]
Test Case: 842 | Input/Output: [(-39 -19 -54 92) -54]
Test Case: 843 | Input/Output: [(19 43 82 96) 19]
Test Case: 844 | Input/Output: [(-13 4 98 87) -13]
Test Case: 845 | Input/Output: [(61 -21 43 79) -21]
Test Case: 846 | Input/Output: [(19 10 -76 -32) -76]
Test Case: 847 | Input/Output: [(-28 97 58 -45) -45]
Test Case: 848 | Input/Output: [(-5 69 -15 -53) -53]
Test Case: 849 | Input/Output: [(15 -22 70 65) -22]
Test Case: 850 | Input/Output: [(-98 40 43 -97) -98]
Test Case: 851 | Input/Output: [(54 38 -43 43) -43]
Test Case: 852 | Input/Output: [(-91 -86 -46 -46) -91]
Test Case: 853 | Input/Output: [(-90 59 85 -40) -90]
Test Case: 854 | Input/Output: [(-32 75 32 65) -32]
Test Case: 855 | Input/Output: [(-66 74 -1 6) -66]
Test Case: 856 | Input/Output: [(-64 -66 34 -56) -66]
Test Case: 857 | Input/Output: [(-19 -79 -53 73) -79]
Test Case: 858 | Input/Output: [(-70 74 69 43) -70]
Test Case: 859 | Input/Output: [(5 -99 -34 83) -99]
Test Case: 860 | Input/Output: [(-10 -6 -33 -74) -74]
Test Case: 861 | Input/Output: [(77 46 -25 -54) -54]
Test Case: 862 | Input/Output: [(40 -80 82 -18) -80]
Test Case: 863 | Input/Output: [(37 38 -16 -95) -95]
Test Case: 864 | Input/Output: [(-75 -48 73 68) -75]
Test Case: 865 | Input/Output: [(8 -57 74 77) -57]
Test Case: 866 | Input/Output: [(-35 48 95 -6) -35]
Test Case: 867 | Input/Output: [(33 -68 82 -19) -68]
Test Case: 868 | Input/Output: [(76 -56 66 -22) -56]
Test Case: 869 | Input/Output: [(-10 -72 -60 -11) -72]
Test Case: 870 | Input/Output: [(-90 58 12 55) -90]
Test Case: 871 | Input/Output: [(34 28 -68 81) -68]
Test Case: 872 | Input/Output: [(19 12 13 -50) -50]
Test Case: 873 | Input/Output: [(-7 77 97 45) -7]
Test Case: 874 | Input/Output: [(14 -93 -15 57) -93]
Test Case: 875 | Input/Output: [(92 36 49 -40) -40]
Test Case: 876 | Input/Output: [(-36 13 -87 56) -87]
Test Case: 877 | Input/Output: [(-59 -34 -63 -95) -95]
Test Case: 878 | Input/Output: [(97 20 100 28) 20]
Test Case: 879 | Input/Output: [(49 73 48 -61) -61]
Test Case: 880 | Input/Output: [(-42 -17 -91 90) -91]
Test Case: 881 | Input/Output: [(23 -93 -6 18) -93]
Test Case: 882 | Input/Output: [(52 51 98 87) 51]
Test Case: 883 | Input/Output: [(-87 -7 23 -13) -87]
Test Case: 884 | Input/Output: [(-20 71 66 55) -20]
Test Case: 885 | Input/Output: [(31 -28 -62 28) -62]
Test Case: 886 | Input/Output: [(39 35 -37 75) -37]
Test Case: 887 | Input/Output: [(-1 -83 80 -26) -83]
Test Case: 888 | Input/Output: [(-62 -45 -18 -60) -62]
Test Case: 889 | Input/Output: [(71 -77 -14 18) -77]
Test Case: 890 | Input/Output: [(-62 -71 -31 -94) -94]
Test Case: 891 | Input/Output: [(-54 71 84 -10) -54]
Test Case: 892 | Input/Output: [(70 -55 -20 5) -55]
Test Case: 893 | Input/Output: [(-80 100 -21 74) -80]
Test Case: 894 | Input/Output: [(-70 2 -44 -15) -70]
Test Case: 895 | Input/Output: [(32 -75 5 50) -75]
Test Case: 896 | Input/Output: [(43 36 -60 90) -60]
Test Case: 897 | Input/Output: [(-89 71 -91 23) -91]
Test Case: 898 | Input/Output: [(-79 6 27 65) -79]
Test Case: 899 | Input/Output: [(-45 46 -90 -38) -90]
Test Case: 900 | Input/Output: [(-21 21 -63 34) -63]
Test Case: 901 | Input/Output: [(57 69 -92 -91) -92]
Test Case: 902 | Input/Output: [(91 -6 -15 74) -15]
Test Case: 903 | Input/Output: [(-44 -54 74 -79) -79]
Test Case: 904 | Input/Output: [(-33 -99 -34 57) -99]
Test Case: 905 | Input/Output: [(-22 -51 96 19) -51]
Test Case: 906 | Input/Output: [(90 -56 -41 8) -56]
Test Case: 907 | Input/Output: [(94 35 47 -17) -17]
Test Case: 908 | Input/Output: [(-24 45 6 23) -24]
Test Case: 909 | Input/Output: [(-88 -75 63 -26) -88]
Test Case: 910 | Input/Output: [(-63 -65 -69 72) -69]
Test Case: 911 | Input/Output: [(-59 39 -41 -37) -59]
Test Case: 912 | Input/Output: [(-89 78 -51 -62) -89]
Test Case: 913 | Input/Output: [(-62 52 57 -1) -62]
Test Case: 914 | Input/Output: [(-32 -13 -67 -59) -67]
Test Case: 915 | Input/Output: [(-32 39 -69 16) -69]
Test Case: 916 | Input/Output: [(44 99 88 -81) -81]
Test Case: 917 | Input/Output: [(44 37 51 34) 34]
Test Case: 918 | Input/Output: [(-29 -32 -50 -48) -50]
Test Case: 919 | Input/Output: [(72 -96 -23 -32) -96]
Test Case: 920 | Input/Output: [(50 -6 -69 -18) -69]
Test Case: 921 | Input/Output: [(-36 94 26 -66) -66]
Test Case: 922 | Input/Output: [(-82 -4 4 -11) -82]
Test Case: 923 | Input/Output: [(85 -15 -97 -15) -97]
Test Case: 924 | Input/Output: [(-42 45 25 4) -42]
Test Case: 925 | Input/Output: [(100 -58 12 -32) -58]
Test Case: 926 | Input/Output: [(22 -88 -83 -54) -88]
Test Case: 927 | Input/Output: [(-19 -77 -84 78) -84]
Test Case: 928 | Input/Output: [(64 -79 84 18) -79]
Test Case: 929 | Input/Output: [(-85 -28 99 -16) -85]
Test Case: 930 | Input/Output: [(-9 -9 -72 90) -72]
Test Case: 931 | Input/Output: [(33 71 -55 17) -55]
Test Case: 932 | Input/Output: [(-85 -14 83 21) -85]
Test Case: 933 | Input/Output: [(-83 -16 16 -31) -83]
Test Case: 934 | Input/Output: [(41 70 91 -87) -87]
Test Case: 935 | Input/Output: [(45 0 78 28) 0]
Test Case: 936 | Input/Output: [(-11 -60 36 0) -60]
Test Case: 937 | Input/Output: [(-89 75 6 100) -89]
Test Case: 938 | Input/Output: [(35 -3 -41 -30) -41]
Test Case: 939 | Input/Output: [(-54 -98 82 -83) -98]
Test Case: 940 | Input/Output: [(-88 36 24 -79) -88]
Test Case: 941 | Input/Output: [(-82 6 46 50) -82]
Test Case: 942 | Input/Output: [(35 97 100 1) 1]
Test Case: 943 | Input/Output: [(40 89 66 -45) -45]
Test Case: 944 | Input/Output: [(-10 -43 -80 25) -80]
Test Case: 945 | Input/Output: [(-63 57 37 81) -63]
Test Case: 946 | Input/Output: [(82 -100 33 66) -100]
Test Case: 947 | Input/Output: [(-8 28 39 -87) -87]
Test Case: 948 | Input/Output: [(-9 20 -32 -42) -42]
Test Case: 949 | Input/Output: [(35 45 91 47) 35]
Test Case: 950 | Input/Output: [(-80 12 -55 -91) -91]
Test Case: 951 | Input/Output: [(-100 -77 12 97) -100]
Test Case: 952 | Input/Output: [(-61 -96 -40 -66) -96]
Test Case: 953 | Input/Output: [(17 75 -17 -29) -29]
Test Case: 954 | Input/Output: [(68 23 1 30) 1]
Test Case: 955 | Input/Output: [(4 -99 6 -95) -99]
Test Case: 956 | Input/Output: [(-88 16 -100 -73) -100]
Test Case: 957 | Input/Output: [(-28 89 -38 -10) -38]
Test Case: 958 | Input/Output: [(39 0 -3 33) -3]
Test Case: 959 | Input/Output: [(95 -57 -24 97) -57]
Test Case: 960 | Input/Output: [(39 -92 94 -42) -92]
Test Case: 961 | Input/Output: [(-41 -92 -77 54) -92]
Test Case: 962 | Input/Output: [(-15 -59 -70 -20) -70]
Test Case: 963 | Input/Output: [(-34 -20 -55 60) -55]
Test Case: 964 | Input/Output: [(65 10 0 -24) -24]
Test Case: 965 | Input/Output: [(-12 -88 -48 -56) -88]
Test Case: 966 | Input/Output: [(43 -42 47 52) -42]
Test Case: 967 | Input/Output: [(-46 35 -98 42) -98]
Test Case: 968 | Input/Output: [(-88 12 74 22) -88]
Test Case: 969 | Input/Output: [(-67 -97 81 -71) -97]
Test Case: 970 | Input/Output: [(-25 -33 -46 -22) -46]
Test Case: 971 | Input/Output: [(23 -98 48 -92) -98]
Test Case: 972 | Input/Output: [(-54 63 8 -75) -75]
Test Case: 973 | Input/Output: [(-30 36 -4 -47) -47]
Test Case: 974 | Input/Output: [(-79 -34 78 2) -79]
Test Case: 975 | Input/Output: [(-85 -24 43 -34) -85]
Test Case: 976 | Input/Output: [(60 -86 81 84) -86]
Test Case: 977 | Input/Output: [(-38 -53 63 53) -53]
Test Case: 978 | Input/Output: [(-59 -13 -78 -19) -78]
Test Case: 979 | Input/Output: [(80 32 -79 -11) -79]
Test Case: 980 | Input/Output: [(-6 75 52 27) -6]
Test Case: 981 | Input/Output: [(-87 16 63 -66) -87]
Test Case: 982 | Input/Output: [(66 88 87 21) 21]
Test Case: 983 | Input/Output: [(27 87 -40 -67) -67]
Test Case: 984 | Input/Output: [(46 -70 -42 -24) -70]
Test Case: 985 | Input/Output: [(-96 100 26 -50) -96]
Test Case: 986 | Input/Output: [(-15 64 3 -69) -69]
Test Case: 987 | Input/Output: [(-10 -90 -35 -70) -90]
Test Case: 988 | Input/Output: [(60 93 -81 56) -81]
Test Case: 989 | Input/Output: [(-28 -2 -68 20) -68]
Test Case: 990 | Input/Output: [(8 -52 10 39) -52]
Test Case: 991 | Input/Output: [(-90 22 -1 -71) -90]
Test Case: 992 | Input/Output: [(-88 32 92 -20) -88]
Test Case: 993 | Input/Output: [(70 -40 -26 7) -40]
Test Case: 994 | Input/Output: [(92 65 97 60) 60]
Test Case: 995 | Input/Output: [(45 8 -73 66) -73]
Test Case: 996 | Input/Output: [(1 16 58 84) 1]
Test Case: 997 | Input/Output: [(27 91 34 -82) -82]
Test Case: 998 | Input/Output: [(-62 28 19 -99) -99]
Test Case: 999 | Input/Output: [(-93 5 62 -3) -93]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 14 -4 -30 58 13 121 102 -52 104 30 52 71 -2 -30 84 27
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-67 -67 34 -67] -67] [[93 93 93 -50] -50] [[54 54 54 -79] -79] [[-50 2 -50 -50] -50] [[88 -40 88 88] -40] [[61 61 61 40] 40] [[68 68 68 -95] -95] [[-7 -77 -77 -77] -77] [[47 -16 -16 -16] -16] [[42 -24 42 42] -24] [(67 67 67 67) 67] [(-10 -10 -10 -10) -10] [(21 21 21 21) 21] [(-9 -9 -9 -9) -9] [(-18 -18 -18 -18) -18] [(52 12 17 14) 12] [(92 25 2 43) 2] [(42 27 82 8) 8] [(61 3 51 74) 3] [(34 81 11 34) 11] [(78 63 23 44) 23] [(37 32 90 67) 32] [(29 99 92 95) 29] [(32 95 18 3) 3] [(35 11 66 63) 11] [(81 8 18 99) 8] [(58 91 43 4) 4] [(95 91 3 33) 3] [(74 58 64 29) 29] [(25 69 34 98) 25] [(15 53 45 25) 15] [(12 83 38 42) 12] [(36 21 62 23) 21] [(58 38 96 48) 38] [(95 7 94 69) 7] [(27 15 -50 -90) -90] [(12 72 73 93) 12] [(95 -26 -94 -66) -94] [(1 -24 73 4) -24] [(-100 -64 -40 93) -100] [(-11 -23 61 33) -23] [(12 -15 71 87) -15] [(-50 91 -86 54) -86] [(95 17 77 -85) -85] [(20 47 -94 -3) -94] [(-2 -29 25 77) -29] [(-20 47 66 35) -20] [(67 67 -68 56) -68] [(-47 2 23 -94) -94] [(41 51 16 18) 16] [(57 37 94 5) 5] [(17 83 13 62) 13] [(92 75 20 -49) -49] [(-44 26 9 -5) -44] [(-10 40 -52 -31) -52] [(97 65 -85 -7) -85] [(-35 -22 41 -58) -58] [(70 11 -9 -22) -22] [(67 -97 -87 -91) -97] [(99 -83 -32 93) -83] [(-12 -58 -60 -11) -60] [(-4 32 37 -5) -5] [(-51 5 -94 58) -94] [(-68 62 58 -18) -68] [(-89 77 62 -90) -90] [(3 -93 -57 -39) -93] [(-39 22 20 39) -39] [(72 24 -53 -23) -53] [(-40 -82 59 61) -82] [(80 -94 -69 94) -94] [(10 -78 -34 73) -78] [(-37 -53 -27 72) -53] [(-44 65 89 25) -44] [(87 -92 34 -57) -92] [(81 14 -94 -15) -94] [(-88 85 -28 43) -88] [(70 9 -57 32) -57] [(-29 55 71 -5) -29] [(-51 -34 -6 -60) -60] [(2 -80 -46 -8) -80] [(44 -87 74 -92) -92] [(47 -74 22 -8) -74] [(52 -57 -76 -26) -76] [(-7 -80 -3 -29) -80] [(-85 -44 -94 -46) -94] [(58 -24 53 -33) -33] [(-59 40 -31 -37) -59] [(-73 31 -50 85) -73] [(-76 66 19 -14) -76] [(-6 55 -86 96) -86] [(55 -46 -96 -17) -96] [(-37 -60 52 4) -60] [(-74 100 -47 -41) -74] [(100 -44 -8 49) -44] [(26 -8 -74 -36) -74])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 34                 
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 82                 
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 90                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 66                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 64                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 62                 
Correct output: 38                  | Program output: 96                 
Correct output: 7                   | Program output: 94                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 73                 
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 61                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: 20                 
Correct output: -44                 | Program output: 9                  
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 41                 
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: 37                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 58                 
Correct output: -90                 | Program output: 62                 
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 89                 
Correct output: -92                 | Program output: 34                 
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 71                 
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: 74                 
Correct output: -74                 | Program output: 22                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: 53                 
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 52                 
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction 97} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_sub exec_stackdepth exec_shove () integer_flush exec_yank exec_while (boolean_frominteger integer_dec exec_dup_items integer_gte integer_div integer_rot integer_mult boolean_swap exec_while () boolean_frominteger) exec_s_when_autoconstructing (in1 print_integer integer_yank integer_mod integer_flush print_boolean exec_empty) (exec_k_when_autoconstructing (integer_add) (integer_fromboolean integer_add boolean_rot exec_dup_items integer_flush integer_lte 97 integer_gte integer_dup integer_mod boolean_not integer_fromboolean integer_div) boolean_dup_items exec_rot (integer_dup_times exec_stackdepth integer_eq integer_flush) (boolean_pop exec_y_when_autoconstructing (boolean_eq exec_dup (exec_do*count (integer_shove integer_rot) boolean_not boolean_swap) integer_gte) integer_yankdup) (boolean_stackdepth) exec_do*times (in4 exec_pop (in3 exec_yank))) ())
Lexicase best errors: [1 1 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction 97} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_sub exec_stackdepth exec_shove () integer_flush exec_yank exec_while (boolean_frominteger integer_dec exec_dup_items integer_gte integer_div integer_rot integer_mult boolean_swap exec_while () boolean_frominteger) exec_s_when_autoconstructing (in1 print_integer integer_yank integer_mod integer_flush print_boolean exec_empty) (exec_k_when_autoconstructing (integer_add) (integer_fromboolean integer_add boolean_rot exec_dup_items integer_flush integer_lte 97 integer_gte integer_dup integer_mod boolean_not integer_fromboolean integer_div) boolean_dup_items exec_rot (integer_dup_times exec_stackdepth integer_eq integer_flush) (boolean_pop exec_y_when_autoconstructing (boolean_eq exec_dup (exec_do*count (integer_shove integer_rot) boolean_not boolean_swap) integer_gte) integer_yankdup) (boolean_stackdepth) exec_do*times (in4 exec_pop (in3 exec_yank))) ())
Zero cases best errors: [1 1 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 1 2 2 1 6 3 3 3 5)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (6 1 2 2 1 6 3 3 3 5)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_628} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_380} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_yank})
Best program: (integer_swap exec_k (integer_yank in3 exec_dup (integer_lt print_integer exec_while () tagged_628 integer_empty) exec_rot (integer_eq exec_pop (integer_mult boolean_eq integer_sub exec_pop (exec_s (integer_inc) (exec_eq integer_empty boolean_flush exec_do*range ()) (exec_pop (exec_noop boolean_dup exec_do*while (integer_dup_times boolean_not exec_do*count (exec_s_when_autoconstructing (integer_div tag_integer_380 integer_mult) (integer_eq integer_min integer_rot boolean_stackdepth in1 integer_min) (boolean_not) print_boolean in1 exec_dup_items exec_do*while (print_integer) exec_do*range (integer_inc exec_do*range (boolean_eq boolean_invert_second_then_and)) in3 integer_mult integer_flush exec_dup_items in4 in3 exec_swap () (boolean_yank exec_do*while (integer_dec exec_if (exec_when (exec_empty) boolean_invert_first_then_and exec_stackdepth boolean_dup integer_add in2 exec_yank) ()))))))))) () ()) ())
Errors: [0 1 1 1 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 70
Size: 99
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 9.968
Median total errors in population: 10
Error averages by case: (0.994 0.999 0.998 0.998 0.999 0.994 0.997 0.997 0.997 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.349
Average program size in population (points): 69.496
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 446591
--- Timings ---
Current time: 1559314309189 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 30.9%
Fitness Testing:      1.6 seconds, 65.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 34                 
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 82                 
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 90                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 66                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 64                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 62                 
Correct output: 38                  | Program output: 96                 
Correct output: 7                   | Program output: 94                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 73                 
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 61                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: 20                 
Correct output: -44                 | Program output: 9                  
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 41                 
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: 37                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 58                 
Correct output: -90                 | Program output: 62                 
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 89                 
Correct output: -92                 | Program output: 34                 
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 71                 
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: 74                 
Correct output: -74                 | Program output: 22                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: 53                 
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 52                 
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_95} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction tagged_796} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction 59} {:close 0, :instruction in2} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction tag_integer_100} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction tag_integer_279} {:close 1, :instruction tag_exec_828} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while})
Lexicase best program: (integer_div integer_sub integer_pop boolean_dup_items boolean_yank integer_lt exec_if (exec_yankdup) (integer_dup boolean_and boolean_dup tag_exec_95 (print_integer boolean_invert_second_then_and) exec_pop (integer_yankdup boolean_empty) integer_pop) exec_while () integer_max integer_fromboolean in2 tagged_796 exec_s_when_autoconstructing (exec_do*while (59) in2 integer_dec) (exec_eq boolean_yankdup) (exec_dup (integer_mult boolean_invert_first_then_and) in3 integer_mult integer_gt exec_dup (integer_div exec_s_when_autoconstructing () (exec_k (exec_eq exec_do*while (exec_dup (boolean_dup_times print_integer) integer_rot integer_sub integer_fromboolean exec_pop (boolean_empty) in3)) (exec_while (exec_when (boolean_dup_items in4) exec_pop (integer_shove boolean_swap exec_swap (integer_sub integer_swap exec_while (integer_rot) boolean_swap print_boolean) (boolean_eq) integer_yankdup exec_k (exec_do*times (integer_swap) integer_max integer_pop integer_gte integer_mod) (tag_integer_100 boolean_and integer_yankdup exec_when (tag_integer_279) tag_exec_828 () integer_lt exec_flush integer_min integer_yank boolean_not) exec_do*count () boolean_xor exec_do*range (boolean_pop exec_empty) boolean_empty boolean_swap integer_lte) exec_if (integer_add exec_while ()) ()))) ())))
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 132
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_95} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction tagged_796} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction 59} {:close 0, :instruction in2} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction tag_integer_100} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction tag_integer_279} {:close 1, :instruction tag_exec_828} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while})
Zero cases best program: (integer_div integer_sub integer_pop boolean_dup_items boolean_yank integer_lt exec_if (exec_yankdup) (integer_dup boolean_and boolean_dup tag_exec_95 (print_integer boolean_invert_second_then_and) exec_pop (integer_yankdup boolean_empty) integer_pop) exec_while () integer_max integer_fromboolean in2 tagged_796 exec_s_when_autoconstructing (exec_do*while (59) in2 integer_dec) (exec_eq boolean_yankdup) (exec_dup (integer_mult boolean_invert_first_then_and) in3 integer_mult integer_gt exec_dup (integer_div exec_s_when_autoconstructing () (exec_k (exec_eq exec_do*while (exec_dup (boolean_dup_times print_integer) integer_rot integer_sub integer_fromboolean exec_pop (boolean_empty) in3)) (exec_while (exec_when (boolean_dup_items in4) exec_pop (integer_shove boolean_swap exec_swap (integer_sub integer_swap exec_while (integer_rot) boolean_swap print_boolean) (boolean_eq) integer_yankdup exec_k (exec_do*times (integer_swap) integer_max integer_pop integer_gte integer_mod) (tag_integer_100 boolean_and integer_yankdup exec_when (tag_integer_279) tag_exec_828 () integer_lt exec_flush integer_min integer_yank boolean_not) exec_do*count () boolean_xor exec_do*range (boolean_pop exec_empty) boolean_empty boolean_swap integer_lte) exec_if (integer_add exec_while ()) ()))) ())))
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 132
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 848 577 271 179 271 153 245 848 179)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (245 848 577 271 179 271 153 245 848 179)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_628} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction tag_integer_380} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_yank})
Best program: (integer_swap exec_k (integer_yank in3 exec_dup (integer_lt print_integer exec_while () tagged_628 integer_empty) exec_rot (integer_eq exec_pop (integer_mult boolean_eq integer_sub exec_pop (exec_s (integer_inc) (exec_eq integer_empty boolean_flush exec_do*range ()) (exec_pop (exec_noop boolean_dup exec_do*while (integer_dup_times boolean_not exec_do*count (exec_s_when_autoconstructing (integer_div tag_integer_380 integer_mult) (integer_eq integer_min integer_rot boolean_stackdepth in1 integer_min) (boolean_not) print_boolean in1 exec_eq exec_do*while (print_integer) exec_do*range (integer_inc exec_do*range (boolean_eq boolean_invert_second_then_and)) in3 integer_mult integer_flush exec_dup_items in4 in3 exec_swap () (boolean_yank exec_do*while (integer_dec exec_if (exec_when (exec_empty) boolean_invert_first_then_and exec_stackdepth boolean_dup integer_add in2 exec_yank) ()))))))))) () ()) ())
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 70
Size: 99
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.184
Median total errors in population: 6
Error averages by case: (0.755 0.152 0.423 0.729 0.821 0.729 0.847 0.755 0.152 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.872
Average program size in population (points): 92.268
Average percent parens in population: 0.249
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.471
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 935589
--- Timings ---
Current time: 1559314311813 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 44.8%
Fitness Testing:      2.4 seconds, 46.2%
Report:               0.4 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: 2                  
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 81                 
Correct output: 23                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 99                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 91                 
Correct output: 3                   | Program output: 91                 
Correct output: 29                  | Program output: 58                 
Correct output: 25                  | Program output: 69                 
Correct output: 15                  | Program output: 53                 
Correct output: 12                  | Program output: 83                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: 15                 
Correct output: 12                  | Program output: 72                 
Correct output: -94                 | Program output: -26                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -64                
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: 91                 
Correct output: -85                 | Program output: 17                 
Correct output: -94                 | Program output: 47                 
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: 47                 
Correct output: -68                 | Program output: 67                 
Correct output: -94                 | Program output: 2                  
Correct output: 16                  | Program output: 51                 
Correct output: 5                   | Program output: 37                 
Correct output: 13                  | Program output: 83                 
Correct output: -49                 | Program output: 75                 
Correct output: -44                 | Program output: 26                 
Correct output: -52                 | Program output: 40                 
Correct output: -85                 | Program output: 65                 
Correct output: -58                 | Program output: -22                
Correct output: -22                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -58                
Correct output: -5                  | Program output: 32                 
Correct output: -94                 | Program output: 5                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 22                 
Correct output: -53                 | Program output: 24                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 14                 
Correct output: -88                 | Program output: 85                 
Correct output: -57                 | Program output: 9                  
Correct output: -29                 | Program output: 55                 
Correct output: -60                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -44                
Correct output: -33                 | Program output: -24                
Correct output: -59                 | Program output: 40                 
Correct output: -73                 | Program output: 31                 
Correct output: -76                 | Program output: 66                 
Correct output: -86                 | Program output: 55                 
Correct output: -96                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: 100                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_45} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_and} {:close 3, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction -93} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction -61} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction tagged_169} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_lt boolean_invert_first_then_and boolean_shove integer_dup_times tag_integer_45 exec_swap (integer_shove) (boolean_xor boolean_dup_times exec_k (boolean_and) (in4)) boolean_frominteger integer_dup_items in1 exec_stackdepth boolean_pop boolean_not exec_shove () boolean_eq print_integer boolean_swap exec_s_when_autoconstructing (integer_rot boolean_swap -93 exec_empty exec_while (print_newline exec_k () (exec_dup_items) exec_dup_times (exec_when (integer_dup_times exec_empty) exec_dup_items boolean_pop) integer_div exec_s_when_autoconstructing () (boolean_dup_times print_exec () integer_eq integer_flush exec_do*count (-61 exec_dup (exec_dup_times (integer_div exec_y_when_autoconstructing (integer_dup boolean_frominteger boolean_or boolean_xor integer_gte integer_div integer_gte exec_if () (exec_do*while (exec_y_when_autoconstructing () exec_while () exec_shove (exec_do*count (in3 integer_gte integer_mod tagged_169) boolean_invert_second_then_and) integer_div exec_s (integer_yankdup boolean_not) () ()))))))) ())) () ())
Lexicase best errors: [0 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_45} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_and} {:close 3, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction -93} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction exec_k} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction -61} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction tagged_169} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_lt boolean_invert_first_then_and boolean_shove integer_dup_times tag_integer_45 exec_swap (integer_shove) (boolean_xor boolean_dup_times exec_k (boolean_and) (in4)) boolean_frominteger integer_dup_items in1 exec_stackdepth boolean_pop boolean_not exec_shove () boolean_eq print_integer boolean_swap exec_s_when_autoconstructing (integer_rot boolean_swap -93 exec_empty exec_while (print_newline exec_k () (exec_dup_items) exec_dup_times (exec_when (integer_dup_times exec_empty) exec_dup_items boolean_pop) integer_div exec_s_when_autoconstructing () (boolean_dup_times print_exec () integer_eq integer_flush exec_do*count (-61 exec_dup (exec_dup_times (integer_div exec_y_when_autoconstructing (integer_dup boolean_frominteger boolean_or boolean_xor integer_gte integer_div integer_gte exec_if () (exec_do*while (exec_y_when_autoconstructing () exec_while () exec_shove (exec_do*count (in3 integer_gte integer_mod tagged_169) boolean_invert_second_then_and) integer_div exec_s (integer_yankdup boolean_not) () ()))))))) ())) () ())
Zero cases best errors: [0 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (902 256 901 635 266 248 646 248 256 256)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (902 256 901 635 266 248 646 248 256 256)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_95} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction tagged_796} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction 59} {:close 0, :instruction in2} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction tag_integer_100} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_exec_828} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush})
Best program: (integer_div integer_sub exec_empty boolean_dup_items boolean_yank integer_lt exec_if (exec_yankdup) (integer_dup boolean_and boolean_dup tag_exec_95 (print_integer boolean_invert_second_then_and) exec_pop (integer_yankdup boolean_empty) integer_pop) exec_while () integer_max integer_fromboolean in2 tagged_796 exec_s_when_autoconstructing (exec_do*while (59) in2 integer_dec) (exec_eq boolean_yankdup) (exec_dup (integer_mult boolean_invert_first_then_and) in3 integer_mult integer_gt exec_dup (integer_div exec_s_when_autoconstructing () (exec_k (exec_eq exec_do*while (exec_dup (boolean_dup_times print_integer) integer_rot integer_sub integer_fromboolean exec_pop (boolean_empty) in3)) (exec_while (exec_when (boolean_dup_items in4) exec_pop (integer_shove boolean_swap exec_swap (integer_sub integer_swap exec_while (integer_rot) boolean_swap print_boolean) (boolean_eq) integer_yankdup exec_k (exec_do*times (integer_swap) integer_max integer_pop integer_gte integer_mod) (tag_integer_100 boolean_and integer_yankdup exec_when (boolean_empty) tag_exec_828 () integer_lt exec_flush))))) ())))
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 82
Size: 113
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 5.386
Median total errors in population: 4
Error averages by case: (0.098 0.744 0.099 0.365 0.734 0.752 0.354 0.752 0.744 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.493
Average program size in population (points): 92.154
Average percent parens in population: 0.252
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.933
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1412681
--- Timings ---
Current time: 1559314315509 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.9 seconds, 55.9%
Fitness Testing:      3.1 seconds, 35.3%
Report:               0.7 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 34                 
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 82                 
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 90                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 66                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 64                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 62                 
Correct output: 38                  | Program output: 96                 
Correct output: 7                   | Program output: 94                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 73                 
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 61                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: 20                 
Correct output: -44                 | Program output: 9                  
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 41                 
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: 37                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 58                 
Correct output: -90                 | Program output: 62                 
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 89                 
Correct output: -92                 | Program output: 34                 
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 71                 
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: 74                 
Correct output: -74                 | Program output: 22                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: 53                 
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 52                 
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_49} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction tag_integer_100} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_exec_828} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_empty exec_if (exec_shove (exec_if (exec_eq exec_dup (integer_fromboolean boolean_invert_second_then_and integer_yankdup) integer_min) (integer_fromboolean exec_if (integer_yank exec_rot (boolean_rot boolean_stackdepth boolean_stackdepth boolean_frominteger exec_pop () boolean_swap integer_lt exec_empty boolean_stackdepth integer_lte exec_flush integer_min integer_gt) (print_newline exec_do*range () integer_dup) (in3 print_integer integer_flush boolean_swap integer_mod exec_k () () boolean_and integer_rot tag_boolean_49 exec_noop) exec_yankdup integer_rot) (boolean_invert_first_then_and) exec_dup (print_boolean boolean_pop in4) exec_swap (in2 exec_do*range (integer_dup exec_do*times (boolean_or print_newline exec_dup_items exec_eq in1)) boolean_swap integer_gt exec_y (exec_rot (integer_eq integer_gt) (exec_y (exec_noop exec_while (integer_rot) boolean_swap print_boolean) boolean_eq) (integer_yankdup exec_k (exec_do*times (integer_swap) integer_max integer_pop integer_gte integer_mod) (tag_integer_100 boolean_stackdepth integer_yankdup exec_when (boolean_empty) tag_exec_828 () integer_lt exec_flush integer_min integer_yank boolean_not) exec_do*count () boolean_xor exec_do*range (boolean_pop exec_empty) boolean_empty boolean_swap integer_lte) exec_if (integer_add exec_while ()) ())) ()))) ())
Lexicase best errors: [1 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 137
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_49} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction tag_integer_100} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 1, :instruction tag_exec_828} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_empty exec_if (exec_shove (exec_if (exec_eq exec_dup (integer_fromboolean boolean_invert_second_then_and integer_yankdup) integer_min) (integer_fromboolean exec_if (integer_yank exec_rot (boolean_rot boolean_stackdepth boolean_stackdepth boolean_frominteger exec_pop () boolean_swap integer_lt exec_empty boolean_stackdepth integer_lte exec_flush integer_min integer_gt) (print_newline exec_do*range () integer_dup) (in3 print_integer integer_flush boolean_swap integer_mod exec_k () () boolean_and integer_rot tag_boolean_49 exec_noop) exec_yankdup integer_rot) (boolean_invert_first_then_and) exec_dup (print_boolean boolean_pop in4) exec_swap (in2 exec_do*range (integer_dup exec_do*times (boolean_or print_newline exec_dup_items exec_eq in1)) boolean_swap integer_gt exec_y (exec_rot (integer_eq integer_gt) (exec_y (exec_noop exec_while (integer_rot) boolean_swap print_boolean) boolean_eq) (integer_yankdup exec_k (exec_do*times (integer_swap) integer_max integer_pop integer_gte integer_mod) (tag_integer_100 boolean_stackdepth integer_yankdup exec_when (boolean_empty) tag_exec_828 () integer_lt exec_flush integer_min integer_yank boolean_not) exec_do*count () boolean_xor exec_do*range (boolean_pop exec_empty) boolean_empty boolean_swap integer_lte) exec_if (integer_add exec_while ()) ())) ()))) ())
Zero cases best errors: [1 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 137
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 135 135 490 373 863 1 863 135 372)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (1 135 135 490 373 863 1 863 135 372)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_95} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 3, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_max})
Best program: (integer_div integer_sub integer_pop boolean_dup_items boolean_yank integer_lt exec_if (exec_yankdup) (boolean_yank boolean_flush exec_if (exec_yankdup) (integer_dup boolean_and boolean_dup tag_exec_95 (integer_add integer_shove integer_inc integer_swap) exec_pop (integer_lt exec_yank boolean_eq))) boolean_dup_items in3 print_integer exec_dup () boolean_not boolean_not integer_max exec_stackdepth boolean_yank exec_rot (boolean_flush) (integer_mod integer_flush) (integer_yank integer_fromboolean in1 in1 integer_max))
Errors: [1 0 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.632
Median total errors in population: 6
Error averages by case: (0.999 0.865 0.865 0.51 0.627 0.137 0.999 0.137 0.865 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.309
Average program size in population (points): 94.643
Average percent parens in population: 0.265
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3965
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1883052
--- Timings ---
Current time: 1559314318512 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.0 seconds, 59.3%
Fitness Testing:      3.6 seconds, 30.3%
Report:               1.1 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: 2                  
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 81                 
Correct output: 23                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 99                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 91                 
Correct output: 3                   | Program output: 91                 
Correct output: 29                  | Program output: 58                 
Correct output: 25                  | Program output: 69                 
Correct output: 15                  | Program output: 53                 
Correct output: 12                  | Program output: 83                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: 15                 
Correct output: 12                  | Program output: 72                 
Correct output: -94                 | Program output: -26                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -64                
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: 91                 
Correct output: -85                 | Program output: 17                 
Correct output: -94                 | Program output: 47                 
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: 47                 
Correct output: -68                 | Program output: 67                 
Correct output: -94                 | Program output: 2                  
Correct output: 16                  | Program output: 51                 
Correct output: 5                   | Program output: 37                 
Correct output: 13                  | Program output: 83                 
Correct output: -49                 | Program output: 75                 
Correct output: -44                 | Program output: 26                 
Correct output: -52                 | Program output: 40                 
Correct output: -85                 | Program output: 65                 
Correct output: -58                 | Program output: -22                
Correct output: -22                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -58                
Correct output: -5                  | Program output: 32                 
Correct output: -94                 | Program output: 5                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 22                 
Correct output: -53                 | Program output: 24                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 14                 
Correct output: -88                 | Program output: 85                 
Correct output: -57                 | Program output: 9                  
Correct output: -29                 | Program output: 55                 
Correct output: -60                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -44                
Correct output: -33                 | Program output: -24                
Correct output: -59                 | Program output: 40                 
Correct output: -73                 | Program output: 31                 
Correct output: -76                 | Program output: 66                 
Correct output: -86                 | Program output: 55                 
Correct output: -96                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: 100                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (boolean_xor in4 integer_min boolean_dup in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) in2 print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (boolean_xor in4 integer_min boolean_dup in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) in2 print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 884 416 1 1 223 415 221 1 1)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (1 884 416 1 1 223 415 221 1 1)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (boolean_xor in4 integer_min boolean_dup in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) in2 print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 65
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 7.836
Median total errors in population: 7
Error averages by case: (0.999 0.116 0.584 0.999 0.999 0.777 0.585 0.779 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.03
Average program size in population (points): 75.511
Average percent parens in population: 0.225
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 5.68575
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2356081
--- Timings ---
Current time: 1559314321561 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 61.8%
Fitness Testing:      4.1 seconds, 27.6%
Report:               1.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: 2                  
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 81                 
Correct output: 23                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 99                 
Correct output: 3                   | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 91                 
Correct output: 3                   | Program output: 91                 
Correct output: 29                  | Program output: 58                 
Correct output: 25                  | Program output: 69                 
Correct output: 15                  | Program output: 53                 
Correct output: 12                  | Program output: 83                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: 15                 
Correct output: 12                  | Program output: 72                 
Correct output: -94                 | Program output: -26                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -64                
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: 91                 
Correct output: -85                 | Program output: 17                 
Correct output: -94                 | Program output: 47                 
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: 47                 
Correct output: -68                 | Program output: 67                 
Correct output: -94                 | Program output: 2                  
Correct output: 16                  | Program output: 51                 
Correct output: 5                   | Program output: 37                 
Correct output: 13                  | Program output: 83                 
Correct output: -49                 | Program output: 75                 
Correct output: -44                 | Program output: 26                 
Correct output: -52                 | Program output: 40                 
Correct output: -85                 | Program output: 65                 
Correct output: -58                 | Program output: -22                
Correct output: -22                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -58                
Correct output: -5                  | Program output: 32                 
Correct output: -94                 | Program output: 5                  
Correct output: -68                 | Program output: 62                 
Correct output: -90                 | Program output: 77                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 22                 
Correct output: -53                 | Program output: 24                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 14                 
Correct output: -88                 | Program output: 85                 
Correct output: -57                 | Program output: 9                  
Correct output: -29                 | Program output: 55                 
Correct output: -60                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -44                
Correct output: -33                 | Program output: -24                
Correct output: -59                 | Program output: 40                 
Correct output: -73                 | Program output: 31                 
Correct output: -76                 | Program output: 66                 
Correct output: -86                 | Program output: 55                 
Correct output: -96                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: 100                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (integer_sub boolean_dup in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) in2 print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (integer_sub boolean_dup in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) in2 print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (504 1000 503 206 1000 208 502 504 900 692)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (504 0 503 206 0 208 502 504 900 692)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (boolean_xor in4 integer_min boolean_dup in3 integer_yank 64 boolean_shove integer_dup boolean_dup in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq in2 print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_empty integer_stackdepth integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 71
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 5.981
Median total errors in population: 4
Error averages by case: (0.496 1.0 0.497 0.794 1.0 0.792 0.498 0.496 0.1 0.308)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 55.54
Average program size in population (points): 69.474
Average percent parens in population: 0.196
Minimum age in population: 5.0
Maximum age in population: 8.75
Average age in population: 7.457
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2762399
--- Timings ---
Current time: 1559314324628 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.6 seconds, 64.4%
Fitness Testing:      4.6 seconds, 25.4%
Report:               1.8 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 34                 
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 82                 
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 90                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 66                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 64                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 62                 
Correct output: 38                  | Program output: 96                 
Correct output: 7                   | Program output: 94                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 73                 
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 61                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: 20                 
Correct output: -44                 | Program output: 9                  
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 41                 
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: 37                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 58                 
Correct output: -90                 | Program output: 62                 
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 89                 
Correct output: -92                 | Program output: 34                 
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 71                 
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: 74                 
Correct output: -74                 | Program output: 22                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: 53                 
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 52                 
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_49} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (boolean_xor in4 integer_min exec_if (exec_if (integer_yank) () 64 boolean_shove integer_dup) (print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items in3 print_integer integer_lt exec_empty boolean_stackdepth integer_lte exec_flush integer_min integer_gt) print_newline exec_do*range () integer_dup in3 print_integer integer_flush boolean_swap integer_mod exec_k () () boolean_and integer_rot tag_boolean_49 exec_noop exec_yankdup integer_sub integer_fromboolean)
Lexicase best errors: [0 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_49} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (boolean_xor in4 integer_min exec_if (exec_if (integer_yank) () 64 boolean_shove integer_dup) (print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items in3 print_integer integer_lt exec_empty boolean_stackdepth integer_lte exec_flush integer_min integer_gt) print_newline exec_do*range () integer_dup in3 print_integer integer_flush boolean_swap integer_mod exec_k () () boolean_and integer_rot tag_boolean_49 exec_noop exec_yankdup integer_sub integer_fromboolean)
Zero cases best errors: [0 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 253 912 4 253 253 1000 653 253 652)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (253 253 912 4 253 253 0 653 253 652)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction 77} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_empty} {:close 2, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction -38})
Best program: (boolean_empty exec_if (exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items in3 print_integer integer_mod) (77 boolean_invert_first_then_and) in3 integer_mult integer_gt exec_dup (integer_div exec_s_when_autoconstructing () (exec_k (exec_eq exec_do*while (exec_dup (boolean_dup_times print_integer) integer_rot integer_sub integer_fromboolean exec_pop (boolean_empty) in3)) (exec_while (exec_when (boolean_dup_items in4) exec_pop (integer_shove boolean_swap exec_swap (integer_sub integer_swap exec_while (integer_rot) boolean_swap print_boolean) (boolean_eq) integer_yankdup exec_k (integer_rot integer_stackdepth boolean_dup) (integer_mod -38))))) ()))
Errors: [0 0 0 1 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 56
Size: 77
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.514
Median total errors in population: 7
Error averages by case: (0.747 0.747 0.088 0.996 0.747 0.747 1.0 0.347 0.747 0.348)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 55.529
Average program size in population (points): 67.491
Average percent parens in population: 0.174
Minimum age in population: 6.0
Maximum age in population: 10.46875
Average age in population: 8.9973125
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3105074
--- Timings ---
Current time: 1559314327657 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.1 seconds, 66.5%
Fitness Testing:      5.0 seconds, 23.5%
Report:               2.0 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: 34                 
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 82                 
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 90                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 66                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 64                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 62                 
Correct output: 38                  | Program output: 96                 
Correct output: 7                   | Program output: 94                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 73                 
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 61                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 94                 
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: 20                 
Correct output: -44                 | Program output: 9                  
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 41                 
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: 37                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 58                 
Correct output: -90                 | Program output: 62                 
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 89                 
Correct output: -92                 | Program output: 34                 
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 71                 
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: 74                 
Correct output: -74                 | Program output: 22                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: 53                 
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 52                 
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_93} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_boolean_27} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction -38})
Lexicase best program: (integer_div integer_sub integer_pop boolean_dup_items boolean_xor in4 integer_min boolean_swap in3 integer_yank 64 boolean_shove exec_while (print_boolean exec_pop ()) integer_dup_items integer_add exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items in3 print_integer integer_mod boolean_yankdup exec_if (integer_stackdepth exec_do*times (boolean_dup_times tag_exec_93 (boolean_yank) tag_boolean_27 boolean_yankdup integer_dup_times integer_inc) integer_dup_times in3 integer_fromboolean integer_dup boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth) (exec_when (boolean_empty integer_rot exec_flush) exec_y_when_autoconstructing () integer_dup) () integer_dup_times exec_noop boolean_empty exec_eq boolean_empty integer_dec) (exec_s_when_autoconstructing (boolean_swap) () (integer_mult exec_yank in3 integer_dup_times)) integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_eq -38)
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 94
Percent parens: 0.181
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_93} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_boolean_27} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction -38})
Zero cases best program: (integer_div integer_sub integer_pop boolean_dup_items boolean_xor in4 integer_min boolean_swap in3 integer_yank 64 boolean_shove exec_while (print_boolean exec_pop ()) integer_dup_items integer_add exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items in3 print_integer integer_mod boolean_yankdup exec_if (integer_stackdepth exec_do*times (boolean_dup_times tag_exec_93 (boolean_yank) tag_boolean_27 boolean_yankdup integer_dup_times integer_inc) integer_dup_times in3 integer_fromboolean integer_dup boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth) (exec_when (boolean_empty integer_rot exec_flush) exec_y_when_autoconstructing () integer_dup) () integer_dup_times exec_noop boolean_empty exec_eq boolean_empty integer_dec) (exec_s_when_autoconstructing (boolean_swap) () (integer_mult exec_yank in3 integer_dup_times)) integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_eq -38)
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 94
Percent parens: 0.181
--- Lexicase Population Statistics ---
Count of elite individuals by case: (559 556 228 2 107 555 107 107 555 556)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (559 556 228 2 107 555 107 107 555 556)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 3, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_199} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (boolean_xor in4 integer_min boolean_dup in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor boolean_eq) in1 in3 print_integer exec_dup () boolean_not boolean_not integer_max exec_stackdepth boolean_yank exec_rot (boolean_flush) (integer_mod integer_flush) (integer_yank integer_dec integer_lt boolean_xor tag_exec_199 (in4 integer_inc integer_yankdup) exec_swap () () boolean_eq boolean_dup) boolean_stackdepth integer_gte integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 68
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.668
Median total errors in population: 5
Error averages by case: (0.441 0.444 0.772 0.998 0.893 0.445 0.893 0.893 0.445 0.444)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.587
Average program size in population (points): 68.144
Average percent parens in population: 0.195
Minimum age in population: 7.625
Maximum age in population: 12.171875
Average age in population: 10.462765625
Median age in population: 10.4765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3540033
--- Timings ---
Current time: 1559314330560 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 67.5%
Fitness Testing:      5.4 seconds, 22.7%
Report:               2.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 67                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 63                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 25                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -90                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 4                  
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 33                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 35                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -97                 | Program output: -91                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 25                 
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -5                 
Correct output: -60                 | Program output: -60                
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -37                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 4                  
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [1 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [1 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 80 54 80 440 247 442 441 98 767)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (80 80 54 80 440 247 442 441 98 767)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (boolean_xor in4 integer_min boolean_dup in3 integer_min boolean_shove in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor integer_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [1 1 1 1 0 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 59
Size: 69
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 7.271
Median total errors in population: 6
Error averages by case: (0.92 0.92 0.946 0.92 0.56 0.753 0.558 0.559 0.902 0.233)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.842
Average program size in population (points): 66.47
Average percent parens in population: 0.187
Minimum age in population: 9.0625
Maximum age in population: 13.7421875
Average age in population: 11.895390625
Median age in population: 12.0078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3945212
--- Timings ---
Current time: 1559314333127 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 67.7%
Fitness Testing:      5.9 seconds, 22.1%
Report:               2.6 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 570
Test mean error for best: 0.57000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 74                 
Correct output: 11                  | Program output: 34                 
Correct output: 23                  | Program output: 44                 
Correct output: 32                  | Program output: 67                 
Correct output: 29                  | Program output: 95                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 63                 
Correct output: 8                   | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 98                 
Correct output: 15                  | Program output: 25                 
Correct output: 12                  | Program output: 42                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 93                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 4                  
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 33                 
Correct output: -15                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 77                 
Correct output: -20                 | Program output: 35                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 62                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 39                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 61                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 25                 
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -5                 
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 4                  
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (boolean_xor in4 integer_min boolean_dup in3 integer_min boolean_shove in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor integer_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.145
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (boolean_xor in4 integer_min boolean_dup in3 integer_min boolean_shove in3 integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor integer_eq boolean_invert_first_then_and exec_eq) integer_yankdup integer_dup_items print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 130 312 402 554 315 315 315 312 312)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (313 130 312 402 554 315 315 315 312 312)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 55
Size: 66
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.72
Median total errors in population: 7
Error averages by case: (0.687 0.87 0.688 0.598 0.446 0.685 0.685 0.685 0.688 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.243
Average program size in population (points): 65.545
Average percent parens in population: 0.156
Minimum age in population: 10.859375
Maximum age in population: 15.07421875
Average age in population: 13.4090390625
Median age in population: 13.4453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4215528
--- Timings ---
Current time: 1559314335887 milliseconds
Total Time:          29.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.2 seconds, 68.8%
Fitness Testing:      6.2 seconds, 21.1%
Report:               2.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 34                 
Correct output: 23                  | Program output: 44                 
Correct output: 32                  | Program output: 37                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 35                 
Correct output: 8                   | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 1                  
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: -11                
Correct output: -15                 | Program output: 12                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 17                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: -39                
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: -40                
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -37                
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor boolean_invert_first_then_and boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush boolean_eq integer_rot integer_stackdepth boolean_dup exec_dup_times (-38))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor boolean_invert_first_then_and boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush boolean_eq integer_rot integer_stackdepth boolean_dup exec_dup_times (-38))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (489 876 261 613 98 96 494 495 489 495)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (489 876 261 613 98 96 494 495 489 495)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap) (boolean_yank exec_yank in3 integer_dup_times) (integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 61
Size: 76
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 5.594
Median total errors in population: 6
Error averages by case: (0.511 0.124 0.739 0.387 0.902 0.904 0.506 0.505 0.511 0.505)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.735
Average program size in population (points): 66.172
Average percent parens in population: 0.157
Minimum age in population: 12.125
Maximum age in population: 16.544921875
Average age in population: 14.835091796875
Median age in population: 14.91796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4500548
--- Timings ---
Current time: 1559314338553 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.3 seconds, 69.7%
Fitness Testing:      6.5 seconds, 20.3%
Report:               3.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 34                 
Correct output: 23                  | Program output: 44                 
Correct output: 32                  | Program output: 37                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 35                 
Correct output: 8                   | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 1                  
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: -11                
Correct output: -15                 | Program output: 12                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 17                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: -39                
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: -40                
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -37                
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap) (boolean_yank exec_yank in3 integer_dup_times) (integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap) (boolean_yank exec_yank in3 integer_dup_times) (integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (713 26 692 703 694 722 487 707 110 26)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (713 26 692 703 694 722 487 707 110 26)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap) (boolean_yank exec_yank in3 integer_dup_times) (integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 76
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 5.12
Median total errors in population: 4
Error averages by case: (0.287 0.974 0.308 0.297 0.306 0.278 0.513 0.293 0.89 0.974)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.559
Average program size in population (points): 71.114
Average percent parens in population: 0.161
Minimum age in population: 13.96875
Maximum age in population: 18.0810546875
Average age in population: 16.8470888671875
Median age in population: 16.990234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4816521
--- Timings ---
Current time: 1559314341139 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.3 seconds, 70.2%
Fitness Testing:      6.8 seconds, 19.8%
Report:               3.4 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 34                 
Correct output: 23                  | Program output: 44                 
Correct output: 32                  | Program output: 37                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 35                 
Correct output: 8                   | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -90                
Correct output: 12                  | Program output: 12                 
Correct output: -94                 | Program output: -66                
Correct output: -24                 | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -23                 | Program output: -11                
Correct output: -15                 | Program output: 12                 
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -3                 
Correct output: -29                 | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 17                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -44                
Correct output: -52                 | Program output: -31                
Correct output: -85                 | Program output: -7                 
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -97                 | Program output: -91                
Correct output: -83                 | Program output: 93                 
Correct output: -60                 | Program output: -12                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -51                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -39                
Correct output: -39                 | Program output: -39                
Correct output: -53                 | Program output: -23                
Correct output: -82                 | Program output: -40                
Correct output: -94                 | Program output: 80                 
Correct output: -78                 | Program output: 10                 
Correct output: -53                 | Program output: -37                
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: 32                 
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -80                 | Program output: -8                 
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -26                
Correct output: -80                 | Program output: -29                
Correct output: -94                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -6                 
Correct output: -96                 | Program output: -17                
Correct output: -60                 | Program output: -37                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 49                 
Correct output: -74                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () boolean_shove integer_dup integer_div exec_pop () integer_dup_items boolean_yank exec_pop (integer_pop boolean_frominteger boolean_xor boolean_invert_first_then_and boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush boolean_eq integer_rot integer_stackdepth boolean_dup exec_dup_times (-38))
Lexicase best errors: [1 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.145
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () boolean_shove integer_dup integer_div exec_pop () integer_dup_items boolean_yank exec_pop (integer_pop boolean_frominteger boolean_xor boolean_invert_first_then_and boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush boolean_eq integer_rot integer_stackdepth boolean_dup exec_dup_times (-38))
Zero cases best errors: [1 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 397 715 89 859 89 406 727 89 34)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (89 397 715 89 859 89 406 727 89 34)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap) (boolean_yank exec_yank in3 integer_dup_times) (integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 71
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 6.506
Median total errors in population: 7
Error averages by case: (0.911 0.603 0.285 0.911 0.141 0.911 0.594 0.273 0.911 0.966)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.712
Average program size in population (points): 71.883
Average percent parens in population: 0.169
Minimum age in population: 14.96875
Maximum age in population: 19.865234375
Average age in population: 18.6249462890625
Median age in population: 18.733154296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5135522
--- Timings ---
Current time: 1559314343687 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.2 seconds, 70.6%
Fitness Testing:      7.2 seconds, 19.3%
Report:               3.6 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 67                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 63                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 25                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -90                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 4                  
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 33                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 35                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -97                 | Program output: -91                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 25                 
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -5                 
Correct output: -60                 | Program output: -60                
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -37                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 4                  
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_361} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (integer_gt integer_add tag_integer_361 boolean_dup in3 integer_yank in4 integer_min boolean_dup in3 exec_when () 64 integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush boolean_eq integer_rot integer_stackdepth boolean_dup exec_dup_times (-38))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.141
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_361} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (integer_gt integer_add tag_integer_361 boolean_dup in3 integer_yank in4 integer_min boolean_dup in3 exec_when () 64 integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) integer_sub boolean_swap boolean_yank exec_yank in3 integer_dup_times integer_div integer_gt boolean_invert_first_then_and integer_rot integer_flush boolean_eq integer_rot integer_stackdepth boolean_dup exec_dup_times (-38))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.141
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 393 445 446 446 862 15 15 441 446)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (14 393 445 446 446 862 15 15 441 446)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth})
Best program: (in3 boolean_xor in4 integer_min boolean_dup in4 integer_min boolean_dup boolean_flush integer_yank 64 boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()) () ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.477
Median total errors in population: 8
Error averages by case: (0.986 0.607 0.555 0.554 0.554 0.138 0.985 0.985 0.559 0.554)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.928
Average program size in population (points): 68.475
Average percent parens in population: 0.167
Minimum age in population: 15.96875
Maximum age in population: 21.5185546875
Average age in population: 19.88906982421875
Median age in population: 19.9969482421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5482761
--- Timings ---
Current time: 1559314346316 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.2 seconds, 70.8%
Fitness Testing:      7.6 seconds, 19.0%
Report:               3.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 67                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 63                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 25                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -90                
Correct output: 12                  | Program output: 73                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 4                  
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: 33                 
Correct output: -15                 | Program output: 71                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: 25                 
Correct output: -20                 | Program output: 35                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -97                 | Program output: -91                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: 59                 
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: 25                 
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -5                 
Correct output: -60                 | Program output: -60                
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -37                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 4                  
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (in3 integer_yank boolean_xor in4 integer_min boolean_dup in3 boolean_flush 64 boolean_shove integer_dup integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (boolean_empty integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) (integer_sub integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (in3 integer_yank boolean_xor in4 integer_min boolean_dup in3 boolean_flush 64 boolean_shove integer_dup integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (boolean_empty integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) (integer_sub integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (593 92 867 743 744 747 92 759 171 590)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (593 92 867 743 744 747 92 759 171 590)
Population mean number of perfect (error zero) cases: 5.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (in3 integer_yank 64 integer_dup_times integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (exec_flush) exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth) (integer_sub integer_div integer_gt exec_while ()) integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38)) () ())
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 63
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 4.602
Median total errors in population: 3
Error averages by case: (0.407 0.908 0.133 0.257 0.256 0.253 0.908 0.241 0.829 0.41)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.142
Average program size in population (points): 63.684
Average percent parens in population: 0.182
Minimum age in population: 18.28515625
Maximum age in population: 23.06103515625
Average age in population: 21.83757836914062
Median age in population: 21.83782958984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5852363
--- Timings ---
Current time: 1559314348892 milliseconds
Total Time:          42.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.0 seconds, 71.0%
Fitness Testing:      8.0 seconds, 18.9%
Report:               4.2 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 88                 
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: 42                 
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 14                 
Correct output: 2                   | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 61                 
Correct output: 11                  | Program output: 34                 
Correct output: 23                  | Program output: 44                 
Correct output: 32                  | Program output: 37                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 35                 
Correct output: 8                   | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 33                 
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 21                  | Program output: 23                 
Correct output: 38                  | Program output: 48                 
Correct output: 7                   | Program output: 69                 
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: 1                  
Correct output: -100                | Program output: -40                
Correct output: -23                 | Program output: -11                
Correct output: -15                 | Program output: 12                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 18                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 17                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -44                
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -87                
Correct output: -83                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: -39                
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: -40                
Correct output: -94                 | Program output: -69                
Correct output: -78                 | Program output: -34                
Correct output: -53                 | Program output: -27                
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -6                 
Correct output: -80                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -8                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -37                
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -8                 
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()) () ())
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()) () ())
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (549 250 269 252 705 599 549 549 267 599)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (549 250 269 252 705 599 549 549 267 599)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth})
Best program: (in3 integer_yank 64 in1 integer_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()) () ())
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.412
Median total errors in population: 5
Error averages by case: (0.451 0.75 0.731 0.748 0.295 0.401 0.451 0.451 0.733 0.401)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.596
Average program size in population (points): 61.332
Average percent parens in population: 0.192
Minimum age in population: 21.14501953125
Maximum age in population: 24.85345458984375
Average age in population: 23.62962463378906
Median age in population: 23.55419921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6201065
--- Timings ---
Current time: 1559314351490 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 71.2%
Fitness Testing:      8.4 seconds, 18.7%
Report:               4.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 58                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: -50                
Correct output: 12                  | Program output: 72                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -64                
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: 17                 
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: 47                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: 20                 
Correct output: -44                 | Program output: 9                  
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -22                
Correct output: -22                 | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: 32                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: 58                 
Correct output: -90                 | Program output: 62                 
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: 55                 
Correct output: -60                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -24                
Correct output: -59                 | Program output: -31                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (in3 integer_yank boolean_xor in2 integer_min boolean_dup in3 boolean_flush 64 boolean_shove integer_dup integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (boolean_empty integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup)) (integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth boolean_dup exec_dup_times (-38))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (in3 integer_yank boolean_xor in2 integer_min boolean_dup in3 boolean_flush 64 boolean_shove integer_dup integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (boolean_empty integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup)) (integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth boolean_dup exec_dup_times (-38))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (376 400 599 372 603 291 402 684 559 99)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (376 400 599 372 603 291 402 684 559 99)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (in3 integer_yank boolean_xor in2 integer_min boolean_dup in3 boolean_flush 64 boolean_shove integer_dup integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (boolean_empty integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup)) (integer_rot) (exec_flush) exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth boolean_dup exec_dup_times (-38))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 49
Size: 61
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 5.615
Median total errors in population: 5
Error averages by case: (0.624 0.6 0.401 0.628 0.397 0.709 0.598 0.316 0.441 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.142
Average program size in population (points): 60.684
Average percent parens in population: 0.191
Minimum age in population: 23.0185546875
Maximum age in population: 26.7130126953125
Average age in population: 25.28028283691406
Median age in population: 25.36395263671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6545706
--- Timings ---
Current time: 1559314354111 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 71.4%
Fitness Testing:      8.8 seconds, 18.5%
Report:               4.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 223
Test mean error for best: 0.22300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 40                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 25                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: -90                
Correct output: 12                  | Program output: 72                 
Correct output: -94                 | Program output: -94                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -64                
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: 35                 
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -5                 
Correct output: -52                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -18                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 20                 
Correct output: -53                 | Program output: -53                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: 25                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -5                 
Correct output: -60                 | Program output: -60                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -37                
Correct output: -73                 | Program output: -50                
Correct output: -76                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -47                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (in3 integer_gte integer_yank boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot boolean_shove integer_dup integer_div in1 integer_lt integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq in1 integer_inc) boolean_not print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_empty integer_rot) (exec_flush) (boolean_empty integer_rot) exec_flush exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth integer_sub integer_div integer_gt exec_while () integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 67
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (in3 integer_gte integer_yank boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot boolean_shove integer_dup integer_div in1 integer_lt integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq in1 integer_inc) boolean_not print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_empty integer_rot) (exec_flush) (boolean_empty integer_rot) exec_flush exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth integer_sub integer_div integer_gt exec_while () integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 67
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (424 445 423 540 317 282 317 423 541 179)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (424 445 423 540 317 282 317 423 541 179)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (in3 integer_gte integer_yank boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot boolean_shove integer_dup integer_div in1 integer_lt integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq in1 integer_inc) boolean_not print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_empty integer_rot) (exec_flush) (boolean_empty integer_rot) exec_flush exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth integer_sub integer_div integer_gt exec_while () integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 57
Size: 67
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 6.109
Median total errors in population: 5
Error averages by case: (0.576 0.555 0.577 0.46 0.683 0.718 0.683 0.577 0.459 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.421
Average program size in population (points): 61.54
Average percent parens in population: 0.196
Minimum age in population: 24.0185546875
Maximum age in population: 28.63360595703125
Average age in population: 26.66329544067383
Median age in population: 26.69546508789062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6901517
--- Timings ---
Current time: 1559314356729 milliseconds
Total Time:          50.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.9 seconds, 71.6%
Fitness Testing:      9.2 seconds, 18.3%
Report:               5.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 397
Test mean error for best: 0.39700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 93                 
Correct output: -79                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: 68                 
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 27                 
Correct output: 3                   | Program output: 3                  
Correct output: 11                  | Program output: 34                 
Correct output: 23                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 8                  
Correct output: 4                   | Program output: 58                 
Correct output: 3                   | Program output: 91                 
Correct output: 29                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 21                  | Program output: 21                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: -94                 | Program output: -26                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: 17                 
Correct output: -94                 | Program output: 20                 
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: 67                 
Correct output: -94                 | Program output: -47                
Correct output: 16                  | Program output: 41                 
Correct output: 5                   | Program output: 37                 
Correct output: 13                  | Program output: 17                 
Correct output: -49                 | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -52                 | Program output: -10                
Correct output: -85                 | Program output: 65                 
Correct output: -58                 | Program output: -35                
Correct output: -22                 | Program output: 11                 
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -58                
Correct output: -5                  | Program output: -4                 
Correct output: -94                 | Program output: -51                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -53                 | Program output: 24                 
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 14                 
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: 9                  
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -85                
Correct output: -33                 | Program output: -24                
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -6                 
Correct output: -96                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Lexicase best program: (in3 integer_gte integer_yank boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot boolean_shove integer_dup integer_div in1 integer_lt integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq in1 integer_inc) boolean_not print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_empty integer_rot) (exec_flush) (boolean_empty integer_rot) exec_flush exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth integer_sub integer_div integer_gt exec_while () integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 67
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Zero cases best program: (in3 integer_gte integer_yank boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot boolean_shove integer_dup integer_div in1 integer_lt integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq in1 integer_inc) boolean_not print_integer integer_mod boolean_or exec_s_when_autoconstructing (boolean_empty integer_rot) (exec_flush) (boolean_empty integer_rot) exec_flush exec_y_when_autoconstructing (integer_dup) integer_dup_times exec_noop boolean_empty boolean_empty integer_stackdepth integer_sub integer_div integer_gt exec_while () integer_rot integer_flush exec_y_when_autoconstructing (integer_rot integer_stackdepth boolean_dup) exec_dup_times (-38))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 67
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (691 685 196 202 857 735 693 701 857 686)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (691 685 196 202 857 735 693 701 857 686)
Population mean number of perfect (error zero) cases: 6.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction boolean_flush} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -38})
Best program: (integer_fromboolean integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup in3 boolean_flush 64 boolean_shove integer_dup integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (exec_s_when_autoconstructing (boolean_yank integer_stackdepth exec_when (boolean_empty integer_rot) exec_flush) (exec_y_when_autoconstructing (integer_dup)) (integer_dup_times exec_noop boolean_empty boolean_empty integer_dup_times) integer_div exec_dup_times (-38))) () ()) () ())
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 48
Size: 63
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 3.697
Median total errors in population: 2
Error averages by case: (0.309 0.315 0.804 0.798 0.143 0.265 0.307 0.299 0.143 0.314)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.457
Average program size in population (points): 66.234
Average percent parens in population: 0.163
Minimum age in population: 25.88885498046875
Maximum age in population: 29.81072235107422
Average age in population: 28.13967324066162
Median age in population: 28.08478546142578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 336
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7221696
--- Timings ---
Current time: 1559314359254 milliseconds
Total Time:          52.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 71.8%
Fitness Testing:      9.5 seconds, 18.1%
Report:               5.2 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 184
Test mean error for best: 0.18400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 1
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 62                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: -90                
Correct output: 12                  | Program output: 12                 
Correct output: -94                 | Program output: -66                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -3                 
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -44                
Correct output: -52                 | Program output: -31                
Correct output: -85                 | Program output: -7                 
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -58                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -51                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -53                 | Program output: -23                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -6                 
Correct output: -96                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 61
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 61
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (846 622 448 531 448 621 806 689 448 373)
Population mean number of elite cases: 5.83
Count of perfect (error zero) individuals by case: (846 622 448 531 448 621 806 689 448 373)
Population mean number of perfect (error zero) cases: 5.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction integer_yank} {:close 0, :instruction 64} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 2, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_when} {:close 0, :instruction 64} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth})
Best program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 51
Size: 61
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 4.168
Median total errors in population: 3
Error averages by case: (0.154 0.378 0.552 0.469 0.552 0.379 0.194 0.311 0.552 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.723
Average program size in population (points): 66.719
Average percent parens in population: 0.179
Minimum age in population: 26.88885498046875
Maximum age in population: 31.21423721313477
Average age in population: 29.45312538528442
Median age in population: 29.61775207519531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7557100
--- Timings ---
Current time: 1559314361986 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.8 seconds, 72.0%
Fitness Testing:      9.9 seconds, 17.9%
Report:               5.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 19
Successful program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 61


Auto-simplifying with starting size: 61
step: 0
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 500
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1000
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1500
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2000
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2500
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3000
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3500
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4000
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4500
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 5000
program: (in3 integer_yank 64 in1 boolean_xor in2 integer_min boolean_dup boolean_xor in4 integer_min boolean_dup in3 exec_when () integer_rot integer_div in1 integer_dup_items integer_shove exec_when () 64 boolean_shove integer_dup integer_div boolean_shove integer_dup print_boolean exec_pop () integer_div exec_pop () integer_dup_items integer_shove exec_pop (integer_pop boolean_frominteger boolean_xor exec_eq boolean_invert_first_then_and integer_inc) boolean_pop print_integer integer_mod boolean_or exec_do*count (exec_s_when_autoconstructing (boolean_yank integer_stackdepth boolean_dup boolean_empty integer_rot) (integer_stackdepth) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 184
Test mean error for best: 0.18400
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 1
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: 40                  | Program output: 61                 
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -16                 | Program output: -16                
Correct output: -24                 | Program output: -24                
Correct output: 67                  | Program output: 67                 
Correct output: -10                 | Program output: -10                
Correct output: 21                  | Program output: 21                 
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 12                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 8                   | Program output: 18                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 3                  
Correct output: 29                  | Program output: 29                 
Correct output: 25                  | Program output: 34                 
Correct output: 15                  | Program output: 45                 
Correct output: 12                  | Program output: 38                 
Correct output: 21                  | Program output: 62                 
Correct output: 38                  | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -90                 | Program output: -90                
Correct output: 12                  | Program output: 12                 
Correct output: -94                 | Program output: -66                
Correct output: -24                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -23                 | Program output: -23                
Correct output: -15                 | Program output: -15                
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -3                 
Correct output: -29                 | Program output: -29                
Correct output: -20                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: -49                 | Program output: -49                
Correct output: -44                 | Program output: -44                
Correct output: -52                 | Program output: -31                
Correct output: -85                 | Program output: -7                 
Correct output: -58                 | Program output: -58                
Correct output: -22                 | Program output: -22                
Correct output: -97                 | Program output: -97                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -58                
Correct output: -5                  | Program output: -5                 
Correct output: -94                 | Program output: -51                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -53                 | Program output: -23                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -53                
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: -57                
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -80                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -74                 | Program output: -74                
Correct output: -76                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -85                
Correct output: -33                 | Program output: -33                
Correct output: -59                 | Program output: -59                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -6                 
Correct output: -96                 | Program output: -46                
Correct output: -60                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -74                 | Program output: -36                
;;******************************
