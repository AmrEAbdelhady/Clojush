Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-59 -59 -59 11] -59] [[33 33 33 20] 20] [[85 85 85 62] 62] [[-38 -4 -4 -4] -38] [[73 -77 -77 -77] -77] [[-66 -23 -66 -66] -66] [[-41 -41 -41 -62] -62] [[31 36 31 31] 31] [[77 49 49 49] 49] [[95 -42 -42 -42] -42] [(46 46 46 46) 46] [(-51 -51 -51 -51) -51] [(-54 -54 -54 -54) -54] [(-87 -87 -87 -87) -87] [(-69 -69 -69 -69) -69] [(28 81 66 51) 28] [(91 83 90 14) 14] [(16 67 3 21) 3] [(44 13 20 56) 13] [(20 8 18 35) 8] [(17 34 41 95) 17] [(94 9 85 71) 9] [(21 82 42 31) 21] [(7 24 81 68) 7] [(46 43 24 51) 24] [(31 57 62 59) 31] [(45 38 48 58) 38] [(29 19 90 20) 19] [(50 98 15 86) 15] [(56 8 49 88) 8] [(92 58 35 61) 35] [(50 86 75 90) 50] [(48 8 88 35) 8] [(37 100 37 1) 1] [(81 71 70 80) 70] [(38 52 -57 -77) -77] [(-76 -100 -52 -57) -100] [(-13 -24 -72 6) -72] [(-36 50 -63 -58) -63] [(-83 -84 -81 81) -84] [(89 -67 7 -19) -67] [(77 1 -73 -64) -73] [(-56 -73 99 -43) -73] [(-2 -84 33 -13) -84] [(88 -74 28 -8) -74] [(41 17 32 41) 17] [(41 -75 -97 -68) -97] [(82 67 -56 46) -56] [(-45 48 -29 -78) -78] [(-90 -17 21 3) -90] [(57 61 -81 -89) -89] [(94 -90 50 28) -90] [(42 -34 28 20) -34] [(6 -23 100 70) -23] [(21 -79 73 -20) -79] [(64 -70 -10 21) -70] [(-46 41 95 -76) -76] [(90 -99 -66 20) -99] [(-36 -93 47 -51) -93] [(12 -17 -34 4) -34] [(-56 -36 48 88) -56] [(86 12 27 10) 10] [(73 -13 -98 53) -98] [(-2 -29 -36 76) -36] [(-34 -94 -24 4) -94] [(99 -49 -57 -52) -57] [(-37 65 -88 45) -88] [(67 -99 2 -37) -99] [(91 30 39 -91) -91] [(53 17 5 72) 5] [(96 13 6 17) 6] [(77 55 -85 56) -85] [(-79 -65 16 49) -79] [(-87 33 86 -51) -87] [(9 28 -65 35) -65] [(87 -10 82 -66) -66] [(-79 100 -40 -47) -79] [(-55 8 -54 46) -55] [(1 48 -78 46) -78] [(-17 38 78 -97) -97] [(66 99 -16 -13) -16] [(79 45 81 -41) -41] [(29 23 55 -68) -68] [(-86 33 29 -83) -86] [(-46 65 -88 -96) -96] [(-75 -52 -87 -63) -87] [(65 33 71 77) 33] [(-1 15 -16 99) -16] [(42 -13 -79 -20) -79] [(95 74 73 -96) -96] [(-88 -14 -36 7) -88] [(76 11 -4 48) -4] [(-73 71 62 -72) -73] [(62 90 -70 97) -70] [(55 6 11 -6) -6])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-59 -59 -59 11] -59]
Train Case:   6 | Input/Output: [[33 33 33 20] 20]
Train Case:   7 | Input/Output: [[85 85 85 62] 62]
Train Case:   8 | Input/Output: [[-38 -4 -4 -4] -38]
Train Case:   9 | Input/Output: [[73 -77 -77 -77] -77]
Train Case:  10 | Input/Output: [[-66 -23 -66 -66] -66]
Train Case:  11 | Input/Output: [[-41 -41 -41 -62] -62]
Train Case:  12 | Input/Output: [[31 36 31 31] 31]
Train Case:  13 | Input/Output: [[77 49 49 49] 49]
Train Case:  14 | Input/Output: [[95 -42 -42 -42] -42]
Train Case:  15 | Input/Output: [(46 46 46 46) 46]
Train Case:  16 | Input/Output: [(-51 -51 -51 -51) -51]
Train Case:  17 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  18 | Input/Output: [(-87 -87 -87 -87) -87]
Train Case:  19 | Input/Output: [(-69 -69 -69 -69) -69]
Train Case:  20 | Input/Output: [(28 81 66 51) 28]
Train Case:  21 | Input/Output: [(91 83 90 14) 14]
Train Case:  22 | Input/Output: [(16 67 3 21) 3]
Train Case:  23 | Input/Output: [(44 13 20 56) 13]
Train Case:  24 | Input/Output: [(20 8 18 35) 8]
Train Case:  25 | Input/Output: [(17 34 41 95) 17]
Train Case:  26 | Input/Output: [(94 9 85 71) 9]
Train Case:  27 | Input/Output: [(21 82 42 31) 21]
Train Case:  28 | Input/Output: [(7 24 81 68) 7]
Train Case:  29 | Input/Output: [(46 43 24 51) 24]
Train Case:  30 | Input/Output: [(31 57 62 59) 31]
Train Case:  31 | Input/Output: [(45 38 48 58) 38]
Train Case:  32 | Input/Output: [(29 19 90 20) 19]
Train Case:  33 | Input/Output: [(50 98 15 86) 15]
Train Case:  34 | Input/Output: [(56 8 49 88) 8]
Train Case:  35 | Input/Output: [(92 58 35 61) 35]
Train Case:  36 | Input/Output: [(50 86 75 90) 50]
Train Case:  37 | Input/Output: [(48 8 88 35) 8]
Train Case:  38 | Input/Output: [(37 100 37 1) 1]
Train Case:  39 | Input/Output: [(81 71 70 80) 70]
Train Case:  40 | Input/Output: [(38 52 -57 -77) -77]
Train Case:  41 | Input/Output: [(-76 -100 -52 -57) -100]
Train Case:  42 | Input/Output: [(-13 -24 -72 6) -72]
Train Case:  43 | Input/Output: [(-36 50 -63 -58) -63]
Train Case:  44 | Input/Output: [(-83 -84 -81 81) -84]
Train Case:  45 | Input/Output: [(89 -67 7 -19) -67]
Train Case:  46 | Input/Output: [(77 1 -73 -64) -73]
Train Case:  47 | Input/Output: [(-56 -73 99 -43) -73]
Train Case:  48 | Input/Output: [(-2 -84 33 -13) -84]
Train Case:  49 | Input/Output: [(88 -74 28 -8) -74]
Train Case:  50 | Input/Output: [(41 17 32 41) 17]
Train Case:  51 | Input/Output: [(41 -75 -97 -68) -97]
Train Case:  52 | Input/Output: [(82 67 -56 46) -56]
Train Case:  53 | Input/Output: [(-45 48 -29 -78) -78]
Train Case:  54 | Input/Output: [(-90 -17 21 3) -90]
Train Case:  55 | Input/Output: [(57 61 -81 -89) -89]
Train Case:  56 | Input/Output: [(94 -90 50 28) -90]
Train Case:  57 | Input/Output: [(42 -34 28 20) -34]
Train Case:  58 | Input/Output: [(6 -23 100 70) -23]
Train Case:  59 | Input/Output: [(21 -79 73 -20) -79]
Train Case:  60 | Input/Output: [(64 -70 -10 21) -70]
Train Case:  61 | Input/Output: [(-46 41 95 -76) -76]
Train Case:  62 | Input/Output: [(90 -99 -66 20) -99]
Train Case:  63 | Input/Output: [(-36 -93 47 -51) -93]
Train Case:  64 | Input/Output: [(12 -17 -34 4) -34]
Train Case:  65 | Input/Output: [(-56 -36 48 88) -56]
Train Case:  66 | Input/Output: [(86 12 27 10) 10]
Train Case:  67 | Input/Output: [(73 -13 -98 53) -98]
Train Case:  68 | Input/Output: [(-2 -29 -36 76) -36]
Train Case:  69 | Input/Output: [(-34 -94 -24 4) -94]
Train Case:  70 | Input/Output: [(99 -49 -57 -52) -57]
Train Case:  71 | Input/Output: [(-37 65 -88 45) -88]
Train Case:  72 | Input/Output: [(67 -99 2 -37) -99]
Train Case:  73 | Input/Output: [(91 30 39 -91) -91]
Train Case:  74 | Input/Output: [(53 17 5 72) 5]
Train Case:  75 | Input/Output: [(96 13 6 17) 6]
Train Case:  76 | Input/Output: [(77 55 -85 56) -85]
Train Case:  77 | Input/Output: [(-79 -65 16 49) -79]
Train Case:  78 | Input/Output: [(-87 33 86 -51) -87]
Train Case:  79 | Input/Output: [(9 28 -65 35) -65]
Train Case:  80 | Input/Output: [(87 -10 82 -66) -66]
Train Case:  81 | Input/Output: [(-79 100 -40 -47) -79]
Train Case:  82 | Input/Output: [(-55 8 -54 46) -55]
Train Case:  83 | Input/Output: [(1 48 -78 46) -78]
Train Case:  84 | Input/Output: [(-17 38 78 -97) -97]
Train Case:  85 | Input/Output: [(66 99 -16 -13) -16]
Train Case:  86 | Input/Output: [(79 45 81 -41) -41]
Train Case:  87 | Input/Output: [(29 23 55 -68) -68]
Train Case:  88 | Input/Output: [(-86 33 29 -83) -86]
Train Case:  89 | Input/Output: [(-46 65 -88 -96) -96]
Train Case:  90 | Input/Output: [(-75 -52 -87 -63) -87]
Train Case:  91 | Input/Output: [(65 33 71 77) 33]
Train Case:  92 | Input/Output: [(-1 15 -16 99) -16]
Train Case:  93 | Input/Output: [(42 -13 -79 -20) -79]
Train Case:  94 | Input/Output: [(95 74 73 -96) -96]
Train Case:  95 | Input/Output: [(-88 -14 -36 7) -88]
Train Case:  96 | Input/Output: [(76 11 -4 48) -4]
Train Case:  97 | Input/Output: [(-73 71 62 -72) -73]
Train Case:  98 | Input/Output: [(62 90 -70 97) -70]
Train Case:  99 | Input/Output: [(55 6 11 -6) -6]
Test Case:   0 | Input/Output: [[38 38 -5 38] -5]
Test Case:   1 | Input/Output: [[-71 -30 -30 -30] -71]
Test Case:   2 | Input/Output: [[-76 -76 -76 85] -76]
Test Case:   3 | Input/Output: [[-59 -59 -51 -59] -59]
Test Case:   4 | Input/Output: [[-91 64 -91 -91] -91]
Test Case:   5 | Input/Output: [[-65 -22 -65 -65] -65]
Test Case:   6 | Input/Output: [[88 88 88 0] 0]
Test Case:   7 | Input/Output: [[64 -16 64 64] -16]
Test Case:   8 | Input/Output: [[-55 -55 40 -55] -55]
Test Case:   9 | Input/Output: [[-27 -71 -27 -27] -71]
Test Case:  10 | Input/Output: [[-70 -70 -60 -70] -70]
Test Case:  11 | Input/Output: [[-88 14 -88 -88] -88]
Test Case:  12 | Input/Output: [[-41 29 -41 -41] -41]
Test Case:  13 | Input/Output: [[74 74 -79 74] -79]
Test Case:  14 | Input/Output: [[72 72 -8 72] -8]
Test Case:  15 | Input/Output: [[30 99 30 30] 30]
Test Case:  16 | Input/Output: [[76 76 76 -17] -17]
Test Case:  17 | Input/Output: [[70 -11 70 70] -11]
Test Case:  18 | Input/Output: [[0 0 -2 0] -2]
Test Case:  19 | Input/Output: [[-83 -83 -83 11] -83]
Test Case:  20 | Input/Output: [[79 -80 -80 -80] -80]
Test Case:  21 | Input/Output: [[31 -74 -74 -74] -74]
Test Case:  22 | Input/Output: [[35 58 58 58] 35]
Test Case:  23 | Input/Output: [[-6 -6 -6 12] -6]
Test Case:  24 | Input/Output: [[7 -72 -72 -72] -72]
Test Case:  25 | Input/Output: [[1 20 1 1] 1]
Test Case:  26 | Input/Output: [[98 -8 98 98] -8]
Test Case:  27 | Input/Output: [[-2 62 -2 -2] -2]
Test Case:  28 | Input/Output: [[42 42 72 42] 42]
Test Case:  29 | Input/Output: [[38 -12 -12 -12] -12]
Test Case:  30 | Input/Output: [[75 82 75 75] 75]
Test Case:  31 | Input/Output: [[-25 -25 -25 -41] -41]
Test Case:  32 | Input/Output: [[-35 -35 -35 -34] -35]
Test Case:  33 | Input/Output: [[94 94 100 94] 94]
Test Case:  34 | Input/Output: [[1 1 1 -89] -89]
Test Case:  35 | Input/Output: [[49 49 73 49] 49]
Test Case:  36 | Input/Output: [[17 -87 17 17] -87]
Test Case:  37 | Input/Output: [[56 0 56 56] 0]
Test Case:  38 | Input/Output: [[50 50 76 50] 50]
Test Case:  39 | Input/Output: [[45 -82 45 45] -82]
Test Case:  40 | Input/Output: [[-52 -52 -52 75] -52]
Test Case:  41 | Input/Output: [[-71 -71 -71 -33] -71]
Test Case:  42 | Input/Output: [[14 48 48 48] 14]
Test Case:  43 | Input/Output: [[-20 -19 -20 -20] -20]
Test Case:  44 | Input/Output: [[12 12 12 84] 12]
Test Case:  45 | Input/Output: [[-35 -26 -26 -26] -35]
Test Case:  46 | Input/Output: [[-57 60 -57 -57] -57]
Test Case:  47 | Input/Output: [[13 13 13 -94] -94]
Test Case:  48 | Input/Output: [[57 32 32 32] 32]
Test Case:  49 | Input/Output: [[82 -8 82 82] -8]
Test Case:  50 | Input/Output: [[63 -74 63 63] -74]
Test Case:  51 | Input/Output: [[-65 100 -65 -65] -65]
Test Case:  52 | Input/Output: [[-95 18 -95 -95] -95]
Test Case:  53 | Input/Output: [[17 17 17 27] 17]
Test Case:  54 | Input/Output: [[67 67 -30 67] -30]
Test Case:  55 | Input/Output: [[-86 -86 -90 -86] -90]
Test Case:  56 | Input/Output: [[42 45 42 42] 42]
Test Case:  57 | Input/Output: [[14 90 90 90] 14]
Test Case:  58 | Input/Output: [[-27 -87 -87 -87] -87]
Test Case:  59 | Input/Output: [[92 92 92 -93] -93]
Test Case:  60 | Input/Output: [[-90 -90 -90 15] -90]
Test Case:  61 | Input/Output: [[-54 60 60 60] -54]
Test Case:  62 | Input/Output: [[70 70 -34 70] -34]
Test Case:  63 | Input/Output: [[-70 -70 -70 61] -70]
Test Case:  64 | Input/Output: [[-31 -31 -31 -8] -31]
Test Case:  65 | Input/Output: [[-38 -38 -53 -38] -53]
Test Case:  66 | Input/Output: [[2 2 -12 2] -12]
Test Case:  67 | Input/Output: [[-41 68 68 68] -41]
Test Case:  68 | Input/Output: [[36 36 36 72] 36]
Test Case:  69 | Input/Output: [[-50 -50 -50 89] -50]
Test Case:  70 | Input/Output: [[6 6 6 -86] -86]
Test Case:  71 | Input/Output: [[39 39 39 -13] -13]
Test Case:  72 | Input/Output: [[-68 -68 -88 -68] -88]
Test Case:  73 | Input/Output: [[-59 -55 -55 -55] -59]
Test Case:  74 | Input/Output: [[22 22 22 61] 22]
Test Case:  75 | Input/Output: [[26 -43 26 26] -43]
Test Case:  76 | Input/Output: [[-24 -24 -10 -24] -24]
Test Case:  77 | Input/Output: [[9 9 9 -46] -46]
Test Case:  78 | Input/Output: [[29 29 17 29] 17]
Test Case:  79 | Input/Output: [[-58 -58 -51 -58] -58]
Test Case:  80 | Input/Output: [[40 -20 -20 -20] -20]
Test Case:  81 | Input/Output: [[3 3 3 51] 3]
Test Case:  82 | Input/Output: [[-6 -6 -6 60] -6]
Test Case:  83 | Input/Output: [[9 9 9 -64] -64]
Test Case:  84 | Input/Output: [[18 0 18 18] 0]
Test Case:  85 | Input/Output: [[94 94 90 94] 90]
Test Case:  86 | Input/Output: [[-85 -85 -85 0] -85]
Test Case:  87 | Input/Output: [[-76 -76 -76 -86] -86]
Test Case:  88 | Input/Output: [[-29 -29 95 -29] -29]
Test Case:  89 | Input/Output: [[-71 -71 -71 -33] -71]
Test Case:  90 | Input/Output: [[-99 -99 -51 -99] -99]
Test Case:  91 | Input/Output: [[-3 -3 -3 -76] -76]
Test Case:  92 | Input/Output: [[-7 32 32 32] -7]
Test Case:  93 | Input/Output: [[83 54 83 83] 54]
Test Case:  94 | Input/Output: [[60 -40 60 60] -40]
Test Case:  95 | Input/Output: [[-55 -66 -55 -55] -66]
Test Case:  96 | Input/Output: [[32 32 -69 32] -69]
Test Case:  97 | Input/Output: [[72 -63 72 72] -63]
Test Case:  98 | Input/Output: [[75 75 75 78] 75]
Test Case:  99 | Input/Output: [[-39 5 5 5] -39]
Test Case: 100 | Input/Output: [(45 45 45 45) 45]
Test Case: 101 | Input/Output: [(27 27 27 27) 27]
Test Case: 102 | Input/Output: [(41 41 41 41) 41]
Test Case: 103 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 104 | Input/Output: [(5 5 5 5) 5]
Test Case: 105 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 106 | Input/Output: [(9 9 9 9) 9]
Test Case: 107 | Input/Output: [(28 28 28 28) 28]
Test Case: 108 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 109 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 110 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 111 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 112 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 113 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 114 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 115 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 116 | Input/Output: [(14 14 14 14) 14]
Test Case: 117 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 118 | Input/Output: [(100 100 100 100) 100]
Test Case: 119 | Input/Output: [(70 70 70 70) 70]
Test Case: 120 | Input/Output: [(26 26 26 26) 26]
Test Case: 121 | Input/Output: [(1 1 1 1) 1]
Test Case: 122 | Input/Output: [(48 48 48 48) 48]
Test Case: 123 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 124 | Input/Output: [(4 4 4 4) 4]
Test Case: 125 | Input/Output: [(66 66 66 66) 66]
Test Case: 126 | Input/Output: [(72 72 72 72) 72]
Test Case: 127 | Input/Output: [(55 55 55 55) 55]
Test Case: 128 | Input/Output: [(54 54 54 54) 54]
Test Case: 129 | Input/Output: [(82 82 82 82) 82]
Test Case: 130 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 131 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 132 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 133 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 134 | Input/Output: [(92 92 92 92) 92]
Test Case: 135 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 136 | Input/Output: [(75 75 75 75) 75]
Test Case: 137 | Input/Output: [(67 67 67 67) 67]
Test Case: 138 | Input/Output: [(53 53 53 53) 53]
Test Case: 139 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 140 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 141 | Input/Output: [(82 82 82 82) 82]
Test Case: 142 | Input/Output: [(33 33 33 33) 33]
Test Case: 143 | Input/Output: [(57 57 57 57) 57]
Test Case: 144 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 145 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 146 | Input/Output: [(76 76 76 76) 76]
Test Case: 147 | Input/Output: [(5 5 5 5) 5]
Test Case: 148 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 149 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 150 | Input/Output: [(89 89 89 89) 89]
Test Case: 151 | Input/Output: [(59 59 59 59) 59]
Test Case: 152 | Input/Output: [(41 41 41 41) 41]
Test Case: 153 | Input/Output: [(90 90 90 90) 90]
Test Case: 154 | Input/Output: [(38 38 38 38) 38]
Test Case: 155 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 156 | Input/Output: [(71 71 71 71) 71]
Test Case: 157 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 158 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 159 | Input/Output: [(37 37 37 37) 37]
Test Case: 160 | Input/Output: [(96 96 96 96) 96]
Test Case: 161 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 162 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 163 | Input/Output: [(31 31 31 31) 31]
Test Case: 164 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 165 | Input/Output: [(27 27 27 27) 27]
Test Case: 166 | Input/Output: [(85 85 85 85) 85]
Test Case: 167 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 168 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 169 | Input/Output: [(23 23 23 23) 23]
Test Case: 170 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 171 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 172 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 173 | Input/Output: [(62 62 62 62) 62]
Test Case: 174 | Input/Output: [(81 81 81 81) 81]
Test Case: 175 | Input/Output: [(93 93 93 93) 93]
Test Case: 176 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 177 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 178 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 179 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 180 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 181 | Input/Output: [(63 63 63 63) 63]
Test Case: 182 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 183 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 184 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 185 | Input/Output: [(93 93 93 93) 93]
Test Case: 186 | Input/Output: [(44 44 44 44) 44]
Test Case: 187 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 188 | Input/Output: [(36 36 36 36) 36]
Test Case: 189 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 190 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 191 | Input/Output: [(17 17 17 17) 17]
Test Case: 192 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 193 | Input/Output: [(44 44 44 44) 44]
Test Case: 194 | Input/Output: [(19 19 19 19) 19]
Test Case: 195 | Input/Output: [(21 21 21 21) 21]
Test Case: 196 | Input/Output: [(40 40 40 40) 40]
Test Case: 197 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 198 | Input/Output: [(55 55 55 55) 55]
Test Case: 199 | Input/Output: [(59 59 59 59) 59]
Test Case: 200 | Input/Output: [(61 35 36 93) 35]
Test Case: 201 | Input/Output: [(62 66 15 55) 15]
Test Case: 202 | Input/Output: [(16 55 27 12) 12]
Test Case: 203 | Input/Output: [(29 66 48 30) 29]
Test Case: 204 | Input/Output: [(24 87 14 95) 14]
Test Case: 205 | Input/Output: [(71 42 33 54) 33]
Test Case: 206 | Input/Output: [(15 13 94 28) 13]
Test Case: 207 | Input/Output: [(62 16 57 31) 16]
Test Case: 208 | Input/Output: [(79 97 30 86) 30]
Test Case: 209 | Input/Output: [(60 1 28 91) 1]
Test Case: 210 | Input/Output: [(91 73 91 5) 5]
Test Case: 211 | Input/Output: [(73 54 39 18) 18]
Test Case: 212 | Input/Output: [(49 73 96 79) 49]
Test Case: 213 | Input/Output: [(1 39 35 10) 1]
Test Case: 214 | Input/Output: [(66 52 51 76) 51]
Test Case: 215 | Input/Output: [(30 19 74 13) 13]
Test Case: 216 | Input/Output: [(10 63 3 20) 3]
Test Case: 217 | Input/Output: [(66 85 48 43) 43]
Test Case: 218 | Input/Output: [(23 63 16 66) 16]
Test Case: 219 | Input/Output: [(73 61 19 6) 6]
Test Case: 220 | Input/Output: [(20 68 23 28) 20]
Test Case: 221 | Input/Output: [(5 23 38 7) 5]
Test Case: 222 | Input/Output: [(66 41 42 65) 41]
Test Case: 223 | Input/Output: [(86 18 96 15) 15]
Test Case: 224 | Input/Output: [(72 35 26 25) 25]
Test Case: 225 | Input/Output: [(90 56 26 98) 26]
Test Case: 226 | Input/Output: [(85 32 54 22) 22]
Test Case: 227 | Input/Output: [(71 68 44 24) 24]
Test Case: 228 | Input/Output: [(34 38 36 5) 5]
Test Case: 229 | Input/Output: [(60 61 29 10) 10]
Test Case: 230 | Input/Output: [(86 99 72 55) 55]
Test Case: 231 | Input/Output: [(25 85 46 45) 25]
Test Case: 232 | Input/Output: [(81 32 76 89) 32]
Test Case: 233 | Input/Output: [(45 86 43 68) 43]
Test Case: 234 | Input/Output: [(4 98 11 97) 4]
Test Case: 235 | Input/Output: [(63 15 45 54) 15]
Test Case: 236 | Input/Output: [(20 13 1 43) 1]
Test Case: 237 | Input/Output: [(67 99 71 84) 67]
Test Case: 238 | Input/Output: [(78 4 25 64) 4]
Test Case: 239 | Input/Output: [(67 45 27 67) 27]
Test Case: 240 | Input/Output: [(50 75 98 28) 28]
Test Case: 241 | Input/Output: [(46 33 56 45) 33]
Test Case: 242 | Input/Output: [(15 2 55 71) 2]
Test Case: 243 | Input/Output: [(50 15 53 14) 14]
Test Case: 244 | Input/Output: [(60 76 87 16) 16]
Test Case: 245 | Input/Output: [(56 60 51 52) 51]
Test Case: 246 | Input/Output: [(13 17 58 99) 13]
Test Case: 247 | Input/Output: [(65 94 50 81) 50]
Test Case: 248 | Input/Output: [(2 38 14 84) 2]
Test Case: 249 | Input/Output: [(17 20 26 31) 17]
Test Case: 250 | Input/Output: [(61 81 19 50) 19]
Test Case: 251 | Input/Output: [(1 12 6 92) 1]
Test Case: 252 | Input/Output: [(93 64 12 34) 12]
Test Case: 253 | Input/Output: [(86 58 30 28) 28]
Test Case: 254 | Input/Output: [(39 23 19 56) 19]
Test Case: 255 | Input/Output: [(8 68 3 92) 3]
Test Case: 256 | Input/Output: [(80 37 45 15) 15]
Test Case: 257 | Input/Output: [(91 38 26 31) 26]
Test Case: 258 | Input/Output: [(6 68 57 85) 6]
Test Case: 259 | Input/Output: [(22 18 4 28) 4]
Test Case: 260 | Input/Output: [(14 17 4 4) 4]
Test Case: 261 | Input/Output: [(85 0 79 87) 0]
Test Case: 262 | Input/Output: [(53 76 8 30) 8]
Test Case: 263 | Input/Output: [(14 35 11 53) 11]
Test Case: 264 | Input/Output: [(42 2 49 99) 2]
Test Case: 265 | Input/Output: [(68 11 72 87) 11]
Test Case: 266 | Input/Output: [(81 98 93 20) 20]
Test Case: 267 | Input/Output: [(54 51 38 74) 38]
Test Case: 268 | Input/Output: [(93 18 0 68) 0]
Test Case: 269 | Input/Output: [(92 59 24 27) 24]
Test Case: 270 | Input/Output: [(45 52 62 41) 41]
Test Case: 271 | Input/Output: [(94 39 48 95) 39]
Test Case: 272 | Input/Output: [(10 83 99 32) 10]
Test Case: 273 | Input/Output: [(95 41 7 86) 7]
Test Case: 274 | Input/Output: [(41 90 22 13) 13]
Test Case: 275 | Input/Output: [(40 31 46 0) 0]
Test Case: 276 | Input/Output: [(61 7 84 37) 7]
Test Case: 277 | Input/Output: [(33 72 88 26) 26]
Test Case: 278 | Input/Output: [(38 58 66 85) 38]
Test Case: 279 | Input/Output: [(44 75 98 76) 44]
Test Case: 280 | Input/Output: [(1 9 16 69) 1]
Test Case: 281 | Input/Output: [(82 18 88 48) 18]
Test Case: 282 | Input/Output: [(50 79 39 48) 39]
Test Case: 283 | Input/Output: [(42 19 90 77) 19]
Test Case: 284 | Input/Output: [(39 91 26 50) 26]
Test Case: 285 | Input/Output: [(86 22 20 37) 20]
Test Case: 286 | Input/Output: [(35 45 87 18) 18]
Test Case: 287 | Input/Output: [(18 50 1 4) 1]
Test Case: 288 | Input/Output: [(98 67 24 6) 6]
Test Case: 289 | Input/Output: [(78 50 65 41) 41]
Test Case: 290 | Input/Output: [(85 78 57 72) 57]
Test Case: 291 | Input/Output: [(10 11 20 93) 10]
Test Case: 292 | Input/Output: [(48 65 55 78) 48]
Test Case: 293 | Input/Output: [(43 65 81 25) 25]
Test Case: 294 | Input/Output: [(44 88 68 33) 33]
Test Case: 295 | Input/Output: [(79 26 21 88) 21]
Test Case: 296 | Input/Output: [(68 63 73 5) 5]
Test Case: 297 | Input/Output: [(76 67 79 3) 3]
Test Case: 298 | Input/Output: [(20 33 93 68) 20]
Test Case: 299 | Input/Output: [(37 94 29 90) 29]
Test Case: 300 | Input/Output: [(36 6 20 15) 6]
Test Case: 301 | Input/Output: [(16 69 85 7) 7]
Test Case: 302 | Input/Output: [(63 59 60 68) 59]
Test Case: 303 | Input/Output: [(52 28 80 89) 28]
Test Case: 304 | Input/Output: [(30 16 32 36) 16]
Test Case: 305 | Input/Output: [(29 75 12 44) 12]
Test Case: 306 | Input/Output: [(77 23 83 47) 23]
Test Case: 307 | Input/Output: [(67 78 92 55) 55]
Test Case: 308 | Input/Output: [(32 72 70 80) 32]
Test Case: 309 | Input/Output: [(98 15 48 47) 15]
Test Case: 310 | Input/Output: [(99 19 86 94) 19]
Test Case: 311 | Input/Output: [(91 7 85 51) 7]
Test Case: 312 | Input/Output: [(40 99 50 48) 40]
Test Case: 313 | Input/Output: [(39 63 13 39) 13]
Test Case: 314 | Input/Output: [(93 40 19 25) 19]
Test Case: 315 | Input/Output: [(25 66 28 53) 25]
Test Case: 316 | Input/Output: [(78 64 16 3) 3]
Test Case: 317 | Input/Output: [(35 53 34 63) 34]
Test Case: 318 | Input/Output: [(32 44 56 65) 32]
Test Case: 319 | Input/Output: [(22 86 54 24) 22]
Test Case: 320 | Input/Output: [(8 90 71 61) 8]
Test Case: 321 | Input/Output: [(55 14 34 13) 13]
Test Case: 322 | Input/Output: [(21 46 100 25) 21]
Test Case: 323 | Input/Output: [(46 15 69 56) 15]
Test Case: 324 | Input/Output: [(62 45 87 93) 45]
Test Case: 325 | Input/Output: [(38 59 39 10) 10]
Test Case: 326 | Input/Output: [(44 44 93 15) 15]
Test Case: 327 | Input/Output: [(68 35 55 72) 35]
Test Case: 328 | Input/Output: [(18 37 18 73) 18]
Test Case: 329 | Input/Output: [(64 8 44 51) 8]
Test Case: 330 | Input/Output: [(1 93 87 35) 1]
Test Case: 331 | Input/Output: [(44 92 84 0) 0]
Test Case: 332 | Input/Output: [(61 69 49 44) 44]
Test Case: 333 | Input/Output: [(66 9 47 67) 9]
Test Case: 334 | Input/Output: [(40 69 6 45) 6]
Test Case: 335 | Input/Output: [(22 29 70 19) 19]
Test Case: 336 | Input/Output: [(67 52 76 10) 10]
Test Case: 337 | Input/Output: [(61 67 1 15) 1]
Test Case: 338 | Input/Output: [(14 10 28 29) 10]
Test Case: 339 | Input/Output: [(13 30 71 36) 13]
Test Case: 340 | Input/Output: [(34 37 94 4) 4]
Test Case: 341 | Input/Output: [(85 78 40 59) 40]
Test Case: 342 | Input/Output: [(1 62 19 36) 1]
Test Case: 343 | Input/Output: [(55 66 69 70) 55]
Test Case: 344 | Input/Output: [(91 98 8 10) 8]
Test Case: 345 | Input/Output: [(9 95 70 85) 9]
Test Case: 346 | Input/Output: [(69 35 93 46) 35]
Test Case: 347 | Input/Output: [(23 77 92 51) 23]
Test Case: 348 | Input/Output: [(9 34 46 24) 9]
Test Case: 349 | Input/Output: [(7 78 44 21) 7]
Test Case: 350 | Input/Output: [(17 63 23 83) 17]
Test Case: 351 | Input/Output: [(90 39 41 14) 14]
Test Case: 352 | Input/Output: [(69 64 69 61) 61]
Test Case: 353 | Input/Output: [(76 100 9 23) 9]
Test Case: 354 | Input/Output: [(66 7 24 36) 7]
Test Case: 355 | Input/Output: [(50 2 91 97) 2]
Test Case: 356 | Input/Output: [(46 43 5 68) 5]
Test Case: 357 | Input/Output: [(43 41 52 44) 41]
Test Case: 358 | Input/Output: [(2 71 58 64) 2]
Test Case: 359 | Input/Output: [(72 16 88 23) 16]
Test Case: 360 | Input/Output: [(41 38 56 26) 26]
Test Case: 361 | Input/Output: [(96 83 31 60) 31]
Test Case: 362 | Input/Output: [(24 84 54 55) 24]
Test Case: 363 | Input/Output: [(74 5 27 67) 5]
Test Case: 364 | Input/Output: [(63 74 3 79) 3]
Test Case: 365 | Input/Output: [(16 89 68 79) 16]
Test Case: 366 | Input/Output: [(26 27 39 17) 17]
Test Case: 367 | Input/Output: [(19 3 66 12) 3]
Test Case: 368 | Input/Output: [(25 17 24 9) 9]
Test Case: 369 | Input/Output: [(84 90 12 41) 12]
Test Case: 370 | Input/Output: [(74 76 81 41) 41]
Test Case: 371 | Input/Output: [(84 12 73 70) 12]
Test Case: 372 | Input/Output: [(8 19 25 90) 8]
Test Case: 373 | Input/Output: [(67 87 80 47) 47]
Test Case: 374 | Input/Output: [(11 29 93 58) 11]
Test Case: 375 | Input/Output: [(49 34 46 40) 34]
Test Case: 376 | Input/Output: [(50 79 96 29) 29]
Test Case: 377 | Input/Output: [(62 49 90 31) 31]
Test Case: 378 | Input/Output: [(100 39 90 70) 39]
Test Case: 379 | Input/Output: [(59 43 44 90) 43]
Test Case: 380 | Input/Output: [(59 91 19 53) 19]
Test Case: 381 | Input/Output: [(11 84 63 61) 11]
Test Case: 382 | Input/Output: [(88 75 7 29) 7]
Test Case: 383 | Input/Output: [(22 86 80 85) 22]
Test Case: 384 | Input/Output: [(62 49 72 60) 49]
Test Case: 385 | Input/Output: [(95 14 24 59) 14]
Test Case: 386 | Input/Output: [(68 19 81 85) 19]
Test Case: 387 | Input/Output: [(24 74 9 88) 9]
Test Case: 388 | Input/Output: [(24 58 63 17) 17]
Test Case: 389 | Input/Output: [(18 10 54 40) 10]
Test Case: 390 | Input/Output: [(59 83 99 34) 34]
Test Case: 391 | Input/Output: [(59 9 33 20) 9]
Test Case: 392 | Input/Output: [(40 25 6 77) 6]
Test Case: 393 | Input/Output: [(13 11 29 86) 11]
Test Case: 394 | Input/Output: [(61 64 83 38) 38]
Test Case: 395 | Input/Output: [(66 60 97 74) 60]
Test Case: 396 | Input/Output: [(16 67 18 32) 16]
Test Case: 397 | Input/Output: [(0 83 80 70) 0]
Test Case: 398 | Input/Output: [(41 85 23 61) 23]
Test Case: 399 | Input/Output: [(24 75 94 9) 9]
Test Case: 400 | Input/Output: [(-42 -93 -84 -9) -93]
Test Case: 401 | Input/Output: [(-25 -53 -62 -51) -62]
Test Case: 402 | Input/Output: [(-50 77 25 -80) -80]
Test Case: 403 | Input/Output: [(-54 -70 -68 -43) -70]
Test Case: 404 | Input/Output: [(13 -42 26 -95) -95]
Test Case: 405 | Input/Output: [(1 -72 -29 4) -72]
Test Case: 406 | Input/Output: [(47 26 54 38) 26]
Test Case: 407 | Input/Output: [(-83 -48 70 -30) -83]
Test Case: 408 | Input/Output: [(-65 -62 86 -92) -92]
Test Case: 409 | Input/Output: [(5 37 28 -87) -87]
Test Case: 410 | Input/Output: [(33 83 -64 55) -64]
Test Case: 411 | Input/Output: [(-56 -2 -28 -14) -56]
Test Case: 412 | Input/Output: [(-53 90 -74 -80) -80]
Test Case: 413 | Input/Output: [(6 -34 -67 14) -67]
Test Case: 414 | Input/Output: [(62 62 -64 41) -64]
Test Case: 415 | Input/Output: [(14 -40 -51 -91) -91]
Test Case: 416 | Input/Output: [(48 -10 43 -55) -55]
Test Case: 417 | Input/Output: [(77 -95 -40 66) -95]
Test Case: 418 | Input/Output: [(72 -70 -32 69) -70]
Test Case: 419 | Input/Output: [(-84 -48 29 27) -84]
Test Case: 420 | Input/Output: [(16 40 -73 -22) -73]
Test Case: 421 | Input/Output: [(54 80 -48 6) -48]
Test Case: 422 | Input/Output: [(-23 85 -72 -88) -88]
Test Case: 423 | Input/Output: [(85 74 -65 48) -65]
Test Case: 424 | Input/Output: [(48 -95 74 -42) -95]
Test Case: 425 | Input/Output: [(57 -94 68 58) -94]
Test Case: 426 | Input/Output: [(63 -6 -11 64) -11]
Test Case: 427 | Input/Output: [(-20 54 -60 68) -60]
Test Case: 428 | Input/Output: [(95 42 -87 14) -87]
Test Case: 429 | Input/Output: [(70 -66 89 -16) -66]
Test Case: 430 | Input/Output: [(62 82 -82 -28) -82]
Test Case: 431 | Input/Output: [(-78 5 23 -67) -78]
Test Case: 432 | Input/Output: [(65 -9 -24 31) -24]
Test Case: 433 | Input/Output: [(-73 -17 98 35) -73]
Test Case: 434 | Input/Output: [(6 -51 77 3) -51]
Test Case: 435 | Input/Output: [(-69 -92 -81 35) -92]
Test Case: 436 | Input/Output: [(-50 -93 -17 39) -93]
Test Case: 437 | Input/Output: [(72 51 87 90) 51]
Test Case: 438 | Input/Output: [(-77 -92 -70 56) -92]
Test Case: 439 | Input/Output: [(67 73 82 100) 67]
Test Case: 440 | Input/Output: [(-32 49 51 -45) -45]
Test Case: 441 | Input/Output: [(49 33 96 24) 24]
Test Case: 442 | Input/Output: [(26 -95 -72 66) -95]
Test Case: 443 | Input/Output: [(-66 21 73 -34) -66]
Test Case: 444 | Input/Output: [(-39 10 -94 -55) -94]
Test Case: 445 | Input/Output: [(36 68 -40 -48) -48]
Test Case: 446 | Input/Output: [(-75 -44 -28 19) -75]
Test Case: 447 | Input/Output: [(-63 47 -28 -74) -74]
Test Case: 448 | Input/Output: [(27 21 -85 -9) -85]
Test Case: 449 | Input/Output: [(-39 16 78 0) -39]
Test Case: 450 | Input/Output: [(-7 96 52 -17) -17]
Test Case: 451 | Input/Output: [(47 64 -75 -74) -75]
Test Case: 452 | Input/Output: [(51 -15 89 62) -15]
Test Case: 453 | Input/Output: [(44 69 -42 55) -42]
Test Case: 454 | Input/Output: [(-3 64 2 95) -3]
Test Case: 455 | Input/Output: [(-76 -8 85 8) -76]
Test Case: 456 | Input/Output: [(-13 38 -77 68) -77]
Test Case: 457 | Input/Output: [(100 -52 34 8) -52]
Test Case: 458 | Input/Output: [(62 60 -92 9) -92]
Test Case: 459 | Input/Output: [(-45 -74 51 -56) -74]
Test Case: 460 | Input/Output: [(34 81 48 83) 34]
Test Case: 461 | Input/Output: [(-23 -38 -55 -13) -55]
Test Case: 462 | Input/Output: [(40 91 -77 59) -77]
Test Case: 463 | Input/Output: [(90 -65 29 -73) -73]
Test Case: 464 | Input/Output: [(1 -1 -24 -20) -24]
Test Case: 465 | Input/Output: [(-36 86 54 40) -36]
Test Case: 466 | Input/Output: [(72 -41 30 -58) -58]
Test Case: 467 | Input/Output: [(86 51 -12 77) -12]
Test Case: 468 | Input/Output: [(81 60 33 -33) -33]
Test Case: 469 | Input/Output: [(-76 60 92 -13) -76]
Test Case: 470 | Input/Output: [(3 -81 -57 -45) -81]
Test Case: 471 | Input/Output: [(-34 -30 10 -35) -35]
Test Case: 472 | Input/Output: [(45 55 -46 -8) -46]
Test Case: 473 | Input/Output: [(71 -58 -69 -3) -69]
Test Case: 474 | Input/Output: [(-35 -60 50 0) -60]
Test Case: 475 | Input/Output: [(16 -23 1 45) -23]
Test Case: 476 | Input/Output: [(56 20 -84 -69) -84]
Test Case: 477 | Input/Output: [(50 47 -73 94) -73]
Test Case: 478 | Input/Output: [(7 33 -52 -38) -52]
Test Case: 479 | Input/Output: [(98 -41 19 -17) -41]
Test Case: 480 | Input/Output: [(-91 66 -56 -73) -91]
Test Case: 481 | Input/Output: [(-30 66 -92 34) -92]
Test Case: 482 | Input/Output: [(43 54 -6 38) -6]
Test Case: 483 | Input/Output: [(-81 90 -80 -86) -86]
Test Case: 484 | Input/Output: [(-63 99 -63 30) -63]
Test Case: 485 | Input/Output: [(-92 -52 77 11) -92]
Test Case: 486 | Input/Output: [(22 -32 -8 -8) -32]
Test Case: 487 | Input/Output: [(-79 -13 -59 -77) -79]
Test Case: 488 | Input/Output: [(-76 55 -93 90) -93]
Test Case: 489 | Input/Output: [(-33 -44 -67 -28) -67]
Test Case: 490 | Input/Output: [(-6 -65 91 75) -65]
Test Case: 491 | Input/Output: [(-87 -50 -91 -63) -91]
Test Case: 492 | Input/Output: [(9 -14 -10 -52) -52]
Test Case: 493 | Input/Output: [(-59 -20 64 -62) -62]
Test Case: 494 | Input/Output: [(46 -76 -30 -75) -76]
Test Case: 495 | Input/Output: [(-64 81 21 96) -64]
Test Case: 496 | Input/Output: [(-51 93 -43 53) -51]
Test Case: 497 | Input/Output: [(69 -30 -83 -54) -83]
Test Case: 498 | Input/Output: [(64 -22 -56 -57) -57]
Test Case: 499 | Input/Output: [(46 10 -25 -88) -88]
Test Case: 500 | Input/Output: [(8 -73 0 61) -73]
Test Case: 501 | Input/Output: [(-5 69 -67 64) -67]
Test Case: 502 | Input/Output: [(-58 48 -69 -50) -69]
Test Case: 503 | Input/Output: [(-45 77 -16 68) -45]
Test Case: 504 | Input/Output: [(64 68 94 76) 64]
Test Case: 505 | Input/Output: [(76 -75 31 -77) -77]
Test Case: 506 | Input/Output: [(90 -67 -50 -81) -81]
Test Case: 507 | Input/Output: [(-34 -96 -54 -27) -96]
Test Case: 508 | Input/Output: [(-96 78 12 49) -96]
Test Case: 509 | Input/Output: [(51 61 -88 -49) -88]
Test Case: 510 | Input/Output: [(48 -15 -38 -29) -38]
Test Case: 511 | Input/Output: [(-42 -65 -100 -25) -100]
Test Case: 512 | Input/Output: [(54 77 29 90) 29]
Test Case: 513 | Input/Output: [(-81 -42 -55 -75) -81]
Test Case: 514 | Input/Output: [(-80 84 75 -20) -80]
Test Case: 515 | Input/Output: [(51 -30 65 -61) -61]
Test Case: 516 | Input/Output: [(-16 71 22 82) -16]
Test Case: 517 | Input/Output: [(62 36 -77 -72) -77]
Test Case: 518 | Input/Output: [(64 26 -73 -75) -75]
Test Case: 519 | Input/Output: [(-79 75 4 93) -79]
Test Case: 520 | Input/Output: [(-6 -21 65 82) -21]
Test Case: 521 | Input/Output: [(99 -81 65 64) -81]
Test Case: 522 | Input/Output: [(-58 -45 88 -36) -58]
Test Case: 523 | Input/Output: [(-38 -18 82 0) -38]
Test Case: 524 | Input/Output: [(82 -37 98 -44) -44]
Test Case: 525 | Input/Output: [(-85 78 26 14) -85]
Test Case: 526 | Input/Output: [(52 58 -67 -52) -67]
Test Case: 527 | Input/Output: [(20 -14 78 -80) -80]
Test Case: 528 | Input/Output: [(-96 83 91 -78) -96]
Test Case: 529 | Input/Output: [(58 90 87 -30) -30]
Test Case: 530 | Input/Output: [(88 3 -87 -90) -90]
Test Case: 531 | Input/Output: [(72 71 5 60) 5]
Test Case: 532 | Input/Output: [(-99 10 73 60) -99]
Test Case: 533 | Input/Output: [(-78 -97 -92 -96) -97]
Test Case: 534 | Input/Output: [(64 -12 87 10) -12]
Test Case: 535 | Input/Output: [(53 19 -25 29) -25]
Test Case: 536 | Input/Output: [(-15 -16 98 -97) -97]
Test Case: 537 | Input/Output: [(-69 68 -7 -73) -73]
Test Case: 538 | Input/Output: [(-100 -89 -6 -93) -100]
Test Case: 539 | Input/Output: [(27 -27 59 -49) -49]
Test Case: 540 | Input/Output: [(79 30 -18 -5) -18]
Test Case: 541 | Input/Output: [(27 88 -54 -64) -64]
Test Case: 542 | Input/Output: [(-39 25 76 33) -39]
Test Case: 543 | Input/Output: [(77 87 61 52) 52]
Test Case: 544 | Input/Output: [(10 -79 -13 48) -79]
Test Case: 545 | Input/Output: [(62 34 88 10) 10]
Test Case: 546 | Input/Output: [(75 39 92 -60) -60]
Test Case: 547 | Input/Output: [(-75 15 -14 81) -75]
Test Case: 548 | Input/Output: [(11 -9 50 -43) -43]
Test Case: 549 | Input/Output: [(83 -66 -31 -53) -66]
Test Case: 550 | Input/Output: [(9 -8 51 68) -8]
Test Case: 551 | Input/Output: [(38 38 42 -28) -28]
Test Case: 552 | Input/Output: [(-78 69 98 -31) -78]
Test Case: 553 | Input/Output: [(86 -99 -78 66) -99]
Test Case: 554 | Input/Output: [(65 18 -25 38) -25]
Test Case: 555 | Input/Output: [(72 87 45 -27) -27]
Test Case: 556 | Input/Output: [(26 75 24 -59) -59]
Test Case: 557 | Input/Output: [(-42 81 92 -90) -90]
Test Case: 558 | Input/Output: [(64 -28 43 17) -28]
Test Case: 559 | Input/Output: [(-11 -68 37 -53) -68]
Test Case: 560 | Input/Output: [(-34 -97 18 -13) -97]
Test Case: 561 | Input/Output: [(72 75 -41 3) -41]
Test Case: 562 | Input/Output: [(14 -47 68 -13) -47]
Test Case: 563 | Input/Output: [(34 50 -37 -72) -72]
Test Case: 564 | Input/Output: [(-12 -14 39 65) -14]
Test Case: 565 | Input/Output: [(71 -16 24 -79) -79]
Test Case: 566 | Input/Output: [(-16 87 34 20) -16]
Test Case: 567 | Input/Output: [(-21 -68 -100 -20) -100]
Test Case: 568 | Input/Output: [(49 37 83 -31) -31]
Test Case: 569 | Input/Output: [(-85 42 -40 -98) -98]
Test Case: 570 | Input/Output: [(-50 -82 -51 -22) -82]
Test Case: 571 | Input/Output: [(15 -79 -1 -81) -81]
Test Case: 572 | Input/Output: [(-98 8 30 68) -98]
Test Case: 573 | Input/Output: [(-75 -47 -93 17) -93]
Test Case: 574 | Input/Output: [(-87 14 83 -21) -87]
Test Case: 575 | Input/Output: [(-32 -77 -48 80) -77]
Test Case: 576 | Input/Output: [(50 1 55 12) 1]
Test Case: 577 | Input/Output: [(92 18 53 -70) -70]
Test Case: 578 | Input/Output: [(33 -37 53 -71) -71]
Test Case: 579 | Input/Output: [(71 -39 40 61) -39]
Test Case: 580 | Input/Output: [(3 -33 -21 70) -33]
Test Case: 581 | Input/Output: [(48 -24 -58 71) -58]
Test Case: 582 | Input/Output: [(84 -94 -66 -89) -94]
Test Case: 583 | Input/Output: [(-15 26 -49 -68) -68]
Test Case: 584 | Input/Output: [(-53 -43 -80 -66) -80]
Test Case: 585 | Input/Output: [(-20 -43 44 61) -43]
Test Case: 586 | Input/Output: [(59 33 82 38) 33]
Test Case: 587 | Input/Output: [(-76 43 72 -95) -95]
Test Case: 588 | Input/Output: [(36 7 -32 -93) -93]
Test Case: 589 | Input/Output: [(5 -60 84 -92) -92]
Test Case: 590 | Input/Output: [(-68 34 -57 -88) -88]
Test Case: 591 | Input/Output: [(-65 94 -47 72) -65]
Test Case: 592 | Input/Output: [(7 42 -19 -1) -19]
Test Case: 593 | Input/Output: [(38 66 -35 -26) -35]
Test Case: 594 | Input/Output: [(63 66 -98 -30) -98]
Test Case: 595 | Input/Output: [(85 25 14 83) 14]
Test Case: 596 | Input/Output: [(-17 64 49 98) -17]
Test Case: 597 | Input/Output: [(-3 -67 69 70) -67]
Test Case: 598 | Input/Output: [(-36 -43 -17 -99) -99]
Test Case: 599 | Input/Output: [(41 19 -53 32) -53]
Test Case: 600 | Input/Output: [(-7 28 -72 -32) -72]
Test Case: 601 | Input/Output: [(-65 -87 55 -50) -87]
Test Case: 602 | Input/Output: [(-24 -89 -14 -43) -89]
Test Case: 603 | Input/Output: [(-40 -4 67 62) -40]
Test Case: 604 | Input/Output: [(83 37 -74 71) -74]
Test Case: 605 | Input/Output: [(74 78 -34 -98) -98]
Test Case: 606 | Input/Output: [(58 -27 -98 32) -98]
Test Case: 607 | Input/Output: [(-83 35 13 24) -83]
Test Case: 608 | Input/Output: [(-41 -15 -54 -88) -88]
Test Case: 609 | Input/Output: [(2 98 -11 -96) -96]
Test Case: 610 | Input/Output: [(43 -43 57 66) -43]
Test Case: 611 | Input/Output: [(-48 -11 -95 95) -95]
Test Case: 612 | Input/Output: [(20 62 -39 -98) -98]
Test Case: 613 | Input/Output: [(-43 89 -41 -64) -64]
Test Case: 614 | Input/Output: [(-15 64 96 18) -15]
Test Case: 615 | Input/Output: [(13 -72 48 25) -72]
Test Case: 616 | Input/Output: [(-34 37 84 32) -34]
Test Case: 617 | Input/Output: [(-19 -82 -13 -37) -82]
Test Case: 618 | Input/Output: [(82 -66 69 -64) -66]
Test Case: 619 | Input/Output: [(3 -98 86 22) -98]
Test Case: 620 | Input/Output: [(90 6 -51 -96) -96]
Test Case: 621 | Input/Output: [(49 -10 -89 64) -89]
Test Case: 622 | Input/Output: [(-40 92 86 63) -40]
Test Case: 623 | Input/Output: [(-41 87 -81 -36) -81]
Test Case: 624 | Input/Output: [(15 37 -35 -53) -53]
Test Case: 625 | Input/Output: [(87 17 -47 6) -47]
Test Case: 626 | Input/Output: [(-37 34 -8 -8) -37]
Test Case: 627 | Input/Output: [(-18 60 46 33) -18]
Test Case: 628 | Input/Output: [(-13 96 -38 93) -38]
Test Case: 629 | Input/Output: [(60 -11 68 64) -11]
Test Case: 630 | Input/Output: [(45 -73 74 44) -73]
Test Case: 631 | Input/Output: [(-99 -73 -26 36) -99]
Test Case: 632 | Input/Output: [(-98 51 -19 -35) -98]
Test Case: 633 | Input/Output: [(-90 10 2 -92) -92]
Test Case: 634 | Input/Output: [(-52 8 -89 34) -89]
Test Case: 635 | Input/Output: [(70 70 -25 40) -25]
Test Case: 636 | Input/Output: [(-36 73 -55 63) -55]
Test Case: 637 | Input/Output: [(94 -76 -37 -50) -76]
Test Case: 638 | Input/Output: [(91 -6 -48 -62) -62]
Test Case: 639 | Input/Output: [(-14 49 10 51) -14]
Test Case: 640 | Input/Output: [(-17 -27 -56 81) -56]
Test Case: 641 | Input/Output: [(-16 64 48 97) -16]
Test Case: 642 | Input/Output: [(9 -40 77 -22) -40]
Test Case: 643 | Input/Output: [(-63 -40 -56 -1) -63]
Test Case: 644 | Input/Output: [(-20 76 73 -6) -20]
Test Case: 645 | Input/Output: [(88 92 -74 95) -74]
Test Case: 646 | Input/Output: [(14 13 -54 -21) -54]
Test Case: 647 | Input/Output: [(-22 -5 -69 -63) -69]
Test Case: 648 | Input/Output: [(-92 -42 4 -42) -92]
Test Case: 649 | Input/Output: [(-70 -2 -98 1) -98]
Test Case: 650 | Input/Output: [(22 26 -59 -35) -59]
Test Case: 651 | Input/Output: [(-22 -45 65 29) -45]
Test Case: 652 | Input/Output: [(-72 -68 -59 -53) -72]
Test Case: 653 | Input/Output: [(-77 -57 47 40) -77]
Test Case: 654 | Input/Output: [(42 -35 88 39) -35]
Test Case: 655 | Input/Output: [(-30 -6 -81 -11) -81]
Test Case: 656 | Input/Output: [(-70 7 55 94) -70]
Test Case: 657 | Input/Output: [(-35 -17 -24 -41) -41]
Test Case: 658 | Input/Output: [(-14 73 -31 -64) -64]
Test Case: 659 | Input/Output: [(30 92 -90 95) -90]
Test Case: 660 | Input/Output: [(40 -80 45 79) -80]
Test Case: 661 | Input/Output: [(19 -7 -81 55) -81]
Test Case: 662 | Input/Output: [(0 15 22 -98) -98]
Test Case: 663 | Input/Output: [(-84 -23 -92 -34) -92]
Test Case: 664 | Input/Output: [(38 -47 -50 -56) -56]
Test Case: 665 | Input/Output: [(33 -93 58 85) -93]
Test Case: 666 | Input/Output: [(16 54 -7 87) -7]
Test Case: 667 | Input/Output: [(43 50 -17 -81) -81]
Test Case: 668 | Input/Output: [(-14 -24 -32 -68) -68]
Test Case: 669 | Input/Output: [(79 -98 -3 5) -98]
Test Case: 670 | Input/Output: [(52 90 -53 -58) -58]
Test Case: 671 | Input/Output: [(49 66 93 26) 26]
Test Case: 672 | Input/Output: [(-23 51 52 63) -23]
Test Case: 673 | Input/Output: [(31 21 63 93) 21]
Test Case: 674 | Input/Output: [(-61 -79 -16 89) -79]
Test Case: 675 | Input/Output: [(-45 4 16 100) -45]
Test Case: 676 | Input/Output: [(-32 -86 -75 -38) -86]
Test Case: 677 | Input/Output: [(48 15 97 23) 15]
Test Case: 678 | Input/Output: [(-55 78 26 -94) -94]
Test Case: 679 | Input/Output: [(35 57 -44 -53) -53]
Test Case: 680 | Input/Output: [(-58 -41 -35 -75) -75]
Test Case: 681 | Input/Output: [(37 76 -57 -18) -57]
Test Case: 682 | Input/Output: [(-99 57 -77 -87) -99]
Test Case: 683 | Input/Output: [(78 -31 -32 -44) -44]
Test Case: 684 | Input/Output: [(-71 -33 -77 -69) -77]
Test Case: 685 | Input/Output: [(76 -100 -95 -26) -100]
Test Case: 686 | Input/Output: [(-82 78 56 -42) -82]
Test Case: 687 | Input/Output: [(-62 -83 -49 26) -83]
Test Case: 688 | Input/Output: [(-16 -50 45 -97) -97]
Test Case: 689 | Input/Output: [(18 -86 -70 2) -86]
Test Case: 690 | Input/Output: [(34 68 -68 36) -68]
Test Case: 691 | Input/Output: [(-99 -68 38 2) -99]
Test Case: 692 | Input/Output: [(43 79 -21 -44) -44]
Test Case: 693 | Input/Output: [(-15 -40 -69 -80) -80]
Test Case: 694 | Input/Output: [(-35 86 86 62) -35]
Test Case: 695 | Input/Output: [(30 -71 40 -22) -71]
Test Case: 696 | Input/Output: [(-40 -28 -59 11) -59]
Test Case: 697 | Input/Output: [(51 -52 -36 7) -52]
Test Case: 698 | Input/Output: [(-7 23 64 85) -7]
Test Case: 699 | Input/Output: [(69 -67 53 -98) -98]
Test Case: 700 | Input/Output: [(74 -61 -78 65) -78]
Test Case: 701 | Input/Output: [(-18 92 -7 18) -18]
Test Case: 702 | Input/Output: [(-90 53 -35 -59) -90]
Test Case: 703 | Input/Output: [(-8 39 -24 -11) -24]
Test Case: 704 | Input/Output: [(21 -80 6 -10) -80]
Test Case: 705 | Input/Output: [(14 67 84 -44) -44]
Test Case: 706 | Input/Output: [(5 -34 65 -50) -50]
Test Case: 707 | Input/Output: [(54 -87 -14 -32) -87]
Test Case: 708 | Input/Output: [(-19 84 96 -20) -20]
Test Case: 709 | Input/Output: [(47 21 68 -95) -95]
Test Case: 710 | Input/Output: [(8 6 46 7) 6]
Test Case: 711 | Input/Output: [(-12 -79 11 6) -79]
Test Case: 712 | Input/Output: [(53 -17 -59 17) -59]
Test Case: 713 | Input/Output: [(56 66 -1 -8) -8]
Test Case: 714 | Input/Output: [(-48 10 63 -8) -48]
Test Case: 715 | Input/Output: [(-87 2 -71 65) -87]
Test Case: 716 | Input/Output: [(-4 -63 1 -89) -89]
Test Case: 717 | Input/Output: [(-75 36 80 -13) -75]
Test Case: 718 | Input/Output: [(-60 34 -27 12) -60]
Test Case: 719 | Input/Output: [(-68 39 52 -30) -68]
Test Case: 720 | Input/Output: [(83 17 -90 -57) -90]
Test Case: 721 | Input/Output: [(15 -56 -27 84) -56]
Test Case: 722 | Input/Output: [(67 -62 -88 69) -88]
Test Case: 723 | Input/Output: [(18 91 73 -92) -92]
Test Case: 724 | Input/Output: [(-18 -38 41 -7) -38]
Test Case: 725 | Input/Output: [(-96 23 73 -26) -96]
Test Case: 726 | Input/Output: [(-26 -46 15 -1) -46]
Test Case: 727 | Input/Output: [(-74 37 77 93) -74]
Test Case: 728 | Input/Output: [(21 86 -89 -69) -89]
Test Case: 729 | Input/Output: [(94 58 -11 45) -11]
Test Case: 730 | Input/Output: [(-54 48 -27 -7) -54]
Test Case: 731 | Input/Output: [(46 21 -9 -14) -14]
Test Case: 732 | Input/Output: [(41 40 -7 9) -7]
Test Case: 733 | Input/Output: [(-20 59 -75 86) -75]
Test Case: 734 | Input/Output: [(74 25 -91 18) -91]
Test Case: 735 | Input/Output: [(-50 30 54 51) -50]
Test Case: 736 | Input/Output: [(-73 -22 76 -96) -96]
Test Case: 737 | Input/Output: [(-81 35 58 -95) -95]
Test Case: 738 | Input/Output: [(-87 8 36 5) -87]
Test Case: 739 | Input/Output: [(-31 -100 69 -86) -100]
Test Case: 740 | Input/Output: [(26 23 70 -93) -93]
Test Case: 741 | Input/Output: [(88 -73 54 -26) -73]
Test Case: 742 | Input/Output: [(-46 -5 88 -93) -93]
Test Case: 743 | Input/Output: [(99 28 -88 -52) -88]
Test Case: 744 | Input/Output: [(37 61 63 -19) -19]
Test Case: 745 | Input/Output: [(23 24 -94 -56) -94]
Test Case: 746 | Input/Output: [(9 -24 26 -25) -25]
Test Case: 747 | Input/Output: [(-31 -70 -21 19) -70]
Test Case: 748 | Input/Output: [(-47 51 -27 62) -47]
Test Case: 749 | Input/Output: [(96 6 86 -95) -95]
Test Case: 750 | Input/Output: [(11 -13 -34 -45) -45]
Test Case: 751 | Input/Output: [(39 34 -98 54) -98]
Test Case: 752 | Input/Output: [(-5 -27 0 -60) -60]
Test Case: 753 | Input/Output: [(-26 -80 -14 -91) -91]
Test Case: 754 | Input/Output: [(31 34 -90 4) -90]
Test Case: 755 | Input/Output: [(15 -71 10 -12) -71]
Test Case: 756 | Input/Output: [(-35 21 -50 -20) -50]
Test Case: 757 | Input/Output: [(18 -28 24 -75) -75]
Test Case: 758 | Input/Output: [(-4 -56 -5 -15) -56]
Test Case: 759 | Input/Output: [(-46 8 -48 13) -48]
Test Case: 760 | Input/Output: [(-43 74 -77 73) -77]
Test Case: 761 | Input/Output: [(-80 -57 -68 8) -80]
Test Case: 762 | Input/Output: [(-38 4 -26 -5) -38]
Test Case: 763 | Input/Output: [(-18 33 -67 -3) -67]
Test Case: 764 | Input/Output: [(10 -30 -74 20) -74]
Test Case: 765 | Input/Output: [(8 63 -33 97) -33]
Test Case: 766 | Input/Output: [(-24 -35 47 -3) -35]
Test Case: 767 | Input/Output: [(-56 73 39 63) -56]
Test Case: 768 | Input/Output: [(50 -62 49 -68) -68]
Test Case: 769 | Input/Output: [(-19 -100 22 67) -100]
Test Case: 770 | Input/Output: [(-24 31 3 21) -24]
Test Case: 771 | Input/Output: [(-56 79 58 -22) -56]
Test Case: 772 | Input/Output: [(79 41 -67 61) -67]
Test Case: 773 | Input/Output: [(17 -56 26 87) -56]
Test Case: 774 | Input/Output: [(39 32 20 44) 20]
Test Case: 775 | Input/Output: [(-4 63 43 78) -4]
Test Case: 776 | Input/Output: [(-92 81 74 68) -92]
Test Case: 777 | Input/Output: [(100 -88 -54 66) -88]
Test Case: 778 | Input/Output: [(53 75 57 -42) -42]
Test Case: 779 | Input/Output: [(81 -69 -67 -63) -69]
Test Case: 780 | Input/Output: [(36 -37 0 2) -37]
Test Case: 781 | Input/Output: [(-62 -80 -68 -96) -96]
Test Case: 782 | Input/Output: [(-83 -46 48 15) -83]
Test Case: 783 | Input/Output: [(88 24 79 -13) -13]
Test Case: 784 | Input/Output: [(-36 71 15 40) -36]
Test Case: 785 | Input/Output: [(83 -27 79 -64) -64]
Test Case: 786 | Input/Output: [(-81 93 72 20) -81]
Test Case: 787 | Input/Output: [(-42 -82 41 64) -82]
Test Case: 788 | Input/Output: [(-78 -77 14 4) -78]
Test Case: 789 | Input/Output: [(2 -93 -3 94) -93]
Test Case: 790 | Input/Output: [(98 -89 18 -50) -89]
Test Case: 791 | Input/Output: [(-32 73 57 -88) -88]
Test Case: 792 | Input/Output: [(-10 39 -2 -86) -86]
Test Case: 793 | Input/Output: [(13 -94 66 -73) -94]
Test Case: 794 | Input/Output: [(74 47 70 34) 34]
Test Case: 795 | Input/Output: [(-34 64 -70 75) -70]
Test Case: 796 | Input/Output: [(-65 -34 6 3) -65]
Test Case: 797 | Input/Output: [(54 -72 19 -88) -88]
Test Case: 798 | Input/Output: [(31 -21 -90 -23) -90]
Test Case: 799 | Input/Output: [(-75 -96 -4 -63) -96]
Test Case: 800 | Input/Output: [(30 -92 21 -66) -92]
Test Case: 801 | Input/Output: [(39 -29 -66 -54) -66]
Test Case: 802 | Input/Output: [(-97 51 2 -16) -97]
Test Case: 803 | Input/Output: [(70 -49 -29 -57) -57]
Test Case: 804 | Input/Output: [(-100 19 6 54) -100]
Test Case: 805 | Input/Output: [(-91 -16 -58 9) -91]
Test Case: 806 | Input/Output: [(81 -48 -15 64) -48]
Test Case: 807 | Input/Output: [(-96 73 -42 -62) -96]
Test Case: 808 | Input/Output: [(-66 -53 -50 -52) -66]
Test Case: 809 | Input/Output: [(19 -29 -53 -17) -53]
Test Case: 810 | Input/Output: [(-38 68 15 -10) -38]
Test Case: 811 | Input/Output: [(-5 8 -99 10) -99]
Test Case: 812 | Input/Output: [(68 67 -44 -16) -44]
Test Case: 813 | Input/Output: [(-84 -1 -55 -37) -84]
Test Case: 814 | Input/Output: [(-17 -78 6 -68) -78]
Test Case: 815 | Input/Output: [(82 -95 33 58) -95]
Test Case: 816 | Input/Output: [(96 -42 -1 -60) -60]
Test Case: 817 | Input/Output: [(-8 32 51 54) -8]
Test Case: 818 | Input/Output: [(83 98 49 -33) -33]
Test Case: 819 | Input/Output: [(-58 70 11 -66) -66]
Test Case: 820 | Input/Output: [(26 30 -21 96) -21]
Test Case: 821 | Input/Output: [(68 -30 57 -27) -30]
Test Case: 822 | Input/Output: [(67 -71 -84 9) -84]
Test Case: 823 | Input/Output: [(-81 17 -86 91) -86]
Test Case: 824 | Input/Output: [(-10 -71 -100 -51) -100]
Test Case: 825 | Input/Output: [(39 60 54 -81) -81]
Test Case: 826 | Input/Output: [(70 69 -23 37) -23]
Test Case: 827 | Input/Output: [(8 -46 59 -71) -71]
Test Case: 828 | Input/Output: [(11 31 14 -67) -67]
Test Case: 829 | Input/Output: [(72 -49 8 65) -49]
Test Case: 830 | Input/Output: [(-27 81 61 74) -27]
Test Case: 831 | Input/Output: [(-95 -13 77 -21) -95]
Test Case: 832 | Input/Output: [(67 -84 -79 -100) -100]
Test Case: 833 | Input/Output: [(-32 15 77 49) -32]
Test Case: 834 | Input/Output: [(97 -89 36 -39) -89]
Test Case: 835 | Input/Output: [(83 21 39 47) 21]
Test Case: 836 | Input/Output: [(-52 -73 -77 -84) -84]
Test Case: 837 | Input/Output: [(87 66 68 86) 66]
Test Case: 838 | Input/Output: [(-93 -6 -60 17) -93]
Test Case: 839 | Input/Output: [(-25 100 92 96) -25]
Test Case: 840 | Input/Output: [(25 91 -5 -53) -53]
Test Case: 841 | Input/Output: [(-99 20 79 -9) -99]
Test Case: 842 | Input/Output: [(-96 -20 -55 -3) -96]
Test Case: 843 | Input/Output: [(41 52 -24 -47) -47]
Test Case: 844 | Input/Output: [(8 25 36 55) 8]
Test Case: 845 | Input/Output: [(7 77 -18 -41) -41]
Test Case: 846 | Input/Output: [(-11 -65 66 -39) -65]
Test Case: 847 | Input/Output: [(-15 -42 22 -95) -95]
Test Case: 848 | Input/Output: [(-71 -98 86 8) -98]
Test Case: 849 | Input/Output: [(-51 66 -90 -70) -90]
Test Case: 850 | Input/Output: [(-79 99 28 -94) -94]
Test Case: 851 | Input/Output: [(-14 28 13 -55) -55]
Test Case: 852 | Input/Output: [(-31 -6 -60 -10) -60]
Test Case: 853 | Input/Output: [(-77 69 76 -86) -86]
Test Case: 854 | Input/Output: [(33 66 95 53) 33]
Test Case: 855 | Input/Output: [(59 -85 -29 28) -85]
Test Case: 856 | Input/Output: [(-37 86 -3 43) -37]
Test Case: 857 | Input/Output: [(69 63 99 -68) -68]
Test Case: 858 | Input/Output: [(69 -57 76 15) -57]
Test Case: 859 | Input/Output: [(30 5 0 28) 0]
Test Case: 860 | Input/Output: [(-50 -58 -15 12) -58]
Test Case: 861 | Input/Output: [(-18 82 -69 2) -69]
Test Case: 862 | Input/Output: [(-20 38 -65 -77) -77]
Test Case: 863 | Input/Output: [(83 88 65 18) 18]
Test Case: 864 | Input/Output: [(59 66 69 73) 59]
Test Case: 865 | Input/Output: [(75 36 94 100) 36]
Test Case: 866 | Input/Output: [(-92 -92 18 -3) -92]
Test Case: 867 | Input/Output: [(-58 89 51 -63) -63]
Test Case: 868 | Input/Output: [(-100 -5 -48 -95) -100]
Test Case: 869 | Input/Output: [(42 -69 94 63) -69]
Test Case: 870 | Input/Output: [(-95 -28 39 -55) -95]
Test Case: 871 | Input/Output: [(-6 -70 -84 5) -84]
Test Case: 872 | Input/Output: [(57 33 -26 54) -26]
Test Case: 873 | Input/Output: [(67 7 82 24) 7]
Test Case: 874 | Input/Output: [(-14 30 -83 -91) -91]
Test Case: 875 | Input/Output: [(-57 31 50 33) -57]
Test Case: 876 | Input/Output: [(-54 -62 33 40) -62]
Test Case: 877 | Input/Output: [(36 76 -65 -44) -65]
Test Case: 878 | Input/Output: [(45 -62 5 -94) -94]
Test Case: 879 | Input/Output: [(-13 5 12 83) -13]
Test Case: 880 | Input/Output: [(-68 -32 100 -65) -68]
Test Case: 881 | Input/Output: [(34 8 -5 -35) -35]
Test Case: 882 | Input/Output: [(16 57 21 66) 16]
Test Case: 883 | Input/Output: [(-44 36 -9 -49) -49]
Test Case: 884 | Input/Output: [(-52 23 -21 -27) -52]
Test Case: 885 | Input/Output: [(66 49 -59 -93) -93]
Test Case: 886 | Input/Output: [(-70 -94 33 44) -94]
Test Case: 887 | Input/Output: [(100 -94 87 59) -94]
Test Case: 888 | Input/Output: [(-49 44 94 -67) -67]
Test Case: 889 | Input/Output: [(-95 12 -32 2) -95]
Test Case: 890 | Input/Output: [(-59 58 -65 64) -65]
Test Case: 891 | Input/Output: [(-94 -84 -96 -3) -96]
Test Case: 892 | Input/Output: [(11 -35 63 -40) -40]
Test Case: 893 | Input/Output: [(-64 43 -34 -30) -64]
Test Case: 894 | Input/Output: [(-86 -27 -18 66) -86]
Test Case: 895 | Input/Output: [(-14 39 51 52) -14]
Test Case: 896 | Input/Output: [(51 -9 97 90) -9]
Test Case: 897 | Input/Output: [(-70 -48 -89 -7) -89]
Test Case: 898 | Input/Output: [(20 -75 -86 -3) -86]
Test Case: 899 | Input/Output: [(-36 55 51 65) -36]
Test Case: 900 | Input/Output: [(24 -68 15 97) -68]
Test Case: 901 | Input/Output: [(2 -47 -21 12) -47]
Test Case: 902 | Input/Output: [(60 7 8 90) 7]
Test Case: 903 | Input/Output: [(83 55 60 23) 23]
Test Case: 904 | Input/Output: [(40 -15 -75 61) -75]
Test Case: 905 | Input/Output: [(34 56 29 -84) -84]
Test Case: 906 | Input/Output: [(-24 75 19 23) -24]
Test Case: 907 | Input/Output: [(58 1 -25 53) -25]
Test Case: 908 | Input/Output: [(80 94 46 -20) -20]
Test Case: 909 | Input/Output: [(-84 74 39 44) -84]
Test Case: 910 | Input/Output: [(-100 76 93 -52) -100]
Test Case: 911 | Input/Output: [(-100 60 -85 -49) -100]
Test Case: 912 | Input/Output: [(74 68 23 54) 23]
Test Case: 913 | Input/Output: [(-92 1 -85 95) -92]
Test Case: 914 | Input/Output: [(65 98 3 -51) -51]
Test Case: 915 | Input/Output: [(62 -86 75 81) -86]
Test Case: 916 | Input/Output: [(-31 -10 38 47) -31]
Test Case: 917 | Input/Output: [(47 52 65 -13) -13]
Test Case: 918 | Input/Output: [(-75 -6 40 31) -75]
Test Case: 919 | Input/Output: [(21 26 -28 -65) -65]
Test Case: 920 | Input/Output: [(-86 -18 99 46) -86]
Test Case: 921 | Input/Output: [(-34 -36 31 83) -36]
Test Case: 922 | Input/Output: [(-47 -39 71 74) -47]
Test Case: 923 | Input/Output: [(86 -76 44 8) -76]
Test Case: 924 | Input/Output: [(26 87 -11 -84) -84]
Test Case: 925 | Input/Output: [(-16 9 86 52) -16]
Test Case: 926 | Input/Output: [(66 -89 -63 -43) -89]
Test Case: 927 | Input/Output: [(37 97 64 69) 37]
Test Case: 928 | Input/Output: [(0 -63 -86 80) -86]
Test Case: 929 | Input/Output: [(-7 4 100 -17) -17]
Test Case: 930 | Input/Output: [(6 -71 52 -61) -71]
Test Case: 931 | Input/Output: [(-67 -20 -76 -84) -84]
Test Case: 932 | Input/Output: [(96 56 -51 -32) -51]
Test Case: 933 | Input/Output: [(67 21 52 -59) -59]
Test Case: 934 | Input/Output: [(-85 -70 55 100) -85]
Test Case: 935 | Input/Output: [(-18 42 60 -77) -77]
Test Case: 936 | Input/Output: [(87 -83 -73 6) -83]
Test Case: 937 | Input/Output: [(6 71 32 1) 1]
Test Case: 938 | Input/Output: [(-4 -38 80 -94) -94]
Test Case: 939 | Input/Output: [(17 78 -75 -4) -75]
Test Case: 940 | Input/Output: [(70 40 26 -29) -29]
Test Case: 941 | Input/Output: [(26 28 60 83) 26]
Test Case: 942 | Input/Output: [(-60 40 -92 67) -92]
Test Case: 943 | Input/Output: [(-81 53 35 -35) -81]
Test Case: 944 | Input/Output: [(32 11 -39 38) -39]
Test Case: 945 | Input/Output: [(33 -54 -2 1) -54]
Test Case: 946 | Input/Output: [(-27 23 10 3) -27]
Test Case: 947 | Input/Output: [(-77 -44 -66 -92) -92]
Test Case: 948 | Input/Output: [(43 -69 -30 -82) -82]
Test Case: 949 | Input/Output: [(20 -22 14 -56) -56]
Test Case: 950 | Input/Output: [(59 -33 -12 89) -33]
Test Case: 951 | Input/Output: [(-37 2 18 -100) -100]
Test Case: 952 | Input/Output: [(-38 -26 -39 53) -39]
Test Case: 953 | Input/Output: [(25 -96 76 97) -96]
Test Case: 954 | Input/Output: [(45 19 72 19) 19]
Test Case: 955 | Input/Output: [(78 58 -74 -17) -74]
Test Case: 956 | Input/Output: [(-50 -47 3 -1) -50]
Test Case: 957 | Input/Output: [(-96 -23 -42 -70) -96]
Test Case: 958 | Input/Output: [(-90 -13 -17 -8) -90]
Test Case: 959 | Input/Output: [(26 17 -9 0) -9]
Test Case: 960 | Input/Output: [(89 4 -50 91) -50]
Test Case: 961 | Input/Output: [(-78 88 51 86) -78]
Test Case: 962 | Input/Output: [(30 -42 -10 57) -42]
Test Case: 963 | Input/Output: [(56 -33 94 -4) -33]
Test Case: 964 | Input/Output: [(41 -11 58 -23) -23]
Test Case: 965 | Input/Output: [(-88 8 -1 86) -88]
Test Case: 966 | Input/Output: [(-21 -5 -19 52) -21]
Test Case: 967 | Input/Output: [(93 -74 90 -18) -74]
Test Case: 968 | Input/Output: [(-15 98 -75 71) -75]
Test Case: 969 | Input/Output: [(66 -62 51 18) -62]
Test Case: 970 | Input/Output: [(69 -39 80 -90) -90]
Test Case: 971 | Input/Output: [(90 -72 -58 -86) -86]
Test Case: 972 | Input/Output: [(-42 75 -20 0) -42]
Test Case: 973 | Input/Output: [(-19 71 -10 -83) -83]
Test Case: 974 | Input/Output: [(-57 5 -67 -52) -67]
Test Case: 975 | Input/Output: [(31 55 -56 -3) -56]
Test Case: 976 | Input/Output: [(44 -37 82 -24) -37]
Test Case: 977 | Input/Output: [(-61 47 37 -49) -61]
Test Case: 978 | Input/Output: [(-65 -53 -66 70) -66]
Test Case: 979 | Input/Output: [(52 -54 -70 23) -70]
Test Case: 980 | Input/Output: [(-5 -35 53 96) -35]
Test Case: 981 | Input/Output: [(35 -83 -46 -71) -83]
Test Case: 982 | Input/Output: [(37 -77 -67 55) -77]
Test Case: 983 | Input/Output: [(-86 100 15 -70) -86]
Test Case: 984 | Input/Output: [(-20 -47 20 -58) -58]
Test Case: 985 | Input/Output: [(17 53 -75 97) -75]
Test Case: 986 | Input/Output: [(-60 32 -73 28) -73]
Test Case: 987 | Input/Output: [(-98 -94 19 98) -98]
Test Case: 988 | Input/Output: [(12 81 96 -10) -10]
Test Case: 989 | Input/Output: [(57 91 94 -85) -85]
Test Case: 990 | Input/Output: [(-17 -81 95 -62) -81]
Test Case: 991 | Input/Output: [(31 -67 42 13) -67]
Test Case: 992 | Input/Output: [(12 -17 13 -66) -66]
Test Case: 993 | Input/Output: [(19 4 70 85) 4]
Test Case: 994 | Input/Output: [(94 64 46 79) 46]
Test Case: 995 | Input/Output: [(-90 41 97 -30) -90]
Test Case: 996 | Input/Output: [(64 74 53 37) 37]
Test Case: 997 | Input/Output: [(8 0 34 66) 0]
Test Case: 998 | Input/Output: [(-21 72 64 -62) -62]
Test Case: 999 | Input/Output: [(-45 90 42 19) -45]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
random-screen = false
random-seed = -70 78 -44 28 -44 -2 -118 -85 -22 -61 -21 6 -10 47 -67 61
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-59 -59 -59 11] -59] [[33 33 33 20] 20] [[85 85 85 62] 62] [[-38 -4 -4 -4] -38] [[73 -77 -77 -77] -77] [[-66 -23 -66 -66] -66] [[-41 -41 -41 -62] -62] [[31 36 31 31] 31] [[77 49 49 49] 49] [[95 -42 -42 -42] -42] [(46 46 46 46) 46] [(-51 -51 -51 -51) -51] [(-54 -54 -54 -54) -54] [(-87 -87 -87 -87) -87] [(-69 -69 -69 -69) -69] [(28 81 66 51) 28] [(91 83 90 14) 14] [(16 67 3 21) 3] [(44 13 20 56) 13] [(20 8 18 35) 8] [(17 34 41 95) 17] [(94 9 85 71) 9] [(21 82 42 31) 21] [(7 24 81 68) 7] [(46 43 24 51) 24] [(31 57 62 59) 31] [(45 38 48 58) 38] [(29 19 90 20) 19] [(50 98 15 86) 15] [(56 8 49 88) 8] [(92 58 35 61) 35] [(50 86 75 90) 50] [(48 8 88 35) 8] [(37 100 37 1) 1] [(81 71 70 80) 70] [(38 52 -57 -77) -77] [(-76 -100 -52 -57) -100] [(-13 -24 -72 6) -72] [(-36 50 -63 -58) -63] [(-83 -84 -81 81) -84] [(89 -67 7 -19) -67] [(77 1 -73 -64) -73] [(-56 -73 99 -43) -73] [(-2 -84 33 -13) -84] [(88 -74 28 -8) -74] [(41 17 32 41) 17] [(41 -75 -97 -68) -97] [(82 67 -56 46) -56] [(-45 48 -29 -78) -78] [(-90 -17 21 3) -90] [(57 61 -81 -89) -89] [(94 -90 50 28) -90] [(42 -34 28 20) -34] [(6 -23 100 70) -23] [(21 -79 73 -20) -79] [(64 -70 -10 21) -70] [(-46 41 95 -76) -76] [(90 -99 -66 20) -99] [(-36 -93 47 -51) -93] [(12 -17 -34 4) -34] [(-56 -36 48 88) -56] [(86 12 27 10) 10] [(73 -13 -98 53) -98] [(-2 -29 -36 76) -36] [(-34 -94 -24 4) -94] [(99 -49 -57 -52) -57] [(-37 65 -88 45) -88] [(67 -99 2 -37) -99] [(91 30 39 -91) -91] [(53 17 5 72) 5] [(96 13 6 17) 6] [(77 55 -85 56) -85] [(-79 -65 16 49) -79] [(-87 33 86 -51) -87] [(9 28 -65 35) -65] [(87 -10 82 -66) -66] [(-79 100 -40 -47) -79] [(-55 8 -54 46) -55] [(1 48 -78 46) -78] [(-17 38 78 -97) -97] [(66 99 -16 -13) -16] [(79 45 81 -41) -41] [(29 23 55 -68) -68] [(-86 33 29 -83) -86] [(-46 65 -88 -96) -96] [(-75 -52 -87 -63) -87] [(65 33 71 77) 33] [(-1 15 -16 99) -16] [(42 -13 -79 -20) -79] [(95 74 73 -96) -96] [(-88 -14 -36 7) -88] [(76 11 -4 48) -4] [(-73 71 62 -72) -73] [(62 90 -70 97) -70] [(55 6 11 -6) -6])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -4                 
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 66                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 41                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 42                 
Correct output: 7                   | Program output: 81                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 62                 
Correct output: 38                  | Program output: 48                 
Correct output: 19                  | Program output: 90                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 75                 
Correct output: 8                   | Program output: 88                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -81                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 99                 
Correct output: -84                 | Program output: 33                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -29                
Correct output: -90                 | Program output: 21                 
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 100                
Correct output: -79                 | Program output: 73                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: 95                 
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: 47                 
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: 48                 
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 16                 
Correct output: -87                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -40                
Correct output: -55                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: 78                 
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 81                 
Correct output: -68                 | Program output: 55                 
Correct output: -86                 | Program output: 29                 
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 71                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (in1 integer_eq boolean_swap in3 exec_k (boolean_eq print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq integer_swap) print_integer exec_k_when_autoconstructing (integer_dup boolean_invert_second_then_and integer_lt exec_noop integer_lt exec_pop () integer_eq integer_lte boolean_and boolean_invert_first_then_and exec_k (exec_dup_times (exec_yank integer_eq exec_y (exec_while (exec_rot (integer_inc integer_lt boolean_xor exec_do*count () exec_k_when_autoconstructing () (boolean_pop) boolean_swap exec_if (integer_dup) ()) () ())))) ()) ()))
Lexicase best errors: [1 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (in1 integer_eq boolean_swap in3 exec_k (boolean_eq print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq integer_swap) print_integer exec_k_when_autoconstructing (integer_dup boolean_invert_second_then_and integer_lt exec_noop integer_lt exec_pop () integer_eq integer_lte boolean_and boolean_invert_first_then_and exec_k (exec_dup_times (exec_yank integer_eq exec_y (exec_while (exec_rot (integer_inc integer_lt boolean_xor exec_do*count () exec_k_when_autoconstructing () (boolean_pop) boolean_swap exec_if (integer_dup) ()) () ())))) ()) ()))
Zero cases best errors: [1 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 6 4 6 4 4 17 4 3 4)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 6 4 6 4 4 17 4 3 4)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_884} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_167} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove})
Best program: (integer_sub integer_inc in3 exec_do*while (boolean_stackdepth integer_mod exec_while ()) exec_shove (boolean_invert_first_then_and in3 print_integer integer_swap boolean_empty) integer_lte boolean_invert_second_then_and integer_flush in1 integer_lte integer_stackdepth exec_s_when_autoconstructing (integer_gte integer_inc integer_lte tagged_884) (boolean_flush exec_rot () (integer_pop integer_yank integer_pop tagged_788) (integer_dup_items boolean_and boolean_dup) exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth integer_inc boolean_eq boolean_eq exec_y_when_autoconstructing () boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (boolean_not integer_rot in4 exec_y_when_autoconstructing (exec_pop (exec_stackdepth boolean_pop) exec_empty exec_flush) exec_do*while (boolean_invert_second_then_and exec_do*while (integer_lte integer_dup exec_stackdepth integer_add print_integer exec_do*range () print_integer integer_dup_times boolean_not exec_k_when_autoconstructing (tagged_167 in4 boolean_eq integer_div) (integer_min boolean_shove)))) () ()) ())
Errors: [1 1 1 1 0 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 75
Size: 99
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 9.945
Median total errors in population: 10
Error averages by case: (0.997 0.994 0.996 0.994 0.996 0.996 0.983 0.996 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.374
Average program size in population (points): 68.054
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 451036
--- Timings ---
Current time: 1559314554249 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.7 seconds, 30.4%
Fitness Testing:      1.6 seconds, 65.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -4                 
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 66                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 41                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 42                 
Correct output: 7                   | Program output: 81                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 62                 
Correct output: 38                  | Program output: 48                 
Correct output: 19                  | Program output: 90                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 75                 
Correct output: 8                   | Program output: 88                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -81                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 99                 
Correct output: -84                 | Program output: 33                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -29                
Correct output: -90                 | Program output: 21                 
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 100                
Correct output: -79                 | Program output: 73                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: 95                 
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: 47                 
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: 48                 
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 16                 
Correct output: -87                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -40                
Correct output: -55                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: 78                 
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 81                 
Correct output: -68                 | Program output: 55                 
Correct output: -86                 | Program output: 29                 
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 71                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_206} {:close 0, :instruction tagged_890} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_when} {:close 0, :instruction tagged_349} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -48} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_dup_items boolean_yank integer_swap exec_do*times (integer_flush exec_do*times (tag_integer_206 tagged_890 exec_do*while (exec_yank integer_flush integer_gte exec_when ()) tagged_349 integer_eq integer_rot boolean_pop) boolean_dup_times) print_boolean exec_s (integer_yankdup boolean_yank print_integer integer_rot integer_gte in4 integer_inc integer_empty exec_y_when_autoconstructing (exec_dup_items) boolean_stackdepth integer_yankdup exec_s_when_autoconstructing (exec_do*times () exec_yankdup) (print_integer exec_do*range (integer_shove) exec_k (in3 print_integer exec_flush boolean_xor integer_div exec_do*times (integer_dup_items exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_while (exec_yank) integer_max boolean_eq exec_do*while (integer_dup_items) exec_when (exec_s_when_autoconstructing () (-48 exec_dup_items integer_yank) () exec_s (integer_min integer_lte integer_dup exec_k_when_autoconstructing (integer_gte exec_do*times () in1 tag_boolean_500 integer_pop integer_empty exec_swap (integer_dup exec_do*times () boolean_frominteger exec_while () exec_if (integer_empty boolean_xor print_integer boolean_yank exec_empty exec_shove () integer_gt boolean_frominteger exec_dup_times (exec_k_when_autoconstructing (integer_gte integer_eq boolean_swap) ())) ()) ()) ()) () ())))) ()) ()) () ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 130
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_206} {:close 0, :instruction tagged_890} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_when} {:close 0, :instruction tagged_349} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -48} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_500} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_dup_items boolean_yank integer_swap exec_do*times (integer_flush exec_do*times (tag_integer_206 tagged_890 exec_do*while (exec_yank integer_flush integer_gte exec_when ()) tagged_349 integer_eq integer_rot boolean_pop) boolean_dup_times) print_boolean exec_s (integer_yankdup boolean_yank print_integer integer_rot integer_gte in4 integer_inc integer_empty exec_y_when_autoconstructing (exec_dup_items) boolean_stackdepth integer_yankdup exec_s_when_autoconstructing (exec_do*times () exec_yankdup) (print_integer exec_do*range (integer_shove) exec_k (in3 print_integer exec_flush boolean_xor integer_div exec_do*times (integer_dup_items exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_while (exec_yank) integer_max boolean_eq exec_do*while (integer_dup_items) exec_when (exec_s_when_autoconstructing () (-48 exec_dup_items integer_yank) () exec_s (integer_min integer_lte integer_dup exec_k_when_autoconstructing (integer_gte exec_do*times () in1 tag_boolean_500 integer_pop integer_empty exec_swap (integer_dup exec_do*times () boolean_frominteger exec_while () exec_if (integer_empty boolean_xor print_integer boolean_yank exec_empty exec_shove () integer_gt boolean_frominteger exec_dup_times (exec_k_when_autoconstructing (integer_gte integer_eq boolean_swap) ())) ()) ()) ()) () ())))) ()) ()) () ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 130
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (430 1000 430 430 852 187 1000 190 1000 658)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (430 0 430 430 852 187 0 190 0 658)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_610} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 2, :instruction tagged_817} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_239} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction -41} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove})
Best program: (in1 integer_eq boolean_swap in3 exec_k (boolean_eq print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq integer_swap) print_integer exec_k_when_autoconstructing (integer_add print_integer integer_shove) (boolean_swap) tagged_610 in4 integer_mod in3 boolean_pop integer_stackdepth exec_if (exec_dup_items integer_div) (boolean_and exec_swap () (boolean_rot exec_yankdup integer_eq tagged_817)) exec_yankdup integer_stackdepth exec_yank) boolean_frominteger tagged_239 in4 exec_flush integer_div boolean_rot integer_max exec_dup_times (boolean_rot -41 boolean_pop integer_fromboolean) exec_dup_times (integer_stackdepth integer_dec in1 exec_s_when_autoconstructing () (boolean_yankdup integer_add exec_s_when_autoconstructing () (integer_pop) (boolean_invert_second_then_and boolean_and exec_shove ())) ()))
Errors: [0 1 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 85
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 6.823
Median total errors in population: 7
Error averages by case: (0.57 1.0 0.57 0.57 0.148 0.813 1.0 0.81 1.0 0.342)
Error minima by case: (0 1 0 0 0 0 1 0 1 0)
Average genome size in population (length): 71.99
Average program size in population (points): 99.084
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.499
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 941705
--- Timings ---
Current time: 1559314557068 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.6 seconds, 46.6%
Fitness Testing:      2.3 seconds, 42.1%
Report:               0.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -4                 
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 66                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 41                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 42                 
Correct output: 7                   | Program output: 81                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 62                 
Correct output: 38                  | Program output: 48                 
Correct output: 19                  | Program output: 90                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 75                 
Correct output: 8                   | Program output: 88                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -81                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 99                 
Correct output: -84                 | Program output: 33                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -29                
Correct output: -90                 | Program output: 21                 
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 100                
Correct output: -79                 | Program output: 73                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: 95                 
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: 47                 
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: 48                 
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 16                 
Correct output: -87                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -40                
Correct output: -55                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: 78                 
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 81                 
Correct output: -68                 | Program output: 55                 
Correct output: -86                 | Program output: 29                 
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 71                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_884} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_167} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove})
Lexicase best program: (boolean_dup integer_inc in3 exec_do*while (boolean_stackdepth integer_mod exec_while ()) exec_shove (boolean_invert_first_then_and in3 print_integer integer_swap boolean_empty) integer_lte boolean_invert_second_then_and integer_flush in1 integer_lte integer_stackdepth exec_s_when_autoconstructing (integer_gte integer_inc integer_lte tagged_884) (boolean_flush exec_rot () (integer_pop integer_yank integer_pop tagged_788) (integer_dup_items boolean_and boolean_dup) exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth integer_inc boolean_eq boolean_eq exec_y_when_autoconstructing () boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (boolean_not integer_rot in4 exec_y_when_autoconstructing (exec_pop (exec_stackdepth boolean_pop) exec_empty exec_flush) exec_do*while (boolean_invert_second_then_and exec_do*while (integer_lte integer_dup exec_stackdepth integer_add print_integer exec_do*range () print_integer integer_dup_times boolean_not exec_k_when_autoconstructing (tagged_167 in4 boolean_eq integer_div) (integer_min boolean_shove)))) () ()) ())
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 99
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_884} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_167} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove})
Zero cases best program: (boolean_dup integer_inc in3 exec_do*while (boolean_stackdepth integer_mod exec_while ()) exec_shove (boolean_invert_first_then_and in3 print_integer integer_swap boolean_empty) integer_lte boolean_invert_second_then_and integer_flush in1 integer_lte integer_stackdepth exec_s_when_autoconstructing (integer_gte integer_inc integer_lte tagged_884) (boolean_flush exec_rot () (integer_pop integer_yank integer_pop tagged_788) (integer_dup_items boolean_and boolean_dup) exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth integer_inc boolean_eq boolean_eq exec_y_when_autoconstructing () boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (boolean_not integer_rot in4 exec_y_when_autoconstructing (exec_pop (exec_stackdepth boolean_pop) exec_empty exec_flush) exec_do*while (boolean_invert_second_then_and exec_do*while (integer_lte integer_dup exec_stackdepth integer_add print_integer exec_do*range () print_integer integer_dup_times boolean_not exec_k_when_autoconstructing (tagged_167 in4 boolean_eq integer_div) (integer_min boolean_shove)))) () ()) ())
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 99
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (846 3 3 847 3 1000 573 848 573 271)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (846 3 3 847 3 0 573 848 573 271)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_167} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove})
Best program: (exec_do*range (exec_yank boolean_swap exec_do*while (integer_gte boolean_and) boolean_xor) boolean_flush in3 integer_mult boolean_invert_second_then_and exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush boolean_not integer_fromboolean exec_swap (integer_max boolean_or exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567) (exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_do*range (exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_lte integer_dup exec_stackdepth integer_add print_integer exec_do*range () print_integer integer_dup_times boolean_not exec_k_when_autoconstructing (tagged_167 in4 boolean_eq integer_div) (integer_min boolean_shove)) () ()))) ()))))) ())))
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 96
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.033
Median total errors in population: 5
Error averages by case: (0.154 0.997 0.997 0.153 0.997 1.0 0.427 0.152 0.427 0.729)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 69.541
Average program size in population (points): 96.606
Average percent parens in population: 0.279
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.028
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1368499
--- Timings ---
Current time: 1559314560427 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.0 seconds, 56.2%
Fitness Testing:      3.0 seconds, 33.5%
Report:               0.8 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -4                 
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 66                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 41                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 42                 
Correct output: 7                   | Program output: 81                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 62                 
Correct output: 38                  | Program output: 48                 
Correct output: 19                  | Program output: 90                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 75                 
Correct output: 8                   | Program output: 88                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -81                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 99                 
Correct output: -84                 | Program output: 33                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -29                
Correct output: -90                 | Program output: 21                 
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 100                
Correct output: -79                 | Program output: 73                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: 95                 
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: 47                 
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: 48                 
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 16                 
Correct output: -87                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -40                
Correct output: -55                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: 78                 
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 81                 
Correct output: -68                 | Program output: 55                 
Correct output: -86                 | Program output: 29                 
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 71                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_flush exec_yank boolean_swap boolean_or integer_gte boolean_and boolean_xor boolean_flush in3 integer_mult boolean_invert_second_then_and exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush boolean_not integer_fromboolean exec_swap (integer_max boolean_or exec_s (exec_eq boolean_shove) (exec_if (print_newline boolean_invert_second_then_and integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567) (exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (boolean_frominteger) (integer_lt) (boolean_or) exec_dup_items))) ())))) ())))
Lexicase best errors: [1 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_flush exec_yank boolean_swap boolean_or integer_gte boolean_and boolean_xor boolean_flush in3 integer_mult boolean_invert_second_then_and exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush boolean_not integer_fromboolean exec_swap (integer_max boolean_or exec_s (exec_eq boolean_shove) (exec_if (print_newline boolean_invert_second_then_and integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567) (exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (boolean_frominteger) (integer_lt) (boolean_or) exec_dup_items))) ())))) ())))
Zero cases best errors: [1 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (376 343 907 344 376 1 341 186 907 342)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (376 343 907 344 376 1 341 186 907 342)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction 13} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 2, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3})
Best program: (integer_sub integer_inc in3 exec_do*while (boolean_stackdepth integer_mod exec_while ()) exec_shove (boolean_invert_first_then_and in3 print_integer integer_swap boolean_empty) integer_lte boolean_invert_second_then_and integer_flush boolean_invert_second_then_and exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush boolean_not integer_fromboolean exec_swap (integer_max boolean_or exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and integer_lte integer_div boolean_invert_first_then_and) () integer_inc tagged_567) (exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (13 exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth boolean_stackdepth) exec_do*range () integer_yank) exec_rot () (integer_dup_items exec_y_when_autoconstructing () in2) (exec_y_when_autoconstructing () boolean_rot boolean_invert_second_then_and exec_y (exec_while ()) integer_min integer_eq boolean_empty boolean_invert_first_then_and exec_pop (exec_shove (exec_pop (exec_y_when_autoconstructing (integer_mult integer_dup_items in4 print_boolean in1) boolean_invert_first_then_and exec_rot (boolean_or boolean_invert_second_then_and boolean_shove in3) () ()))))))) ())))) ())))
Errors: [1 0 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 95
Size: 136
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 5.877
Median total errors in population: 6
Error averages by case: (0.624 0.657 0.093 0.656 0.624 0.999 0.659 0.814 0.093 0.658)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.039
Average program size in population (points): 87.179
Average percent parens in population: 0.300
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.42875
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1670998
--- Timings ---
Current time: 1559314563110 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.0 seconds, 60.4%
Fitness Testing:      3.4 seconds, 29.2%
Report:               1.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -4                 
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 66                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 41                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 42                 
Correct output: 7                   | Program output: 81                 
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 62                 
Correct output: 38                  | Program output: 48                 
Correct output: 19                  | Program output: 90                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 75                 
Correct output: 8                   | Program output: 88                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -81                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 99                 
Correct output: -84                 | Program output: 33                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -29                
Correct output: -90                 | Program output: 21                 
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 100                
Correct output: -79                 | Program output: 73                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: 95                 
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: 47                 
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: 48                 
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -24                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 16                 
Correct output: -87                 | Program output: 86                 
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -40                
Correct output: -55                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: 78                 
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 81                 
Correct output: -68                 | Program output: 55                 
Correct output: -86                 | Program output: 29                 
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 71                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Lexicase best program: (in1 integer_eq boolean_swap in3 exec_k (boolean_eq print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq integer_swap) print_integer exec_k_when_autoconstructing (integer_dup boolean_invert_second_then_and integer_lt exec_noop print_newline exec_pop () integer_eq integer_lte boolean_and boolean_invert_first_then_and exec_k (exec_dup_times (exec_yank integer_eq exec_y (exec_while (exec_rot (integer_inc integer_lt boolean_xor exec_do*count () exec_k_when_autoconstructing () (boolean_pop) boolean_swap exec_if (integer_dup) ()) () ())))) ()) ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Zero cases best program: (in1 integer_eq boolean_swap in3 exec_k (boolean_eq print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq integer_swap) print_integer exec_k_when_autoconstructing (integer_dup boolean_invert_second_then_and integer_lt exec_noop print_newline exec_pop () integer_eq integer_lte boolean_and boolean_invert_first_then_and exec_k (exec_dup_times (exec_yank integer_eq exec_y (exec_while (exec_rot (integer_inc integer_lt boolean_xor exec_do*count () exec_k_when_autoconstructing () (boolean_pop) boolean_swap exec_if (integer_dup) ()) () ())))) ()) ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (468 113 112 468 908 908 466 202 126 467)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (468 113 112 468 908 908 466 202 126 467)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup})
Best program: (in1 integer_eq boolean_swap in3 exec_k (boolean_eq print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq integer_swap) print_integer exec_k_when_autoconstructing (integer_dup boolean_invert_second_then_and integer_lt exec_noop integer_lt exec_pop () integer_eq integer_lte boolean_and boolean_invert_first_then_and exec_k (exec_dup_times (exec_yank integer_eq exec_y (exec_while (exec_rot (integer_inc integer_lt boolean_xor exec_s_when_autoconstructing () (exec_k_when_autoconstructing () (boolean_pop) boolean_swap exec_if (integer_dup) ()) ()) () ())))) ()) ()))
Errors: [0 1 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 44
Size: 68
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 5.762
Median total errors in population: 6
Error averages by case: (0.532 0.887 0.888 0.532 0.092 0.092 0.534 0.798 0.874 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.843
Average program size in population (points): 88.112
Average percent parens in population: 0.298
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.03325
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1975243
--- Timings ---
Current time: 1559314565933 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 63.5%
Fitness Testing:      3.8 seconds, 26.1%
Report:               1.4 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -4                 
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -23                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 36                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 83                 
Correct output: 3                   | Program output: 67                 
Correct output: 13                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 34                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 82                 
Correct output: 7                   | Program output: 24                 
Correct output: 24                  | Program output: 43                 
Correct output: 31                  | Program output: 57                 
Correct output: 38                  | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 58                 
Correct output: 50                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 100                
Correct output: 70                  | Program output: 71                 
Correct output: -77                 | Program output: 52                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -24                
Correct output: -63                 | Program output: 50                 
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 17                  | Program output: 17                 
Correct output: -97                 | Program output: -75                
Correct output: -56                 | Program output: 67                 
Correct output: -78                 | Program output: 48                 
Correct output: -90                 | Program output: -17                
Correct output: -89                 | Program output: 61                 
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -17                
Correct output: -56                 | Program output: -36                
Correct output: 10                  | Program output: 12                 
Correct output: -98                 | Program output: -13                
Correct output: -36                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -49                
Correct output: -88                 | Program output: 65                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: 30                 
Correct output: 5                   | Program output: 17                 
Correct output: 6                   | Program output: 13                 
Correct output: -85                 | Program output: 55                 
Correct output: -79                 | Program output: -65                
Correct output: -87                 | Program output: 33                 
Correct output: -65                 | Program output: 28                 
Correct output: -66                 | Program output: -10                
Correct output: -79                 | Program output: 100                
Correct output: -55                 | Program output: 8                  
Correct output: -78                 | Program output: 48                 
Correct output: -97                 | Program output: 38                 
Correct output: -16                 | Program output: 99                 
Correct output: -41                 | Program output: 45                 
Correct output: -68                 | Program output: 23                 
Correct output: -86                 | Program output: 33                 
Correct output: -96                 | Program output: 65                 
Correct output: -87                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -16                 | Program output: 15                 
Correct output: -79                 | Program output: -13                
Correct output: -96                 | Program output: 74                 
Correct output: -88                 | Program output: -14                
Correct output: -4                  | Program output: 11                 
Correct output: -73                 | Program output: 71                 
Correct output: -70                 | Program output: 90                 
Correct output: -6                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 integer_eq boolean_swap in3 exec_k (in2 print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq print_integer tag_integer_68 boolean_shove exec_while (integer_flush boolean_not integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and integer_lte integer_pop integer_yank integer_pop tagged_788) (integer_dup_items boolean_and boolean_dup) exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth integer_inc boolean_eq boolean_eq exec_y_when_autoconstructing (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ())) ()) ()))))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 81
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 integer_eq boolean_swap in3 exec_k (in2 print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq print_integer tag_integer_68 boolean_shove exec_while (integer_flush boolean_not integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and integer_lte integer_pop integer_yank integer_pop tagged_788) (integer_dup_items boolean_and boolean_dup) exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth integer_inc boolean_eq boolean_eq exec_y_when_autoconstructing (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ())) ()) ()))))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 81
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 423 896 128 896 896 128 791 104 129)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (128 423 896 128 896 896 128 791 104 129)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 integer_eq boolean_swap in3 exec_k (in2 print_integer boolean_dup) (exec_when () integer_shove exec_dup (exec_do*while (exec_stackdepth print_boolean) exec_eq print_integer tag_integer_68 boolean_shove exec_while (integer_flush boolean_not integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and integer_lte integer_empty integer_yank integer_pop tagged_788) (integer_dup_items boolean_and boolean_dup) exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth integer_inc boolean_eq boolean_eq exec_y_when_autoconstructing () boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ()) ()))))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 56
Size: 81
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 5.481
Median total errors in population: 5
Error averages by case: (0.872 0.577 0.104 0.872 0.104 0.104 0.872 0.209 0.896 0.871)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.546
Average program size in population (points): 87.215
Average percent parens in population: 0.293
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.551
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2298551
--- Timings ---
Current time: 1559314569102 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.7 seconds, 66.3%
Fitness Testing:      4.2 seconds, 23.9%
Report:               1.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 45                 
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 48                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -83                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -56                
Correct output: -84                 | Program output: -2                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 6                  
Correct output: -79                 | Program output: 21                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 79                 
Correct output: -68                 | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ()))) ())))
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ()))) ())))
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (620 619 327 619 322 322 1000 1000 322 942)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (620 619 327 619 322 322 0 0 322 942)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ()))) ())))
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 59
Size: 87
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 5.907
Median total errors in population: 6
Error averages by case: (0.38 0.381 0.673 0.381 0.678 0.678 1.0 1.0 0.678 0.058)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 58.36
Average program size in population (points): 84.754
Average percent parens in population: 0.311
Minimum age in population: 7.25
Maximum age in population: 11.125
Average age in population: 8.927875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2437147
--- Timings ---
Current time: 1559314571811 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.9 seconds, 68.7%
Fitness Testing:      4.4 seconds, 21.8%
Report:               1.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 45                 
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 48                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -83                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -56                
Correct output: -84                 | Program output: -2                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 6                  
Correct output: -79                 | Program output: 21                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 79                 
Correct output: -68                 | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ()))) ())))
Lexicase best errors: [0 1 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ()))) ())))
Zero cases best errors: [0 1 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (556 1000 1000 394 557 546 394 1000 546 394)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (556 0 0 394 557 546 394 0 546 394)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth})
Best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth))))) ()))) ())))
Errors: [0 1 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 53
Size: 76
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.613
Median total errors in population: 6
Error averages by case: (0.444 1.0 1.0 0.606 0.443 0.454 0.606 1.0 0.454 0.606)
Error minima by case: (0 1 1 0 0 0 0 1 0 0)
Average genome size in population (length): 58.224
Average program size in population (points): 84.895
Average percent parens in population: 0.314
Minimum age in population: 8.375
Maximum age in population: 12.6875
Average age in population: 10.1745625
Median age in population: 10.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2598549
--- Timings ---
Current time: 1559314574082 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.7 seconds, 69.8%
Fitness Testing:      4.6 seconds, 20.5%
Report:               2.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 45                 
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 48                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -83                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -56                
Correct output: -84                 | Program output: -2                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 6                  
Correct output: -79                 | Program output: 21                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 79                 
Correct output: -68                 | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_yank integer_pop tagged_788) integer_dup_items boolean_and boolean_dup) (exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))))))
Lexicase best errors: [1 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction tagged_788} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_yank integer_pop tagged_788) integer_dup_items boolean_and boolean_dup) (exec_k_when_autoconstructing (integer_swap integer_sub integer_yank) (boolean_stackdepth boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))))))
Zero cases best errors: [1 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 546 546 532 411 532 410 957)
Population mean number of elite cases: 6.93
Count of perfect (error zero) individuals by case: (0 0 0 546 546 532 411 532 410 957)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq integer_sub) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ())))) ())))
Errors: [1 1 1 0 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 82
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 6.066
Median total errors in population: 5
Error averages by case: (1.0 1.0 1.0 0.454 0.454 0.468 0.589 0.468 0.59 0.043)
Error minima by case: (1 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 58.096
Average program size in population (points): 84.749
Average percent parens in population: 0.314
Minimum age in population: 9.375
Maximum age in population: 13.7890625
Average age in population: 11.6595859375
Median age in population: 11.73828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2766052
--- Timings ---
Current time: 1559314576416 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.6 seconds, 70.7%
Fitness Testing:      4.9 seconds, 19.5%
Report:               2.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 45                 
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 48                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -83                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -56                
Correct output: -84                 | Program output: -2                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 6                  
Correct output: -79                 | Program output: 21                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 79                 
Correct output: -68                 | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) in4 exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup boolean_eq exec_y_when_autoconstructing (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ())) ()))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 80
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) in4 exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup boolean_eq exec_y_when_autoconstructing (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ())) ()))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 80
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (619 619 621 952 619 930 619 310 622 641)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (619 619 621 952 619 930 619 310 622 641)
Population mean number of perfect (error zero) cases: 6.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_swap in3 integer_min integer_mult exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_do*while (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567) (exec_if (integer_yankdup) (boolean_flush integer_eq) integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 3.448
Median total errors in population: 1
Error averages by case: (0.381 0.381 0.379 0.048 0.381 0.07 0.381 0.69 0.378 0.359)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.391
Average program size in population (points): 85.031
Average percent parens in population: 0.313
Minimum age in population: 10.5
Maximum age in population: 15.390625
Average age in population: 13.1061171875
Median age in population: 13.154296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.009
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2958914
--- Timings ---
Current time: 1559314579007 milliseconds
Total Time:          27.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.7 seconds, 71.5%
Fitness Testing:      5.1 seconds, 18.6%
Report:               2.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 45                 
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 48                 
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -83                
Correct output: -67                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -56                
Correct output: -84                 | Program output: -2                 
Correct output: -74                 | Program output: 28                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: 28                 
Correct output: -23                 | Program output: 6                  
Correct output: -79                 | Program output: 21                 
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 27                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 2                  
Correct output: -91                 | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: 82                 
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 79                 
Correct output: -68                 | Program output: 29                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean integer_div integer_gte exec_eq boolean_shove) exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ()))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean integer_div integer_gte exec_eq boolean_shove) exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ()))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (801 1000 130 819 1000 801 820 804 818 819)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (801 0 130 819 0 801 820 804 818 819)
Population mean number of perfect (error zero) cases: 5.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank exec_y (exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ())))) ()))) ())))
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 59
Size: 88
Percent parens: 0.330
--- Population Statistics ---
Average total errors in population: 4.188
Median total errors in population: 3
Error averages by case: (0.199 1.0 0.87 0.181 1.0 0.199 0.18 0.196 0.182 0.181)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 58.54
Average program size in population (points): 85.199
Average percent parens in population: 0.312
Minimum age in population: 11.5
Maximum age in population: 16.64453125
Average age in population: 14.560078125
Median age in population: 14.6494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3178836
--- Timings ---
Current time: 1559314581451 milliseconds
Total Time:          29.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.6 seconds, 72.1%
Fitness Testing:      5.4 seconds, 18.0%
Report:               2.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 17                  | Program output: 17                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 45                 
Correct output: -68                 | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 33                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in2 integer_min boolean_eq exec_if () (in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_eq integer_lte exec_stackdepth) integer_rot integer_div exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_inc integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ())) ()))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 94
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in2 integer_min boolean_eq exec_if () (in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_567) exec_if (integer_yankdup) (boolean_flush integer_eq integer_eq integer_lte exec_stackdepth) integer_rot integer_div exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_inc integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))) ())) ()))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 94
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (680 679 257 680 939 1000 939 680 258 957)
Population mean number of elite cases: 7.07
Count of perfect (error zero) individuals by case: (680 679 257 680 939 0 939 680 258 957)
Population mean number of perfect (error zero) cases: 6.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank) exec_swap (exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ())))))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 52
Size: 78
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.931
Median total errors in population: 3
Error averages by case: (0.32 0.321 0.743 0.32 0.061 1.0 0.061 0.32 0.742 0.043)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 58.54
Average program size in population (points): 85.465
Average percent parens in population: 0.314
Minimum age in population: 12.984375
Maximum age in population: 18.1943359375
Average age in population: 16.369970703125
Median age in population: 16.552734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3397160
--- Timings ---
Current time: 1559314584551 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.1 seconds, 73.2%
Fitness Testing:      5.7 seconds, 17.2%
Report:               3.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 17                  | Program output: 17                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 45                 
Correct output: -68                 | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 33                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction tagged_612} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in2 integer_min boolean_eq exec_if () (boolean_pop integer_min boolean_eq) boolean_swap in3 integer_min boolean_eq exec_if () (boolean_invert_second_then_and integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove exec_if (in4 boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_612) () exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte integer_eq) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s () (integer_empty integer_gte) (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ())))) ()))) ())))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction tagged_612} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in2 integer_min boolean_eq exec_if () (boolean_pop integer_min boolean_eq) boolean_swap in3 integer_min boolean_eq exec_if () (boolean_invert_second_then_and integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq boolean_shove exec_if (in4 boolean_invert_second_then_and) (integer_lte integer_div boolean_invert_first_then_and)) (exec_stackdepth tagged_612) () exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte integer_eq) integer_rot exec_when (exec_do*while (exec_yank exec_swap (exec_when (boolean_dup exec_do*count (integer_inc integer_yank exec_s () (integer_empty integer_gte) (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ())))) ()))) ())))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (912 914 913 1000 931 944 1000 913 945 913)
Population mean number of elite cases: 9.39
Count of perfect (error zero) individuals by case: (912 914 913 0 931 944 0 913 945 913)
Population mean number of perfect (error zero) cases: 7.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq integer_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank) exec_swap (exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ())))))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 78
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 2.615
Median total errors in population: 2
Error averages by case: (0.088 0.086 0.087 1.0 0.069 0.056 1.0 0.087 0.055 0.087)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 59.921
Average program size in population (points): 86.491
Average percent parens in population: 0.307
Minimum age in population: 16.841796875
Maximum age in population: 19.3671875
Average age in population: 18.32048486328125
Median age in population: 18.341796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3607243
--- Timings ---
Current time: 1559314586965 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.0 seconds, 73.5%
Fitness Testing:      5.9 seconds, 16.7%
Report:               3.4 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 17                  | Program output: 17                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 45                 
Correct output: -68                 | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 33                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank) exec_swap (exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ())))))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 78
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank) exec_swap (exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ())))))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 78
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 1000 913 886 1000 886 897 890 926 901)
Population mean number of elite cases: 9.19
Count of perfect (error zero) individuals by case: (890 0 913 886 0 886 897 890 926 901)
Population mean number of perfect (error zero) cases: 7.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction tagged_223} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_xor boolean_swap in3 integer_min boolean_eq boolean_not boolean_swap in2 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 tagged_223 exec_eq boolean_shove) (exec_if (integer_dup boolean_invert_second_then_and) (integer_lte integer_div print_exec ()) exec_stackdepth tagged_567) exec_if (integer_eq integer_lte exec_stackdepth) (integer_rot exec_when (exec_do*count (integer_inc integer_yank exec_s (integer_empty integer_gte) () (exec_yank integer_rot exec_do*while (boolean_stackdepth integer_dec) exec_do*range () integer_yank) exec_rot () (boolean_yank exec_y_when_autoconstructing ()) ()))))))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 79
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 2.811
Median total errors in population: 2
Error averages by case: (0.11 1.0 0.087 0.114 1.0 0.114 0.103 0.11 0.074 0.099)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 59.51
Average program size in population (points): 85.929
Average percent parens in population: 0.307
Minimum age in population: 17.841796875
Maximum age in population: 21.341796875
Average age in population: 19.76682666015625
Median age in population: 19.79248046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3846725
--- Timings ---
Current time: 1559314589151 milliseconds
Total Time:          37.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.7 seconds, 73.6%
Fitness Testing:      6.2 seconds, 16.5%
Report:               3.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 33                 
Correct output: 62                  | Program output: 85                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -41                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 83                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 37                 
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 17                  | Program output: 17                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -45                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -46                
Correct output: -99                 | Program output: -99                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: 30                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -10                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -17                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: 45                 
Correct output: -68                 | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 33                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq boolean_not boolean_swap in2 integer_min boolean_eq exec_if () (boolean_pop) integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_min exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank) exec_swap (exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ()))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_swap in3 integer_min boolean_eq boolean_not boolean_swap in2 integer_min boolean_eq exec_if () (boolean_pop) integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_min exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank) exec_swap (exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ()))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (965 940 939 939 939 963 947 1000 939 939)
Population mean number of elite cases: 9.51
Count of perfect (error zero) individuals by case: (965 940 939 939 939 963 947 0 939 939)
Population mean number of perfect (error zero) cases: 8.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_yank) exec_swap (exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) exec_rot (exec_rot () (integer_dup_items exec_y_when_autoconstructing ()) ()) () ()) ())))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 52
Size: 78
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 1.49
Median total errors in population: 1
Error averages by case: (0.035 0.06 0.061 0.061 0.061 0.037 0.053 1.0 0.061 0.061)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 59.227
Average program size in population (points): 85.435
Average percent parens in population: 0.306
Minimum age in population: 18.841796875
Maximum age in population: 23.0604248046875
Average age in population: 21.23442724609375
Median age in population: 21.31097412109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.01
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4107664
--- Timings ---
Current time: 1559314591627 milliseconds
Total Time:          40.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.6 seconds, 73.8%
Fitness Testing:      6.5 seconds, 16.3%
Report:               3.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: 62                  | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 20                 
Correct output: 8                   | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 71                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 45                 
Correct output: 19                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -83                
Correct output: -67                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -56                
Correct output: -84                 | Program output: -13                
Correct output: -74                 | Program output: -8                 
Correct output: 17                  | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 28                 
Correct output: -34                 | Program output: 20                 
Correct output: -23                 | Program output: 6                  
Correct output: -79                 | Program output: -20                
Correct output: -70                 | Program output: -10                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -66                
Correct output: -93                 | Program output: -51                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 65                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_eq exec_do*while () boolean_pop integer_min boolean_eq boolean_swap in3 integer_min boolean_eq exec_if () (boolean_invert_second_then_and integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq integer_lte integer_div boolean_invert_first_then_and) () (exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ()))) ())))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_eq exec_do*while () boolean_pop integer_min boolean_eq boolean_swap in3 integer_min boolean_eq exec_if () (boolean_invert_second_then_and integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq integer_lte integer_div boolean_invert_first_then_and) () (exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ()))) ())))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (926 947 910 1 914 923 1 925 947 927)
Population mean number of elite cases: 7.42
Count of perfect (error zero) individuals by case: (926 947 910 1 914 923 1 925 947 927)
Population mean number of perfect (error zero) cases: 7.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_eq exec_do*while () boolean_pop integer_min boolean_eq boolean_swap in3 integer_min boolean_eq exec_if () (boolean_invert_second_then_and integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap (integer_max in3 exec_s (exec_eq integer_lte integer_div boolean_invert_first_then_and) () (exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ()))) ())))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 70
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 2.579
Median total errors in population: 2
Error averages by case: (0.074 0.053 0.09 0.999 0.086 0.077 0.999 0.075 0.053 0.073)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.883
Average program size in population (points): 84.778
Average percent parens in population: 0.305
Minimum age in population: 20.29248046875
Maximum age in population: 24.48095703125
Average age in population: 22.71873156738281
Median age in population: 22.79705810546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.01
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4377985
--- Timings ---
Current time: 1559314594145 milliseconds
Total Time:          42.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.5 seconds, 73.9%
Fitness Testing:      6.8 seconds, 16.1%
Report:               4.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: 62                  | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 17                  | Program output: 17                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -99                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 33                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 83
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div boolean_invert_first_then_and) () exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) exec_when (boolean_swap exec_dup_times (in3) integer_dup_times) boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_do*while (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 83
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (940 939 940 940 961 933 939 607 944 328)
Population mean number of elite cases: 8.47
Count of perfect (error zero) individuals by case: (940 939 940 940 961 933 939 607 944 328)
Population mean number of perfect (error zero) cases: 8.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_68} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_567} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 51
Size: 70
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 1.529
Median total errors in population: 1
Error averages by case: (0.06 0.061 0.06 0.06 0.039 0.067 0.061 0.393 0.056 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.779
Average program size in population (points): 75.155
Average percent parens in population: 0.283
Minimum age in population: 21.5791015625
Maximum age in population: 26.094482421875
Average age in population: 24.92021737670898
Median age in population: 24.81414794921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 309
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 320
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4637754
--- Timings ---
Current time: 1559314596612 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 74.1%
Fitness Testing:      7.1 seconds, 15.9%
Report:               4.4 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 16
Successful program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 70


Auto-simplifying with starting size: 70
step: 0
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 500
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1000
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1500
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2000
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2500
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3000
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3500
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4000
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4500
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 5000
program: (in1 boolean_not boolean_not boolean_swap in4 integer_min boolean_swap in2 integer_min in3 integer_min boolean_eq exec_if () (boolean_pop integer_swap print_integer tag_integer_68 boolean_shove exec_while (integer_flush integer_min integer_fromboolean exec_swap () (integer_max in3 exec_s (exec_eq boolean_shove) (exec_if () (integer_dup boolean_invert_second_then_and) integer_lte integer_div) (boolean_invert_first_then_and)) exec_stackdepth tagged_567 exec_if (integer_yankdup) (boolean_flush integer_eq integer_lte exec_stackdepth) integer_rot exec_when (exec_dup_times (in3) integer_dup_times) exec_rot (integer_rot) (integer_dup_items exec_y_when_autoconstructing ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: 62                  | Program output: 62                 
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -66                 | Program output: -66                
Correct output: -62                 | Program output: -62                
Correct output: 31                  | Program output: 31                 
Correct output: 49                  | Program output: 49                 
Correct output: -42                 | Program output: -42                
Correct output: 46                  | Program output: 46                 
Correct output: -51                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 8                   | Program output: 8                  
Correct output: 17                  | Program output: 17                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 24                  | Program output: 24                 
Correct output: 31                  | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 50                  | Program output: 50                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 70                  | Program output: 70                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -84                 | Program output: -84                
Correct output: -67                 | Program output: -67                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 17                  | Program output: 17                 
Correct output: -97                 | Program output: -97                
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -99                 | Program output: -99                
Correct output: -93                 | Program output: -93                
Correct output: -34                 | Program output: -34                
Correct output: -56                 | Program output: -56                
Correct output: 10                  | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: -16                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: 33                  | Program output: 33                 
Correct output: -16                 | Program output: -16                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -6                  | Program output: -6                 
;;******************************
