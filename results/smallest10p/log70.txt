Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[16 16 16 74] 16] [[-83 -99 -99 -99] -99] [[-63 -99 -63 -63] -99] [[50 -75 50 50] -75] [[-51 75 -51 -51] -51] [[97 97 -73 97] -73] [[-70 -47 -70 -70] -70] [[-74 -87 -87 -87] -87] [[-81 -38 -81 -81] -81] [[67 67 67 -86] -86] [(-17 -17 -17 -17) -17] [(75 75 75 75) 75] [(-62 -62 -62 -62) -62] [(64 64 64 64) 64] [(42 42 42 42) 42] [(35 88 88 62) 35] [(14 11 21 87) 11] [(63 82 84 58) 58] [(92 65 98 26) 26] [(34 52 98 23) 23] [(79 28 15 46) 15] [(72 35 61 83) 35] [(86 20 84 47) 20] [(82 44 90 41) 41] [(32 91 99 57) 32] [(6 61 48 8) 6] [(84 65 28 52) 28] [(45 34 80 75) 34] [(32 12 67 84) 12] [(95 97 61 69) 61] [(77 42 24 58) 24] [(51 86 10 35) 10] [(38 27 10 38) 10] [(14 88 95 65) 14] [(30 86 4 44) 4] [(59 -17 62 -27) -27] [(56 62 56 62) 56] [(-99 -26 88 -5) -99] [(50 -14 79 50) -14] [(-88 93 3 -23) -88] [(46 38 8 8) 8] [(80 56 99 43) 43] [(-95 6 -17 44) -95] [(74 14 5 -46) -46] [(-66 -72 -92 92) -92] [(-34 -79 -97 99) -97] [(-80 -65 31 24) -80] [(-18 -53 -39 38) -53] [(-7 94 -84 -87) -87] [(-57 11 42 -75) -75] [(23 36 -48 -53) -53] [(10 23 -79 -20) -79] [(74 -23 -59 -43) -59] [(-76 -76 -89 -76) -89] [(53 -44 75 -43) -44] [(-52 47 -73 -48) -73] [(96 10 95 22) 10] [(92 -92 97 77) -92] [(-55 -28 86 30) -55] [(-36 95 -18 54) -36] [(67 43 27 77) 27] [(-25 -55 51 81) -55] [(-68 9 93 63) -68] [(81 50 -100 15) -100] [(47 -20 58 -20) -20] [(79 21 -15 -10) -15] [(50 -35 -41 91) -41] [(12 -94 92 -28) -94] [(67 34 39 58) 34] [(-14 73 -97 67) -97] [(72 20 -100 93) -100] [(78 95 75 22) 22] [(98 -57 81 -36) -57] [(19 13 -56 36) -56] [(-87 73 -7 -46) -87] [(39 -71 -70 8) -71] [(-86 -51 -25 45) -86] [(36 95 9 -24) -24] [(-86 -80 -42 -25) -86] [(-68 70 11 77) -68] [(75 -38 -52 4) -52] [(-69 4 -16 -83) -83] [(-44 33 47 69) -44] [(41 -100 -81 73) -100] [(-30 -95 53 57) -95] [(78 -32 -33 97) -33] [(-87 33 -42 7) -87] [(-26 16 -33 90) -33] [(-51 29 37 -35) -51] [(-71 -22 -98 9) -98] [(-38 38 -98 -63) -98] [(-35 31 6 -20) -35] [(-44 38 -16 44) -44] [(-94 57 -18 58) -94] [(14 -85 -42 5) -85])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[16 16 16 74] 16]
Train Case:   6 | Input/Output: [[-83 -99 -99 -99] -99]
Train Case:   7 | Input/Output: [[-63 -99 -63 -63] -99]
Train Case:   8 | Input/Output: [[50 -75 50 50] -75]
Train Case:   9 | Input/Output: [[-51 75 -51 -51] -51]
Train Case:  10 | Input/Output: [[97 97 -73 97] -73]
Train Case:  11 | Input/Output: [[-70 -47 -70 -70] -70]
Train Case:  12 | Input/Output: [[-74 -87 -87 -87] -87]
Train Case:  13 | Input/Output: [[-81 -38 -81 -81] -81]
Train Case:  14 | Input/Output: [[67 67 67 -86] -86]
Train Case:  15 | Input/Output: [(-17 -17 -17 -17) -17]
Train Case:  16 | Input/Output: [(75 75 75 75) 75]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(64 64 64 64) 64]
Train Case:  19 | Input/Output: [(42 42 42 42) 42]
Train Case:  20 | Input/Output: [(35 88 88 62) 35]
Train Case:  21 | Input/Output: [(14 11 21 87) 11]
Train Case:  22 | Input/Output: [(63 82 84 58) 58]
Train Case:  23 | Input/Output: [(92 65 98 26) 26]
Train Case:  24 | Input/Output: [(34 52 98 23) 23]
Train Case:  25 | Input/Output: [(79 28 15 46) 15]
Train Case:  26 | Input/Output: [(72 35 61 83) 35]
Train Case:  27 | Input/Output: [(86 20 84 47) 20]
Train Case:  28 | Input/Output: [(82 44 90 41) 41]
Train Case:  29 | Input/Output: [(32 91 99 57) 32]
Train Case:  30 | Input/Output: [(6 61 48 8) 6]
Train Case:  31 | Input/Output: [(84 65 28 52) 28]
Train Case:  32 | Input/Output: [(45 34 80 75) 34]
Train Case:  33 | Input/Output: [(32 12 67 84) 12]
Train Case:  34 | Input/Output: [(95 97 61 69) 61]
Train Case:  35 | Input/Output: [(77 42 24 58) 24]
Train Case:  36 | Input/Output: [(51 86 10 35) 10]
Train Case:  37 | Input/Output: [(38 27 10 38) 10]
Train Case:  38 | Input/Output: [(14 88 95 65) 14]
Train Case:  39 | Input/Output: [(30 86 4 44) 4]
Train Case:  40 | Input/Output: [(59 -17 62 -27) -27]
Train Case:  41 | Input/Output: [(56 62 56 62) 56]
Train Case:  42 | Input/Output: [(-99 -26 88 -5) -99]
Train Case:  43 | Input/Output: [(50 -14 79 50) -14]
Train Case:  44 | Input/Output: [(-88 93 3 -23) -88]
Train Case:  45 | Input/Output: [(46 38 8 8) 8]
Train Case:  46 | Input/Output: [(80 56 99 43) 43]
Train Case:  47 | Input/Output: [(-95 6 -17 44) -95]
Train Case:  48 | Input/Output: [(74 14 5 -46) -46]
Train Case:  49 | Input/Output: [(-66 -72 -92 92) -92]
Train Case:  50 | Input/Output: [(-34 -79 -97 99) -97]
Train Case:  51 | Input/Output: [(-80 -65 31 24) -80]
Train Case:  52 | Input/Output: [(-18 -53 -39 38) -53]
Train Case:  53 | Input/Output: [(-7 94 -84 -87) -87]
Train Case:  54 | Input/Output: [(-57 11 42 -75) -75]
Train Case:  55 | Input/Output: [(23 36 -48 -53) -53]
Train Case:  56 | Input/Output: [(10 23 -79 -20) -79]
Train Case:  57 | Input/Output: [(74 -23 -59 -43) -59]
Train Case:  58 | Input/Output: [(-76 -76 -89 -76) -89]
Train Case:  59 | Input/Output: [(53 -44 75 -43) -44]
Train Case:  60 | Input/Output: [(-52 47 -73 -48) -73]
Train Case:  61 | Input/Output: [(96 10 95 22) 10]
Train Case:  62 | Input/Output: [(92 -92 97 77) -92]
Train Case:  63 | Input/Output: [(-55 -28 86 30) -55]
Train Case:  64 | Input/Output: [(-36 95 -18 54) -36]
Train Case:  65 | Input/Output: [(67 43 27 77) 27]
Train Case:  66 | Input/Output: [(-25 -55 51 81) -55]
Train Case:  67 | Input/Output: [(-68 9 93 63) -68]
Train Case:  68 | Input/Output: [(81 50 -100 15) -100]
Train Case:  69 | Input/Output: [(47 -20 58 -20) -20]
Train Case:  70 | Input/Output: [(79 21 -15 -10) -15]
Train Case:  71 | Input/Output: [(50 -35 -41 91) -41]
Train Case:  72 | Input/Output: [(12 -94 92 -28) -94]
Train Case:  73 | Input/Output: [(67 34 39 58) 34]
Train Case:  74 | Input/Output: [(-14 73 -97 67) -97]
Train Case:  75 | Input/Output: [(72 20 -100 93) -100]
Train Case:  76 | Input/Output: [(78 95 75 22) 22]
Train Case:  77 | Input/Output: [(98 -57 81 -36) -57]
Train Case:  78 | Input/Output: [(19 13 -56 36) -56]
Train Case:  79 | Input/Output: [(-87 73 -7 -46) -87]
Train Case:  80 | Input/Output: [(39 -71 -70 8) -71]
Train Case:  81 | Input/Output: [(-86 -51 -25 45) -86]
Train Case:  82 | Input/Output: [(36 95 9 -24) -24]
Train Case:  83 | Input/Output: [(-86 -80 -42 -25) -86]
Train Case:  84 | Input/Output: [(-68 70 11 77) -68]
Train Case:  85 | Input/Output: [(75 -38 -52 4) -52]
Train Case:  86 | Input/Output: [(-69 4 -16 -83) -83]
Train Case:  87 | Input/Output: [(-44 33 47 69) -44]
Train Case:  88 | Input/Output: [(41 -100 -81 73) -100]
Train Case:  89 | Input/Output: [(-30 -95 53 57) -95]
Train Case:  90 | Input/Output: [(78 -32 -33 97) -33]
Train Case:  91 | Input/Output: [(-87 33 -42 7) -87]
Train Case:  92 | Input/Output: [(-26 16 -33 90) -33]
Train Case:  93 | Input/Output: [(-51 29 37 -35) -51]
Train Case:  94 | Input/Output: [(-71 -22 -98 9) -98]
Train Case:  95 | Input/Output: [(-38 38 -98 -63) -98]
Train Case:  96 | Input/Output: [(-35 31 6 -20) -35]
Train Case:  97 | Input/Output: [(-44 38 -16 44) -44]
Train Case:  98 | Input/Output: [(-94 57 -18 58) -94]
Train Case:  99 | Input/Output: [(14 -85 -42 5) -85]
Test Case:   0 | Input/Output: [[-23 64 64 64] -23]
Test Case:   1 | Input/Output: [[44 50 50 50] 44]
Test Case:   2 | Input/Output: [[-35 36 -35 -35] -35]
Test Case:   3 | Input/Output: [[48 -75 -75 -75] -75]
Test Case:   4 | Input/Output: [[66 87 66 66] 66]
Test Case:   5 | Input/Output: [[10 -76 10 10] -76]
Test Case:   6 | Input/Output: [[81 81 81 -1] -1]
Test Case:   7 | Input/Output: [[-65 -13 -13 -13] -65]
Test Case:   8 | Input/Output: [[69 69 69 -55] -55]
Test Case:   9 | Input/Output: [[-88 -88 81 -88] -88]
Test Case:  10 | Input/Output: [[45 45 45 -29] -29]
Test Case:  11 | Input/Output: [[-72 -72 -62 -72] -72]
Test Case:  12 | Input/Output: [[-61 -71 -71 -71] -71]
Test Case:  13 | Input/Output: [[34 77 77 77] 34]
Test Case:  14 | Input/Output: [[16 16 16 34] 16]
Test Case:  15 | Input/Output: [[-60 -60 9 -60] -60]
Test Case:  16 | Input/Output: [[52 52 -43 52] -43]
Test Case:  17 | Input/Output: [[-56 73 -56 -56] -56]
Test Case:  18 | Input/Output: [[-62 -62 32 -62] -62]
Test Case:  19 | Input/Output: [[94 3 94 94] 3]
Test Case:  20 | Input/Output: [[-46 -46 -26 -46] -46]
Test Case:  21 | Input/Output: [[-79 -79 -79 6] -79]
Test Case:  22 | Input/Output: [[33 33 33 83] 33]
Test Case:  23 | Input/Output: [[-75 -89 -89 -89] -89]
Test Case:  24 | Input/Output: [[-72 -84 -84 -84] -84]
Test Case:  25 | Input/Output: [[92 -48 -48 -48] -48]
Test Case:  26 | Input/Output: [[-100 -100 -100 -84] -100]
Test Case:  27 | Input/Output: [[-92 -92 -82 -92] -92]
Test Case:  28 | Input/Output: [[56 -55 -55 -55] -55]
Test Case:  29 | Input/Output: [[30 98 98 98] 30]
Test Case:  30 | Input/Output: [[-77 -58 -77 -77] -77]
Test Case:  31 | Input/Output: [[67 67 67 8] 8]
Test Case:  32 | Input/Output: [[-68 -23 -23 -23] -68]
Test Case:  33 | Input/Output: [[45 92 45 45] 45]
Test Case:  34 | Input/Output: [[96 96 96 48] 48]
Test Case:  35 | Input/Output: [[-41 -41 -48 -41] -48]
Test Case:  36 | Input/Output: [[-71 93 -71 -71] -71]
Test Case:  37 | Input/Output: [[-28 -28 -92 -28] -92]
Test Case:  38 | Input/Output: [[-24 -49 -24 -24] -49]
Test Case:  39 | Input/Output: [[41 -80 -80 -80] -80]
Test Case:  40 | Input/Output: [[43 -1 -1 -1] -1]
Test Case:  41 | Input/Output: [[42 42 -53 42] -53]
Test Case:  42 | Input/Output: [[-68 -68 95 -68] -68]
Test Case:  43 | Input/Output: [[-66 -66 -66 68] -66]
Test Case:  44 | Input/Output: [[-16 -73 -73 -73] -73]
Test Case:  45 | Input/Output: [[-71 -37 -71 -71] -71]
Test Case:  46 | Input/Output: [[-93 -93 96 -93] -93]
Test Case:  47 | Input/Output: [[98 98 -9 98] -9]
Test Case:  48 | Input/Output: [[-94 -94 -31 -94] -94]
Test Case:  49 | Input/Output: [[-78 -78 -78 2] -78]
Test Case:  50 | Input/Output: [[-19 -19 -19 -65] -65]
Test Case:  51 | Input/Output: [[44 15 15 15] 15]
Test Case:  52 | Input/Output: [[-12 5 5 5] -12]
Test Case:  53 | Input/Output: [[19 47 47 47] 19]
Test Case:  54 | Input/Output: [[-50 81 -50 -50] -50]
Test Case:  55 | Input/Output: [[98 98 -100 98] -100]
Test Case:  56 | Input/Output: [[82 -86 -86 -86] -86]
Test Case:  57 | Input/Output: [[80 80 80 46] 46]
Test Case:  58 | Input/Output: [[-27 59 59 59] -27]
Test Case:  59 | Input/Output: [[-41 -41 -58 -41] -58]
Test Case:  60 | Input/Output: [[55 -5 55 55] -5]
Test Case:  61 | Input/Output: [[38 38 38 -55] -55]
Test Case:  62 | Input/Output: [[-99 -99 -99 45] -99]
Test Case:  63 | Input/Output: [[-23 -23 33 -23] -23]
Test Case:  64 | Input/Output: [[34 34 34 63] 34]
Test Case:  65 | Input/Output: [[79 79 79 -100] -100]
Test Case:  66 | Input/Output: [[74 74 74 -33] -33]
Test Case:  67 | Input/Output: [[-33 83 -33 -33] -33]
Test Case:  68 | Input/Output: [[100 100 100 -17] -17]
Test Case:  69 | Input/Output: [[36 -44 36 36] -44]
Test Case:  70 | Input/Output: [[4 4 4 -92] -92]
Test Case:  71 | Input/Output: [[10 82 82 82] 10]
Test Case:  72 | Input/Output: [[10 -13 -13 -13] -13]
Test Case:  73 | Input/Output: [[-59 -74 -59 -59] -74]
Test Case:  74 | Input/Output: [[43 45 45 45] 43]
Test Case:  75 | Input/Output: [[61 61 55 61] 55]
Test Case:  76 | Input/Output: [[-44 -44 -44 -55] -55]
Test Case:  77 | Input/Output: [[57 83 83 83] 57]
Test Case:  78 | Input/Output: [[2 2 -71 2] -71]
Test Case:  79 | Input/Output: [[17 58 58 58] 17]
Test Case:  80 | Input/Output: [[46 46 -24 46] -24]
Test Case:  81 | Input/Output: [[-65 -65 -65 -49] -65]
Test Case:  82 | Input/Output: [[-5 36 36 36] -5]
Test Case:  83 | Input/Output: [[91 91 35 91] 35]
Test Case:  84 | Input/Output: [[99 99 99 20] 20]
Test Case:  85 | Input/Output: [[61 61 -55 61] -55]
Test Case:  86 | Input/Output: [[68 68 -6 68] -6]
Test Case:  87 | Input/Output: [[90 73 73 73] 73]
Test Case:  88 | Input/Output: [[0 97 0 0] 0]
Test Case:  89 | Input/Output: [[44 44 -38 44] -38]
Test Case:  90 | Input/Output: [[-8 -94 -8 -8] -94]
Test Case:  91 | Input/Output: [[-89 -89 -59 -89] -89]
Test Case:  92 | Input/Output: [[87 87 -7 87] -7]
Test Case:  93 | Input/Output: [[-22 -77 -22 -22] -77]
Test Case:  94 | Input/Output: [[5 68 68 68] 5]
Test Case:  95 | Input/Output: [[-26 28 -26 -26] -26]
Test Case:  96 | Input/Output: [[-45 -45 -20 -45] -45]
Test Case:  97 | Input/Output: [[21 21 21 -100] -100]
Test Case:  98 | Input/Output: [[60 53 53 53] 53]
Test Case:  99 | Input/Output: [[-47 -100 -100 -100] -100]
Test Case: 100 | Input/Output: [(24 24 24 24) 24]
Test Case: 101 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 102 | Input/Output: [(78 78 78 78) 78]
Test Case: 103 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 104 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 105 | Input/Output: [(54 54 54 54) 54]
Test Case: 106 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 107 | Input/Output: [(11 11 11 11) 11]
Test Case: 108 | Input/Output: [(76 76 76 76) 76]
Test Case: 109 | Input/Output: [(90 90 90 90) 90]
Test Case: 110 | Input/Output: [(5 5 5 5) 5]
Test Case: 111 | Input/Output: [(46 46 46 46) 46]
Test Case: 112 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 113 | Input/Output: [(64 64 64 64) 64]
Test Case: 114 | Input/Output: [(13 13 13 13) 13]
Test Case: 115 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 116 | Input/Output: [(37 37 37 37) 37]
Test Case: 117 | Input/Output: [(34 34 34 34) 34]
Test Case: 118 | Input/Output: [(85 85 85 85) 85]
Test Case: 119 | Input/Output: [(97 97 97 97) 97]
Test Case: 120 | Input/Output: [(70 70 70 70) 70]
Test Case: 121 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 122 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 123 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 124 | Input/Output: [(31 31 31 31) 31]
Test Case: 125 | Input/Output: [(34 34 34 34) 34]
Test Case: 126 | Input/Output: [(12 12 12 12) 12]
Test Case: 127 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 128 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 129 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 130 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 131 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 132 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 133 | Input/Output: [(7 7 7 7) 7]
Test Case: 134 | Input/Output: [(68 68 68 68) 68]
Test Case: 135 | Input/Output: [(86 86 86 86) 86]
Test Case: 136 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 137 | Input/Output: [(82 82 82 82) 82]
Test Case: 138 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 139 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 140 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 141 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 142 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 143 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 144 | Input/Output: [(78 78 78 78) 78]
Test Case: 145 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 146 | Input/Output: [(31 31 31 31) 31]
Test Case: 147 | Input/Output: [(45 45 45 45) 45]
Test Case: 148 | Input/Output: [(59 59 59 59) 59]
Test Case: 149 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 150 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 151 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 152 | Input/Output: [(64 64 64 64) 64]
Test Case: 153 | Input/Output: [(83 83 83 83) 83]
Test Case: 154 | Input/Output: [(59 59 59 59) 59]
Test Case: 155 | Input/Output: [(51 51 51 51) 51]
Test Case: 156 | Input/Output: [(13 13 13 13) 13]
Test Case: 157 | Input/Output: [(71 71 71 71) 71]
Test Case: 158 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 159 | Input/Output: [(2 2 2 2) 2]
Test Case: 160 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 161 | Input/Output: [(90 90 90 90) 90]
Test Case: 162 | Input/Output: [(11 11 11 11) 11]
Test Case: 163 | Input/Output: [(83 83 83 83) 83]
Test Case: 164 | Input/Output: [(96 96 96 96) 96]
Test Case: 165 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 166 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 167 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 168 | Input/Output: [(72 72 72 72) 72]
Test Case: 169 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 170 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 171 | Input/Output: [(65 65 65 65) 65]
Test Case: 172 | Input/Output: [(36 36 36 36) 36]
Test Case: 173 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 174 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 175 | Input/Output: [(93 93 93 93) 93]
Test Case: 176 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 177 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 178 | Input/Output: [(38 38 38 38) 38]
Test Case: 179 | Input/Output: [(54 54 54 54) 54]
Test Case: 180 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 181 | Input/Output: [(46 46 46 46) 46]
Test Case: 182 | Input/Output: [(6 6 6 6) 6]
Test Case: 183 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 184 | Input/Output: [(32 32 32 32) 32]
Test Case: 185 | Input/Output: [(54 54 54 54) 54]
Test Case: 186 | Input/Output: [(93 93 93 93) 93]
Test Case: 187 | Input/Output: [(32 32 32 32) 32]
Test Case: 188 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 189 | Input/Output: [(17 17 17 17) 17]
Test Case: 190 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 191 | Input/Output: [(89 89 89 89) 89]
Test Case: 192 | Input/Output: [(93 93 93 93) 93]
Test Case: 193 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 194 | Input/Output: [(96 96 96 96) 96]
Test Case: 195 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 196 | Input/Output: [(64 64 64 64) 64]
Test Case: 197 | Input/Output: [(77 77 77 77) 77]
Test Case: 198 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 199 | Input/Output: [(30 30 30 30) 30]
Test Case: 200 | Input/Output: [(64 12 24 94) 12]
Test Case: 201 | Input/Output: [(51 67 68 56) 51]
Test Case: 202 | Input/Output: [(29 1 57 45) 1]
Test Case: 203 | Input/Output: [(17 56 36 30) 17]
Test Case: 204 | Input/Output: [(19 91 84 31) 19]
Test Case: 205 | Input/Output: [(46 59 25 31) 25]
Test Case: 206 | Input/Output: [(29 53 41 52) 29]
Test Case: 207 | Input/Output: [(17 36 25 3) 3]
Test Case: 208 | Input/Output: [(66 94 5 25) 5]
Test Case: 209 | Input/Output: [(11 5 11 85) 5]
Test Case: 210 | Input/Output: [(20 64 66 92) 20]
Test Case: 211 | Input/Output: [(35 71 64 42) 35]
Test Case: 212 | Input/Output: [(84 4 67 3) 3]
Test Case: 213 | Input/Output: [(94 72 79 45) 45]
Test Case: 214 | Input/Output: [(100 88 39 67) 39]
Test Case: 215 | Input/Output: [(29 76 81 17) 17]
Test Case: 216 | Input/Output: [(60 48 89 1) 1]
Test Case: 217 | Input/Output: [(74 9 90 25) 9]
Test Case: 218 | Input/Output: [(50 41 31 50) 31]
Test Case: 219 | Input/Output: [(91 46 36 82) 36]
Test Case: 220 | Input/Output: [(23 88 59 69) 23]
Test Case: 221 | Input/Output: [(8 5 38 76) 5]
Test Case: 222 | Input/Output: [(47 1 27 60) 1]
Test Case: 223 | Input/Output: [(90 27 82 15) 15]
Test Case: 224 | Input/Output: [(53 5 64 55) 5]
Test Case: 225 | Input/Output: [(91 43 36 24) 24]
Test Case: 226 | Input/Output: [(93 31 55 74) 31]
Test Case: 227 | Input/Output: [(76 56 39 15) 15]
Test Case: 228 | Input/Output: [(25 78 84 39) 25]
Test Case: 229 | Input/Output: [(29 8 3 57) 3]
Test Case: 230 | Input/Output: [(25 47 48 19) 19]
Test Case: 231 | Input/Output: [(66 56 75 24) 24]
Test Case: 232 | Input/Output: [(87 83 10 87) 10]
Test Case: 233 | Input/Output: [(40 50 73 2) 2]
Test Case: 234 | Input/Output: [(61 82 20 8) 8]
Test Case: 235 | Input/Output: [(79 42 60 99) 42]
Test Case: 236 | Input/Output: [(22 88 59 8) 8]
Test Case: 237 | Input/Output: [(29 84 49 25) 25]
Test Case: 238 | Input/Output: [(35 98 92 45) 35]
Test Case: 239 | Input/Output: [(58 54 71 70) 54]
Test Case: 240 | Input/Output: [(59 91 61 88) 59]
Test Case: 241 | Input/Output: [(95 64 68 20) 20]
Test Case: 242 | Input/Output: [(18 92 75 43) 18]
Test Case: 243 | Input/Output: [(30 58 12 68) 12]
Test Case: 244 | Input/Output: [(34 71 14 30) 14]
Test Case: 245 | Input/Output: [(50 78 33 51) 33]
Test Case: 246 | Input/Output: [(18 53 44 30) 18]
Test Case: 247 | Input/Output: [(92 22 5 3) 3]
Test Case: 248 | Input/Output: [(11 14 31 71) 11]
Test Case: 249 | Input/Output: [(24 95 3 66) 3]
Test Case: 250 | Input/Output: [(57 70 15 85) 15]
Test Case: 251 | Input/Output: [(14 55 86 17) 14]
Test Case: 252 | Input/Output: [(63 87 52 92) 52]
Test Case: 253 | Input/Output: [(62 71 83 18) 18]
Test Case: 254 | Input/Output: [(26 100 83 15) 15]
Test Case: 255 | Input/Output: [(53 57 41 60) 41]
Test Case: 256 | Input/Output: [(6 62 41 10) 6]
Test Case: 257 | Input/Output: [(29 25 34 75) 25]
Test Case: 258 | Input/Output: [(85 56 64 28) 28]
Test Case: 259 | Input/Output: [(99 14 24 59) 14]
Test Case: 260 | Input/Output: [(4 51 0 11) 0]
Test Case: 261 | Input/Output: [(29 51 60 35) 29]
Test Case: 262 | Input/Output: [(32 34 68 44) 32]
Test Case: 263 | Input/Output: [(94 37 45 41) 37]
Test Case: 264 | Input/Output: [(1 63 33 33) 1]
Test Case: 265 | Input/Output: [(91 17 0 52) 0]
Test Case: 266 | Input/Output: [(59 20 53 53) 20]
Test Case: 267 | Input/Output: [(26 6 6 16) 6]
Test Case: 268 | Input/Output: [(81 44 60 82) 44]
Test Case: 269 | Input/Output: [(13 51 37 49) 13]
Test Case: 270 | Input/Output: [(57 10 53 24) 10]
Test Case: 271 | Input/Output: [(34 95 70 43) 34]
Test Case: 272 | Input/Output: [(55 28 68 20) 20]
Test Case: 273 | Input/Output: [(37 78 92 82) 37]
Test Case: 274 | Input/Output: [(10 62 21 92) 10]
Test Case: 275 | Input/Output: [(1 14 4 67) 1]
Test Case: 276 | Input/Output: [(40 14 51 56) 14]
Test Case: 277 | Input/Output: [(64 82 51 74) 51]
Test Case: 278 | Input/Output: [(73 99 46 21) 21]
Test Case: 279 | Input/Output: [(17 65 7 12) 7]
Test Case: 280 | Input/Output: [(89 10 67 11) 10]
Test Case: 281 | Input/Output: [(78 1 92 60) 1]
Test Case: 282 | Input/Output: [(64 16 9 36) 9]
Test Case: 283 | Input/Output: [(11 31 47 36) 11]
Test Case: 284 | Input/Output: [(79 42 48 98) 42]
Test Case: 285 | Input/Output: [(48 22 57 79) 22]
Test Case: 286 | Input/Output: [(10 46 10 80) 10]
Test Case: 287 | Input/Output: [(96 4 54 86) 4]
Test Case: 288 | Input/Output: [(47 17 68 25) 17]
Test Case: 289 | Input/Output: [(47 83 11 44) 11]
Test Case: 290 | Input/Output: [(32 72 10 25) 10]
Test Case: 291 | Input/Output: [(69 56 0 29) 0]
Test Case: 292 | Input/Output: [(8 17 87 47) 8]
Test Case: 293 | Input/Output: [(43 91 82 41) 41]
Test Case: 294 | Input/Output: [(80 82 67 57) 57]
Test Case: 295 | Input/Output: [(9 52 21 12) 9]
Test Case: 296 | Input/Output: [(27 57 3 29) 3]
Test Case: 297 | Input/Output: [(32 6 9 47) 6]
Test Case: 298 | Input/Output: [(81 99 85 35) 35]
Test Case: 299 | Input/Output: [(24 86 60 31) 24]
Test Case: 300 | Input/Output: [(59 44 59 58) 44]
Test Case: 301 | Input/Output: [(32 5 91 2) 2]
Test Case: 302 | Input/Output: [(87 93 68 77) 68]
Test Case: 303 | Input/Output: [(58 25 7 56) 7]
Test Case: 304 | Input/Output: [(46 66 21 9) 9]
Test Case: 305 | Input/Output: [(21 41 85 42) 21]
Test Case: 306 | Input/Output: [(41 63 27 14) 14]
Test Case: 307 | Input/Output: [(71 74 9 14) 9]
Test Case: 308 | Input/Output: [(27 93 26 100) 26]
Test Case: 309 | Input/Output: [(70 24 10 1) 1]
Test Case: 310 | Input/Output: [(93 9 38 47) 9]
Test Case: 311 | Input/Output: [(85 3 69 13) 3]
Test Case: 312 | Input/Output: [(0 5 92 33) 0]
Test Case: 313 | Input/Output: [(61 10 81 82) 10]
Test Case: 314 | Input/Output: [(21 44 89 16) 16]
Test Case: 315 | Input/Output: [(56 72 8 41) 8]
Test Case: 316 | Input/Output: [(93 27 9 54) 9]
Test Case: 317 | Input/Output: [(28 37 46 77) 28]
Test Case: 318 | Input/Output: [(73 25 77 65) 25]
Test Case: 319 | Input/Output: [(7 78 11 30) 7]
Test Case: 320 | Input/Output: [(9 79 89 91) 9]
Test Case: 321 | Input/Output: [(60 10 4 78) 4]
Test Case: 322 | Input/Output: [(44 93 15 62) 15]
Test Case: 323 | Input/Output: [(47 92 75 88) 47]
Test Case: 324 | Input/Output: [(36 42 46 14) 14]
Test Case: 325 | Input/Output: [(69 35 96 36) 35]
Test Case: 326 | Input/Output: [(10 96 7 40) 7]
Test Case: 327 | Input/Output: [(30 80 18 15) 15]
Test Case: 328 | Input/Output: [(54 28 12 50) 12]
Test Case: 329 | Input/Output: [(65 51 86 40) 40]
Test Case: 330 | Input/Output: [(52 53 4 90) 4]
Test Case: 331 | Input/Output: [(60 59 95 74) 59]
Test Case: 332 | Input/Output: [(18 15 97 62) 15]
Test Case: 333 | Input/Output: [(57 40 4 100) 4]
Test Case: 334 | Input/Output: [(100 16 74 41) 16]
Test Case: 335 | Input/Output: [(79 84 86 75) 75]
Test Case: 336 | Input/Output: [(19 49 87 86) 19]
Test Case: 337 | Input/Output: [(53 18 71 11) 11]
Test Case: 338 | Input/Output: [(20 9 45 4) 4]
Test Case: 339 | Input/Output: [(41 50 84 80) 41]
Test Case: 340 | Input/Output: [(88 58 61 90) 58]
Test Case: 341 | Input/Output: [(47 24 49 98) 24]
Test Case: 342 | Input/Output: [(92 65 63 71) 63]
Test Case: 343 | Input/Output: [(13 20 42 37) 13]
Test Case: 344 | Input/Output: [(42 62 66 98) 42]
Test Case: 345 | Input/Output: [(23 21 70 27) 21]
Test Case: 346 | Input/Output: [(13 94 18 38) 13]
Test Case: 347 | Input/Output: [(62 48 48 40) 40]
Test Case: 348 | Input/Output: [(62 100 98 74) 62]
Test Case: 349 | Input/Output: [(89 93 18 12) 12]
Test Case: 350 | Input/Output: [(100 64 16 34) 16]
Test Case: 351 | Input/Output: [(23 9 99 99) 9]
Test Case: 352 | Input/Output: [(95 16 40 99) 16]
Test Case: 353 | Input/Output: [(19 26 49 87) 19]
Test Case: 354 | Input/Output: [(9 75 40 41) 9]
Test Case: 355 | Input/Output: [(0 60 67 94) 0]
Test Case: 356 | Input/Output: [(52 21 88 10) 10]
Test Case: 357 | Input/Output: [(9 49 46 72) 9]
Test Case: 358 | Input/Output: [(17 59 15 67) 15]
Test Case: 359 | Input/Output: [(75 6 7 81) 6]
Test Case: 360 | Input/Output: [(6 36 25 2) 2]
Test Case: 361 | Input/Output: [(71 36 78 65) 36]
Test Case: 362 | Input/Output: [(14 35 32 5) 5]
Test Case: 363 | Input/Output: [(0 2 1 30) 0]
Test Case: 364 | Input/Output: [(98 16 57 83) 16]
Test Case: 365 | Input/Output: [(98 78 35 73) 35]
Test Case: 366 | Input/Output: [(42 31 37 61) 31]
Test Case: 367 | Input/Output: [(21 63 44 74) 21]
Test Case: 368 | Input/Output: [(100 91 34 14) 14]
Test Case: 369 | Input/Output: [(99 40 55 22) 22]
Test Case: 370 | Input/Output: [(51 64 67 0) 0]
Test Case: 371 | Input/Output: [(94 77 10 39) 10]
Test Case: 372 | Input/Output: [(25 13 9 13) 9]
Test Case: 373 | Input/Output: [(2 16 36 70) 2]
Test Case: 374 | Input/Output: [(6 43 50 7) 6]
Test Case: 375 | Input/Output: [(63 80 46 88) 46]
Test Case: 376 | Input/Output: [(51 81 79 75) 51]
Test Case: 377 | Input/Output: [(68 16 57 12) 12]
Test Case: 378 | Input/Output: [(66 20 16 6) 6]
Test Case: 379 | Input/Output: [(59 62 33 16) 16]
Test Case: 380 | Input/Output: [(52 34 92 49) 34]
Test Case: 381 | Input/Output: [(34 44 26 66) 26]
Test Case: 382 | Input/Output: [(30 76 33 44) 30]
Test Case: 383 | Input/Output: [(86 8 69 12) 8]
Test Case: 384 | Input/Output: [(64 27 88 50) 27]
Test Case: 385 | Input/Output: [(54 39 44 23) 23]
Test Case: 386 | Input/Output: [(15 56 93 14) 14]
Test Case: 387 | Input/Output: [(49 15 6 98) 6]
Test Case: 388 | Input/Output: [(79 65 73 70) 65]
Test Case: 389 | Input/Output: [(32 98 66 2) 2]
Test Case: 390 | Input/Output: [(34 73 87 91) 34]
Test Case: 391 | Input/Output: [(97 73 94 78) 73]
Test Case: 392 | Input/Output: [(27 10 94 86) 10]
Test Case: 393 | Input/Output: [(79 23 93 4) 4]
Test Case: 394 | Input/Output: [(67 48 82 72) 48]
Test Case: 395 | Input/Output: [(90 67 17 61) 17]
Test Case: 396 | Input/Output: [(73 85 92 42) 42]
Test Case: 397 | Input/Output: [(92 17 61 45) 17]
Test Case: 398 | Input/Output: [(7 42 30 7) 7]
Test Case: 399 | Input/Output: [(88 60 42 87) 42]
Test Case: 400 | Input/Output: [(-76 31 -5 78) -76]
Test Case: 401 | Input/Output: [(-13 26 88 -42) -42]
Test Case: 402 | Input/Output: [(-33 57 -11 -15) -33]
Test Case: 403 | Input/Output: [(65 58 -6 -100) -100]
Test Case: 404 | Input/Output: [(-29 -51 -95 84) -95]
Test Case: 405 | Input/Output: [(89 -69 -42 17) -69]
Test Case: 406 | Input/Output: [(-22 -44 74 96) -44]
Test Case: 407 | Input/Output: [(39 97 21 16) 16]
Test Case: 408 | Input/Output: [(60 47 -88 76) -88]
Test Case: 409 | Input/Output: [(90 -92 -23 -30) -92]
Test Case: 410 | Input/Output: [(44 -77 -46 -2) -77]
Test Case: 411 | Input/Output: [(44 -72 75 -30) -72]
Test Case: 412 | Input/Output: [(-41 92 -92 -88) -92]
Test Case: 413 | Input/Output: [(24 26 44 53) 24]
Test Case: 414 | Input/Output: [(-44 -93 -94 3) -94]
Test Case: 415 | Input/Output: [(56 72 -34 -60) -60]
Test Case: 416 | Input/Output: [(-70 39 13 -72) -72]
Test Case: 417 | Input/Output: [(66 73 -49 61) -49]
Test Case: 418 | Input/Output: [(-32 55 47 32) -32]
Test Case: 419 | Input/Output: [(-8 -16 -43 85) -43]
Test Case: 420 | Input/Output: [(-93 86 -97 -20) -97]
Test Case: 421 | Input/Output: [(4 -89 -25 88) -89]
Test Case: 422 | Input/Output: [(-98 -14 59 -13) -98]
Test Case: 423 | Input/Output: [(-17 38 -57 -19) -57]
Test Case: 424 | Input/Output: [(38 50 14 -23) -23]
Test Case: 425 | Input/Output: [(37 -60 73 -37) -60]
Test Case: 426 | Input/Output: [(71 -88 54 -3) -88]
Test Case: 427 | Input/Output: [(99 -94 49 -84) -94]
Test Case: 428 | Input/Output: [(27 5 69 83) 5]
Test Case: 429 | Input/Output: [(-65 -51 80 33) -65]
Test Case: 430 | Input/Output: [(95 -94 -100 -97) -100]
Test Case: 431 | Input/Output: [(-65 -57 60 -66) -66]
Test Case: 432 | Input/Output: [(59 75 81 30) 30]
Test Case: 433 | Input/Output: [(-88 36 92 -51) -88]
Test Case: 434 | Input/Output: [(52 -26 -67 -78) -78]
Test Case: 435 | Input/Output: [(48 -53 -12 -91) -91]
Test Case: 436 | Input/Output: [(-88 92 0 -97) -97]
Test Case: 437 | Input/Output: [(31 -90 -62 -1) -90]
Test Case: 438 | Input/Output: [(86 -7 -33 -7) -33]
Test Case: 439 | Input/Output: [(73 -38 50 -39) -39]
Test Case: 440 | Input/Output: [(-55 -72 40 -73) -73]
Test Case: 441 | Input/Output: [(58 -46 61 97) -46]
Test Case: 442 | Input/Output: [(11 89 99 18) 11]
Test Case: 443 | Input/Output: [(-68 -12 -90 46) -90]
Test Case: 444 | Input/Output: [(-100 19 -96 81) -100]
Test Case: 445 | Input/Output: [(99 61 33 85) 33]
Test Case: 446 | Input/Output: [(-34 64 46 -9) -34]
Test Case: 447 | Input/Output: [(-16 36 12 -10) -16]
Test Case: 448 | Input/Output: [(27 -29 81 78) -29]
Test Case: 449 | Input/Output: [(45 12 -80 29) -80]
Test Case: 450 | Input/Output: [(53 -93 52 11) -93]
Test Case: 451 | Input/Output: [(55 -57 -46 -57) -57]
Test Case: 452 | Input/Output: [(-78 -47 -12 -46) -78]
Test Case: 453 | Input/Output: [(48 70 -88 34) -88]
Test Case: 454 | Input/Output: [(-86 -74 86 2) -86]
Test Case: 455 | Input/Output: [(19 -13 -54 25) -54]
Test Case: 456 | Input/Output: [(-60 28 27 92) -60]
Test Case: 457 | Input/Output: [(43 -100 -39 100) -100]
Test Case: 458 | Input/Output: [(-39 -6 -59 85) -59]
Test Case: 459 | Input/Output: [(-19 90 75 72) -19]
Test Case: 460 | Input/Output: [(10 80 56 -61) -61]
Test Case: 461 | Input/Output: [(-10 -73 -35 57) -73]
Test Case: 462 | Input/Output: [(-75 -3 3 -73) -75]
Test Case: 463 | Input/Output: [(86 -31 -49 -99) -99]
Test Case: 464 | Input/Output: [(48 77 -3 -4) -4]
Test Case: 465 | Input/Output: [(-21 62 29 -10) -21]
Test Case: 466 | Input/Output: [(20 -66 -34 -5) -66]
Test Case: 467 | Input/Output: [(-4 98 -86 24) -86]
Test Case: 468 | Input/Output: [(-66 85 1 67) -66]
Test Case: 469 | Input/Output: [(-65 42 -98 -7) -98]
Test Case: 470 | Input/Output: [(-78 40 -36 94) -78]
Test Case: 471 | Input/Output: [(52 -37 66 -18) -37]
Test Case: 472 | Input/Output: [(-55 -68 -53 6) -68]
Test Case: 473 | Input/Output: [(-48 59 68 94) -48]
Test Case: 474 | Input/Output: [(-79 -19 98 -33) -79]
Test Case: 475 | Input/Output: [(27 -51 65 64) -51]
Test Case: 476 | Input/Output: [(46 -18 14 94) -18]
Test Case: 477 | Input/Output: [(21 6 -70 -80) -80]
Test Case: 478 | Input/Output: [(64 -68 22 -3) -68]
Test Case: 479 | Input/Output: [(-19 -4 -23 73) -23]
Test Case: 480 | Input/Output: [(-72 31 -26 -11) -72]
Test Case: 481 | Input/Output: [(-54 -23 -94 -67) -94]
Test Case: 482 | Input/Output: [(79 -1 -4 -84) -84]
Test Case: 483 | Input/Output: [(-91 68 53 -97) -97]
Test Case: 484 | Input/Output: [(66 -50 -61 38) -61]
Test Case: 485 | Input/Output: [(13 -78 12 42) -78]
Test Case: 486 | Input/Output: [(57 49 -61 -21) -61]
Test Case: 487 | Input/Output: [(63 41 -77 45) -77]
Test Case: 488 | Input/Output: [(-29 -97 83 -25) -97]
Test Case: 489 | Input/Output: [(10 61 -79 68) -79]
Test Case: 490 | Input/Output: [(9 21 15 58) 9]
Test Case: 491 | Input/Output: [(-87 98 41 -41) -87]
Test Case: 492 | Input/Output: [(-74 56 -100 79) -100]
Test Case: 493 | Input/Output: [(94 -4 -27 32) -27]
Test Case: 494 | Input/Output: [(-43 -68 89 -36) -68]
Test Case: 495 | Input/Output: [(-58 -38 37 -84) -84]
Test Case: 496 | Input/Output: [(79 -61 76 -31) -61]
Test Case: 497 | Input/Output: [(-18 68 95 75) -18]
Test Case: 498 | Input/Output: [(-44 57 39 -48) -48]
Test Case: 499 | Input/Output: [(61 -73 34 72) -73]
Test Case: 500 | Input/Output: [(-92 -14 1 -83) -92]
Test Case: 501 | Input/Output: [(69 29 -17 -21) -21]
Test Case: 502 | Input/Output: [(30 -57 -100 -22) -100]
Test Case: 503 | Input/Output: [(-18 95 -34 7) -34]
Test Case: 504 | Input/Output: [(-74 5 76 27) -74]
Test Case: 505 | Input/Output: [(2 84 -22 -43) -43]
Test Case: 506 | Input/Output: [(55 -52 -51 78) -52]
Test Case: 507 | Input/Output: [(43 -98 88 16) -98]
Test Case: 508 | Input/Output: [(59 43 79 71) 43]
Test Case: 509 | Input/Output: [(-45 -38 -14 -2) -45]
Test Case: 510 | Input/Output: [(28 -20 51 11) -20]
Test Case: 511 | Input/Output: [(-10 36 8 99) -10]
Test Case: 512 | Input/Output: [(99 19 -43 65) -43]
Test Case: 513 | Input/Output: [(24 83 -66 78) -66]
Test Case: 514 | Input/Output: [(-79 -36 -83 6) -83]
Test Case: 515 | Input/Output: [(-57 -98 -91 91) -98]
Test Case: 516 | Input/Output: [(41 19 39 97) 19]
Test Case: 517 | Input/Output: [(-97 11 58 -71) -97]
Test Case: 518 | Input/Output: [(2 -48 92 99) -48]
Test Case: 519 | Input/Output: [(-91 21 -1 -35) -91]
Test Case: 520 | Input/Output: [(58 -70 -19 -94) -94]
Test Case: 521 | Input/Output: [(-77 89 61 -100) -100]
Test Case: 522 | Input/Output: [(-100 -89 16 57) -100]
Test Case: 523 | Input/Output: [(51 -77 88 18) -77]
Test Case: 524 | Input/Output: [(11 5 -58 86) -58]
Test Case: 525 | Input/Output: [(27 0 -33 -68) -68]
Test Case: 526 | Input/Output: [(-67 -37 85 27) -67]
Test Case: 527 | Input/Output: [(-15 -60 -8 -55) -60]
Test Case: 528 | Input/Output: [(58 -75 50 95) -75]
Test Case: 529 | Input/Output: [(1 20 85 -78) -78]
Test Case: 530 | Input/Output: [(2 -8 -77 -18) -77]
Test Case: 531 | Input/Output: [(69 -45 83 20) -45]
Test Case: 532 | Input/Output: [(37 75 13 49) 13]
Test Case: 533 | Input/Output: [(39 22 12 -15) -15]
Test Case: 534 | Input/Output: [(-39 90 -60 62) -60]
Test Case: 535 | Input/Output: [(52 -81 33 -28) -81]
Test Case: 536 | Input/Output: [(-76 -71 29 57) -76]
Test Case: 537 | Input/Output: [(70 51 -26 -2) -26]
Test Case: 538 | Input/Output: [(76 -34 -38 47) -38]
Test Case: 539 | Input/Output: [(-3 -11 92 62) -11]
Test Case: 540 | Input/Output: [(-5 -36 -88 -81) -88]
Test Case: 541 | Input/Output: [(31 60 77 -30) -30]
Test Case: 542 | Input/Output: [(3 -8 -87 17) -87]
Test Case: 543 | Input/Output: [(44 -75 24 -24) -75]
Test Case: 544 | Input/Output: [(45 36 21 -92) -92]
Test Case: 545 | Input/Output: [(15 94 17 1) 1]
Test Case: 546 | Input/Output: [(91 3 -39 7) -39]
Test Case: 547 | Input/Output: [(-67 -55 100 5) -67]
Test Case: 548 | Input/Output: [(-61 92 -4 50) -61]
Test Case: 549 | Input/Output: [(-52 -26 -87 61) -87]
Test Case: 550 | Input/Output: [(60 -62 15 74) -62]
Test Case: 551 | Input/Output: [(-37 -71 96 16) -71]
Test Case: 552 | Input/Output: [(94 24 100 -88) -88]
Test Case: 553 | Input/Output: [(-63 -5 -31 -56) -63]
Test Case: 554 | Input/Output: [(57 64 48 37) 37]
Test Case: 555 | Input/Output: [(-51 36 -50 -88) -88]
Test Case: 556 | Input/Output: [(22 97 46 -73) -73]
Test Case: 557 | Input/Output: [(46 12 -24 20) -24]
Test Case: 558 | Input/Output: [(44 42 61 -59) -59]
Test Case: 559 | Input/Output: [(50 -61 -5 25) -61]
Test Case: 560 | Input/Output: [(-98 -65 57 -100) -100]
Test Case: 561 | Input/Output: [(-10 80 47 14) -10]
Test Case: 562 | Input/Output: [(-31 17 58 38) -31]
Test Case: 563 | Input/Output: [(-73 -97 -44 -38) -97]
Test Case: 564 | Input/Output: [(88 -77 29 -66) -77]
Test Case: 565 | Input/Output: [(33 -68 -34 35) -68]
Test Case: 566 | Input/Output: [(65 -5 37 -54) -54]
Test Case: 567 | Input/Output: [(-17 -96 -1 -44) -96]
Test Case: 568 | Input/Output: [(-55 62 37 -100) -100]
Test Case: 569 | Input/Output: [(-95 -93 -18 36) -95]
Test Case: 570 | Input/Output: [(-46 9 -35 1) -46]
Test Case: 571 | Input/Output: [(-66 41 55 -45) -66]
Test Case: 572 | Input/Output: [(-93 46 84 -32) -93]
Test Case: 573 | Input/Output: [(3 96 0 -44) -44]
Test Case: 574 | Input/Output: [(71 -74 9 14) -74]
Test Case: 575 | Input/Output: [(-16 -41 -49 76) -49]
Test Case: 576 | Input/Output: [(59 -69 -44 -44) -69]
Test Case: 577 | Input/Output: [(25 39 -28 -99) -99]
Test Case: 578 | Input/Output: [(24 -99 -57 -15) -99]
Test Case: 579 | Input/Output: [(-28 -23 -5 35) -28]
Test Case: 580 | Input/Output: [(23 35 -33 -61) -61]
Test Case: 581 | Input/Output: [(-6 98 -78 -57) -78]
Test Case: 582 | Input/Output: [(-68 12 -73 -47) -73]
Test Case: 583 | Input/Output: [(-7 46 76 17) -7]
Test Case: 584 | Input/Output: [(42 -37 78 -77) -77]
Test Case: 585 | Input/Output: [(35 47 -39 -49) -49]
Test Case: 586 | Input/Output: [(-45 47 -54 -30) -54]
Test Case: 587 | Input/Output: [(44 -39 -2 28) -39]
Test Case: 588 | Input/Output: [(14 -14 -48 11) -48]
Test Case: 589 | Input/Output: [(93 -82 29 -36) -82]
Test Case: 590 | Input/Output: [(-84 74 55 48) -84]
Test Case: 591 | Input/Output: [(66 54 -13 -96) -96]
Test Case: 592 | Input/Output: [(-65 -81 83 -6) -81]
Test Case: 593 | Input/Output: [(11 -93 12 -46) -93]
Test Case: 594 | Input/Output: [(-40 73 31 13) -40]
Test Case: 595 | Input/Output: [(97 -100 -50 43) -100]
Test Case: 596 | Input/Output: [(-24 17 -56 33) -56]
Test Case: 597 | Input/Output: [(89 81 -64 -16) -64]
Test Case: 598 | Input/Output: [(-82 -74 93 -92) -92]
Test Case: 599 | Input/Output: [(22 97 64 37) 22]
Test Case: 600 | Input/Output: [(37 -88 -26 78) -88]
Test Case: 601 | Input/Output: [(-23 -66 47 74) -66]
Test Case: 602 | Input/Output: [(-51 -52 -18 65) -52]
Test Case: 603 | Input/Output: [(11 -88 48 61) -88]
Test Case: 604 | Input/Output: [(57 -34 -88 -69) -88]
Test Case: 605 | Input/Output: [(79 -33 -12 -19) -33]
Test Case: 606 | Input/Output: [(-71 -4 27 -97) -97]
Test Case: 607 | Input/Output: [(1 58 71 -83) -83]
Test Case: 608 | Input/Output: [(14 34 77 -51) -51]
Test Case: 609 | Input/Output: [(87 88 5 -87) -87]
Test Case: 610 | Input/Output: [(-76 65 -74 -48) -76]
Test Case: 611 | Input/Output: [(91 43 32 91) 32]
Test Case: 612 | Input/Output: [(-40 -74 51 -93) -93]
Test Case: 613 | Input/Output: [(-38 -66 79 32) -66]
Test Case: 614 | Input/Output: [(37 50 79 -72) -72]
Test Case: 615 | Input/Output: [(-3 59 1 16) -3]
Test Case: 616 | Input/Output: [(60 -34 2 44) -34]
Test Case: 617 | Input/Output: [(-95 -37 -13 27) -95]
Test Case: 618 | Input/Output: [(-41 -10 25 -9) -41]
Test Case: 619 | Input/Output: [(-49 -69 42 1) -69]
Test Case: 620 | Input/Output: [(-74 -95 99 -31) -95]
Test Case: 621 | Input/Output: [(-27 -21 68 50) -27]
Test Case: 622 | Input/Output: [(-65 -15 -19 -30) -65]
Test Case: 623 | Input/Output: [(-61 -51 17 -100) -100]
Test Case: 624 | Input/Output: [(-100 -38 55 68) -100]
Test Case: 625 | Input/Output: [(35 1 -55 -60) -60]
Test Case: 626 | Input/Output: [(19 -46 57 -68) -68]
Test Case: 627 | Input/Output: [(98 89 99 93) 89]
Test Case: 628 | Input/Output: [(54 59 56 5) 5]
Test Case: 629 | Input/Output: [(-76 54 3 -25) -76]
Test Case: 630 | Input/Output: [(6 52 67 -96) -96]
Test Case: 631 | Input/Output: [(-18 63 61 -56) -56]
Test Case: 632 | Input/Output: [(51 53 -68 15) -68]
Test Case: 633 | Input/Output: [(-22 61 -41 53) -41]
Test Case: 634 | Input/Output: [(-5 45 -80 40) -80]
Test Case: 635 | Input/Output: [(-80 59 91 -75) -80]
Test Case: 636 | Input/Output: [(-34 80 -84 41) -84]
Test Case: 637 | Input/Output: [(89 -39 -16 30) -39]
Test Case: 638 | Input/Output: [(31 -34 -89 70) -89]
Test Case: 639 | Input/Output: [(-93 96 -27 -9) -93]
Test Case: 640 | Input/Output: [(37 99 -58 58) -58]
Test Case: 641 | Input/Output: [(-42 75 59 78) -42]
Test Case: 642 | Input/Output: [(-37 -37 -19 -67) -67]
Test Case: 643 | Input/Output: [(-61 66 72 40) -61]
Test Case: 644 | Input/Output: [(-11 -16 -66 -18) -66]
Test Case: 645 | Input/Output: [(68 -53 22 9) -53]
Test Case: 646 | Input/Output: [(-10 9 73 -36) -36]
Test Case: 647 | Input/Output: [(32 -96 92 -19) -96]
Test Case: 648 | Input/Output: [(-78 11 54 -12) -78]
Test Case: 649 | Input/Output: [(-96 4 32 -3) -96]
Test Case: 650 | Input/Output: [(95 72 -35 91) -35]
Test Case: 651 | Input/Output: [(-89 63 -32 86) -89]
Test Case: 652 | Input/Output: [(-31 57 45 98) -31]
Test Case: 653 | Input/Output: [(48 72 -4 -96) -96]
Test Case: 654 | Input/Output: [(-69 -77 -6 -41) -77]
Test Case: 655 | Input/Output: [(-55 -13 -3 23) -55]
Test Case: 656 | Input/Output: [(2 -7 16 -26) -26]
Test Case: 657 | Input/Output: [(-80 -91 44 74) -91]
Test Case: 658 | Input/Output: [(99 -80 -48 -18) -80]
Test Case: 659 | Input/Output: [(83 20 81 -6) -6]
Test Case: 660 | Input/Output: [(78 -90 -31 34) -90]
Test Case: 661 | Input/Output: [(26 100 42 -57) -57]
Test Case: 662 | Input/Output: [(-90 59 -13 -78) -90]
Test Case: 663 | Input/Output: [(96 90 56 51) 51]
Test Case: 664 | Input/Output: [(0 23 -42 -100) -100]
Test Case: 665 | Input/Output: [(-13 83 95 60) -13]
Test Case: 666 | Input/Output: [(20 -51 23 -6) -51]
Test Case: 667 | Input/Output: [(-49 -24 -27 -71) -71]
Test Case: 668 | Input/Output: [(-79 42 80 -81) -81]
Test Case: 669 | Input/Output: [(21 57 -80 92) -80]
Test Case: 670 | Input/Output: [(9 67 -42 82) -42]
Test Case: 671 | Input/Output: [(-79 17 14 97) -79]
Test Case: 672 | Input/Output: [(75 67 -61 76) -61]
Test Case: 673 | Input/Output: [(84 -4 69 31) -4]
Test Case: 674 | Input/Output: [(47 -12 5 23) -12]
Test Case: 675 | Input/Output: [(-23 -87 -85 75) -87]
Test Case: 676 | Input/Output: [(-31 -14 -6 -57) -57]
Test Case: 677 | Input/Output: [(-24 18 -66 -30) -66]
Test Case: 678 | Input/Output: [(-83 -21 77 -100) -100]
Test Case: 679 | Input/Output: [(19 -88 -75 -72) -88]
Test Case: 680 | Input/Output: [(-46 -90 89 25) -90]
Test Case: 681 | Input/Output: [(-84 -54 -81 -85) -85]
Test Case: 682 | Input/Output: [(22 76 -4 -80) -80]
Test Case: 683 | Input/Output: [(-64 -30 -55 -87) -87]
Test Case: 684 | Input/Output: [(90 -94 51 -95) -95]
Test Case: 685 | Input/Output: [(-13 -69 14 -73) -73]
Test Case: 686 | Input/Output: [(-93 -18 81 -89) -93]
Test Case: 687 | Input/Output: [(20 41 -1 -93) -93]
Test Case: 688 | Input/Output: [(-24 -49 -29 -34) -49]
Test Case: 689 | Input/Output: [(-35 -19 26 60) -35]
Test Case: 690 | Input/Output: [(13 -90 1 -45) -90]
Test Case: 691 | Input/Output: [(32 -74 38 -59) -74]
Test Case: 692 | Input/Output: [(89 57 84 -83) -83]
Test Case: 693 | Input/Output: [(13 -3 -45 9) -45]
Test Case: 694 | Input/Output: [(-80 -64 -9 -23) -80]
Test Case: 695 | Input/Output: [(-55 49 62 66) -55]
Test Case: 696 | Input/Output: [(-70 92 -9 -81) -81]
Test Case: 697 | Input/Output: [(-58 -93 37 -53) -93]
Test Case: 698 | Input/Output: [(62 67 61 21) 21]
Test Case: 699 | Input/Output: [(64 -84 83 65) -84]
Test Case: 700 | Input/Output: [(76 39 74 61) 39]
Test Case: 701 | Input/Output: [(93 78 -35 -5) -35]
Test Case: 702 | Input/Output: [(-43 -64 -98 -64) -98]
Test Case: 703 | Input/Output: [(-81 -4 44 0) -81]
Test Case: 704 | Input/Output: [(3 -50 -51 69) -51]
Test Case: 705 | Input/Output: [(18 -53 -90 41) -90]
Test Case: 706 | Input/Output: [(-24 -38 10 -2) -38]
Test Case: 707 | Input/Output: [(-83 -19 -55 31) -83]
Test Case: 708 | Input/Output: [(3 -69 41 76) -69]
Test Case: 709 | Input/Output: [(-50 -94 -95 78) -95]
Test Case: 710 | Input/Output: [(-46 94 -62 84) -62]
Test Case: 711 | Input/Output: [(74 26 41 -74) -74]
Test Case: 712 | Input/Output: [(-71 5 64 92) -71]
Test Case: 713 | Input/Output: [(-24 -72 -18 -72) -72]
Test Case: 714 | Input/Output: [(32 -69 -26 -63) -69]
Test Case: 715 | Input/Output: [(42 -32 -25 75) -32]
Test Case: 716 | Input/Output: [(-29 -47 -26 48) -47]
Test Case: 717 | Input/Output: [(76 -10 30 -61) -61]
Test Case: 718 | Input/Output: [(-24 79 57 -15) -24]
Test Case: 719 | Input/Output: [(-45 -67 43 -13) -67]
Test Case: 720 | Input/Output: [(44 47 28 81) 28]
Test Case: 721 | Input/Output: [(98 76 -41 -49) -49]
Test Case: 722 | Input/Output: [(58 -88 -37 68) -88]
Test Case: 723 | Input/Output: [(10 -60 -53 17) -60]
Test Case: 724 | Input/Output: [(-92 14 2 56) -92]
Test Case: 725 | Input/Output: [(-22 5 86 -87) -87]
Test Case: 726 | Input/Output: [(-44 53 88 61) -44]
Test Case: 727 | Input/Output: [(-69 -78 24 38) -78]
Test Case: 728 | Input/Output: [(-42 58 64 54) -42]
Test Case: 729 | Input/Output: [(42 52 -9 95) -9]
Test Case: 730 | Input/Output: [(-51 -21 4 92) -51]
Test Case: 731 | Input/Output: [(-46 20 -28 -41) -46]
Test Case: 732 | Input/Output: [(-44 -93 15 52) -93]
Test Case: 733 | Input/Output: [(90 -20 19 77) -20]
Test Case: 734 | Input/Output: [(-16 -14 49 53) -16]
Test Case: 735 | Input/Output: [(-51 -58 0 75) -58]
Test Case: 736 | Input/Output: [(-82 84 94 60) -82]
Test Case: 737 | Input/Output: [(44 90 97 30) 30]
Test Case: 738 | Input/Output: [(18 -62 17 65) -62]
Test Case: 739 | Input/Output: [(48 -28 53 65) -28]
Test Case: 740 | Input/Output: [(14 23 -47 43) -47]
Test Case: 741 | Input/Output: [(-12 -53 -32 84) -53]
Test Case: 742 | Input/Output: [(-27 25 50 69) -27]
Test Case: 743 | Input/Output: [(-58 6 -89 -90) -90]
Test Case: 744 | Input/Output: [(-55 68 78 -94) -94]
Test Case: 745 | Input/Output: [(-55 -81 -49 -61) -81]
Test Case: 746 | Input/Output: [(-61 78 43 35) -61]
Test Case: 747 | Input/Output: [(-72 -67 -35 -47) -72]
Test Case: 748 | Input/Output: [(85 92 84 30) 30]
Test Case: 749 | Input/Output: [(96 52 11 -65) -65]
Test Case: 750 | Input/Output: [(-89 17 -55 -34) -89]
Test Case: 751 | Input/Output: [(-85 -64 86 -100) -100]
Test Case: 752 | Input/Output: [(15 78 24 -21) -21]
Test Case: 753 | Input/Output: [(-55 -99 -43 10) -99]
Test Case: 754 | Input/Output: [(-31 30 -44 -23) -44]
Test Case: 755 | Input/Output: [(81 37 -16 99) -16]
Test Case: 756 | Input/Output: [(-1 64 96 -46) -46]
Test Case: 757 | Input/Output: [(60 99 30 -12) -12]
Test Case: 758 | Input/Output: [(44 -66 95 56) -66]
Test Case: 759 | Input/Output: [(94 99 -22 -85) -85]
Test Case: 760 | Input/Output: [(86 73 13 39) 13]
Test Case: 761 | Input/Output: [(67 -45 -73 57) -73]
Test Case: 762 | Input/Output: [(43 -33 -48 4) -48]
Test Case: 763 | Input/Output: [(34 37 76 -62) -62]
Test Case: 764 | Input/Output: [(5 63 74 -45) -45]
Test Case: 765 | Input/Output: [(32 -37 -20 64) -37]
Test Case: 766 | Input/Output: [(50 -84 1 34) -84]
Test Case: 767 | Input/Output: [(76 36 -9 -92) -92]
Test Case: 768 | Input/Output: [(34 -32 56 -41) -41]
Test Case: 769 | Input/Output: [(-83 11 21 79) -83]
Test Case: 770 | Input/Output: [(33 66 62 38) 33]
Test Case: 771 | Input/Output: [(-55 67 -47 -10) -55]
Test Case: 772 | Input/Output: [(-3 -45 -3 -8) -45]
Test Case: 773 | Input/Output: [(31 -5 -51 45) -51]
Test Case: 774 | Input/Output: [(21 13 -91 82) -91]
Test Case: 775 | Input/Output: [(37 54 26 21) 21]
Test Case: 776 | Input/Output: [(35 47 -93 92) -93]
Test Case: 777 | Input/Output: [(86 -49 5 61) -49]
Test Case: 778 | Input/Output: [(7 17 95 94) 7]
Test Case: 779 | Input/Output: [(59 93 -73 -2) -73]
Test Case: 780 | Input/Output: [(-4 21 69 -39) -39]
Test Case: 781 | Input/Output: [(-19 -44 70 69) -44]
Test Case: 782 | Input/Output: [(-20 -98 47 83) -98]
Test Case: 783 | Input/Output: [(-45 -74 -54 21) -74]
Test Case: 784 | Input/Output: [(-20 7 -32 45) -32]
Test Case: 785 | Input/Output: [(-60 12 -85 88) -85]
Test Case: 786 | Input/Output: [(-37 -99 75 -70) -99]
Test Case: 787 | Input/Output: [(25 9 62 57) 9]
Test Case: 788 | Input/Output: [(-99 36 49 74) -99]
Test Case: 789 | Input/Output: [(56 44 79 1) 1]
Test Case: 790 | Input/Output: [(-25 65 -53 -98) -98]
Test Case: 791 | Input/Output: [(-45 48 7 6) -45]
Test Case: 792 | Input/Output: [(-7 -86 26 46) -86]
Test Case: 793 | Input/Output: [(-2 36 -23 56) -23]
Test Case: 794 | Input/Output: [(-39 19 -28 96) -39]
Test Case: 795 | Input/Output: [(10 28 -23 -91) -91]
Test Case: 796 | Input/Output: [(55 -88 87 -17) -88]
Test Case: 797 | Input/Output: [(-43 44 71 22) -43]
Test Case: 798 | Input/Output: [(-16 -60 -18 -80) -80]
Test Case: 799 | Input/Output: [(50 6 -88 -67) -88]
Test Case: 800 | Input/Output: [(-20 -54 -56 35) -56]
Test Case: 801 | Input/Output: [(-32 49 -4 96) -32]
Test Case: 802 | Input/Output: [(25 61 14 -41) -41]
Test Case: 803 | Input/Output: [(83 47 59 10) 10]
Test Case: 804 | Input/Output: [(77 83 59 -77) -77]
Test Case: 805 | Input/Output: [(-37 -77 -11 -84) -84]
Test Case: 806 | Input/Output: [(78 -44 98 5) -44]
Test Case: 807 | Input/Output: [(10 -7 -82 77) -82]
Test Case: 808 | Input/Output: [(61 87 31 17) 17]
Test Case: 809 | Input/Output: [(68 -72 -7 -37) -72]
Test Case: 810 | Input/Output: [(-67 -87 -91 -90) -91]
Test Case: 811 | Input/Output: [(-91 -16 -23 42) -91]
Test Case: 812 | Input/Output: [(-29 5 19 9) -29]
Test Case: 813 | Input/Output: [(-35 -63 -92 39) -92]
Test Case: 814 | Input/Output: [(-15 -83 -26 -26) -83]
Test Case: 815 | Input/Output: [(11 60 19 -2) -2]
Test Case: 816 | Input/Output: [(24 60 16 -76) -76]
Test Case: 817 | Input/Output: [(96 -43 -27 9) -43]
Test Case: 818 | Input/Output: [(-26 -98 -64 36) -98]
Test Case: 819 | Input/Output: [(-49 54 78 -92) -92]
Test Case: 820 | Input/Output: [(-31 90 -68 73) -68]
Test Case: 821 | Input/Output: [(6 -3 100 -38) -38]
Test Case: 822 | Input/Output: [(-42 -48 -28 -84) -84]
Test Case: 823 | Input/Output: [(36 -81 20 96) -81]
Test Case: 824 | Input/Output: [(-100 80 58 -85) -100]
Test Case: 825 | Input/Output: [(25 -17 -70 53) -70]
Test Case: 826 | Input/Output: [(-8 78 19 -79) -79]
Test Case: 827 | Input/Output: [(60 -72 66 -53) -72]
Test Case: 828 | Input/Output: [(-97 42 11 76) -97]
Test Case: 829 | Input/Output: [(-55 57 -47 20) -55]
Test Case: 830 | Input/Output: [(91 37 71 -76) -76]
Test Case: 831 | Input/Output: [(63 -29 -61 -37) -61]
Test Case: 832 | Input/Output: [(-18 43 -47 55) -47]
Test Case: 833 | Input/Output: [(-32 1 1 -16) -32]
Test Case: 834 | Input/Output: [(56 92 57 -51) -51]
Test Case: 835 | Input/Output: [(-36 -80 -70 -73) -80]
Test Case: 836 | Input/Output: [(-65 -45 -62 6) -65]
Test Case: 837 | Input/Output: [(-75 62 97 -96) -96]
Test Case: 838 | Input/Output: [(-89 75 -30 92) -89]
Test Case: 839 | Input/Output: [(-59 47 -68 98) -68]
Test Case: 840 | Input/Output: [(-96 8 37 34) -96]
Test Case: 841 | Input/Output: [(-100 45 49 -13) -100]
Test Case: 842 | Input/Output: [(-57 58 -93 -49) -93]
Test Case: 843 | Input/Output: [(-16 -78 -44 -19) -78]
Test Case: 844 | Input/Output: [(-85 14 0 -84) -85]
Test Case: 845 | Input/Output: [(72 -80 39 0) -80]
Test Case: 846 | Input/Output: [(74 -26 18 -42) -42]
Test Case: 847 | Input/Output: [(52 -34 -64 36) -64]
Test Case: 848 | Input/Output: [(36 80 66 -80) -80]
Test Case: 849 | Input/Output: [(-83 94 58 -64) -83]
Test Case: 850 | Input/Output: [(24 -8 78 -72) -72]
Test Case: 851 | Input/Output: [(75 62 -20 54) -20]
Test Case: 852 | Input/Output: [(-25 33 -42 30) -42]
Test Case: 853 | Input/Output: [(-79 17 -59 5) -79]
Test Case: 854 | Input/Output: [(98 -71 -55 -84) -84]
Test Case: 855 | Input/Output: [(-20 -40 -62 -23) -62]
Test Case: 856 | Input/Output: [(-79 59 -56 1) -79]
Test Case: 857 | Input/Output: [(-43 21 -71 67) -71]
Test Case: 858 | Input/Output: [(-96 -84 6 -100) -100]
Test Case: 859 | Input/Output: [(-73 -12 -49 -30) -73]
Test Case: 860 | Input/Output: [(84 -93 48 97) -93]
Test Case: 861 | Input/Output: [(67 -81 -46 86) -81]
Test Case: 862 | Input/Output: [(0 100 -37 47) -37]
Test Case: 863 | Input/Output: [(-25 -90 85 -16) -90]
Test Case: 864 | Input/Output: [(-76 43 16 -87) -87]
Test Case: 865 | Input/Output: [(-95 -29 32 -81) -95]
Test Case: 866 | Input/Output: [(92 -3 -76 37) -76]
Test Case: 867 | Input/Output: [(60 100 -17 37) -17]
Test Case: 868 | Input/Output: [(-6 15 74 -87) -87]
Test Case: 869 | Input/Output: [(80 95 20 -47) -47]
Test Case: 870 | Input/Output: [(88 -60 34 -13) -60]
Test Case: 871 | Input/Output: [(33 -50 76 -93) -93]
Test Case: 872 | Input/Output: [(-6 -72 -92 -62) -92]
Test Case: 873 | Input/Output: [(-22 -16 26 20) -22]
Test Case: 874 | Input/Output: [(52 10 17 4) 4]
Test Case: 875 | Input/Output: [(-83 98 55 72) -83]
Test Case: 876 | Input/Output: [(-75 69 -12 88) -75]
Test Case: 877 | Input/Output: [(-65 86 79 41) -65]
Test Case: 878 | Input/Output: [(-80 28 20 67) -80]
Test Case: 879 | Input/Output: [(-27 49 33 94) -27]
Test Case: 880 | Input/Output: [(-45 21 -19 84) -45]
Test Case: 881 | Input/Output: [(-76 -17 -36 88) -76]
Test Case: 882 | Input/Output: [(-97 -49 82 -99) -99]
Test Case: 883 | Input/Output: [(-93 67 -20 60) -93]
Test Case: 884 | Input/Output: [(37 72 -20 26) -20]
Test Case: 885 | Input/Output: [(-48 28 -78 -12) -78]
Test Case: 886 | Input/Output: [(77 20 82 40) 20]
Test Case: 887 | Input/Output: [(23 -60 -93 -25) -93]
Test Case: 888 | Input/Output: [(0 39 -92 -90) -92]
Test Case: 889 | Input/Output: [(-12 -70 -26 2) -70]
Test Case: 890 | Input/Output: [(11 -31 66 3) -31]
Test Case: 891 | Input/Output: [(-89 -89 77 17) -89]
Test Case: 892 | Input/Output: [(-41 44 -57 14) -57]
Test Case: 893 | Input/Output: [(4 -87 33 -60) -87]
Test Case: 894 | Input/Output: [(-49 18 -77 -17) -77]
Test Case: 895 | Input/Output: [(-33 78 23 40) -33]
Test Case: 896 | Input/Output: [(-98 79 -65 -5) -98]
Test Case: 897 | Input/Output: [(16 73 -69 -46) -69]
Test Case: 898 | Input/Output: [(57 84 -71 51) -71]
Test Case: 899 | Input/Output: [(-50 -41 93 -84) -84]
Test Case: 900 | Input/Output: [(59 56 71 76) 56]
Test Case: 901 | Input/Output: [(-26 -1 -2 -62) -62]
Test Case: 902 | Input/Output: [(89 -41 -2 26) -41]
Test Case: 903 | Input/Output: [(-63 -27 -78 -95) -95]
Test Case: 904 | Input/Output: [(-87 -51 29 -31) -87]
Test Case: 905 | Input/Output: [(-51 -18 4 -26) -51]
Test Case: 906 | Input/Output: [(-37 66 1 -12) -37]
Test Case: 907 | Input/Output: [(57 -63 94 -2) -63]
Test Case: 908 | Input/Output: [(-15 -81 -53 80) -81]
Test Case: 909 | Input/Output: [(7 -87 -7 91) -87]
Test Case: 910 | Input/Output: [(-38 -8 1 37) -38]
Test Case: 911 | Input/Output: [(-24 58 -70 33) -70]
Test Case: 912 | Input/Output: [(-100 79 -19 -80) -100]
Test Case: 913 | Input/Output: [(-38 -2 47 40) -38]
Test Case: 914 | Input/Output: [(-20 -97 -17 38) -97]
Test Case: 915 | Input/Output: [(15 -85 66 -94) -94]
Test Case: 916 | Input/Output: [(11 -43 1 60) -43]
Test Case: 917 | Input/Output: [(72 80 64 -55) -55]
Test Case: 918 | Input/Output: [(87 -12 24 36) -12]
Test Case: 919 | Input/Output: [(19 85 -45 68) -45]
Test Case: 920 | Input/Output: [(-92 -51 -18 2) -92]
Test Case: 921 | Input/Output: [(-20 -59 47 -8) -59]
Test Case: 922 | Input/Output: [(90 14 39 -16) -16]
Test Case: 923 | Input/Output: [(21 -32 60 -14) -32]
Test Case: 924 | Input/Output: [(91 -22 62 -21) -22]
Test Case: 925 | Input/Output: [(59 85 -58 69) -58]
Test Case: 926 | Input/Output: [(-68 -70 88 -23) -70]
Test Case: 927 | Input/Output: [(-100 38 37 -100) -100]
Test Case: 928 | Input/Output: [(-10 98 15 6) -10]
Test Case: 929 | Input/Output: [(-54 2 -96 8) -96]
Test Case: 930 | Input/Output: [(-30 -73 -12 -89) -89]
Test Case: 931 | Input/Output: [(74 -3 -20 -8) -20]
Test Case: 932 | Input/Output: [(6 40 25 79) 6]
Test Case: 933 | Input/Output: [(-37 10 73 -58) -58]
Test Case: 934 | Input/Output: [(-70 13 46 57) -70]
Test Case: 935 | Input/Output: [(86 -54 89 8) -54]
Test Case: 936 | Input/Output: [(-56 60 50 77) -56]
Test Case: 937 | Input/Output: [(-19 -4 46 -96) -96]
Test Case: 938 | Input/Output: [(34 81 65 -38) -38]
Test Case: 939 | Input/Output: [(-31 -28 74 13) -31]
Test Case: 940 | Input/Output: [(83 -37 14 15) -37]
Test Case: 941 | Input/Output: [(-92 -4 80 -79) -92]
Test Case: 942 | Input/Output: [(-95 41 49 -48) -95]
Test Case: 943 | Input/Output: [(-56 -2 72 -7) -56]
Test Case: 944 | Input/Output: [(-73 42 -22 70) -73]
Test Case: 945 | Input/Output: [(15 -34 -49 -30) -49]
Test Case: 946 | Input/Output: [(-53 -5 -56 -11) -56]
Test Case: 947 | Input/Output: [(-87 -100 98 -49) -100]
Test Case: 948 | Input/Output: [(49 -100 -40 -42) -100]
Test Case: 949 | Input/Output: [(-2 -64 -80 15) -80]
Test Case: 950 | Input/Output: [(-8 39 38 -31) -31]
Test Case: 951 | Input/Output: [(68 69 0 7) 0]
Test Case: 952 | Input/Output: [(-9 -94 -31 81) -94]
Test Case: 953 | Input/Output: [(29 95 -9 47) -9]
Test Case: 954 | Input/Output: [(-13 -32 -74 -2) -74]
Test Case: 955 | Input/Output: [(-25 -17 -23 76) -25]
Test Case: 956 | Input/Output: [(-31 -54 -4 78) -54]
Test Case: 957 | Input/Output: [(-9 20 43 -13) -13]
Test Case: 958 | Input/Output: [(77 -37 75 36) -37]
Test Case: 959 | Input/Output: [(-47 63 -16 -37) -47]
Test Case: 960 | Input/Output: [(39 98 69 37) 37]
Test Case: 961 | Input/Output: [(13 23 -60 34) -60]
Test Case: 962 | Input/Output: [(30 31 -69 -45) -69]
Test Case: 963 | Input/Output: [(19 13 58 -33) -33]
Test Case: 964 | Input/Output: [(-35 -63 37 -36) -63]
Test Case: 965 | Input/Output: [(41 -16 -61 31) -61]
Test Case: 966 | Input/Output: [(-20 89 -26 86) -26]
Test Case: 967 | Input/Output: [(-27 25 43 -43) -43]
Test Case: 968 | Input/Output: [(60 -37 23 -88) -88]
Test Case: 969 | Input/Output: [(97 26 -13 20) -13]
Test Case: 970 | Input/Output: [(-58 37 11 -20) -58]
Test Case: 971 | Input/Output: [(-100 -88 39 19) -100]
Test Case: 972 | Input/Output: [(-58 -54 19 16) -58]
Test Case: 973 | Input/Output: [(-5 -91 -9 8) -91]
Test Case: 974 | Input/Output: [(-80 91 7 -20) -80]
Test Case: 975 | Input/Output: [(36 88 43 -43) -43]
Test Case: 976 | Input/Output: [(67 32 -20 53) -20]
Test Case: 977 | Input/Output: [(-72 -74 -92 -64) -92]
Test Case: 978 | Input/Output: [(30 -84 -27 12) -84]
Test Case: 979 | Input/Output: [(-87 68 56 -63) -87]
Test Case: 980 | Input/Output: [(45 86 12 14) 12]
Test Case: 981 | Input/Output: [(51 40 -84 -80) -84]
Test Case: 982 | Input/Output: [(-34 -96 0 -76) -96]
Test Case: 983 | Input/Output: [(-54 -85 24 -53) -85]
Test Case: 984 | Input/Output: [(-35 73 -61 -73) -73]
Test Case: 985 | Input/Output: [(-12 -33 69 -18) -33]
Test Case: 986 | Input/Output: [(-71 66 32 11) -71]
Test Case: 987 | Input/Output: [(69 -71 -95 31) -95]
Test Case: 988 | Input/Output: [(75 -13 26 -38) -38]
Test Case: 989 | Input/Output: [(95 99 53 -83) -83]
Test Case: 990 | Input/Output: [(-92 27 25 95) -92]
Test Case: 991 | Input/Output: [(54 -15 -100 -36) -100]
Test Case: 992 | Input/Output: [(-35 -77 -45 -31) -77]
Test Case: 993 | Input/Output: [(-93 -65 22 -96) -96]
Test Case: 994 | Input/Output: [(-24 -83 -77 -26) -83]
Test Case: 995 | Input/Output: [(-7 4 -64 -82) -82]
Test Case: 996 | Input/Output: [(13 -17 -66 -37) -66]
Test Case: 997 | Input/Output: [(91 -66 80 -89) -89]
Test Case: 998 | Input/Output: [(26 23 94 -43) -43]
Test Case: 999 | Input/Output: [(29 38 74 4) 4]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x1397b141 clojush.problems.software.smallest$fn__7460@1397b141] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x30b9728f clojush.instructions.tag$tag_instruction_erc$fn__2160@30b9728f] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x453a30f8 clojush.instructions.tag$tagged_instruction_erc$fn__2166@453a30f8] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x29ccab93 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@29ccab93]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x6c49ea0c clojush.problems.software.smallest$smallest_initial_report@6c49ea0c]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x20be793a clojush.problems.software.smallest$smallest_report@20be793a]
random-screen = false
random-seed = 109 72 77 -24 112 4 -97 -94 22 73 33 -42 28 22 81 95
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[16 16 16 74] 16] [[-83 -99 -99 -99] -99] [[-63 -99 -63 -63] -99] [[50 -75 50 50] -75] [[-51 75 -51 -51] -51] [[97 97 -73 97] -73] [[-70 -47 -70 -70] -70] [[-74 -87 -87 -87] -87] [[-81 -38 -81 -81] -81] [[67 67 67 -86] -86] [(-17 -17 -17 -17) -17] [(75 75 75 75) 75] [(-62 -62 -62 -62) -62] [(64 64 64 64) 64] [(42 42 42 42) 42] [(35 88 88 62) 35] [(14 11 21 87) 11] [(63 82 84 58) 58] [(92 65 98 26) 26] [(34 52 98 23) 23] [(79 28 15 46) 15] [(72 35 61 83) 35] [(86 20 84 47) 20] [(82 44 90 41) 41] [(32 91 99 57) 32] [(6 61 48 8) 6] [(84 65 28 52) 28] [(45 34 80 75) 34] [(32 12 67 84) 12] [(95 97 61 69) 61] [(77 42 24 58) 24] [(51 86 10 35) 10] [(38 27 10 38) 10] [(14 88 95 65) 14] [(30 86 4 44) 4] [(59 -17 62 -27) -27] [(56 62 56 62) 56] [(-99 -26 88 -5) -99] [(50 -14 79 50) -14] [(-88 93 3 -23) -88] [(46 38 8 8) 8] [(80 56 99 43) 43] [(-95 6 -17 44) -95] [(74 14 5 -46) -46] [(-66 -72 -92 92) -92] [(-34 -79 -97 99) -97] [(-80 -65 31 24) -80] [(-18 -53 -39 38) -53] [(-7 94 -84 -87) -87] [(-57 11 42 -75) -75] [(23 36 -48 -53) -53] [(10 23 -79 -20) -79] [(74 -23 -59 -43) -59] [(-76 -76 -89 -76) -89] [(53 -44 75 -43) -44] [(-52 47 -73 -48) -73] [(96 10 95 22) 10] [(92 -92 97 77) -92] [(-55 -28 86 30) -55] [(-36 95 -18 54) -36] [(67 43 27 77) 27] [(-25 -55 51 81) -55] [(-68 9 93 63) -68] [(81 50 -100 15) -100] [(47 -20 58 -20) -20] [(79 21 -15 -10) -15] [(50 -35 -41 91) -41] [(12 -94 92 -28) -94] [(67 34 39 58) 34] [(-14 73 -97 67) -97] [(72 20 -100 93) -100] [(78 95 75 22) 22] [(98 -57 81 -36) -57] [(19 13 -56 36) -56] [(-87 73 -7 -46) -87] [(39 -71 -70 8) -71] [(-86 -51 -25 45) -86] [(36 95 9 -24) -24] [(-86 -80 -42 -25) -86] [(-68 70 11 77) -68] [(75 -38 -52 4) -52] [(-69 4 -16 -83) -83] [(-44 33 47 69) -44] [(41 -100 -81 73) -100] [(-30 -95 53 57) -95] [(78 -32 -33 97) -33] [(-87 33 -42 7) -87] [(-26 16 -33 90) -33] [(-51 29 37 -35) -51] [(-71 -22 -98 9) -98] [(-38 38 -98 -63) -98] [(-35 31 6 -20) -35] [(-44 38 -16 44) -44] [(-94 57 -18 58) -94] [(14 -85 -42 5) -85])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: 75                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -38                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 52                 
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output: 61                 
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output: 86                 
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 93                 
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: 6                  
Correct output: -46                 | Program output: 14                 
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 11                 
Correct output: -53                 | Program output: 36                 
Correct output: -79                 | Program output: 23                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: 47                 
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -28                
Correct output: -36                 | Program output: 95                 
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 9                  
Correct output: -100                | Program output: 50                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: 21                 
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: 73                 
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 13                 
Correct output: -87                 | Program output: 73                 
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -51                
Correct output: -24                 | Program output: 95                 
Correct output: -86                 | Program output: -80                
Correct output: -68                 | Program output: 70                 
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: 4                  
Correct output: -44                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: 33                 
Correct output: -33                 | Program output: 16                 
Correct output: -51                 | Program output: 29                 
Correct output: -98                 | Program output: -22                
Correct output: -98                 | Program output: 38                 
Correct output: -35                 | Program output: 31                 
Correct output: -44                 | Program output: 38                 
Correct output: -94                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Lexicase best program: (integer_eq boolean_or print_integer boolean_invert_second_then_and exec_pop (exec_swap () (integer_dup exec_do*count (integer_shove integer_yank integer_fromboolean integer_inc exec_shove () in1 in2 integer_lte) boolean_shove tagged_645 integer_lte) exec_yankdup) integer_dup_times exec_dup (boolean_empty) integer_pop exec_when () exec_dup_items boolean_flush exec_if () (in2) print_integer exec_do*range (exec_eq exec_k_when_autoconstructing (integer_flush integer_gt exec_pop (exec_do*range (boolean_flush in3))) ()))
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Zero cases best program: (integer_eq boolean_or print_integer boolean_invert_second_then_and exec_pop (exec_swap () (integer_dup exec_do*count (integer_shove integer_yank integer_fromboolean integer_inc exec_shove () in1 in2 integer_lte) boolean_shove tagged_645 integer_lte) exec_yankdup) integer_dup_times exec_dup (boolean_empty) integer_pop exec_when () exec_dup_items boolean_flush exec_if () (in2) print_integer exec_do*range (exec_eq exec_k_when_autoconstructing (integer_flush integer_gt exec_pop (exec_do*range (boolean_flush in3))) ()))
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 1 2 9 1 8 2 3 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 1 1 2 9 1 8 2 3 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (integer_eq boolean_or print_integer boolean_invert_second_then_and exec_pop (exec_swap () (integer_dup exec_do*count (integer_shove integer_yank integer_fromboolean integer_inc exec_shove () in1 in2 integer_lte) boolean_shove tagged_645 integer_lte) exec_yankdup) integer_dup_times exec_dup (boolean_empty) integer_pop exec_when () exec_dup_items boolean_flush exec_if () (in2) print_integer exec_do*range (exec_eq exec_k_when_autoconstructing (integer_flush integer_gt exec_pop (exec_do*range (boolean_flush in3))) ()))
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 54
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 9.969
Median total errors in population: 10
Error averages by case: (0.997 0.999 0.999 0.998 0.991 0.999 0.992 0.998 0.997 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.43
Average program size in population (points): 69.343
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 490470
--- Timings ---
Current time: 1559314622428 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.7 seconds, 26.5%
Fitness Testing:      1.9 seconds, 70.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_713} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_89})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (exec_if (integer_lte) (integer_eq boolean_dup_times exec_when (exec_stackdepth integer_div integer_add) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) exec_if (exec_eq print_integer boolean_xor integer_mod boolean_frominteger integer_pop integer_gte) (integer_gte exec_when (integer_shove integer_swap exec_yank boolean_eq boolean_xor tagged_713 integer_dec exec_dup_times (boolean_and) exec_rot (exec_noop integer_lt print_boolean integer_mult boolean_yankdup boolean_invert_second_then_and exec_k (exec_noop exec_swap (boolean_dup_times print_integer) (boolean_dup_items) integer_yank boolean_dup integer_empty exec_pop (integer_gte integer_max exec_pop (integer_mult exec_when () tagged_89))) ()) () ()))) ()) ()))))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 120
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_713} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_89})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (exec_if (integer_lte) (integer_eq boolean_dup_times exec_when (exec_stackdepth integer_div integer_add) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) exec_if (exec_eq print_integer boolean_xor integer_mod boolean_frominteger integer_pop integer_gte) (integer_gte exec_when (integer_shove integer_swap exec_yank boolean_eq boolean_xor tagged_713 integer_dec exec_dup_times (boolean_and) exec_rot (exec_noop integer_lt print_boolean integer_mult boolean_yankdup boolean_invert_second_then_and exec_k (exec_noop exec_swap (boolean_dup_times print_integer) (boolean_dup_items) integer_yank boolean_dup integer_empty exec_pop (integer_gte integer_max exec_pop (integer_mult exec_when () tagged_89))) ()) () ()))) ()) ()))))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 120
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (872 425 71 451 352 349 349 352 352 1)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (872 425 71 451 352 349 349 352 352 1)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_713} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_89})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (exec_if (integer_lte) (integer_eq boolean_dup_times exec_when (exec_stackdepth integer_div integer_add) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) exec_if (exec_eq print_integer boolean_xor integer_mod boolean_frominteger integer_pop integer_gte) (integer_gte exec_when (integer_shove integer_swap exec_yank boolean_eq boolean_xor tagged_713 integer_dec exec_dup_times (boolean_and) exec_rot (exec_noop integer_lt print_boolean integer_mult boolean_yankdup boolean_invert_second_then_and exec_k (exec_noop exec_swap (boolean_dup_times print_integer) (boolean_dup_items) integer_yank boolean_dup integer_empty tagged_615 integer_gte integer_max exec_pop (integer_mult exec_when () tagged_89)) ()) () ()))) ()) ()))))
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 88
Size: 119
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.426
Median total errors in population: 8
Error averages by case: (0.128 0.575 0.929 0.549 0.648 0.651 0.651 0.648 0.648 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.198
Average program size in population (points): 64.098
Average percent parens in population: 0.255
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 253
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 832721
--- Timings ---
Current time: 1559314625238 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.4 seconds, 45.6%
Fitness Testing:      2.5 seconds, 46.3%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: 75                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -38                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 52                 
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output: 61                 
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output: 86                 
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 93                 
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: 6                  
Correct output: -46                 | Program output: 14                 
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 11                 
Correct output: -53                 | Program output: 36                 
Correct output: -79                 | Program output: 23                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: 47                 
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -28                
Correct output: -36                 | Program output: 95                 
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 9                  
Correct output: -100                | Program output: 50                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: 21                 
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: 73                 
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 13                 
Correct output: -87                 | Program output: 73                 
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -51                
Correct output: -24                 | Program output: 95                 
Correct output: -86                 | Program output: -80                
Correct output: -68                 | Program output: 70                 
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: 4                  
Correct output: -44                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: 33                 
Correct output: -33                 | Program output: 16                 
Correct output: -51                 | Program output: 29                 
Correct output: -98                 | Program output: -22                
Correct output: -98                 | Program output: 38                 
Correct output: -35                 | Program output: 31                 
Correct output: -44                 | Program output: 38                 
Correct output: -94                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_713} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_89})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (exec_if (integer_lte) (integer_eq boolean_dup_times exec_when (exec_stackdepth integer_div integer_add) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) exec_if (exec_eq print_integer boolean_xor) (integer_mod boolean_frominteger integer_pop integer_gte) integer_gte exec_when (integer_shove integer_swap exec_yank boolean_eq boolean_xor tagged_713 integer_dec exec_dup_times (boolean_and) exec_rot (exec_noop integer_lt print_boolean integer_mult boolean_yankdup boolean_invert_second_then_and exec_k (exec_noop exec_swap (boolean_dup_times print_integer) (boolean_dup_items) integer_yank boolean_dup integer_empty tagged_615 integer_gte integer_max exec_pop (integer_mult exec_when () tagged_89)) ()) () ())) ()) ()))))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 119
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_713} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_89})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (exec_if (integer_lte) (integer_eq boolean_dup_times exec_when (exec_stackdepth integer_div integer_add) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) exec_if (exec_eq print_integer boolean_xor) (integer_mod boolean_frominteger integer_pop integer_gte) integer_gte exec_when (integer_shove integer_swap exec_yank boolean_eq boolean_xor tagged_713 integer_dec exec_dup_times (boolean_and) exec_rot (exec_noop integer_lt print_boolean integer_mult boolean_yankdup boolean_invert_second_then_and exec_k (exec_noop exec_swap (boolean_dup_times print_integer) (boolean_dup_items) integer_yank boolean_dup integer_empty tagged_615 integer_gte integer_max exec_pop (integer_mult exec_when () tagged_89)) ()) () ())) ()) ()))))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 119
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 573 881 573 573 105 102 106 210 104)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (573 573 881 573 573 105 102 106 210 104)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add integer_inc exec_shove () in1 in2 integer_lte boolean_shove tagged_645 integer_lte exec_yankdup integer_dup_times exec_dup (boolean_empty) integer_pop exec_when () exec_dup_items boolean_flush exec_if () (in2) print_integer exec_do*range (exec_eq exec_k_when_autoconstructing (integer_flush integer_gt exec_pop (exec_do*range (boolean_flush in3))) ()))
Errors: [1 1 0 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.2
Median total errors in population: 5
Error averages by case: (0.427 0.427 0.119 0.427 0.427 0.895 0.898 0.894 0.79 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.931
Average program size in population (points): 64.676
Average percent parens in population: 0.243
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.039
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1260656
--- Timings ---
Current time: 1559314628419 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.7 seconds, 54.0%
Fitness Testing:      3.1 seconds, 34.9%
Report:               0.9 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 62                 
Correct output: 11                  | Program output: 87                 
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 46                 
Correct output: 35                  | Program output: 83                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 57                 
Correct output: 6                   | Program output: 8                  
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 84                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 58                 
Correct output: 10                  | Program output: 35                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output: 65                 
Correct output: 4                   | Program output: 44                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -5                 
Correct output: -14                 | Program output: 50                 
Correct output: -88                 | Program output: -23                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: 44                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 92                 
Correct output: -97                 | Program output: 99                 
Correct output: -80                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -20                
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -48                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 77                 
Correct output: -55                 | Program output: 30                 
Correct output: -36                 | Program output: 54                 
Correct output: 27                  | Program output: 77                 
Correct output: -55                 | Program output: 81                 
Correct output: -68                 | Program output: 63                 
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: 91                 
Correct output: -94                 | Program output: -28                
Correct output: 34                  | Program output: 58                 
Correct output: -97                 | Program output: 67                 
Correct output: -100                | Program output: 93                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: 36                 
Correct output: -87                 | Program output: -46                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: 45                 
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -68                 | Program output: 77                 
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -100                | Program output: 73                 
Correct output: -95                 | Program output: 57                 
Correct output: -33                 | Program output: 97                 
Correct output: -87                 | Program output: 7                  
Correct output: -33                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -98                 | Program output: 9                  
Correct output: -98                 | Program output: -63                
Correct output: -35                 | Program output: -20                
Correct output: -44                 | Program output: 44                 
Correct output: -94                 | Program output: 58                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_dup_times exec_shove (exec_do*range () exec_do*times (boolean_rot boolean_rot exec_if (integer_gt) (boolean_not integer_gt)) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_857 in2 integer_div exec_do*count (in4 integer_stackdepth) integer_swap exec_eq boolean_not exec_rot (integer_lt integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) (print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth integer_mod exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_lte) (exec_k (exec_s () () (in1)) ()))) ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_dup_times exec_shove (exec_do*range () exec_do*times (boolean_rot boolean_rot exec_if (integer_gt) (boolean_not integer_gt)) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_857 in2 integer_div exec_do*count (in4 integer_stackdepth) integer_swap exec_eq boolean_not exec_rot (integer_lt integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) (print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth integer_mod exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_lte) (exec_k (exec_s () () (in1)) ()))) ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 86 4 5 891 418 5 418 5 5)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (384 86 4 5 891 418 5 418 5 5)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_646} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank})
Best program: (integer_eq boolean_or print_integer boolean_invert_second_then_and exec_pop (exec_swap () (integer_dup exec_do*count (integer_shove integer_yank integer_fromboolean integer_inc exec_shove () in1 in2 integer_lte) boolean_shove tagged_646 integer_lte) exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 integer_min in2 integer_div exec_do*count (in4 integer_stackdepth) integer_swap exec_eq boolean_not exec_rot (integer_lt integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop) (exec_yankdup boolean_dup) (print_integer boolean_or) exec_s_when_autoconstructing () () (boolean_stackdepth integer_mod exec_yank))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 54
Size: 69
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.779
Median total errors in population: 8
Error averages by case: (0.616 0.914 0.996 0.995 0.109 0.582 0.995 0.582 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.576
Average program size in population (points): 61.998
Average percent parens in population: 0.254
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.49625
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1637733
--- Timings ---
Current time: 1559314631897 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.4 seconds, 60.7%
Fitness Testing:      3.6 seconds, 29.1%
Report:               1.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_noop boolean_and integer_fromboolean integer_lt integer_yankdup exec_if (boolean_dup_times) (boolean_xor print_boolean) integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq)
Lexicase best errors: [1 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_noop boolean_and integer_fromboolean integer_lt integer_yankdup exec_if (boolean_dup_times) (boolean_xor print_boolean) integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq)
Zero cases best errors: [1 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 88 859 82 203 203 770 476 202 373)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (88 88 859 82 203 203 770 476 202 373)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Best program: (exec_noop boolean_and integer_fromboolean integer_lt integer_yankdup exec_if (boolean_dup_times) (boolean_xor print_boolean) integer_add integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq)
Errors: [1 1 0 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 6.656
Median total errors in population: 7
Error averages by case: (0.912 0.912 0.141 0.918 0.797 0.797 0.23 0.524 0.798 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.251
Average program size in population (points): 74.739
Average percent parens in population: 0.256
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.263875
Median age in population: 6.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2153423
--- Timings ---
Current time: 1559314634953 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.6 seconds, 62.6%
Fitness Testing:      4.2 seconds, 27.1%
Report:               1.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_noop boolean_and integer_eq integer_lt integer_yankdup exec_if (boolean_dup_times boolean_xor print_boolean) (exec_rot () (integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq) ()))
Lexicase best errors: [1 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_noop boolean_and integer_eq integer_lt integer_yankdup exec_if (boolean_dup_times boolean_xor print_boolean) (exec_rot () (integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq) ()))
Zero cases best errors: [1 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 250 422 422 250 89 100 99 98 422)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (250 250 422 422 250 89 100 99 98 422)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_add) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times integer_flush integer_gt exec_pop (exec_do*range (boolean_flush in3))) ()) ()))))
Errors: [1 1 0 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.598
Median total errors in population: 7
Error averages by case: (0.75 0.75 0.578 0.578 0.75 0.911 0.9 0.901 0.902 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.558
Average program size in population (points): 62.022
Average percent parens in population: 0.255
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.6134375
Median age in population: 7.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.003
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2573067
--- Timings ---
Current time: 1559314638222 milliseconds
Total Time:          18.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.9 seconds, 64.7%
Fitness Testing:      4.7 seconds, 25.5%
Report:               1.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_dup_times exec_shove (exec_do*range () exec_if (boolean_dup_times boolean_xor print_boolean) (integer_add) integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_dup_times exec_shove (exec_do*range () exec_if (boolean_dup_times boolean_xor print_boolean) (integer_add) integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 868 282 272 90 272 272 87 223 281)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (272 868 282 272 90 272 272 87 223 281)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (exec_shove () in1 in2 integer_lte) (boolean_shove tagged_645 integer_lte) exec_yankdup) integer_dup_times) integer_fromboolean boolean_empty) integer_pop exec_when () exec_dup_items boolean_flush exec_if () (in2) print_integer exec_do*range (exec_eq exec_k_when_autoconstructing (integer_flush integer_gt exec_pop (exec_do*range (boolean_flush exec_s_when_autoconstructing () () ()))) ()))
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 49
Size: 71
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.081
Median total errors in population: 7
Error averages by case: (0.728 0.132 0.718 0.728 0.91 0.728 0.728 0.913 0.777 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.023
Average program size in population (points): 65.638
Average percent parens in population: 0.262
Minimum age in population: 6.5
Maximum age in population: 11.0
Average age in population: 9.1015625
Median age in population: 9.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3011673
--- Timings ---
Current time: 1559314641888 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 65.8%
Fitness Testing:      5.2 seconds, 23.6%
Report:               2.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_141} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_div})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank exec_do*range () exec_do*times (boolean_rot boolean_rot exec_if (integer_add boolean_and integer_eq) (integer_mod) exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod tag_boolean_141 integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (exec_if (integer_lte) (integer_eq boolean_dup_times exec_when (exec_stackdepth) integer_div))))))))
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_141} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_div})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank exec_do*range () exec_do*times (boolean_rot boolean_rot exec_if (integer_add boolean_and integer_eq) (integer_mod) exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod tag_boolean_141 integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (exec_if (integer_lte) (integer_eq boolean_dup_times exec_when (exec_stackdepth) integer_div))))))))
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (421 421 11 127 192 142 421 698 192 878)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (421 421 11 127 192 142 421 698 192 878)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 2, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Best program: (integer_max integer_dec integer_add boolean_and boolean_shove integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_shove tagged_645 integer_lte) exec_yankdup) integer_dup_times exec_dup (boolean_empty) integer_pop exec_when () exec_dup_items boolean_flush exec_if () (in2) print_integer exec_do*range (boolean_dup_items exec_k_when_autoconstructing (integer_flush) (integer_gt exec_pop (exec_do*range (boolean_flush in3)))))
Errors: [0 0 1 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.497
Median total errors in population: 7
Error averages by case: (0.579 0.579 0.989 0.873 0.808 0.858 0.579 0.302 0.808 0.122)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.718
Average program size in population (points): 62.118
Average percent parens in population: 0.257
Minimum age in population: 8.4375
Maximum age in population: 12.40625
Average age in population: 10.695640625
Median age in population: 10.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3523307
--- Timings ---
Current time: 1559314645172 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.7 seconds, 65.9%
Fitness Testing:      5.8 seconds, 22.9%
Report:               2.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 92                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 79                 
Correct output: 35                  | Program output: 72                 
Correct output: 20                  | Program output: 86                 
Correct output: 41                  | Program output: 82                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 84                 
Correct output: 34                  | Program output: 45                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 95                 
Correct output: 24                  | Program output: 77                 
Correct output: 10                  | Program output: 51                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 30                 
Correct output: -27                 | Program output: 59                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 50                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 46                 
Correct output: 43                  | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 74                 
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: 74                 
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: 53                 
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 96                 
Correct output: -92                 | Program output: 92                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 67                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 81                 
Correct output: -20                 | Program output: 47                 
Correct output: -15                 | Program output: 79                 
Correct output: -41                 | Program output: 50                 
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 67                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 72                 
Correct output: 22                  | Program output: 78                 
Correct output: -57                 | Program output: 98                 
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 0                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: 41                 
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: 78                 
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not integer_gt)) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (boolean_xor in3 integer_min in2) integer_div exec_do*count () integer_eq integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not integer_gt)) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_y_when_autoconstructing (boolean_xor in3 integer_min in2) integer_div exec_do*count () integer_eq integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 201 347 329 201 664 217 331 202 872)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (202 201 347 329 201 664 217 331 202 872)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Best program: (integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not integer_gt)) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) exec_dup (boolean_empty) integer_pop exec_when ()) exec_dup_items boolean_flush exec_if () (exec_do*count (integer_eq integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ()))))
Errors: [0 0 1 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 65
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 6.434
Median total errors in population: 6
Error averages by case: (0.798 0.799 0.653 0.671 0.799 0.336 0.783 0.669 0.798 0.128)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.939
Average program size in population (points): 62.659
Average percent parens in population: 0.262
Minimum age in population: 9.75
Maximum age in population: 13.859375
Average age in population: 12.2321171875
Median age in population: 12.328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4025040
--- Timings ---
Current time: 1559314648208 milliseconds
Total Time:          28.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 65.9%
Fitness Testing:      6.3 seconds, 22.3%
Report:               3.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 62                 
Correct output: 11                  | Program output: 87                 
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 46                 
Correct output: 35                  | Program output: 83                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 57                 
Correct output: 6                   | Program output: 8                  
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 84                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 58                 
Correct output: 10                  | Program output: 35                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output: 65                 
Correct output: 4                   | Program output: 44                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -5                 
Correct output: -14                 | Program output: 50                 
Correct output: -88                 | Program output: -23                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: 44                 
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: 92                 
Correct output: -97                 | Program output: 99                 
Correct output: -80                 | Program output: 24                 
Correct output: -53                 | Program output: 38                 
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -20                
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -48                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 77                 
Correct output: -55                 | Program output: 30                 
Correct output: -36                 | Program output: 54                 
Correct output: 27                  | Program output: 77                 
Correct output: -55                 | Program output: 81                 
Correct output: -68                 | Program output: 63                 
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: 91                 
Correct output: -94                 | Program output: -28                
Correct output: 34                  | Program output: 58                 
Correct output: -97                 | Program output: 67                 
Correct output: -100                | Program output: 93                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: 36                 
Correct output: -87                 | Program output: -46                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: 45                 
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -25                
Correct output: -68                 | Program output: 77                 
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -100                | Program output: 73                 
Correct output: -95                 | Program output: 57                 
Correct output: -33                 | Program output: 97                 
Correct output: -87                 | Program output: 7                  
Correct output: -33                 | Program output: 90                 
Correct output: -51                 | Program output: -35                
Correct output: -98                 | Program output: 9                  
Correct output: -98                 | Program output: -63                
Correct output: -35                 | Program output: -20                
Correct output: -44                 | Program output: 44                 
Correct output: -94                 | Program output: 58                 
Correct output: -85                 | Program output: 5                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_max integer_shove boolean_and integer_eq integer_swap exec_do*count (exec_do*count (in3 in4 exec_while () print_integer) exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_yank exec_if () (integer_lte) exec_when (boolean_dup_times exec_when (exec_stackdepth integer_div integer_add) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) (exec_if (exec_eq print_integer boolean_xor integer_mod) ())) ())))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_while} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_max integer_shove boolean_and integer_eq integer_swap exec_do*count (exec_do*count (in3 in4 exec_while () print_integer) exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush integer_mod exec_s (integer_dup_items) (integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank integer_dup_times exec_yank exec_if () (integer_lte) exec_when (boolean_dup_times exec_when (exec_stackdepth integer_div integer_add) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) (exec_if (exec_eq print_integer boolean_xor integer_mod) ())) ())))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 419 71 148 72 237 71 655 72 422)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (71 419 71 148 72 237 71 655 72 422)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 2, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Best program: (integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot) boolean_rot exec_if (integer_gt) (boolean_not) integer_gt boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) exec_dup (boolean_empty) integer_pop exec_when ()) exec_dup_items boolean_flush exec_if () (exec_do*count (integer_eq integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer) boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())) ())
Errors: [0 1 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 43
Size: 65
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 7.762
Median total errors in population: 8
Error averages by case: (0.929 0.581 0.929 0.852 0.928 0.763 0.929 0.345 0.928 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.229
Average program size in population (points): 66.684
Average percent parens in population: 0.259
Minimum age in population: 11.078125
Maximum age in population: 15.5
Average age in population: 13.84498046875
Median age in population: 13.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4582397
--- Timings ---
Current time: 1559314651380 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.0 seconds, 66.2%
Fitness Testing:      7.0 seconds, 21.9%
Report:               3.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush exec_yank exec_s (integer_dup_items) (integer_shove in2 boolean_invert_second_then_and exec_do*range (exec_eq exec_k_when_autoconstructing (integer_flush integer_gt exec_pop () exec_do*range (boolean_flush in3)) ())) ()) ()))))
Lexicase best errors: [1 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () integer_lte exec_yank integer_dec integer_add boolean_and integer_eq integer_mod exec_do*count (exec_do*count (in3 integer_shove exec_while () print_integer exec_pop () exec_y () boolean_not exec_pop (boolean_yankdup exec_k_when_autoconstructing (boolean_flush exec_yank exec_s (integer_dup_items) (integer_shove in2 boolean_invert_second_then_and exec_do*range (exec_eq exec_k_when_autoconstructing (integer_flush integer_gt exec_pop () exec_do*range (boolean_flush in3)) ())) ()) ()))))
Zero cases best errors: [1 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 897 259 127 128 508 126 126 133 768)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (101 897 259 127 128 508 126 126 133 768)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq})
Best program: (exec_noop boolean_and integer_eq integer_lt integer_yankdup exec_if (boolean_dup_times) (boolean_xor print_boolean) exec_rot () (integer_empty exec_shove (exec_dup_items exec_eq boolean_frominteger in4 in3) print_integer exec_eq) ())
Errors: [1 0 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.827
Median total errors in population: 7
Error averages by case: (0.899 0.103 0.741 0.873 0.872 0.492 0.874 0.874 0.867 0.232)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.668
Average program size in population (points): 69.565
Average percent parens in population: 0.255
Minimum age in population: 12.78125
Maximum age in population: 17.1796875
Average age in population: 15.003044921875
Median age in population: 15.076171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5152591
--- Timings ---
Current time: 1559314654428 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.2 seconds, 66.6%
Fitness Testing:      7.6 seconds, 21.7%
Report:               4.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 563
Test mean error for best: 0.56300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 62                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output:                    
Correct output: 15                  | Program output: 46                 
Correct output: 35                  | Program output: 83                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 57                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 84                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 58                 
Correct output: 10                  | Program output: 35                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 44                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 50                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 77                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 77                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: 91                 
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 58                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 93                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: 73                 
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 249 248 865 125 415 121 339 203 109)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (119 249 248 865 125 415 121 339 203 109)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 62
Size: 83
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.207
Median total errors in population: 8
Error averages by case: (0.881 0.751 0.752 0.135 0.875 0.585 0.879 0.661 0.797 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.09
Average program size in population (points): 68.772
Average percent parens in population: 0.253
Minimum age in population: 14.40625
Maximum age in population: 18.8193359375
Average age in population: 16.7363798828125
Median age in population: 16.7890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5744210
--- Timings ---
Current time: 1559314657663 milliseconds
Total Time:          37.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.3 seconds, 66.8%
Fitness Testing:      8.2 seconds, 21.8%
Report:               4.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: 75                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -38                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 52                 
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output: 61                 
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output: 86                 
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 93                 
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: 6                  
Correct output: -46                 | Program output: 14                 
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 11                 
Correct output: -53                 | Program output: 36                 
Correct output: -79                 | Program output: 23                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: 47                 
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -28                
Correct output: -36                 | Program output: 95                 
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 9                  
Correct output: -100                | Program output: 50                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: 21                 
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: 73                 
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 13                 
Correct output: -87                 | Program output: 73                 
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -51                
Correct output: -24                 | Program output: 95                 
Correct output: -86                 | Program output: -80                
Correct output: -68                 | Program output: 70                 
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: 4                  
Correct output: -44                 | Program output: 33                 
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: 33                 
Correct output: -33                 | Program output: 16                 
Correct output: -51                 | Program output: 29                 
Correct output: -98                 | Program output: -22                
Correct output: -98                 | Program output: 38                 
Correct output: -35                 | Program output: 31                 
Correct output: -44                 | Program output: 38                 
Correct output: -94                 | Program output: 57                 
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing () integer_lte exec_dup (integer_dec integer_add exec_dup (integer_yank integer_fromboolean integer_gt) boolean_not integer_gt) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) (in2 in1 integer_dup integer_sub integer_shove integer_lte) print_integer exec_pop () exec_y () boolean_not in2 integer_div exec_do*count (integer_dup_items integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_max exec_k_when_autoconstructing (exec_y_when_autoconstructing () integer_lte exec_dup (integer_dec integer_add exec_dup (integer_yank integer_fromboolean integer_gt) boolean_not integer_gt) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) (in2 in1 integer_dup integer_sub integer_shove integer_lte) print_integer exec_pop () exec_y () boolean_not in2 integer_div exec_do*count (integer_dup_items integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 116 106 6 479 142 142 6 141 398)
Population mean number of elite cases: 1.68
Count of perfect (error zero) individuals by case: (141 116 106 6 479 142 142 6 141 398)
Population mean number of perfect (error zero) cases: 1.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Best program: (integer_dup_times exec_shove (exec_do*range () exec_do*times (boolean_rot boolean_rot exec_if (integer_gt) (boolean_not integer_gt) boolean_not integer_gt)) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (integer_mod exec_do*count (in4 integer_stackdepth) integer_yankdup exec_eq boolean_not exec_rot (integer_lt integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) (print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth integer_mod exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_lte) (exec_k (exec_s () () (in1)) ()))) ()))
Errors: [0 1 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 55
Size: 79
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 8.323
Median total errors in population: 9
Error averages by case: (0.859 0.884 0.894 0.994 0.521 0.858 0.858 0.994 0.859 0.602)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.074
Average program size in population (points): 78.639
Average percent parens in population: 0.249
Minimum age in population: 15.625
Maximum age in population: 20.28271484375
Average age in population: 18.6362548828125
Median age in population: 18.74609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6361140
--- Timings ---
Current time: 1559314660842 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 66.6%
Fitness Testing:      8.9 seconds, 21.7%
Report:               4.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 570
Test mean error for best: 0.57000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 2, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4)) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 83
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 2, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4)) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 83
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (735 845 552 375 225 17 204 880 891 204)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (735 845 552 375 225 17 204 880 891 204)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction in1})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () () (in1)) ())))
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 83
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 5.072
Median total errors in population: 4
Error averages by case: (0.265 0.155 0.448 0.625 0.775 0.983 0.796 0.12 0.109 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.945
Average program size in population (points): 79.845
Average percent parens in population: 0.263
Minimum age in population: 17.41015625
Maximum age in population: 21.74755859375
Average age in population: 20.1678759765625
Median age in population: 20.185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7011511
--- Timings ---
Current time: 1559314664423 milliseconds
Total Time:          44.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.7 seconds, 66.6%
Fitness Testing:      9.6 seconds, 21.6%
Report:               5.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 62                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 46                 
Correct output: 35                  | Program output: 83                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 57                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 84                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 58                 
Correct output: 10                  | Program output: 35                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 44                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 50                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 77                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 77                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: 91                 
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 58                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 93                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: 73                 
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_noop exec_pop (exec_do*count () integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () (in1) ()) ())))
Lexicase best errors: [0 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 73
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_noop exec_pop (exec_do*count () integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () (in1) ()) ())))
Zero cases best errors: [0 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 73
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 275 286 159 679 142 541 554 168 3)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (160 275 286 159 679 142 541 554 168 3)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () (in1) ()) ())))
Errors: [0 1 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 82
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.033
Median total errors in population: 7
Error averages by case: (0.84 0.725 0.714 0.841 0.321 0.858 0.459 0.446 0.832 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.477
Average program size in population (points): 80.407
Average percent parens in population: 0.260
Minimum age in population: 19.791015625
Maximum age in population: 23.336669921875
Average age in population: 21.48495910644531
Median age in population: 21.5400390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7684189
--- Timings ---
Current time: 1559314667620 milliseconds
Total Time:          47.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 66.4%
Fitness Testing:     10.3 seconds, 21.6%
Report:               5.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 8                  
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 62                 
Correct output: 11                  | Program output:                    
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 46                 
Correct output: 35                  | Program output: 83                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 57                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 84                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 58                 
Correct output: 10                  | Program output: 35                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output:                    
Correct output: 4                   | Program output: 44                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 50                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 77                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 77                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output:                    
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: 91                 
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 58                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 93                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: 73                 
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: 97                 
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_frominteger integer_dup_times exec_shove (exec_do*range (tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth boolean_flush exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (integer_pop exec_s () (in1) ())))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_frominteger integer_dup_times exec_shove (exec_do*range (tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth boolean_flush exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (integer_pop exec_s () (in1) ())))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (431 691 691 239 112 423 863 817 578 13)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (431 691 691 239 112 423 863 817 578 13)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_noop exec_pop (exec_do*count () integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (exec_k (exec_s () (in1) ()) ())))
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 53
Size: 73
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 5.142
Median total errors in population: 4
Error averages by case: (0.569 0.309 0.309 0.761 0.888 0.577 0.137 0.183 0.422 0.987)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.784
Average program size in population (points): 81.933
Average percent parens in population: 0.258
Minimum age in population: 21.2642822265625
Maximum age in population: 24.35595703125
Average age in population: 23.11887469482422
Median age in population: 23.1708984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8322275
--- Timings ---
Current time: 1559314670833 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 66.5%
Fitness Testing:     10.9 seconds, 21.4%
Report:               6.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output:                    
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output:                    
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output:                    
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output:                    
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Lexicase best errors: [0 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Zero cases best errors: [0 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 105 846 549 83 470 28 112 39 846)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (189 105 846 549 83 470 28 112 39 846)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (integer_max integer_shove exec_y_when_autoconstructing () in1 exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_dup_times exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_flush exec_while (integer_dup boolean_xor in3 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Errors: [0 1 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 68
Size: 92
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.733
Median total errors in population: 6
Error averages by case: (0.811 0.895 0.154 0.451 0.917 0.53 0.972 0.888 0.961 0.154)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.014
Average program size in population (points): 84.764
Average percent parens in population: 0.257
Minimum age in population: 22.2642822265625
Maximum age in population: 25.90841674804688
Average age in population: 24.44441809082031
Median age in population: 24.5059814453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.007
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8932057
--- Timings ---
Current time: 1559314674067 milliseconds
Total Time:          54.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.0 seconds, 66.5%
Fitness Testing:     11.5 seconds, 21.3%
Report:               6.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_max in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth exec_s (integer_dup_items) (integer_shove exec_eq boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_max in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth exec_s (integer_dup_items) (integer_shove exec_eq boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 548 163 807 235 234 276 76 650 212)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (177 548 163 807 235 234 276 76 650 212)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_if (integer_gt) () boolean_not integer_gt boolean_not integer_gt boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (integer_mod exec_do*count () boolean_yankdup integer_stackdepth) integer_yankdup exec_eq boolean_not boolean_invert_second_then_and boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth boolean_flush exec_yank exec_k_when_autoconstructing (boolean_invert_second_then_and integer_dup_items) (integer_pop exec_s () (in1) ())))
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.622
Median total errors in population: 6
Error averages by case: (0.823 0.452 0.837 0.193 0.765 0.766 0.724 0.924 0.35 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.428
Average program size in population (points): 82.716
Average percent parens in population: 0.258
Minimum age in population: 23.2642822265625
Maximum age in population: 27.52810668945312
Average age in population: 25.96401971435547
Median age in population: 26.04782104492188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.008
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9587435
--- Timings ---
Current time: 1559314677159 milliseconds
Total Time:          57.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.0 seconds, 66.3%
Fitness Testing:     12.2 seconds, 21.2%
Report:               7.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 7                  
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output:                    
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 91
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 91
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (854 557 435 142 8 295 12 459 411 401)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (854 557 435 142 8 295 12 459 411 401)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Errors: [0 0 1 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 68
Size: 91
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 6.426
Median total errors in population: 7
Error averages by case: (0.146 0.443 0.565 0.858 0.992 0.705 0.988 0.541 0.589 0.599)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.101
Average program size in population (points): 81.383
Average percent parens in population: 0.249
Minimum age in population: 25.74609375
Maximum age in population: 29.28956604003906
Average age in population: 27.68748548126221
Median age in population: 27.63629913330078
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 10134117
--- Timings ---
Current time: 1559314680335 milliseconds
Total Time:          60.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.1 seconds, 66.4%
Fitness Testing:     12.7 seconds, 21.0%
Report:               7.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 7                  
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output:                    
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output: 86                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 91
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 91
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 532 453 243 866 453 159 521 152 323)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (323 532 453 243 866 453 159 521 152 323)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 91
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 5.975
Median total errors in population: 6
Error averages by case: (0.677 0.468 0.547 0.757 0.134 0.547 0.841 0.479 0.848 0.677)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.49
Average program size in population (points): 87.245
Average percent parens in population: 0.249
Minimum age in population: 27.39695739746094
Maximum age in population: 30.71578598022461
Average age in population: 29.26586297988892
Median age in population: 29.36191558837891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10895416
--- Timings ---
Current time: 1559314683775 milliseconds
Total Time:          63.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.1 seconds, 66.0%
Fitness Testing:     13.5 seconds, 21.1%
Report:               8.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output:                    
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output:                    
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output:                    
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 8                  
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -43                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output:                    
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output:                    
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 8                  
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: 4                  
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items) integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 in4 boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_min in2) integer_div exec_do*count (integer_dup_items) integer_inc in4 boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 in4 boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 24 349 612 77 339 66 276 339 340)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (358 24 349 612 77 339 66 276 339 340)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3) tag_boolean_802 boolean_shove tagged_645 integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop integer_min in2 integer_div exec_do*count (integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 91
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.22
Median total errors in population: 8
Error averages by case: (0.642 0.976 0.651 0.388 0.923 0.661 0.934 0.724 0.661 0.66)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.473
Average program size in population (points): 88.803
Average percent parens in population: 0.251
Minimum age in population: 28.74609375
Maximum age in population: 32.23084449768066
Average age in population: 30.74129084968567
Median age in population: 30.87771606445312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.007
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 11610154
--- Timings ---
Current time: 1559314687178 milliseconds
Total Time:          67.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 65.8%
Fitness Testing:     14.2 seconds, 21.1%
Report:               8.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 615
Test mean error for best: 0.61500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 52                 
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output:                    
Correct output: 10                  | Program output:                    
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output:                    
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output:                    
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 14                 
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output:                    
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s})
Lexicase best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove integer_min in1 exec_yank integer_dec integer_dup_times exec_if (integer_gt) () boolean_not integer_gt boolean_not integer_gt boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () () ()) ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s})
Zero cases best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove integer_min in1 exec_yank integer_dec integer_dup_times exec_if (integer_gt) () boolean_not integer_gt boolean_not integer_gt boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte) integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () () ()) ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (764 887 280 266 102 265 253 297 102 216)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (764 887 280 266 102 265 253 297 102 216)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_exec_417 (boolean_shove tagged_645 integer_lte) integer_max in2) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_when () exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in3 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ()))
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 90
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 6.568
Median total errors in population: 7
Error averages by case: (0.236 0.113 0.72 0.734 0.898 0.735 0.747 0.703 0.898 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.437
Average program size in population (points): 81.802
Average percent parens in population: 0.235
Minimum age in population: 30.28716278076172
Maximum age in population: 34.23084449768066
Average age in population: 32.21654092407227
Median age in population: 32.16809272766113
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 12338522
--- Timings ---
Current time: 1559314690577 milliseconds
Total Time:          70.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.3 seconds, 65.6%
Fitness Testing:     14.9 seconds, 21.1%
Report:               9.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 503
Test mean error for best: 0.50300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -38                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 8                  
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 14                 
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -28                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 50                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: 21                 
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -51                
Correct output: -24                 | Program output: 36                 
Correct output: -86                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -22                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove integer_min in1 exec_yank integer_dec integer_max exec_if (integer_gt) () boolean_not integer_gt boolean_not exec_do*range () integer_yankdup boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times in3 in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Lexicase best errors: [1 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 107
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove integer_min in1 exec_yank integer_dec integer_max exec_if (integer_gt) () boolean_not integer_gt boolean_not exec_do*range () integer_yankdup boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times in3 in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Zero cases best errors: [1 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 107
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (40 391 74 465 759 798 144 251 56 144)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (40 391 74 465 759 798 144 251 56 144)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove integer_min in1 exec_yank integer_dec integer_dup_times exec_if (integer_gt) () boolean_not integer_gt boolean_not integer_gt boolean_rot exec_while () tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 77
Size: 99
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.878
Median total errors in population: 6
Error averages by case: (0.96 0.609 0.926 0.535 0.241 0.202 0.856 0.749 0.944 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.925
Average program size in population (points): 86.308
Average percent parens in population: 0.246
Minimum age in population: 31.28716278076172
Maximum age in population: 35.30896615982056
Average age in population: 33.89693858909607
Median age in population: 34.09416627883911
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.007
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 13095360
--- Timings ---
Current time: 1559314693900 milliseconds
Total Time:          74.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.4 seconds, 65.3%
Fitness Testing:     15.6 seconds, 21.1%
Report:              10.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 482
Test mean error for best: 0.48200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -47                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -38                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -28                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -51                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -22                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 92
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 92
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 728 437 804 440 372 433 55 668 762)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (367 728 437 804 440 372 433 55 668 762)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 92
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 4.934
Median total errors in population: 5
Error averages by case: (0.633 0.272 0.563 0.196 0.56 0.628 0.567 0.945 0.332 0.238)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.511
Average program size in population (points): 90.212
Average percent parens in population: 0.251
Minimum age in population: 33.28293418884277
Maximum age in population: 37.10782885551453
Average age in population: 35.22885252928734
Median age in population: 35.32301044464111
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 13732252
--- Timings ---
Current time: 1559314697126 milliseconds
Total Time:          77.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.5 seconds, 65.3%
Fitness Testing:     16.2 seconds, 21.0%
Report:              10.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -38                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 52                 
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output: 86                 
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 14                 
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 36                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -28                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 50                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: 21                 
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -51                
Correct output: -24                 | Program output: 95                 
Correct output: -86                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -22                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while () boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 92
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while () boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 92
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (738 25 439 32 16 110 417 738 441 736)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (738 25 439 32 16 110 417 738 441 736)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 exec_dup () in1 in2) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte exec_eq)) ())))
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 93
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.308
Median total errors in population: 7
Error averages by case: (0.262 0.975 0.561 0.968 0.984 0.89 0.583 0.262 0.559 0.264)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.995
Average program size in population (points): 88.158
Average percent parens in population: 0.263
Minimum age in population: 34.28293418884277
Maximum age in population: 38.91877329349518
Average age in population: 36.5534348897934
Median age in population: 36.61437040567398
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.204
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 14341383
--- Timings ---
Current time: 1559314700280 milliseconds
Total Time:          80.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.6 seconds, 65.3%
Fitness Testing:     16.8 seconds, 20.9%
Report:              11.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove exec_while () tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte integer_fromboolean in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))) ())))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 104
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove exec_while () tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte integer_fromboolean in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))) ())))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 104
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 756 356 505 108 14 756 265 201 425)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (149 756 356 505 108 14 756 265 201 425)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add})
Best program: (boolean_and boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq exec_rot (exec_when (exec_do*while (integer_div integer_add))) () ()))))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 6.465
Median total errors in population: 6
Error averages by case: (0.851 0.244 0.644 0.495 0.892 0.986 0.244 0.735 0.799 0.575)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.177
Average program size in population (points): 95.27
Average percent parens in population: 0.263
Minimum age in population: 35.65624094009399
Maximum age in population: 40.05743187665939
Average age in population: 38.21369529098272
Median age in population: 38.23612904548645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.008
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 14921528
--- Timings ---
Current time: 1559314703288 milliseconds
Total Time:          83.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.6 seconds, 65.4%
Fitness Testing:     17.4 seconds, 20.8%
Report:              11.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -38                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 92                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 79                 
Correct output: 35                  | Program output: 72                 
Correct output: 20                  | Program output: 86                 
Correct output: 41                  | Program output: 82                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 84                 
Correct output: 34                  | Program output: 45                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 95                 
Correct output: 24                  | Program output: 77                 
Correct output: 10                  | Program output: 51                 
Correct output: 10                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 30                 
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 46                 
Correct output: 43                  | Program output: 80                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 74                 
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -65                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -28                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 67                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 81                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: 79                 
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 67                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 72                 
Correct output: 22                  | Program output: 78                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -51                
Correct output: -24                 | Program output: 36                 
Correct output: -86                 | Program output: -80                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -22                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove exec_while () tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_fromboolean in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div exec_k () () integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))) ())))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 106
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove exec_while () tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_fromboolean in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div exec_k () () integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))) ())))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 106
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 169 28 164 750 165 238 613 38 293)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (367 169 28 164 750 165 238 613 38 293)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove exec_while () tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) integer_fromboolean in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (print_newline exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while (integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))) ())))
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 75
Size: 103
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 7.175
Median total errors in population: 7
Error averages by case: (0.633 0.831 0.972 0.836 0.25 0.835 0.762 0.387 0.962 0.707)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.2
Average program size in population (points): 100.723
Average percent parens in population: 0.263
Minimum age in population: 37.41831398010254
Maximum age in population: 41.40429252386093
Average age in population: 39.42484125360847
Median age in population: 39.39570304751396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.008
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 15551378
--- Timings ---
Current time: 1559314706447 milliseconds
Total Time:          86.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 65.5%
Fitness Testing:     18.0 seconds, 20.8%
Report:              11.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 574
Test mean error for best: 0.57400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range (tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_noop exec_pop (exec_do*count () integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop (exec_do*count () integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 107
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range (tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_noop exec_pop (exec_do*count () integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop (exec_do*count () integer_lte) integer_gte) integer_lte integer_add) integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 107
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (530 590 165 829 361 364 829 406 399 657)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (530 590 165 829 361 364 829 406 399 657)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times exec_shove (exec_if (integer_gt) (boolean_not exec_while ()) tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop (exec_do*count () in3 integer_eq in2) exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 103
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 4.87
Median total errors in population: 4
Error averages by case: (0.47 0.41 0.835 0.171 0.639 0.636 0.171 0.594 0.601 0.343)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.6
Average program size in population (points): 102.526
Average percent parens in population: 0.262
Minimum age in population: 38.41831398010254
Maximum age in population: 42.92631243169308
Average age in population: 40.98171794271469
Median age in population: 41.10368716716766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.009
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 16160833
--- Timings ---
Current time: 1559314709626 milliseconds
Total Time:          89.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.8 seconds, 65.5%
Fitness Testing:     18.7 seconds, 20.8%
Report:              12.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction tagged_941} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_dup_times (exec_pop (exec_dup_times (exec_pop (exec_do*count () integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop (exec_do*count () integer_yankdup) integer_pop) integer_lte integer_add) tagged_941 integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and in3))))))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction tagged_941} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_dup_times (exec_pop (exec_dup_times (exec_pop (exec_do*count () integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop (exec_do*count () integer_yankdup) integer_pop) integer_lte integer_add) tagged_941 integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and in3))))))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 246 341 520 31 139 25 368 446 25)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (442 246 341 520 31 139 25 368 446 25)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove integer_min in1 boolean_and integer_shove boolean_and integer_shove exec_while () tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte integer_fromboolean in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult integer_shove boolean_dup_times boolean_invert_second_then_and boolean_yank exec_while (print_newline exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while (integer_dup_times boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))) () ())))
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 75
Size: 103
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 7.417
Median total errors in population: 7
Error averages by case: (0.558 0.754 0.659 0.48 0.969 0.861 0.975 0.632 0.554 0.975)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.168
Average program size in population (points): 106.197
Average percent parens in population: 0.263
Minimum age in population: 40.00353002548218
Maximum age in population: 44.14910944551229
Average age in population: 42.39747925848514
Median age in population: 42.46608930826187
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 16843862
--- Timings ---
Current time: 1559314712871 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 65.5%
Fitness Testing:     19.3 seconds, 20.8%
Report:              12.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 99                 
Correct output: 6                   | Program output:                    
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 95                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: 42                 
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output:                    
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: 93                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: 37                 
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction tagged_941} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_dup_times (exec_pop (exec_dup_times (exec_pop (exec_do*count () integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop (exec_do*count () integer_yankdup) integer_pop) integer_lte integer_add) tagged_941 integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 117
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction tagged_941} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (boolean_not exec_while () boolean_rot exec_dup_times (exec_pop (exec_dup_times (exec_pop (exec_do*count () integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop (exec_do*count () integer_yankdup) integer_pop) integer_lte integer_add) tagged_941 integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (boolean_not integer_dup_items integer_inc in4) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 117
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (807 807 520 39 520 39 32 769 747 564)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (807 807 520 39 520 39 32 769 747 564)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction tagged_171} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 integer_shove integer_dec integer_dup_times exec_shove (exec_do*range () tagged_171 exec_if (integer_gt) (exec_pop (boolean_swap integer_lte) integer_gte integer_lte integer_add) integer_flush integer_shove integer_dup boolean_and in3 tagged_645 integer_lte) integer_fromboolean in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (exec_shove (exec_s (integer_mult) (integer_shove boolean_dup_times boolean_invert_second_then_and in2 exec_while (exec_y_when_autoconstructing (exec_if (boolean_pop) (integer_eq boolean_dup_times exec_when (exec_do*while (integer_div boolean_yank)) integer_eq integer_stackdepth exec_while () integer_dup_times) exec_when (exec_do*while (integer_div integer_add)) integer_eq integer_stackdepth exec_while () integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())) ())))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 78
Size: 111
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 5.156
Median total errors in population: 4
Error averages by case: (0.193 0.193 0.48 0.961 0.48 0.961 0.968 0.231 0.253 0.436)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.55
Average program size in population (points): 104.035
Average percent parens in population: 0.264
Minimum age in population: 41.73722112178802
Maximum age in population: 45.66597311943769
Average age in population: 43.87122659572959
Median age in population: 43.8777112364769
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.009
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 17435709
--- Timings ---
Current time: 1559314716184 milliseconds
Total Time:          96.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.0 seconds, 65.5%
Fitness Testing:     19.9 seconds, 20.7%
Report:              13.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 594
Test mean error for best: 0.59400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output:                    
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 30                 
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 95                 
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_mult in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_flush integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 103
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_mult in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_flush integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 103
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 82 3 517 343 365 366 7 365 834)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (8 82 3 517 343 365 366 7 365 834)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ())))
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 76
Size: 99
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 7.11
Median total errors in population: 7
Error averages by case: (0.992 0.918 0.997 0.483 0.657 0.635 0.634 0.993 0.635 0.166)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.996
Average program size in population (points): 102.162
Average percent parens in population: 0.255
Minimum age in population: 44.32793711125851
Maximum age in population: 47.36757526546717
Average age in population: 45.91585773237608
Median age in population: 45.85192857682705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 18187658
--- Timings ---
Current time: 1559314719568 milliseconds
Total Time:          99.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 65.3%
Fitness Testing:     20.7 seconds, 20.8%
Report:              13.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 580
Test mean error for best: 0.58000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 46                 
Correct output: 35                  | Program output: 83                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 1                  
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 45                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 58                 
Correct output: 10                  | Program output: 35                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 30                 
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -23                
Correct output: 8                   | Program output: 46                 
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 77                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 63                 
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 58                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 93                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output:                    
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output:                    
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))
Lexicase best errors: [0 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 108
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))
Zero cases best errors: [0 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 108
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (743 485 735 23 57 14 15 537 743 640)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (743 485 735 23 57 14 15 537 743 640)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_rot exec_noop exec_pop (boolean_swap integer_lte) integer_gte in1 integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_flush integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or boolean_yank integer_dup_items in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Errors: [0 0 0 1 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 80
Size: 99
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 6.008
Median total errors in population: 5
Error averages by case: (0.257 0.515 0.265 0.977 0.943 0.986 0.985 0.463 0.257 0.36)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.335
Average program size in population (points): 102.082
Average percent parens in population: 0.232
Minimum age in population: 45.45151883363724
Maximum age in population: 48.54607757925987
Average age in population: 46.79501755478792
Median age in population: 46.86383779346943
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 18895544
--- Timings ---
Current time: 1559314722936 milliseconds
Total Time:         103.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.2 seconds, 65.3%
Fitness Testing:     21.4 seconds, 20.7%
Report:              14.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 616
Test mean error for best: 0.61600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output:                    
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output:                    
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 45                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 30                 
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 36                 
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output:                    
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and integer_shove boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove exec_while () boolean_rot exec_noop exec_pop (boolean_yank integer_lte exec_dup_times (integer_lte integer_add) integer_flush integer_gte integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_717 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 boolean_invert_second_then_and boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (integer_min) ()) ())
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 107
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and integer_shove boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove exec_while () boolean_rot exec_noop exec_pop (boolean_yank integer_lte exec_dup_times (integer_lte integer_add) integer_flush integer_gte integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_717 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 boolean_invert_second_then_and boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (integer_min) ()) ())
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 107
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 796 29 56 279 364 71 8 620 260)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (115 796 29 56 279 364 71 8 620 260)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec integer_dup_times tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth in4 boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and boolean_dup_times exec_eq) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))))
Errors: [1 0 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 83
Size: 108
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.402
Median total errors in population: 7
Error averages by case: (0.885 0.204 0.971 0.944 0.721 0.636 0.929 0.992 0.38 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 78.972
Average program size in population (points): 102.1
Average percent parens in population: 0.226
Minimum age in population: 46.86383779346943
Maximum age in population: 49.74012066796422
Average age in population: 48.5193376910435
Median age in population: 48.44260704983026
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.007
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 19714291
--- Timings ---
Current time: 1559314726534 milliseconds
Total Time:         106.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.4 seconds, 65.1%
Fitness Testing:     22.2 seconds, 20.8%
Report:              14.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -83                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 82                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 52                 
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 91                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 65                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 97                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 86                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 88                 
Correct output: 4                   | Program output: 30                 
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 38                 
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 14                 
Correct output: -92                 | Program output: -66                
Correct output: -97                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -18                
Correct output: -87                 | Program output: -7                 
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: 10                 
Correct output: -59                 | Program output: -23                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 50                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: 21                 
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 19                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 95                 
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -38                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1})
Lexicase best program: (exec_dup (integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2) boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_717 integer_lte) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt integer_dup_times integer_dup_items integer_inc integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 exec_do*while (boolean_yank)) integer_dup_items in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (in1)))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 105
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1})
Zero cases best program: (exec_dup (integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2) boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_717 integer_lte) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt integer_dup_times integer_dup_items integer_inc integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 exec_do*while (boolean_yank)) integer_dup_items in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (in1)))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 105
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (474 278 395 462 476 409 280 236 278 307)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (474 278 395 462 476 409 280 236 278 307)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (exec_dup (integer_shove exec_y_when_autoconstructing () in1 exec_yank boolean_rot exec_noop tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) print_integer boolean_or exec_s_when_autoconstructing () () (integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_717 in2) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt integer_dup_times integer_dup_items integer_inc integer_dup_times) boolean_dup_times integer_stackdepth) integer_lte boolean_or exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 exec_do*while (boolean_yank)) integer_dup_items in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 91
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.405
Median total errors in population: 7
Error averages by case: (0.526 0.722 0.605 0.538 0.524 0.591 0.72 0.764 0.722 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.628
Average program size in population (points): 105.985
Average percent parens in population: 0.239
Minimum age in population: 48.9745116122067
Maximum age in population: 51.34469821304083
Average age in population: 50.30522307176655
Median age in population: 50.31989215314388
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.008
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 20653357
--- Timings ---
Current time: 1559314730182 milliseconds
Total Time:         110.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.5 seconds, 64.9%
Fitness Testing:     23.1 seconds, 20.9%
Report:              15.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_pop (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_pop (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (422 12 530 530 385 9 461 17 262 782)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (422 12 530 530 385 9 461 17 262 782)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_pop (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 52
Size: 67
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.59
Median total errors in population: 6
Error averages by case: (0.578 0.988 0.47 0.47 0.615 0.991 0.539 0.983 0.738 0.218)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.733
Average program size in population (points): 99.815
Average percent parens in population: 0.241
Minimum age in population: 50.13385529955849
Maximum age in population: 53.17108754999936
Average age in population: 51.87436965053342
Median age in population: 52.0103401131928
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 21471836
--- Timings ---
Current time: 1559314733483 milliseconds
Total Time:         113.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.6 seconds, 64.7%
Fitness Testing:     23.9 seconds, 21.0%
Report:              16.1 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 58                  | Program output: 84                 
Correct output: 26                  | Program output: 98                 
Correct output: 23                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 84                 
Correct output: 41                  | Program output: 90                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 80                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 99                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_pop (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor) in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_pop (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor) in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (466 270 439 778 291 445 528 73 572 473)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (466 270 439 778 291 445 528 73 572 473)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_928} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction in1})
Best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_pop (tagged_928 boolean_flush exec_pop (exec_while ()) boolean_rot integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s () () (boolean_stackdepth exec_do*while (boolean_invert_second_then_and integer_dup_items) exec_k (exec_s () (in1) ()) ()))
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 52
Size: 67
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 5.665
Median total errors in population: 5
Error averages by case: (0.534 0.73 0.561 0.222 0.709 0.555 0.472 0.927 0.428 0.527)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.604
Average program size in population (points): 87.09
Average percent parens in population: 0.223
Minimum age in population: 52.23214326845482
Maximum age in population: 55.0103401131928
Average age in population: 53.62347448509047
Median age in population: 53.66631267947378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.008
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 22181148
--- Timings ---
Current time: 1559314736658 milliseconds
Total Time:         116.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 64.7%
Fitness Testing:     24.6 seconds, 21.0%
Report:              16.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 523
Test mean error for best: 0.52300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 62                 
Correct output: 11                  | Program output: 2                  
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 61                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 57                 
Correct output: 6                   | Program output: 8                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 67                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 65                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: 62                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 88                 
Correct output: -14                 | Program output: 79                 
Correct output: -88                 | Program output: -23                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: 31                 
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 3                  
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 75                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 95                 
Correct output: -92                 | Program output: 97                 
Correct output: -55                 | Program output: 86                 
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: 51                 
Correct output: -68                 | Program output: 63                 
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 92                 
Correct output: 34                  | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -46                
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: 47                 
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: 53                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output:                    
Correct output: -51                 | Program output: -35                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -20                
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and integer_shove integer_mod exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (exec_k_when_autoconstructing (integer_gt) () boolean_rot integer_lte exec_dup_times (integer_lte integer_add) integer_flush integer_gte integer_dup boolean_xor boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte) integer_lte integer_flush integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_dup () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 101
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and integer_shove integer_mod exec_do*range () tagged_171 boolean_rot boolean_rot exec_if (integer_gt) (exec_k_when_autoconstructing (integer_gt) () boolean_rot integer_lte exec_dup_times (integer_lte integer_add) integer_flush integer_gte integer_dup boolean_xor boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte) integer_lte integer_flush integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_dup () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 101
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 847 864 500 568 328 383 277 495 18)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (259 847 864 500 568 328 383 277 495 18)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_857} {:close 1, :instruction in2} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (exec_dup (integer_shove exec_y_when_autoconstructing () in1 boolean_stackdepth boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_gt) boolean_rot integer_lte exec_dup_times (integer_gt) boolean_not exec_y_when_autoconstructing () in1 boolean_stackdepth boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_gt boolean_rot integer_lte exec_dup_times (integer_lte integer_add) integer_flush integer_gte integer_dup boolean_xor boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_rot exec_noop exec_pop () exec_do*count () integer_lte) integer_gte integer_lte integer_flush integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_857 in2) (exec_when (exec_dup () boolean_yankdup integer_stackdepth) boolean_rot exec_eq boolean_not integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 97
Size: 124
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 5.461
Median total errors in population: 5
Error averages by case: (0.741 0.153 0.136 0.5 0.432 0.672 0.617 0.723 0.505 0.982)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.054
Average program size in population (points): 83.517
Average percent parens in population: 0.222
Minimum age in population: 53.47020043479279
Maximum age in population: 56.55523411958711
Average age in population: 55.20952715383418
Median age in population: 55.26459584099939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.008
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 22862188
--- Timings ---
Current time: 1559314739941 milliseconds
Total Time:         120.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 64.8%
Fitness Testing:     25.3 seconds, 21.0%
Report:              16.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -63                
Correct output: -75                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 21                 
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 83                 
Correct output: 20                  | Program output: 47                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 45                 
Correct output: 12                  | Program output: 32                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 58                 
Correct output: 10                  | Program output: 4                  
Correct output: 10                  | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: 50                 
Correct output: -88                 | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: -17                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -39                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: 23                 
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 22                 
Correct output: -92                 | Program output: 77                 
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -18                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -25                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: 47                 
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: 12                 
Correct output: 34                  | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -36                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -7                 
Correct output: -71                 | Program output: -70                
Correct output: -86                 | Program output: -25                
Correct output: -24                 | Program output: 4                  
Correct output: -86                 | Program output: -42                
Correct output: -68                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -16                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -81                
Correct output: -95                 | Program output: -30                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: 6                  
Correct output: -44                 | Program output: -16                
Correct output: -94                 | Program output: -18                
Correct output: -85                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1})
Lexicase best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_dup (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte) integer_gte integer_lte integer_add in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_swap (boolean_xor boolean_dup tag_boolean_717 integer_lte) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt integer_dup_times) integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth integer_lte boolean_or exec_s_when_autoconstructing () () () boolean_stackdepth integer_lt in4 exec_do*while () boolean_yank integer_dup_items in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (in1)))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 92
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1})
Zero cases best program: (boolean_and integer_shove exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_dup (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte) integer_gte integer_lte integer_add in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_swap (boolean_xor boolean_dup tag_boolean_717 integer_lte) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt integer_dup_times) integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth integer_lte boolean_or exec_s_when_autoconstructing () () () boolean_stackdepth integer_lt in4 exec_do*while () boolean_yank integer_dup_items in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (in1)))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 92
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 731 380 302 605 725 353 158 560 475)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (353 731 380 302 605 725 353 158 560 475)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_417} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1})
Best program: (boolean_and integer_eq exec_y_when_autoconstructing () in1 exec_yank integer_dec exec_pop (tagged_928 exec_noop exec_pop (exec_while ()) boolean_rot integer_lte) integer_gte integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_dup boolean_xor in3 tag_exec_417 (boolean_shove boolean_not boolean_frominteger integer_inc in4) exec_eq exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_swap (boolean_xor in3 tag_boolean_717 integer_lte) (exec_when (exec_do*count () boolean_yankdup integer_stackdepth) boolean_rot integer_lt integer_dup_times) integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth integer_lte boolean_or exec_s_when_autoconstructing () () () boolean_stackdepth in4 in4 exec_do*while () boolean_yank integer_dup_items in4 boolean_or exec_s_when_autoconstructing () (boolean_stackdepth in4) (exec_yank exec_do*while (in1)))
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 78
Size: 96
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.358
Median total errors in population: 5
Error averages by case: (0.647 0.269 0.62 0.698 0.395 0.275 0.647 0.842 0.44 0.525)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.185
Average program size in population (points): 83.191
Average percent parens in population: 0.217
Minimum age in population: 54.47020043479279
Maximum age in population: 58.26076146494597
Average age in population: 56.79326753124705
Median age in population: 56.92247542238329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.009
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 23596068
--- Timings ---
Current time: 1559314743260 milliseconds
Total Time:         123.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.8 seconds, 64.7%
Fitness Testing:     26.0 seconds, 21.0%
Report:              17.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and integer_shove integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer integer_swap exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 91
Percent parens: 0.187
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and integer_shove integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer integer_swap exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 91
Percent parens: 0.187
--- Lexicase Population Statistics ---
Count of elite individuals by case: (610 277 233 668 687 629 417 465 447 277)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (610 277 233 668 687 629 417 465 447 277)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (boolean_and integer_eq exec_y_when_autoconstructing () in1 integer_lte integer_gte in1 integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_while (boolean_dup print_integer boolean_or boolean_yank) boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 63
Size: 78
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.29
Median total errors in population: 5
Error averages by case: (0.39 0.723 0.767 0.332 0.313 0.371 0.583 0.535 0.553 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.718
Average program size in population (points): 86.186
Average percent parens in population: 0.205
Minimum age in population: 56.73835260025226
Maximum age in population: 60.19242630410008
Average age in population: 58.69869294409915
Median age in population: 58.72925051510538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.01
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 24339811
--- Timings ---
Current time: 1559314746558 milliseconds
Total Time:         126.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.9 seconds, 64.6%
Fitness Testing:     26.7 seconds, 21.0%
Report:              18.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and integer_shove integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range (tagged_171) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) (print_integer in4) exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_k (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 91
Percent parens: 0.187
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and integer_shove integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range (tagged_171) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) (print_integer in4) exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_k (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 91
Percent parens: 0.187
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 574 571 589 172 14 557 760 701 685)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (693 574 571 589 172 14 557 760 701 685)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (boolean_and integer_eq exec_y_when_autoconstructing () in1 integer_lte integer_gte in1 integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 66
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 4.684
Median total errors in population: 4
Error averages by case: (0.307 0.426 0.429 0.411 0.828 0.986 0.443 0.24 0.299 0.315)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.679
Average program size in population (points): 88.407
Average percent parens in population: 0.201
Minimum age in population: 58.15671204893442
Maximum age in population: 62.16702792534488
Average age in population: 60.48178113769613
Median age in population: 60.49405862993444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.009
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 25074369
--- Timings ---
Current time: 1559314749854 milliseconds
Total Time:         130.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.1 seconds, 64.6%
Fitness Testing:     27.4 seconds, 21.1%
Report:              18.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_flush) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_flush) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (748 69 449 345 815 333 600 347 333 75)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (748 69 449 345 815 333 600 347 333 75)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (boolean_and integer_eq exec_y_when_autoconstructing () in1 integer_lte integer_gte in1 integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_while (boolean_dup print_integer boolean_or boolean_yank) boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times integer_empty integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 63
Size: 78
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.886
Median total errors in population: 6
Error averages by case: (0.252 0.931 0.551 0.655 0.185 0.667 0.4 0.653 0.667 0.925)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.333
Average program size in population (points): 91.292
Average percent parens in population: 0.197
Minimum age in population: 59.25818997828173
Maximum age in population: 63.56742630410008
Average age in population: 61.90069925835698
Median age in population: 61.93033089722121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.008
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 25869505
--- Timings ---
Current time: 1559314753277 milliseconds
Total Time:         133.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.2 seconds, 64.6%
Fitness Testing:     28.2 seconds, 21.1%
Report:              19.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 234
Test mean error for best: 0.23400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and exec_dup_items integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171) exec_stackdepth exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_k (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 86
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and exec_dup_items integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171) exec_stackdepth exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 in2 boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_k (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 86
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 386 820 649 374 868 251 682 273 611)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (375 386 820 649 374 868 251 682 273 611)
Population mean number of perfect (error zero) cases: 5.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (boolean_and integer_shove integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171) boolean_rot exec_noop exec_pop (integer_dup boolean_xor in3 integer_flush integer_shove exec_yankdup boolean_xor in1 integer_add) integer_flush integer_shove boolean_or boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 72
Size: 86
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 4.711
Median total errors in population: 4
Error averages by case: (0.625 0.614 0.18 0.351 0.626 0.132 0.749 0.318 0.727 0.389)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.407
Average program size in population (points): 93.923
Average percent parens in population: 0.207
Minimum age in population: 61.23051105270497
Maximum age in population: 64.975724905893
Average age in population: 63.62256199514968
Median age in population: 63.725724905893
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.01
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 26619888
--- Timings ---
Current time: 1559314756693 milliseconds
Total Time:         136.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.3 seconds, 64.6%
Fitness Testing:     28.9 seconds, 21.1%
Report:              19.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 197
Test mean error for best: 0.19700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 58                 
Correct output: 26                  | Program output: 26                 
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 28                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 41                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 69                 
Correct output: 24                  | Program output: 42                 
Correct output: 10                  | Program output: 35                 
Correct output: 10                  | Program output: 27                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 30                 
Correct output: -27                 | Program output: -27                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 43                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -92                 | Program output: -72                
Correct output: -97                 | Program output: -79                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
Correct output: -53                 | Program output: -53                
Correct output: -79                 | Program output: -20                
Correct output: -59                 | Program output: -43                
Correct output: -89                 | Program output: -76                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -52                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: 15                 
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -10                
Correct output: -41                 | Program output: -35                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -14                
Correct output: -100                | Program output: 20                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: -24                
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -26                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -71                
Correct output: -98                 | Program output: -63                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and integer_shove integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items exec_swap (integer_dup_times) (boolean_dup_times integer_stackdepth) exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 1, :instruction tagged_171} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and integer_shove integer_mod integer_shove exec_yank integer_dec integer_dup_times integer_dup_times exec_shove (exec_do*range () tagged_171) boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items exec_swap (integer_dup_times) (boolean_dup_times integer_stackdepth) exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (407 604 600 441 428 626 625 789 609 400)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (407 604 600 441 428 626 625 789 609 400)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction tagged_928} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_717} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (exec_dup (tagged_928 exec_noop exec_pop (exec_while ()) tagged_645 integer_lte) in1 in2 boolean_invert_second_then_and boolean_invert_second_then_and in4 tag_boolean_802 boolean_xor integer_rot exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer boolean_or exec_s_when_autoconstructing () () (integer_flush integer_shove exec_swap (boolean_xor in3 tag_boolean_717 integer_lte) (integer_dup_items integer_inc in4) exec_yankdup boolean_dup print_integer boolean_or boolean_yank) boolean_rot boolean_and boolean_not integer_dup_items integer_inc integer_max boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in3 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 86
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 4.471
Median total errors in population: 4
Error averages by case: (0.593 0.396 0.4 0.559 0.572 0.374 0.375 0.211 0.391 0.6)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.34
Average program size in population (points): 90.097
Average percent parens in population: 0.208
Minimum age in population: 62.94967747441115
Maximum age in population: 66.72151048508113
Average age in population: 65.17499252027427
Median age in population: 65.26110423120826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.009
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 27342140
--- Timings ---
Current time: 1559314760060 milliseconds
Total Time:         140.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.5 seconds, 64.5%
Fitness Testing:     29.6 seconds, 21.1%
Report:              20.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 241
Test mean error for best: 0.24100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_boolean_427} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (exec_dup (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) boolean_yank in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 exec_empty in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup tag_boolean_427) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items integer_inc integer_dup_times) boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 101
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tag_boolean_427} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (exec_dup (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) boolean_yank in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte) in1 in2 exec_empty in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup tag_boolean_427) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items integer_inc integer_dup_times) boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 101
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (452 565 554 556 786 454 564 449 864 800)
Population mean number of elite cases: 6.04
Count of perfect (error zero) individuals by case: (452 565 554 556 786 454 564 449 864 800)
Population mean number of perfect (error zero) cases: 6.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (in1 integer_lte integer_gte in1 integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_rot integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_k (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 68
Size: 81
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 3.956
Median total errors in population: 2
Error averages by case: (0.548 0.435 0.446 0.444 0.214 0.546 0.436 0.551 0.136 0.2)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.119
Average program size in population (points): 88.53
Average percent parens in population: 0.218
Minimum age in population: 64.09641726436166
Maximum age in population: 68.46729606426925
Average age in population: 66.72904925344596
Median age in population: 66.7722988918033
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.01
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 28076113
--- Timings ---
Current time: 1559314763397 milliseconds
Total Time:         143.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.6 seconds, 64.5%
Fitness Testing:     30.4 seconds, 21.2%
Report:              20.5 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 234
Test mean error for best: 0.23400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 1
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 1
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_and integer_eq exec_y_when_autoconstructing () in1 integer_lte integer_gte in1 integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 66
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_and integer_eq exec_y_when_autoconstructing () in1 integer_lte integer_gte in1 integer_add integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () (boolean_stackdepth in4 in4 integer_dup_items boolean_invert_second_then_and integer_dup_items) exec_k (integer_dup_items) (exec_k (exec_s () (integer_min) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 66
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (511 507 624 509 512 510 622 625 775 515)
Population mean number of elite cases: 5.71
Count of perfect (error zero) individuals by case: (511 507 624 509 512 510 622 625 775 515)
Population mean number of perfect (error zero) cases: 5.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_645} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_802} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 2, :instruction exec_s} {:close 0, :instruction integer_min})
Best program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 67
Size: 83
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 4.29
Median total errors in population: 4
Error averages by case: (0.489 0.493 0.376 0.491 0.488 0.49 0.378 0.375 0.225 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.845
Average program size in population (points): 86.23
Average percent parens in population: 0.212
Minimum age in population: 65.09641726436166
Maximum age in population: 70.04482716060807
Average age in population: 68.0595921521165
Median age in population: 68.12208915018755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.011
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 28794373
--- Timings ---
Current time: 1559314766734 milliseconds
Total Time:         146.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.6 seconds, 64.5%
Fitness Testing:     31.1 seconds, 21.2%
Report:              21.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 44
Successful program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 83


Auto-simplifying with starting size: 83
step: 0
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 500
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1000
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 1500
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2000
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 2500
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3000
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 3500
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4000
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 4500
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

step: 5000
program: (integer_shove exec_y_when_autoconstructing () exec_eq exec_yank boolean_rot exec_noop exec_pop (exec_do*count (integer_lte) integer_gte in1 integer_add) integer_flush integer_shove integer_dup boolean_xor in3 tag_boolean_802 boolean_shove tagged_645 integer_lte in1 in2 boolean_invert_second_then_and in3 tag_boolean_802 boolean_xor integer_lte exec_k_when_autoconstructing (in2) (boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup) boolean_invert_second_then_and exec_stackdepth boolean_pop exec_yankdup boolean_dup print_integer in4 exec_yankdup boolean_dup print_integer boolean_or boolean_yank boolean_shove integer_lt boolean_not integer_dup_items integer_inc integer_dup_times boolean_dup_times integer_stackdepth exec_s_when_autoconstructing () () () boolean_stackdepth exec_yank in4 integer_dup_items boolean_invert_second_then_and integer_dup_items exec_swap (integer_dup_items) (exec_k (exec_s () () (integer_min)) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 83

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 234
Test mean error for best: 0.23400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 1
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 1
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: 75                  | Program output: 75                 
Correct output: -62                 | Program output: -62                
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 42                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 58                  | Program output: 63                 
Correct output: 26                  | Program output: 65                 
Correct output: 23                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 41                  | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 61                  | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 10                  | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 14                  | Program output: 14                 
Correct output: 4                   | Program output: 4                  
Correct output: -27                 | Program output: -17                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: 8                   | Program output: 8                  
Correct output: 43                  | Program output: 56                 
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -80                 | Program output: -80                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -84                
Correct output: -75                 | Program output: -57                
Correct output: -53                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -59                 | Program output: -59                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: 10                  | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: 27                  | Program output: 27                 
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -20                 | Program output: -20                
Correct output: -15                 | Program output: -15                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: 34                  | Program output: 34                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: 22                  | Program output: 75                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -24                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -68                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -83                 | Program output: -69                
Correct output: -44                 | Program output: -44                
Correct output: -100                | Program output: -100               
Correct output: -95                 | Program output: -95                
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -33                 | Program output: -33                
Correct output: -51                 | Program output: -51                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
;;******************************
