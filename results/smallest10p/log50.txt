Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x17e6b7e4 clojush.problems.software.smallest$fn__7460@17e6b7e4] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0xb842275 clojush.instructions.tag$tag_instruction_erc$fn__2160@b842275] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x11c25846 clojush.instructions.tag$tagged_instruction_erc$fn__2166@11c25846] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0xdd9de63 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@dd9de63]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x98712fa clojush.problems.software.smallest$smallest_initial_report@98712fa]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x3b8d2abe clojush.problems.software.smallest$smallest_report@3b8d2abe]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 10 -30 -30] -30] [[-60 -7 -7 -7] -60] [[-61 -85 -85 -85] -85] [[75 -76 -76 -76] -76] [[95 -72 95 95] -72] [[-53 -63 -53 -53] -63] [[55 55 -64 55] -64] [[28 28 68 28] 28] [[-90 -88 -88 -88] -90] [[-65 -90 -65 -65] -90] [(70 70 70 70) 70] [(77 77 77 77) 77] [(-34 -34 -34 -34) -34] [(-54 -54 -54 -54) -54] [(7 7 7 7) 7] [(14 84 74 29) 14] [(96 81 21 80) 21] [(1 66 74 21) 1] [(25 2 8 98) 2] [(96 43 88 6) 6] [(43 32 72 21) 21] [(59 31 49 95) 31] [(85 90 28 21) 21] [(50 73 48 60) 48] [(59 30 3 46) 3] [(86 49 86 46) 46] [(65 53 36 71) 36] [(15 23 19 81) 15] [(45 60 71 97) 45] [(68 64 14 31) 14] [(44 89 27 97) 27] [(85 28 40 25) 25] [(61 7 30 23) 7] [(6 82 28 24) 6] [(43 80 76 28) 28] [(41 -51 -60 -11) -60] [(89 -71 -47 -22) -71] [(-88 -60 -76 94) -88] [(82 15 -31 30) -31] [(-1 46 6 5) -1] [(-79 -55 89 -96) -96] [(62 2 -6 -30) -30] [(24 -24 -85 62) -85] [(100 -8 -53 11) -53] [(84 39 38 70) 38] [(23 75 -20 -15) -20] [(-59 67 -38 22) -59] [(97 -7 -96 19) -96] [(0 -91 -54 26) -91] [(-6 74 14 84) -6] [(-100 45 -8 31) -100] [(-56 45 48 -36) -56] [(-51 -14 37 -59) -59] [(73 17 52 -9) -9] [(100 -7 68 -98) -98] [(86 -7 14 -7) -7] [(-60 -61 26 78) -61] [(-62 62 4 12) -62] [(50 -91 82 -67) -91] [(-46 -18 66 82) -46] [(-90 3 18 93) -90] [(-90 -22 44 -43) -90] [(35 31 36 -36) -36] [(58 -78 -33 -78) -78] [(86 -59 0 26) -59] [(-70 -43 91 -1) -70] [(-33 -64 39 -3) -64] [(25 -45 47 -70) -70] [(68 67 4 82) 4] [(-17 25 -83 41) -83] [(-94 29 100 -78) -94] [(-60 1 -3 63) -60] [(-21 -34 70 34) -34] [(57 -75 39 -64) -75] [(-11 22 41 -10) -11] [(-57 -14 22 -1) -57] [(-87 -42 -71 41) -87] [(58 -17 40 27) -17] [(-3 56 -66 -76) -76] [(-94 10 -5 52) -94] [(-75 -27 -22 74) -75] [(16 -28 -34 40) -34] [(-58 -58 -55 39) -58] [(-5 -50 -37 -96) -96] [(54 -47 81 64) -47] [(73 -61 -20 -47) -61] [(25 -66 -75 -42) -75] [(-20 1 -43 42) -43] [(72 37 -67 -88) -88] [(-88 23 -35 49) -88] [(-84 -99 59 -91) -99] [(-85 -9 32 -47) -85] [(-2 -9 -56 29) -56] [(94 87 -87 68) -87] [(89 -75 37 87) -75])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-30 10 -30 -30] -30]
Train Case:   6 | Input/Output: [[-60 -7 -7 -7] -60]
Train Case:   7 | Input/Output: [[-61 -85 -85 -85] -85]
Train Case:   8 | Input/Output: [[75 -76 -76 -76] -76]
Train Case:   9 | Input/Output: [[95 -72 95 95] -72]
Train Case:  10 | Input/Output: [[-53 -63 -53 -53] -63]
Train Case:  11 | Input/Output: [[55 55 -64 55] -64]
Train Case:  12 | Input/Output: [[28 28 68 28] 28]
Train Case:  13 | Input/Output: [[-90 -88 -88 -88] -90]
Train Case:  14 | Input/Output: [[-65 -90 -65 -65] -90]
Train Case:  15 | Input/Output: [(70 70 70 70) 70]
Train Case:  16 | Input/Output: [(77 77 77 77) 77]
Train Case:  17 | Input/Output: [(-34 -34 -34 -34) -34]
Train Case:  18 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  19 | Input/Output: [(7 7 7 7) 7]
Train Case:  20 | Input/Output: [(14 84 74 29) 14]
Train Case:  21 | Input/Output: [(96 81 21 80) 21]
Train Case:  22 | Input/Output: [(1 66 74 21) 1]
Train Case:  23 | Input/Output: [(25 2 8 98) 2]
Train Case:  24 | Input/Output: [(96 43 88 6) 6]
Train Case:  25 | Input/Output: [(43 32 72 21) 21]
Train Case:  26 | Input/Output: [(59 31 49 95) 31]
Train Case:  27 | Input/Output: [(85 90 28 21) 21]
Train Case:  28 | Input/Output: [(50 73 48 60) 48]
Train Case:  29 | Input/Output: [(59 30 3 46) 3]
Train Case:  30 | Input/Output: [(86 49 86 46) 46]
Train Case:  31 | Input/Output: [(65 53 36 71) 36]
Train Case:  32 | Input/Output: [(15 23 19 81) 15]
Train Case:  33 | Input/Output: [(45 60 71 97) 45]
Train Case:  34 | Input/Output: [(68 64 14 31) 14]
Train Case:  35 | Input/Output: [(44 89 27 97) 27]
Train Case:  36 | Input/Output: [(85 28 40 25) 25]
Train Case:  37 | Input/Output: [(61 7 30 23) 7]
Train Case:  38 | Input/Output: [(6 82 28 24) 6]
Train Case:  39 | Input/Output: [(43 80 76 28) 28]
Train Case:  40 | Input/Output: [(41 -51 -60 -11) -60]
Train Case:  41 | Input/Output: [(89 -71 -47 -22) -71]
Train Case:  42 | Input/Output: [(-88 -60 -76 94) -88]
Train Case:  43 | Input/Output: [(82 15 -31 30) -31]
Train Case:  44 | Input/Output: [(-1 46 6 5) -1]
Train Case:  45 | Input/Output: [(-79 -55 89 -96) -96]
Train Case:  46 | Input/Output: [(62 2 -6 -30) -30]
Train Case:  47 | Input/Output: [(24 -24 -85 62) -85]
Train Case:  48 | Input/Output: [(100 -8 -53 11) -53]
Train Case:  49 | Input/Output: [(84 39 38 70) 38]
Train Case:  50 | Input/Output: [(23 75 -20 -15) -20]
Train Case:  51 | Input/Output: [(-59 67 -38 22) -59]
Train Case:  52 | Input/Output: [(97 -7 -96 19) -96]
Train Case:  53 | Input/Output: [(0 -91 -54 26) -91]
Train Case:  54 | Input/Output: [(-6 74 14 84) -6]
Train Case:  55 | Input/Output: [(-100 45 -8 31) -100]
Train Case:  56 | Input/Output: [(-56 45 48 -36) -56]
Train Case:  57 | Input/Output: [(-51 -14 37 -59) -59]
Train Case:  58 | Input/Output: [(73 17 52 -9) -9]
Train Case:  59 | Input/Output: [(100 -7 68 -98) -98]
Train Case:  60 | Input/Output: [(86 -7 14 -7) -7]
Train Case:  61 | Input/Output: [(-60 -61 26 78) -61]
Train Case:  62 | Input/Output: [(-62 62 4 12) -62]
Train Case:  63 | Input/Output: [(50 -91 82 -67) -91]
Train Case:  64 | Input/Output: [(-46 -18 66 82) -46]
Train Case:  65 | Input/Output: [(-90 3 18 93) -90]
Train Case:  66 | Input/Output: [(-90 -22 44 -43) -90]
Train Case:  67 | Input/Output: [(35 31 36 -36) -36]
Train Case:  68 | Input/Output: [(58 -78 -33 -78) -78]
Train Case:  69 | Input/Output: [(86 -59 0 26) -59]
Train Case:  70 | Input/Output: [(-70 -43 91 -1) -70]
Train Case:  71 | Input/Output: [(-33 -64 39 -3) -64]
Train Case:  72 | Input/Output: [(25 -45 47 -70) -70]
Train Case:  73 | Input/Output: [(68 67 4 82) 4]
Train Case:  74 | Input/Output: [(-17 25 -83 41) -83]
Train Case:  75 | Input/Output: [(-94 29 100 -78) -94]
Train Case:  76 | Input/Output: [(-60 1 -3 63) -60]
Train Case:  77 | Input/Output: [(-21 -34 70 34) -34]
Train Case:  78 | Input/Output: [(57 -75 39 -64) -75]
Train Case:  79 | Input/Output: [(-11 22 41 -10) -11]
Train Case:  80 | Input/Output: [(-57 -14 22 -1) -57]
Train Case:  81 | Input/Output: [(-87 -42 -71 41) -87]
Train Case:  82 | Input/Output: [(58 -17 40 27) -17]
Train Case:  83 | Input/Output: [(-3 56 -66 -76) -76]
Train Case:  84 | Input/Output: [(-94 10 -5 52) -94]
Train Case:  85 | Input/Output: [(-75 -27 -22 74) -75]
Train Case:  86 | Input/Output: [(16 -28 -34 40) -34]
Train Case:  87 | Input/Output: [(-58 -58 -55 39) -58]
Train Case:  88 | Input/Output: [(-5 -50 -37 -96) -96]
Train Case:  89 | Input/Output: [(54 -47 81 64) -47]
Train Case:  90 | Input/Output: [(73 -61 -20 -47) -61]
Train Case:  91 | Input/Output: [(25 -66 -75 -42) -75]
Train Case:  92 | Input/Output: [(-20 1 -43 42) -43]
Train Case:  93 | Input/Output: [(72 37 -67 -88) -88]
Train Case:  94 | Input/Output: [(-88 23 -35 49) -88]
Train Case:  95 | Input/Output: [(-84 -99 59 -91) -99]
Train Case:  96 | Input/Output: [(-85 -9 32 -47) -85]
Train Case:  97 | Input/Output: [(-2 -9 -56 29) -56]
Train Case:  98 | Input/Output: [(94 87 -87 68) -87]
Train Case:  99 | Input/Output: [(89 -75 37 87) -75]
Test Case:   0 | Input/Output: [[-17 -17 -27 -17] -27]
Test Case:   1 | Input/Output: [[-1 -32 -1 -1] -32]
Test Case:   2 | Input/Output: [[-78 -78 -8 -78] -78]
Test Case:   3 | Input/Output: [[-85 -85 -85 33] -85]
Test Case:   4 | Input/Output: [[-27 35 -27 -27] -27]
Test Case:   5 | Input/Output: [[55 -1 -1 -1] -1]
Test Case:   6 | Input/Output: [[99 99 99 -16] -16]
Test Case:   7 | Input/Output: [[-24 -24 -24 -7] -24]
Test Case:   8 | Input/Output: [[-89 -89 -89 -82] -89]
Test Case:   9 | Input/Output: [[5 -30 -30 -30] -30]
Test Case:  10 | Input/Output: [[12 12 12 26] 12]
Test Case:  11 | Input/Output: [[-77 71 -77 -77] -77]
Test Case:  12 | Input/Output: [[-74 -74 -34 -74] -74]
Test Case:  13 | Input/Output: [[-93 -93 -87 -93] -93]
Test Case:  14 | Input/Output: [[52 10 52 52] 10]
Test Case:  15 | Input/Output: [[73 73 -68 73] -68]
Test Case:  16 | Input/Output: [[-66 -34 -34 -34] -66]
Test Case:  17 | Input/Output: [[14 14 -56 14] -56]
Test Case:  18 | Input/Output: [[71 -87 -87 -87] -87]
Test Case:  19 | Input/Output: [[-2 -2 39 -2] -2]
Test Case:  20 | Input/Output: [[83 -1 83 83] -1]
Test Case:  21 | Input/Output: [[47 -20 47 47] -20]
Test Case:  22 | Input/Output: [[-58 83 -58 -58] -58]
Test Case:  23 | Input/Output: [[64 64 64 -65] -65]
Test Case:  24 | Input/Output: [[51 51 51 -76] -76]
Test Case:  25 | Input/Output: [[50 50 -34 50] -34]
Test Case:  26 | Input/Output: [[-74 46 -74 -74] -74]
Test Case:  27 | Input/Output: [[-68 -68 -68 -5] -68]
Test Case:  28 | Input/Output: [[-87 -87 -29 -87] -87]
Test Case:  29 | Input/Output: [[70 71 71 71] 70]
Test Case:  30 | Input/Output: [[95 95 95 -39] -39]
Test Case:  31 | Input/Output: [[37 37 37 -76] -76]
Test Case:  32 | Input/Output: [[-64 -98 -64 -64] -98]
Test Case:  33 | Input/Output: [[46 46 46 43] 43]
Test Case:  34 | Input/Output: [[-26 -26 -26 3] -26]
Test Case:  35 | Input/Output: [[100 100 100 -51] -51]
Test Case:  36 | Input/Output: [[90 90 -29 90] -29]
Test Case:  37 | Input/Output: [[-67 -67 -67 -40] -67]
Test Case:  38 | Input/Output: [[-48 -48 -48 -15] -48]
Test Case:  39 | Input/Output: [[-3 -3 -3 -14] -14]
Test Case:  40 | Input/Output: [[-9 16 -9 -9] -9]
Test Case:  41 | Input/Output: [[16 38 16 16] 16]
Test Case:  42 | Input/Output: [[65 -73 -73 -73] -73]
Test Case:  43 | Input/Output: [[-1 -1 28 -1] -1]
Test Case:  44 | Input/Output: [[-49 -49 -49 -90] -90]
Test Case:  45 | Input/Output: [[-31 -31 -31 -2] -31]
Test Case:  46 | Input/Output: [[-17 1 -17 -17] -17]
Test Case:  47 | Input/Output: [[-100 -100 -82 -100] -100]
Test Case:  48 | Input/Output: [[-93 -93 -93 -22] -93]
Test Case:  49 | Input/Output: [[75 75 75 47] 47]
Test Case:  50 | Input/Output: [[75 75 -85 75] -85]
Test Case:  51 | Input/Output: [[40 33 40 40] 33]
Test Case:  52 | Input/Output: [[91 81 81 81] 81]
Test Case:  53 | Input/Output: [[-63 -63 -63 -20] -63]
Test Case:  54 | Input/Output: [[83 83 83 33] 33]
Test Case:  55 | Input/Output: [[-59 -59 28 -59] -59]
Test Case:  56 | Input/Output: [[33 -76 33 33] -76]
Test Case:  57 | Input/Output: [[98 45 98 98] 45]
Test Case:  58 | Input/Output: [[-29 52 52 52] -29]
Test Case:  59 | Input/Output: [[-57 -57 21 -57] -57]
Test Case:  60 | Input/Output: [[56 56 69 56] 56]
Test Case:  61 | Input/Output: [[45 45 45 44] 44]
Test Case:  62 | Input/Output: [[14 14 14 82] 14]
Test Case:  63 | Input/Output: [[-73 -73 -73 -33] -73]
Test Case:  64 | Input/Output: [[-86 -86 -67 -86] -86]
Test Case:  65 | Input/Output: [[-70 -21 -21 -21] -70]
Test Case:  66 | Input/Output: [[-67 -67 76 -67] -67]
Test Case:  67 | Input/Output: [[-78 -78 -86 -78] -86]
Test Case:  68 | Input/Output: [[4 54 4 4] 4]
Test Case:  69 | Input/Output: [[91 36 91 91] 36]
Test Case:  70 | Input/Output: [[100 100 54 100] 54]
Test Case:  71 | Input/Output: [[-22 -22 -22 -52] -52]
Test Case:  72 | Input/Output: [[33 25 25 25] 25]
Test Case:  73 | Input/Output: [[28 31 31 31] 28]
Test Case:  74 | Input/Output: [[61 61 61 -98] -98]
Test Case:  75 | Input/Output: [[37 37 37 -57] -57]
Test Case:  76 | Input/Output: [[-38 -38 -67 -38] -67]
Test Case:  77 | Input/Output: [[-55 -15 -55 -55] -55]
Test Case:  78 | Input/Output: [[89 -38 89 89] -38]
Test Case:  79 | Input/Output: [[-93 -93 -93 54] -93]
Test Case:  80 | Input/Output: [[71 71 71 -33] -33]
Test Case:  81 | Input/Output: [[16 16 23 16] 16]
Test Case:  82 | Input/Output: [[-20 -20 -20 71] -20]
Test Case:  83 | Input/Output: [[26 -78 -78 -78] -78]
Test Case:  84 | Input/Output: [[8 49 8 8] 8]
Test Case:  85 | Input/Output: [[87 87 21 87] 21]
Test Case:  86 | Input/Output: [[33 33 -52 33] -52]
Test Case:  87 | Input/Output: [[-88 -88 41 -88] -88]
Test Case:  88 | Input/Output: [[45 45 -47 45] -47]
Test Case:  89 | Input/Output: [[-78 -64 -64 -64] -78]
Test Case:  90 | Input/Output: [[-74 -74 -74 -38] -74]
Test Case:  91 | Input/Output: [[3 -21 3 3] -21]
Test Case:  92 | Input/Output: [[-85 71 71 71] -85]
Test Case:  93 | Input/Output: [[-49 -49 25 -49] -49]
Test Case:  94 | Input/Output: [[-78 56 56 56] -78]
Test Case:  95 | Input/Output: [[-91 -91 -78 -91] -91]
Test Case:  96 | Input/Output: [[-41 91 -41 -41] -41]
Test Case:  97 | Input/Output: [[-26 4 -26 -26] -26]
Test Case:  98 | Input/Output: [[36 14 36 36] 14]
Test Case:  99 | Input/Output: [[3 3 67 3] 3]
Test Case: 100 | Input/Output: [(71 71 71 71) 71]
Test Case: 101 | Input/Output: [(58 58 58 58) 58]
Test Case: 102 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 103 | Input/Output: [(64 64 64 64) 64]
Test Case: 104 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 105 | Input/Output: [(43 43 43 43) 43]
Test Case: 106 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 107 | Input/Output: [(34 34 34 34) 34]
Test Case: 108 | Input/Output: [(34 34 34 34) 34]
Test Case: 109 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 110 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 111 | Input/Output: [(90 90 90 90) 90]
Test Case: 112 | Input/Output: [(72 72 72 72) 72]
Test Case: 113 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 114 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 115 | Input/Output: [(77 77 77 77) 77]
Test Case: 116 | Input/Output: [(27 27 27 27) 27]
Test Case: 117 | Input/Output: [(71 71 71 71) 71]
Test Case: 118 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 119 | Input/Output: [(81 81 81 81) 81]
Test Case: 120 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 121 | Input/Output: [(62 62 62 62) 62]
Test Case: 122 | Input/Output: [(27 27 27 27) 27]
Test Case: 123 | Input/Output: [(16 16 16 16) 16]
Test Case: 124 | Input/Output: [(55 55 55 55) 55]
Test Case: 125 | Input/Output: [(18 18 18 18) 18]
Test Case: 126 | Input/Output: [(28 28 28 28) 28]
Test Case: 127 | Input/Output: [(39 39 39 39) 39]
Test Case: 128 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 129 | Input/Output: [(49 49 49 49) 49]
Test Case: 130 | Input/Output: [(49 49 49 49) 49]
Test Case: 131 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 132 | Input/Output: [(33 33 33 33) 33]
Test Case: 133 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 134 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 135 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 136 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 137 | Input/Output: [(67 67 67 67) 67]
Test Case: 138 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 139 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 140 | Input/Output: [(46 46 46 46) 46]
Test Case: 141 | Input/Output: [(63 63 63 63) 63]
Test Case: 142 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 143 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 144 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 145 | Input/Output: [(40 40 40 40) 40]
Test Case: 146 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 147 | Input/Output: [(75 75 75 75) 75]
Test Case: 148 | Input/Output: [(95 95 95 95) 95]
Test Case: 149 | Input/Output: [(95 95 95 95) 95]
Test Case: 150 | Input/Output: [(86 86 86 86) 86]
Test Case: 151 | Input/Output: [(39 39 39 39) 39]
Test Case: 152 | Input/Output: [(35 35 35 35) 35]
Test Case: 153 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 154 | Input/Output: [(39 39 39 39) 39]
Test Case: 155 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 156 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 157 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 158 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 159 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 160 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 161 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 162 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 163 | Input/Output: [(96 96 96 96) 96]
Test Case: 164 | Input/Output: [(88 88 88 88) 88]
Test Case: 165 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 166 | Input/Output: [(37 37 37 37) 37]
Test Case: 167 | Input/Output: [(17 17 17 17) 17]
Test Case: 168 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 169 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 170 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 171 | Input/Output: [(6 6 6 6) 6]
Test Case: 172 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 173 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 174 | Input/Output: [(15 15 15 15) 15]
Test Case: 175 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 176 | Input/Output: [(45 45 45 45) 45]
Test Case: 177 | Input/Output: [(50 50 50 50) 50]
Test Case: 178 | Input/Output: [(20 20 20 20) 20]
Test Case: 179 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 180 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 181 | Input/Output: [(95 95 95 95) 95]
Test Case: 182 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 183 | Input/Output: [(32 32 32 32) 32]
Test Case: 184 | Input/Output: [(98 98 98 98) 98]
Test Case: 185 | Input/Output: [(99 99 99 99) 99]
Test Case: 186 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 187 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 188 | Input/Output: [(23 23 23 23) 23]
Test Case: 189 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 190 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 191 | Input/Output: [(36 36 36 36) 36]
Test Case: 192 | Input/Output: [(30 30 30 30) 30]
Test Case: 193 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 194 | Input/Output: [(66 66 66 66) 66]
Test Case: 195 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 196 | Input/Output: [(56 56 56 56) 56]
Test Case: 197 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 198 | Input/Output: [(73 73 73 73) 73]
Test Case: 199 | Input/Output: [(94 94 94 94) 94]
Test Case: 200 | Input/Output: [(5 30 16 48) 5]
Test Case: 201 | Input/Output: [(4 66 9 69) 4]
Test Case: 202 | Input/Output: [(66 51 72 36) 36]
Test Case: 203 | Input/Output: [(39 75 80 13) 13]
Test Case: 204 | Input/Output: [(88 81 53 13) 13]
Test Case: 205 | Input/Output: [(69 33 17 69) 17]
Test Case: 206 | Input/Output: [(71 71 17 2) 2]
Test Case: 207 | Input/Output: [(44 35 81 8) 8]
Test Case: 208 | Input/Output: [(75 51 81 85) 51]
Test Case: 209 | Input/Output: [(14 38 52 22) 14]
Test Case: 210 | Input/Output: [(55 83 59 7) 7]
Test Case: 211 | Input/Output: [(11 21 15 80) 11]
Test Case: 212 | Input/Output: [(58 22 29 32) 22]
Test Case: 213 | Input/Output: [(67 38 0 84) 0]
Test Case: 214 | Input/Output: [(93 70 25 21) 21]
Test Case: 215 | Input/Output: [(21 55 28 98) 21]
Test Case: 216 | Input/Output: [(59 13 46 62) 13]
Test Case: 217 | Input/Output: [(59 77 10 9) 9]
Test Case: 218 | Input/Output: [(80 16 48 68) 16]
Test Case: 219 | Input/Output: [(16 35 22 90) 16]
Test Case: 220 | Input/Output: [(62 90 100 67) 62]
Test Case: 221 | Input/Output: [(77 42 41 98) 41]
Test Case: 222 | Input/Output: [(23 63 59 45) 23]
Test Case: 223 | Input/Output: [(86 35 56 84) 35]
Test Case: 224 | Input/Output: [(28 72 53 48) 28]
Test Case: 225 | Input/Output: [(75 96 86 28) 28]
Test Case: 226 | Input/Output: [(12 58 37 61) 12]
Test Case: 227 | Input/Output: [(17 75 21 39) 17]
Test Case: 228 | Input/Output: [(35 77 92 66) 35]
Test Case: 229 | Input/Output: [(28 3 12 21) 3]
Test Case: 230 | Input/Output: [(50 26 17 87) 17]
Test Case: 231 | Input/Output: [(46 11 73 82) 11]
Test Case: 232 | Input/Output: [(67 50 59 46) 46]
Test Case: 233 | Input/Output: [(90 78 13 87) 13]
Test Case: 234 | Input/Output: [(7 73 92 93) 7]
Test Case: 235 | Input/Output: [(27 52 41 77) 27]
Test Case: 236 | Input/Output: [(74 61 20 77) 20]
Test Case: 237 | Input/Output: [(19 95 87 76) 19]
Test Case: 238 | Input/Output: [(50 42 72 24) 24]
Test Case: 239 | Input/Output: [(97 31 37 19) 19]
Test Case: 240 | Input/Output: [(57 62 15 58) 15]
Test Case: 241 | Input/Output: [(4 53 87 4) 4]
Test Case: 242 | Input/Output: [(19 59 10 38) 10]
Test Case: 243 | Input/Output: [(8 41 21 31) 8]
Test Case: 244 | Input/Output: [(50 91 12 28) 12]
Test Case: 245 | Input/Output: [(78 32 67 66) 32]
Test Case: 246 | Input/Output: [(50 28 98 96) 28]
Test Case: 247 | Input/Output: [(99 43 80 64) 43]
Test Case: 248 | Input/Output: [(76 79 28 34) 28]
Test Case: 249 | Input/Output: [(6 49 23 23) 6]
Test Case: 250 | Input/Output: [(9 80 89 84) 9]
Test Case: 251 | Input/Output: [(78 29 87 68) 29]
Test Case: 252 | Input/Output: [(88 51 44 56) 44]
Test Case: 253 | Input/Output: [(91 67 35 42) 35]
Test Case: 254 | Input/Output: [(94 93 62 58) 58]
Test Case: 255 | Input/Output: [(28 78 6 100) 6]
Test Case: 256 | Input/Output: [(15 66 57 68) 15]
Test Case: 257 | Input/Output: [(83 7 20 49) 7]
Test Case: 258 | Input/Output: [(72 68 65 88) 65]
Test Case: 259 | Input/Output: [(38 54 41 36) 36]
Test Case: 260 | Input/Output: [(5 81 90 42) 5]
Test Case: 261 | Input/Output: [(95 77 45 86) 45]
Test Case: 262 | Input/Output: [(26 85 12 8) 8]
Test Case: 263 | Input/Output: [(11 91 12 41) 11]
Test Case: 264 | Input/Output: [(4 67 88 90) 4]
Test Case: 265 | Input/Output: [(92 14 53 48) 14]
Test Case: 266 | Input/Output: [(47 93 66 86) 47]
Test Case: 267 | Input/Output: [(33 77 78 14) 14]
Test Case: 268 | Input/Output: [(65 44 85 53) 44]
Test Case: 269 | Input/Output: [(70 40 11 7) 7]
Test Case: 270 | Input/Output: [(46 100 58 53) 46]
Test Case: 271 | Input/Output: [(4 91 75 99) 4]
Test Case: 272 | Input/Output: [(37 99 37 43) 37]
Test Case: 273 | Input/Output: [(41 62 66 72) 41]
Test Case: 274 | Input/Output: [(65 16 18 11) 11]
Test Case: 275 | Input/Output: [(39 27 24 23) 23]
Test Case: 276 | Input/Output: [(52 99 59 3) 3]
Test Case: 277 | Input/Output: [(29 49 12 51) 12]
Test Case: 278 | Input/Output: [(59 17 67 47) 17]
Test Case: 279 | Input/Output: [(56 40 56 70) 40]
Test Case: 280 | Input/Output: [(71 84 13 99) 13]
Test Case: 281 | Input/Output: [(45 55 20 10) 10]
Test Case: 282 | Input/Output: [(68 48 43 6) 6]
Test Case: 283 | Input/Output: [(56 58 57 85) 56]
Test Case: 284 | Input/Output: [(41 0 12 97) 0]
Test Case: 285 | Input/Output: [(25 97 80 16) 16]
Test Case: 286 | Input/Output: [(68 26 0 98) 0]
Test Case: 287 | Input/Output: [(19 95 80 13) 13]
Test Case: 288 | Input/Output: [(26 14 62 48) 14]
Test Case: 289 | Input/Output: [(11 2 61 89) 2]
Test Case: 290 | Input/Output: [(30 90 57 46) 30]
Test Case: 291 | Input/Output: [(22 12 45 21) 12]
Test Case: 292 | Input/Output: [(78 69 46 20) 20]
Test Case: 293 | Input/Output: [(71 49 72 39) 39]
Test Case: 294 | Input/Output: [(2 44 27 99) 2]
Test Case: 295 | Input/Output: [(45 63 95 53) 45]
Test Case: 296 | Input/Output: [(97 56 9 18) 9]
Test Case: 297 | Input/Output: [(77 73 48 7) 7]
Test Case: 298 | Input/Output: [(96 34 65 36) 34]
Test Case: 299 | Input/Output: [(97 96 99 69) 69]
Test Case: 300 | Input/Output: [(56 17 18 61) 17]
Test Case: 301 | Input/Output: [(88 40 33 63) 33]
Test Case: 302 | Input/Output: [(48 2 57 18) 2]
Test Case: 303 | Input/Output: [(67 67 8 80) 8]
Test Case: 304 | Input/Output: [(13 52 31 5) 5]
Test Case: 305 | Input/Output: [(79 10 21 50) 10]
Test Case: 306 | Input/Output: [(54 9 97 22) 9]
Test Case: 307 | Input/Output: [(12 36 47 36) 12]
Test Case: 308 | Input/Output: [(75 70 14 56) 14]
Test Case: 309 | Input/Output: [(54 93 91 87) 54]
Test Case: 310 | Input/Output: [(58 52 64 96) 52]
Test Case: 311 | Input/Output: [(35 96 5 85) 5]
Test Case: 312 | Input/Output: [(54 89 78 34) 34]
Test Case: 313 | Input/Output: [(90 73 64 23) 23]
Test Case: 314 | Input/Output: [(53 100 92 25) 25]
Test Case: 315 | Input/Output: [(33 32 75 44) 32]
Test Case: 316 | Input/Output: [(14 45 57 60) 14]
Test Case: 317 | Input/Output: [(65 55 17 84) 17]
Test Case: 318 | Input/Output: [(28 20 2 92) 2]
Test Case: 319 | Input/Output: [(94 57 72 92) 57]
Test Case: 320 | Input/Output: [(74 26 57 81) 26]
Test Case: 321 | Input/Output: [(36 17 65 98) 17]
Test Case: 322 | Input/Output: [(67 59 16 11) 11]
Test Case: 323 | Input/Output: [(85 47 28 9) 9]
Test Case: 324 | Input/Output: [(9 51 35 82) 9]
Test Case: 325 | Input/Output: [(21 36 56 42) 21]
Test Case: 326 | Input/Output: [(37 74 49 45) 37]
Test Case: 327 | Input/Output: [(100 66 82 33) 33]
Test Case: 328 | Input/Output: [(60 50 81 59) 50]
Test Case: 329 | Input/Output: [(39 3 65 89) 3]
Test Case: 330 | Input/Output: [(44 61 95 74) 44]
Test Case: 331 | Input/Output: [(56 100 35 19) 19]
Test Case: 332 | Input/Output: [(87 84 60 33) 33]
Test Case: 333 | Input/Output: [(35 90 63 83) 35]
Test Case: 334 | Input/Output: [(52 17 55 18) 17]
Test Case: 335 | Input/Output: [(95 71 74 74) 71]
Test Case: 336 | Input/Output: [(89 65 19 27) 19]
Test Case: 337 | Input/Output: [(6 52 64 94) 6]
Test Case: 338 | Input/Output: [(98 56 98 52) 52]
Test Case: 339 | Input/Output: [(60 6 89 67) 6]
Test Case: 340 | Input/Output: [(30 9 69 93) 9]
Test Case: 341 | Input/Output: [(63 28 48 17) 17]
Test Case: 342 | Input/Output: [(64 71 63 12) 12]
Test Case: 343 | Input/Output: [(8 0 2 33) 0]
Test Case: 344 | Input/Output: [(19 79 89 42) 19]
Test Case: 345 | Input/Output: [(71 84 57 38) 38]
Test Case: 346 | Input/Output: [(89 27 23 17) 17]
Test Case: 347 | Input/Output: [(96 91 83 17) 17]
Test Case: 348 | Input/Output: [(14 8 73 54) 8]
Test Case: 349 | Input/Output: [(95 86 70 6) 6]
Test Case: 350 | Input/Output: [(80 58 31 48) 31]
Test Case: 351 | Input/Output: [(64 55 28 21) 21]
Test Case: 352 | Input/Output: [(18 49 12 12) 12]
Test Case: 353 | Input/Output: [(51 15 40 66) 15]
Test Case: 354 | Input/Output: [(9 93 84 49) 9]
Test Case: 355 | Input/Output: [(72 71 65 28) 28]
Test Case: 356 | Input/Output: [(13 33 25 0) 0]
Test Case: 357 | Input/Output: [(16 20 93 50) 16]
Test Case: 358 | Input/Output: [(81 90 54 30) 30]
Test Case: 359 | Input/Output: [(25 65 44 84) 25]
Test Case: 360 | Input/Output: [(17 59 60 27) 17]
Test Case: 361 | Input/Output: [(55 76 95 95) 55]
Test Case: 362 | Input/Output: [(4 46 13 84) 4]
Test Case: 363 | Input/Output: [(11 41 45 72) 11]
Test Case: 364 | Input/Output: [(12 55 0 64) 0]
Test Case: 365 | Input/Output: [(35 31 86 76) 31]
Test Case: 366 | Input/Output: [(15 9 63 45) 9]
Test Case: 367 | Input/Output: [(73 72 16 59) 16]
Test Case: 368 | Input/Output: [(11 36 12 27) 11]
Test Case: 369 | Input/Output: [(41 13 17 36) 13]
Test Case: 370 | Input/Output: [(56 58 51 94) 51]
Test Case: 371 | Input/Output: [(9 73 97 39) 9]
Test Case: 372 | Input/Output: [(22 51 38 41) 22]
Test Case: 373 | Input/Output: [(90 16 63 73) 16]
Test Case: 374 | Input/Output: [(2 6 96 19) 2]
Test Case: 375 | Input/Output: [(66 65 67 10) 10]
Test Case: 376 | Input/Output: [(90 39 92 27) 27]
Test Case: 377 | Input/Output: [(3 63 34 96) 3]
Test Case: 378 | Input/Output: [(70 66 93 51) 51]
Test Case: 379 | Input/Output: [(88 39 47 21) 21]
Test Case: 380 | Input/Output: [(40 90 35 24) 24]
Test Case: 381 | Input/Output: [(21 89 79 97) 21]
Test Case: 382 | Input/Output: [(34 78 52 1) 1]
Test Case: 383 | Input/Output: [(19 56 49 66) 19]
Test Case: 384 | Input/Output: [(70 36 37 53) 36]
Test Case: 385 | Input/Output: [(28 7 33 76) 7]
Test Case: 386 | Input/Output: [(53 73 17 23) 17]
Test Case: 387 | Input/Output: [(58 69 86 58) 58]
Test Case: 388 | Input/Output: [(29 98 38 50) 29]
Test Case: 389 | Input/Output: [(10 87 76 33) 10]
Test Case: 390 | Input/Output: [(5 90 40 92) 5]
Test Case: 391 | Input/Output: [(45 6 13 28) 6]
Test Case: 392 | Input/Output: [(55 72 68 50) 50]
Test Case: 393 | Input/Output: [(42 93 97 74) 42]
Test Case: 394 | Input/Output: [(0 16 76 52) 0]
Test Case: 395 | Input/Output: [(12 32 16 79) 12]
Test Case: 396 | Input/Output: [(43 1 25 54) 1]
Test Case: 397 | Input/Output: [(66 99 18 60) 18]
Test Case: 398 | Input/Output: [(28 71 17 59) 17]
Test Case: 399 | Input/Output: [(85 76 78 12) 12]
Test Case: 400 | Input/Output: [(11 -78 33 83) -78]
Test Case: 401 | Input/Output: [(9 -38 -26 -12) -38]
Test Case: 402 | Input/Output: [(65 96 -40 -88) -88]
Test Case: 403 | Input/Output: [(14 99 -52 -26) -52]
Test Case: 404 | Input/Output: [(-68 -21 29 64) -68]
Test Case: 405 | Input/Output: [(-86 51 10 28) -86]
Test Case: 406 | Input/Output: [(-89 -43 -69 48) -89]
Test Case: 407 | Input/Output: [(-7 -35 22 31) -35]
Test Case: 408 | Input/Output: [(-92 41 -16 -69) -92]
Test Case: 409 | Input/Output: [(-71 -48 -1 -47) -71]
Test Case: 410 | Input/Output: [(-19 -89 50 -10) -89]
Test Case: 411 | Input/Output: [(-45 -5 28 83) -45]
Test Case: 412 | Input/Output: [(-2 61 69 52) -2]
Test Case: 413 | Input/Output: [(-61 24 60 2) -61]
Test Case: 414 | Input/Output: [(-87 21 75 -32) -87]
Test Case: 415 | Input/Output: [(-42 -82 -35 50) -82]
Test Case: 416 | Input/Output: [(80 100 -30 -43) -43]
Test Case: 417 | Input/Output: [(-56 92 3 -63) -63]
Test Case: 418 | Input/Output: [(89 -83 47 -13) -83]
Test Case: 419 | Input/Output: [(-45 53 43 42) -45]
Test Case: 420 | Input/Output: [(31 -91 -97 -99) -99]
Test Case: 421 | Input/Output: [(-94 -14 92 80) -94]
Test Case: 422 | Input/Output: [(-45 52 -94 76) -94]
Test Case: 423 | Input/Output: [(0 -63 71 33) -63]
Test Case: 424 | Input/Output: [(17 -25 52 -68) -68]
Test Case: 425 | Input/Output: [(100 -75 74 40) -75]
Test Case: 426 | Input/Output: [(-12 70 -29 -29) -29]
Test Case: 427 | Input/Output: [(75 -49 31 -65) -65]
Test Case: 428 | Input/Output: [(76 -20 95 14) -20]
Test Case: 429 | Input/Output: [(42 51 -61 45) -61]
Test Case: 430 | Input/Output: [(-38 67 31 -44) -44]
Test Case: 431 | Input/Output: [(93 88 -91 -68) -91]
Test Case: 432 | Input/Output: [(-45 -53 -63 -23) -63]
Test Case: 433 | Input/Output: [(-68 -15 48 -25) -68]
Test Case: 434 | Input/Output: [(-1 -10 37 -45) -45]
Test Case: 435 | Input/Output: [(67 34 25 92) 25]
Test Case: 436 | Input/Output: [(-72 -43 -21 -6) -72]
Test Case: 437 | Input/Output: [(65 49 68 -1) -1]
Test Case: 438 | Input/Output: [(24 31 -20 21) -20]
Test Case: 439 | Input/Output: [(36 -8 -40 33) -40]
Test Case: 440 | Input/Output: [(-50 -11 83 -65) -65]
Test Case: 441 | Input/Output: [(-43 -38 21 -6) -43]
Test Case: 442 | Input/Output: [(-79 19 -40 81) -79]
Test Case: 443 | Input/Output: [(70 53 53 -81) -81]
Test Case: 444 | Input/Output: [(45 -49 89 52) -49]
Test Case: 445 | Input/Output: [(100 0 -97 4) -97]
Test Case: 446 | Input/Output: [(3 -49 -35 30) -49]
Test Case: 447 | Input/Output: [(1 -27 45 74) -27]
Test Case: 448 | Input/Output: [(73 -75 -85 -83) -85]
Test Case: 449 | Input/Output: [(-11 -92 -42 -67) -92]
Test Case: 450 | Input/Output: [(67 -39 -3 65) -39]
Test Case: 451 | Input/Output: [(-38 -92 -7 -95) -95]
Test Case: 452 | Input/Output: [(-74 38 63 80) -74]
Test Case: 453 | Input/Output: [(63 -39 45 16) -39]
Test Case: 454 | Input/Output: [(5 23 40 84) 5]
Test Case: 455 | Input/Output: [(64 -12 -43 -12) -43]
Test Case: 456 | Input/Output: [(38 -68 -90 -40) -90]
Test Case: 457 | Input/Output: [(88 -21 -80 -15) -80]
Test Case: 458 | Input/Output: [(-87 52 -15 -94) -94]
Test Case: 459 | Input/Output: [(73 -48 -88 78) -88]
Test Case: 460 | Input/Output: [(-94 -77 -49 93) -94]
Test Case: 461 | Input/Output: [(50 -6 91 70) -6]
Test Case: 462 | Input/Output: [(-99 -50 -99 49) -99]
Test Case: 463 | Input/Output: [(-21 2 -95 52) -95]
Test Case: 464 | Input/Output: [(84 -54 -98 -85) -98]
Test Case: 465 | Input/Output: [(74 -37 74 75) -37]
Test Case: 466 | Input/Output: [(87 14 25 -9) -9]
Test Case: 467 | Input/Output: [(-76 -6 35 -56) -76]
Test Case: 468 | Input/Output: [(-47 64 27 30) -47]
Test Case: 469 | Input/Output: [(70 -14 -11 45) -14]
Test Case: 470 | Input/Output: [(-54 88 -27 96) -54]
Test Case: 471 | Input/Output: [(92 -33 -65 -39) -65]
Test Case: 472 | Input/Output: [(20 90 33 76) 20]
Test Case: 473 | Input/Output: [(-19 -52 92 71) -52]
Test Case: 474 | Input/Output: [(-91 -63 -89 -48) -91]
Test Case: 475 | Input/Output: [(2 89 61 -66) -66]
Test Case: 476 | Input/Output: [(-16 51 -74 59) -74]
Test Case: 477 | Input/Output: [(11 95 92 9) 9]
Test Case: 478 | Input/Output: [(51 -48 -57 -25) -57]
Test Case: 479 | Input/Output: [(74 65 -77 65) -77]
Test Case: 480 | Input/Output: [(-78 89 -87 52) -87]
Test Case: 481 | Input/Output: [(-95 25 -80 100) -95]
Test Case: 482 | Input/Output: [(-65 -93 51 75) -93]
Test Case: 483 | Input/Output: [(95 12 -42 75) -42]
Test Case: 484 | Input/Output: [(-28 -23 45 26) -28]
Test Case: 485 | Input/Output: [(47 -19 -37 -10) -37]
Test Case: 486 | Input/Output: [(43 97 50 5) 5]
Test Case: 487 | Input/Output: [(-29 100 -41 69) -41]
Test Case: 488 | Input/Output: [(85 -3 -2 20) -3]
Test Case: 489 | Input/Output: [(3 -76 -63 89) -76]
Test Case: 490 | Input/Output: [(42 -100 10 -58) -100]
Test Case: 491 | Input/Output: [(-1 -87 -19 93) -87]
Test Case: 492 | Input/Output: [(-24 41 -71 86) -71]
Test Case: 493 | Input/Output: [(-33 -70 28 34) -70]
Test Case: 494 | Input/Output: [(94 -3 85 -76) -76]
Test Case: 495 | Input/Output: [(-69 -3 13 -4) -69]
Test Case: 496 | Input/Output: [(82 -58 -55 13) -58]
Test Case: 497 | Input/Output: [(-56 36 72 -53) -56]
Test Case: 498 | Input/Output: [(79 -64 51 53) -64]
Test Case: 499 | Input/Output: [(-14 29 -97 -87) -97]
Test Case: 500 | Input/Output: [(-12 40 27 13) -12]
Test Case: 501 | Input/Output: [(-61 -40 15 -48) -61]
Test Case: 502 | Input/Output: [(-67 80 87 -89) -89]
Test Case: 503 | Input/Output: [(-63 -67 -99 -51) -99]
Test Case: 504 | Input/Output: [(-28 -73 -66 1) -73]
Test Case: 505 | Input/Output: [(24 -71 -5 98) -71]
Test Case: 506 | Input/Output: [(61 -68 15 91) -68]
Test Case: 507 | Input/Output: [(-99 16 89 -57) -99]
Test Case: 508 | Input/Output: [(-52 8 22 71) -52]
Test Case: 509 | Input/Output: [(87 73 89 56) 56]
Test Case: 510 | Input/Output: [(88 58 -86 71) -86]
Test Case: 511 | Input/Output: [(-51 4 -71 -8) -71]
Test Case: 512 | Input/Output: [(30 -53 16 54) -53]
Test Case: 513 | Input/Output: [(-36 -44 12 35) -44]
Test Case: 514 | Input/Output: [(46 -73 64 39) -73]
Test Case: 515 | Input/Output: [(-90 46 22 -98) -98]
Test Case: 516 | Input/Output: [(-70 -30 85 -3) -70]
Test Case: 517 | Input/Output: [(-23 41 12 -75) -75]
Test Case: 518 | Input/Output: [(-94 46 -15 3) -94]
Test Case: 519 | Input/Output: [(19 -2 71 76) -2]
Test Case: 520 | Input/Output: [(75 96 12 45) 12]
Test Case: 521 | Input/Output: [(-54 -87 82 35) -87]
Test Case: 522 | Input/Output: [(-58 -13 76 100) -58]
Test Case: 523 | Input/Output: [(28 -55 -74 44) -74]
Test Case: 524 | Input/Output: [(29 65 -10 15) -10]
Test Case: 525 | Input/Output: [(-73 -30 -32 72) -73]
Test Case: 526 | Input/Output: [(69 -7 -67 73) -67]
Test Case: 527 | Input/Output: [(20 -72 6 96) -72]
Test Case: 528 | Input/Output: [(21 32 -93 -73) -93]
Test Case: 529 | Input/Output: [(70 -31 -98 -5) -98]
Test Case: 530 | Input/Output: [(54 41 -13 -43) -43]
Test Case: 531 | Input/Output: [(97 84 -48 -55) -55]
Test Case: 532 | Input/Output: [(-1 -67 -37 -19) -67]
Test Case: 533 | Input/Output: [(85 3 -1 -38) -38]
Test Case: 534 | Input/Output: [(-21 -13 56 13) -21]
Test Case: 535 | Input/Output: [(93 -81 3 -90) -90]
Test Case: 536 | Input/Output: [(97 39 84 -5) -5]
Test Case: 537 | Input/Output: [(-31 -43 -70 72) -70]
Test Case: 538 | Input/Output: [(-14 -90 67 17) -90]
Test Case: 539 | Input/Output: [(-43 -21 60 71) -43]
Test Case: 540 | Input/Output: [(-75 -44 -32 58) -75]
Test Case: 541 | Input/Output: [(-98 46 81 -25) -98]
Test Case: 542 | Input/Output: [(-44 -82 87 39) -82]
Test Case: 543 | Input/Output: [(-65 73 -34 24) -65]
Test Case: 544 | Input/Output: [(85 -13 -63 2) -63]
Test Case: 545 | Input/Output: [(-96 -61 -37 56) -96]
Test Case: 546 | Input/Output: [(-73 19 -74 -49) -74]
Test Case: 547 | Input/Output: [(19 33 29 25) 19]
Test Case: 548 | Input/Output: [(20 81 -25 -80) -80]
Test Case: 549 | Input/Output: [(-32 -28 -19 -81) -81]
Test Case: 550 | Input/Output: [(93 66 -66 91) -66]
Test Case: 551 | Input/Output: [(68 59 -77 -24) -77]
Test Case: 552 | Input/Output: [(-38 19 97 -93) -93]
Test Case: 553 | Input/Output: [(18 -45 91 85) -45]
Test Case: 554 | Input/Output: [(51 67 -5 67) -5]
Test Case: 555 | Input/Output: [(2 -83 -80 -63) -83]
Test Case: 556 | Input/Output: [(64 47 7 -86) -86]
Test Case: 557 | Input/Output: [(-82 11 -61 31) -82]
Test Case: 558 | Input/Output: [(-65 3 13 32) -65]
Test Case: 559 | Input/Output: [(-22 -3 -84 15) -84]
Test Case: 560 | Input/Output: [(-63 46 -16 59) -63]
Test Case: 561 | Input/Output: [(-6 -51 83 -90) -90]
Test Case: 562 | Input/Output: [(-75 -38 -41 53) -75]
Test Case: 563 | Input/Output: [(-89 60 -64 -72) -89]
Test Case: 564 | Input/Output: [(76 -70 69 -38) -70]
Test Case: 565 | Input/Output: [(25 14 79 55) 14]
Test Case: 566 | Input/Output: [(83 36 52 49) 36]
Test Case: 567 | Input/Output: [(80 -35 62 82) -35]
Test Case: 568 | Input/Output: [(92 36 88 53) 36]
Test Case: 569 | Input/Output: [(-4 49 -89 37) -89]
Test Case: 570 | Input/Output: [(-39 -15 -69 -29) -69]
Test Case: 571 | Input/Output: [(67 88 -49 16) -49]
Test Case: 572 | Input/Output: [(18 13 -92 0) -92]
Test Case: 573 | Input/Output: [(28 83 79 10) 10]
Test Case: 574 | Input/Output: [(-15 39 72 5) -15]
Test Case: 575 | Input/Output: [(84 -56 78 -100) -100]
Test Case: 576 | Input/Output: [(48 12 -100 84) -100]
Test Case: 577 | Input/Output: [(-41 99 58 1) -41]
Test Case: 578 | Input/Output: [(-2 -46 90 5) -46]
Test Case: 579 | Input/Output: [(-5 42 -10 2) -10]
Test Case: 580 | Input/Output: [(-80 14 96 -56) -80]
Test Case: 581 | Input/Output: [(-38 -47 -40 1) -47]
Test Case: 582 | Input/Output: [(72 -30 -94 -80) -94]
Test Case: 583 | Input/Output: [(93 -96 -28 -2) -96]
Test Case: 584 | Input/Output: [(85 -14 23 -41) -41]
Test Case: 585 | Input/Output: [(40 90 38 43) 38]
Test Case: 586 | Input/Output: [(56 -56 -12 -32) -56]
Test Case: 587 | Input/Output: [(-76 -74 58 -48) -76]
Test Case: 588 | Input/Output: [(-22 35 -45 -29) -45]
Test Case: 589 | Input/Output: [(-26 21 -88 -21) -88]
Test Case: 590 | Input/Output: [(54 23 13 80) 13]
Test Case: 591 | Input/Output: [(1 55 4 -41) -41]
Test Case: 592 | Input/Output: [(6 3 -62 96) -62]
Test Case: 593 | Input/Output: [(-95 78 -39 -95) -95]
Test Case: 594 | Input/Output: [(99 44 55 -84) -84]
Test Case: 595 | Input/Output: [(25 89 47 2) 2]
Test Case: 596 | Input/Output: [(71 9 16 -57) -57]
Test Case: 597 | Input/Output: [(51 28 8 -28) -28]
Test Case: 598 | Input/Output: [(-97 10 -69 25) -97]
Test Case: 599 | Input/Output: [(-73 91 -90 -86) -90]
Test Case: 600 | Input/Output: [(80 66 -6 -17) -17]
Test Case: 601 | Input/Output: [(44 88 -1 61) -1]
Test Case: 602 | Input/Output: [(97 35 44 -44) -44]
Test Case: 603 | Input/Output: [(86 -14 69 -55) -55]
Test Case: 604 | Input/Output: [(-48 -65 -3 21) -65]
Test Case: 605 | Input/Output: [(-53 -25 -29 86) -53]
Test Case: 606 | Input/Output: [(12 -80 -90 8) -90]
Test Case: 607 | Input/Output: [(69 -4 36 -32) -32]
Test Case: 608 | Input/Output: [(-66 62 19 -46) -66]
Test Case: 609 | Input/Output: [(-21 -10 -48 26) -48]
Test Case: 610 | Input/Output: [(30 -27 -100 -54) -100]
Test Case: 611 | Input/Output: [(-84 -94 -15 -13) -94]
Test Case: 612 | Input/Output: [(-98 -78 40 -100) -100]
Test Case: 613 | Input/Output: [(90 -46 -29 95) -46]
Test Case: 614 | Input/Output: [(-71 62 41 7) -71]
Test Case: 615 | Input/Output: [(-43 77 -50 3) -50]
Test Case: 616 | Input/Output: [(-24 44 8 -78) -78]
Test Case: 617 | Input/Output: [(-78 -88 11 63) -88]
Test Case: 618 | Input/Output: [(-29 40 41 40) -29]
Test Case: 619 | Input/Output: [(-32 -6 87 55) -32]
Test Case: 620 | Input/Output: [(-27 78 34 -53) -53]
Test Case: 621 | Input/Output: [(-42 -91 68 59) -91]
Test Case: 622 | Input/Output: [(70 25 51 -77) -77]
Test Case: 623 | Input/Output: [(-54 -55 -50 59) -55]
Test Case: 624 | Input/Output: [(-100 -89 -92 -25) -100]
Test Case: 625 | Input/Output: [(7 88 52 17) 7]
Test Case: 626 | Input/Output: [(11 -13 -43 -21) -43]
Test Case: 627 | Input/Output: [(-48 -4 -99 81) -99]
Test Case: 628 | Input/Output: [(-48 50 57 -47) -48]
Test Case: 629 | Input/Output: [(-83 69 -18 -55) -83]
Test Case: 630 | Input/Output: [(48 -98 -5 51) -98]
Test Case: 631 | Input/Output: [(-10 -27 -38 -68) -68]
Test Case: 632 | Input/Output: [(52 14 -25 -21) -25]
Test Case: 633 | Input/Output: [(41 10 93 -78) -78]
Test Case: 634 | Input/Output: [(59 -4 32 -85) -85]
Test Case: 635 | Input/Output: [(-95 87 92 -66) -95]
Test Case: 636 | Input/Output: [(-33 25 -86 -62) -86]
Test Case: 637 | Input/Output: [(70 -40 -8 -51) -51]
Test Case: 638 | Input/Output: [(-88 -63 -39 -61) -88]
Test Case: 639 | Input/Output: [(-28 -95 59 -12) -95]
Test Case: 640 | Input/Output: [(53 -60 -31 34) -60]
Test Case: 641 | Input/Output: [(4 86 -35 31) -35]
Test Case: 642 | Input/Output: [(-46 88 -59 -62) -62]
Test Case: 643 | Input/Output: [(-85 -98 -10 -12) -98]
Test Case: 644 | Input/Output: [(-54 71 -39 88) -54]
Test Case: 645 | Input/Output: [(-43 15 -98 40) -98]
Test Case: 646 | Input/Output: [(-68 -33 -84 93) -84]
Test Case: 647 | Input/Output: [(-52 -52 15 82) -52]
Test Case: 648 | Input/Output: [(-100 1 11 -55) -100]
Test Case: 649 | Input/Output: [(-9 5 34 83) -9]
Test Case: 650 | Input/Output: [(86 -77 36 18) -77]
Test Case: 651 | Input/Output: [(93 -54 -53 100) -54]
Test Case: 652 | Input/Output: [(-83 10 6 36) -83]
Test Case: 653 | Input/Output: [(52 -57 -93 1) -93]
Test Case: 654 | Input/Output: [(-23 21 -50 49) -50]
Test Case: 655 | Input/Output: [(52 61 -22 -73) -73]
Test Case: 656 | Input/Output: [(-25 53 37 68) -25]
Test Case: 657 | Input/Output: [(29 -25 11 -23) -25]
Test Case: 658 | Input/Output: [(-70 -17 15 74) -70]
Test Case: 659 | Input/Output: [(40 -9 31 31) -9]
Test Case: 660 | Input/Output: [(70 99 57 -63) -63]
Test Case: 661 | Input/Output: [(-74 -41 33 62) -74]
Test Case: 662 | Input/Output: [(31 -71 2 2) -71]
Test Case: 663 | Input/Output: [(31 -3 47 83) -3]
Test Case: 664 | Input/Output: [(12 -18 -12 -22) -22]
Test Case: 665 | Input/Output: [(-27 -4 -42 -13) -42]
Test Case: 666 | Input/Output: [(-89 -65 70 84) -89]
Test Case: 667 | Input/Output: [(-5 83 -95 42) -95]
Test Case: 668 | Input/Output: [(-79 -75 11 97) -79]
Test Case: 669 | Input/Output: [(50 91 15 76) 15]
Test Case: 670 | Input/Output: [(54 -84 11 100) -84]
Test Case: 671 | Input/Output: [(79 72 -21 -1) -21]
Test Case: 672 | Input/Output: [(-68 25 3 33) -68]
Test Case: 673 | Input/Output: [(72 62 -31 80) -31]
Test Case: 674 | Input/Output: [(-97 -43 -50 65) -97]
Test Case: 675 | Input/Output: [(20 62 -21 42) -21]
Test Case: 676 | Input/Output: [(85 -27 -72 -20) -72]
Test Case: 677 | Input/Output: [(96 74 11 -77) -77]
Test Case: 678 | Input/Output: [(-46 23 -3 85) -46]
Test Case: 679 | Input/Output: [(81 -15 96 -98) -98]
Test Case: 680 | Input/Output: [(-31 -47 87 -57) -57]
Test Case: 681 | Input/Output: [(-83 9 -99 -51) -99]
Test Case: 682 | Input/Output: [(86 83 -80 97) -80]
Test Case: 683 | Input/Output: [(-45 -21 59 -44) -45]
Test Case: 684 | Input/Output: [(16 85 -87 -97) -97]
Test Case: 685 | Input/Output: [(13 3 4 -41) -41]
Test Case: 686 | Input/Output: [(96 -81 30 97) -81]
Test Case: 687 | Input/Output: [(-12 6 -21 99) -21]
Test Case: 688 | Input/Output: [(-21 -14 85 50) -21]
Test Case: 689 | Input/Output: [(-54 21 76 -47) -54]
Test Case: 690 | Input/Output: [(92 -19 59 -57) -57]
Test Case: 691 | Input/Output: [(-34 -41 -72 23) -72]
Test Case: 692 | Input/Output: [(-28 -45 -10 -5) -45]
Test Case: 693 | Input/Output: [(49 -17 76 3) -17]
Test Case: 694 | Input/Output: [(-36 -29 -34 -48) -48]
Test Case: 695 | Input/Output: [(34 82 -88 -90) -90]
Test Case: 696 | Input/Output: [(4 -99 -2 -39) -99]
Test Case: 697 | Input/Output: [(77 -24 82 17) -24]
Test Case: 698 | Input/Output: [(80 -84 6 23) -84]
Test Case: 699 | Input/Output: [(-75 70 98 -43) -75]
Test Case: 700 | Input/Output: [(36 -91 -3 -34) -91]
Test Case: 701 | Input/Output: [(26 80 35 76) 26]
Test Case: 702 | Input/Output: [(-17 -5 57 69) -17]
Test Case: 703 | Input/Output: [(-22 80 26 89) -22]
Test Case: 704 | Input/Output: [(59 -100 71 -39) -100]
Test Case: 705 | Input/Output: [(95 12 -67 -57) -67]
Test Case: 706 | Input/Output: [(-67 16 -45 10) -67]
Test Case: 707 | Input/Output: [(-14 -31 23 87) -31]
Test Case: 708 | Input/Output: [(-70 100 -82 30) -82]
Test Case: 709 | Input/Output: [(11 92 -36 -84) -84]
Test Case: 710 | Input/Output: [(-56 -60 42 -13) -60]
Test Case: 711 | Input/Output: [(-30 79 -75 -10) -75]
Test Case: 712 | Input/Output: [(80 -52 37 -82) -82]
Test Case: 713 | Input/Output: [(8 -5 64 -91) -91]
Test Case: 714 | Input/Output: [(53 43 71 -94) -94]
Test Case: 715 | Input/Output: [(-55 45 31 94) -55]
Test Case: 716 | Input/Output: [(55 70 33 58) 33]
Test Case: 717 | Input/Output: [(-79 -32 -34 -72) -79]
Test Case: 718 | Input/Output: [(-65 83 8 -76) -76]
Test Case: 719 | Input/Output: [(-88 56 83 43) -88]
Test Case: 720 | Input/Output: [(-69 59 -22 52) -69]
Test Case: 721 | Input/Output: [(-19 -95 -10 35) -95]
Test Case: 722 | Input/Output: [(-58 1 -22 0) -58]
Test Case: 723 | Input/Output: [(45 -27 15 -94) -94]
Test Case: 724 | Input/Output: [(-20 17 75 -55) -55]
Test Case: 725 | Input/Output: [(87 -76 -32 39) -76]
Test Case: 726 | Input/Output: [(-59 9 0 -59) -59]
Test Case: 727 | Input/Output: [(89 -4 92 -78) -78]
Test Case: 728 | Input/Output: [(42 62 9 -87) -87]
Test Case: 729 | Input/Output: [(-17 63 -52 41) -52]
Test Case: 730 | Input/Output: [(-5 90 -61 -3) -61]
Test Case: 731 | Input/Output: [(-75 86 -81 -58) -81]
Test Case: 732 | Input/Output: [(-22 86 64 58) -22]
Test Case: 733 | Input/Output: [(-4 -80 -74 92) -80]
Test Case: 734 | Input/Output: [(86 -50 53 -13) -50]
Test Case: 735 | Input/Output: [(38 -28 21 -74) -74]
Test Case: 736 | Input/Output: [(-63 87 -66 81) -66]
Test Case: 737 | Input/Output: [(21 -68 -23 -35) -68]
Test Case: 738 | Input/Output: [(-61 -37 -83 63) -83]
Test Case: 739 | Input/Output: [(29 66 23 93) 23]
Test Case: 740 | Input/Output: [(-69 17 27 75) -69]
Test Case: 741 | Input/Output: [(56 -53 -76 51) -76]
Test Case: 742 | Input/Output: [(-40 25 0 -88) -88]
Test Case: 743 | Input/Output: [(-31 71 -68 -89) -89]
Test Case: 744 | Input/Output: [(2 61 5 -10) -10]
Test Case: 745 | Input/Output: [(0 -87 47 66) -87]
Test Case: 746 | Input/Output: [(-99 95 -74 -97) -99]
Test Case: 747 | Input/Output: [(-81 76 69 -19) -81]
Test Case: 748 | Input/Output: [(39 59 -10 -34) -34]
Test Case: 749 | Input/Output: [(95 33 -50 -48) -50]
Test Case: 750 | Input/Output: [(28 0 -97 -96) -97]
Test Case: 751 | Input/Output: [(54 8 -28 -100) -100]
Test Case: 752 | Input/Output: [(-76 -83 50 -14) -83]
Test Case: 753 | Input/Output: [(97 65 64 28) 28]
Test Case: 754 | Input/Output: [(41 -47 -67 -66) -67]
Test Case: 755 | Input/Output: [(65 20 17 68) 17]
Test Case: 756 | Input/Output: [(-21 57 29 9) -21]
Test Case: 757 | Input/Output: [(-42 67 -98 -73) -98]
Test Case: 758 | Input/Output: [(30 87 -90 89) -90]
Test Case: 759 | Input/Output: [(-72 -37 -57 81) -72]
Test Case: 760 | Input/Output: [(-95 32 33 -49) -95]
Test Case: 761 | Input/Output: [(60 -52 15 51) -52]
Test Case: 762 | Input/Output: [(32 -15 16 50) -15]
Test Case: 763 | Input/Output: [(25 51 -59 -32) -59]
Test Case: 764 | Input/Output: [(-2 45 86 -3) -3]
Test Case: 765 | Input/Output: [(-13 57 67 -63) -63]
Test Case: 766 | Input/Output: [(-15 -4 -30 24) -30]
Test Case: 767 | Input/Output: [(-86 -84 4 -71) -86]
Test Case: 768 | Input/Output: [(54 -77 -60 -68) -77]
Test Case: 769 | Input/Output: [(98 21 97 -2) -2]
Test Case: 770 | Input/Output: [(-58 -100 -19 41) -100]
Test Case: 771 | Input/Output: [(-11 50 -73 -26) -73]
Test Case: 772 | Input/Output: [(90 -89 31 41) -89]
Test Case: 773 | Input/Output: [(-14 -47 65 -83) -83]
Test Case: 774 | Input/Output: [(-40 -58 -99 26) -99]
Test Case: 775 | Input/Output: [(83 -80 70 44) -80]
Test Case: 776 | Input/Output: [(78 -42 12 61) -42]
Test Case: 777 | Input/Output: [(23 54 87 -76) -76]
Test Case: 778 | Input/Output: [(47 -82 -46 75) -82]
Test Case: 779 | Input/Output: [(-42 21 -45 -69) -69]
Test Case: 780 | Input/Output: [(18 -70 17 71) -70]
Test Case: 781 | Input/Output: [(8 -85 62 -9) -85]
Test Case: 782 | Input/Output: [(9 -63 -72 87) -72]
Test Case: 783 | Input/Output: [(-19 96 -17 -56) -56]
Test Case: 784 | Input/Output: [(49 53 -2 -92) -92]
Test Case: 785 | Input/Output: [(38 -36 39 61) -36]
Test Case: 786 | Input/Output: [(-83 -37 -22 -11) -83]
Test Case: 787 | Input/Output: [(-18 -18 -38 85) -38]
Test Case: 788 | Input/Output: [(-12 -69 23 83) -69]
Test Case: 789 | Input/Output: [(44 -17 -23 -29) -29]
Test Case: 790 | Input/Output: [(46 -91 -37 29) -91]
Test Case: 791 | Input/Output: [(-80 22 -3 -26) -80]
Test Case: 792 | Input/Output: [(45 57 -67 -36) -67]
Test Case: 793 | Input/Output: [(-82 -100 98 25) -100]
Test Case: 794 | Input/Output: [(-27 8 -21 -80) -80]
Test Case: 795 | Input/Output: [(-50 93 34 -21) -50]
Test Case: 796 | Input/Output: [(16 -13 -38 -5) -38]
Test Case: 797 | Input/Output: [(-26 -67 -74 86) -74]
Test Case: 798 | Input/Output: [(-12 -91 -59 96) -91]
Test Case: 799 | Input/Output: [(6 83 -34 99) -34]
Test Case: 800 | Input/Output: [(10 -48 40 -21) -48]
Test Case: 801 | Input/Output: [(67 83 -77 99) -77]
Test Case: 802 | Input/Output: [(71 16 7 -30) -30]
Test Case: 803 | Input/Output: [(-80 -6 38 -11) -80]
Test Case: 804 | Input/Output: [(-3 39 25 37) -3]
Test Case: 805 | Input/Output: [(1 -35 87 79) -35]
Test Case: 806 | Input/Output: [(-80 47 -22 -48) -80]
Test Case: 807 | Input/Output: [(-98 2 43 -56) -98]
Test Case: 808 | Input/Output: [(93 89 -6 56) -6]
Test Case: 809 | Input/Output: [(-40 -36 29 91) -40]
Test Case: 810 | Input/Output: [(59 48 78 -45) -45]
Test Case: 811 | Input/Output: [(-60 -66 89 -85) -85]
Test Case: 812 | Input/Output: [(30 -68 -98 15) -98]
Test Case: 813 | Input/Output: [(-29 52 28 91) -29]
Test Case: 814 | Input/Output: [(43 -34 51 45) -34]
Test Case: 815 | Input/Output: [(79 -21 48 -6) -21]
Test Case: 816 | Input/Output: [(11 99 9 45) 9]
Test Case: 817 | Input/Output: [(5 -69 90 36) -69]
Test Case: 818 | Input/Output: [(-46 -12 12 43) -46]
Test Case: 819 | Input/Output: [(6 -38 53 -35) -38]
Test Case: 820 | Input/Output: [(73 6 44 46) 6]
Test Case: 821 | Input/Output: [(52 46 -37 -100) -100]
Test Case: 822 | Input/Output: [(78 -4 35 100) -4]
Test Case: 823 | Input/Output: [(32 -88 78 65) -88]
Test Case: 824 | Input/Output: [(63 65 0 -91) -91]
Test Case: 825 | Input/Output: [(38 52 22 61) 22]
Test Case: 826 | Input/Output: [(69 -53 -20 57) -53]
Test Case: 827 | Input/Output: [(20 95 30 -20) -20]
Test Case: 828 | Input/Output: [(59 69 -47 18) -47]
Test Case: 829 | Input/Output: [(-67 42 42 -21) -67]
Test Case: 830 | Input/Output: [(-28 19 91 20) -28]
Test Case: 831 | Input/Output: [(53 -63 -72 97) -72]
Test Case: 832 | Input/Output: [(59 -43 100 37) -43]
Test Case: 833 | Input/Output: [(71 27 80 54) 27]
Test Case: 834 | Input/Output: [(-35 29 88 21) -35]
Test Case: 835 | Input/Output: [(-57 -84 38 92) -84]
Test Case: 836 | Input/Output: [(46 -5 -6 -26) -26]
Test Case: 837 | Input/Output: [(-3 86 91 -49) -49]
Test Case: 838 | Input/Output: [(-78 78 82 -64) -78]
Test Case: 839 | Input/Output: [(5 15 -82 81) -82]
Test Case: 840 | Input/Output: [(-70 -55 -62 -41) -70]
Test Case: 841 | Input/Output: [(22 -99 19 25) -99]
Test Case: 842 | Input/Output: [(-84 46 -48 -41) -84]
Test Case: 843 | Input/Output: [(55 -55 -73 40) -73]
Test Case: 844 | Input/Output: [(83 26 66 -57) -57]
Test Case: 845 | Input/Output: [(36 -83 21 -16) -83]
Test Case: 846 | Input/Output: [(-29 2 -62 43) -62]
Test Case: 847 | Input/Output: [(84 38 13 -14) -14]
Test Case: 848 | Input/Output: [(-87 82 -47 3) -87]
Test Case: 849 | Input/Output: [(-45 66 -16 -35) -45]
Test Case: 850 | Input/Output: [(53 24 20 -34) -34]
Test Case: 851 | Input/Output: [(12 -90 -23 -36) -90]
Test Case: 852 | Input/Output: [(22 25 -75 7) -75]
Test Case: 853 | Input/Output: [(46 24 -76 -1) -76]
Test Case: 854 | Input/Output: [(-40 -65 16 -69) -69]
Test Case: 855 | Input/Output: [(11 -96 91 -53) -96]
Test Case: 856 | Input/Output: [(-18 -1 -21 -33) -33]
Test Case: 857 | Input/Output: [(-12 38 61 -76) -76]
Test Case: 858 | Input/Output: [(-95 52 49 -40) -95]
Test Case: 859 | Input/Output: [(55 75 -65 52) -65]
Test Case: 860 | Input/Output: [(28 -18 51 38) -18]
Test Case: 861 | Input/Output: [(15 -8 -35 -29) -35]
Test Case: 862 | Input/Output: [(-59 63 42 40) -59]
Test Case: 863 | Input/Output: [(63 -53 9 -12) -53]
Test Case: 864 | Input/Output: [(92 20 -35 -99) -99]
Test Case: 865 | Input/Output: [(-94 81 68 77) -94]
Test Case: 866 | Input/Output: [(-98 -64 17 -64) -98]
Test Case: 867 | Input/Output: [(-34 -64 -41 7) -64]
Test Case: 868 | Input/Output: [(2 90 -72 -39) -72]
Test Case: 869 | Input/Output: [(59 4 13 -37) -37]
Test Case: 870 | Input/Output: [(-50 -74 63 100) -74]
Test Case: 871 | Input/Output: [(-12 -21 -80 14) -80]
Test Case: 872 | Input/Output: [(27 -14 -76 91) -76]
Test Case: 873 | Input/Output: [(12 31 -51 -54) -54]
Test Case: 874 | Input/Output: [(-87 47 61 -31) -87]
Test Case: 875 | Input/Output: [(-73 41 -27 49) -73]
Test Case: 876 | Input/Output: [(-28 -52 75 100) -52]
Test Case: 877 | Input/Output: [(-8 -89 61 60) -89]
Test Case: 878 | Input/Output: [(-96 -76 -63 -17) -96]
Test Case: 879 | Input/Output: [(-49 81 -9 -30) -49]
Test Case: 880 | Input/Output: [(28 -44 -81 94) -81]
Test Case: 881 | Input/Output: [(-17 -48 -36 87) -48]
Test Case: 882 | Input/Output: [(100 -73 35 88) -73]
Test Case: 883 | Input/Output: [(61 -97 -89 -91) -97]
Test Case: 884 | Input/Output: [(-12 26 38 -57) -57]
Test Case: 885 | Input/Output: [(23 -95 87 -34) -95]
Test Case: 886 | Input/Output: [(3 28 -88 34) -88]
Test Case: 887 | Input/Output: [(72 4 12 34) 4]
Test Case: 888 | Input/Output: [(-89 76 32 -90) -90]
Test Case: 889 | Input/Output: [(-60 -90 -22 99) -90]
Test Case: 890 | Input/Output: [(57 21 38 95) 21]
Test Case: 891 | Input/Output: [(47 -69 25 -73) -73]
Test Case: 892 | Input/Output: [(-55 -94 -94 -50) -94]
Test Case: 893 | Input/Output: [(-25 -88 -77 -4) -88]
Test Case: 894 | Input/Output: [(38 -26 -62 -15) -62]
Test Case: 895 | Input/Output: [(88 -64 70 -66) -66]
Test Case: 896 | Input/Output: [(-91 25 92 37) -91]
Test Case: 897 | Input/Output: [(-58 -94 87 -62) -94]
Test Case: 898 | Input/Output: [(58 21 -36 22) -36]
Test Case: 899 | Input/Output: [(79 -64 -14 89) -64]
Test Case: 900 | Input/Output: [(-8 47 91 68) -8]
Test Case: 901 | Input/Output: [(28 45 68 96) 28]
Test Case: 902 | Input/Output: [(-18 -7 -71 89) -71]
Test Case: 903 | Input/Output: [(48 -86 34 30) -86]
Test Case: 904 | Input/Output: [(47 80 -35 -54) -54]
Test Case: 905 | Input/Output: [(-38 -49 27 69) -49]
Test Case: 906 | Input/Output: [(60 -17 85 79) -17]
Test Case: 907 | Input/Output: [(-63 -50 -60 15) -63]
Test Case: 908 | Input/Output: [(-80 -20 -77 -96) -96]
Test Case: 909 | Input/Output: [(-43 -63 -28 40) -63]
Test Case: 910 | Input/Output: [(42 -87 37 25) -87]
Test Case: 911 | Input/Output: [(-39 40 -58 -85) -85]
Test Case: 912 | Input/Output: [(-68 44 57 -29) -68]
Test Case: 913 | Input/Output: [(-50 56 -92 -45) -92]
Test Case: 914 | Input/Output: [(81 10 -47 33) -47]
Test Case: 915 | Input/Output: [(-2 -24 -59 -5) -59]
Test Case: 916 | Input/Output: [(6 83 92 -60) -60]
Test Case: 917 | Input/Output: [(-69 44 -20 -33) -69]
Test Case: 918 | Input/Output: [(46 -31 59 -11) -31]
Test Case: 919 | Input/Output: [(74 -29 -7 46) -29]
Test Case: 920 | Input/Output: [(-93 50 29 88) -93]
Test Case: 921 | Input/Output: [(25 -18 -39 -28) -39]
Test Case: 922 | Input/Output: [(-97 -22 77 -25) -97]
Test Case: 923 | Input/Output: [(-27 93 30 -43) -43]
Test Case: 924 | Input/Output: [(-4 -30 100 -59) -59]
Test Case: 925 | Input/Output: [(-14 -68 83 -60) -68]
Test Case: 926 | Input/Output: [(-64 50 73 -54) -64]
Test Case: 927 | Input/Output: [(28 57 -65 -60) -65]
Test Case: 928 | Input/Output: [(-32 -89 99 -58) -89]
Test Case: 929 | Input/Output: [(-28 -35 -78 -63) -78]
Test Case: 930 | Input/Output: [(3 -66 62 -5) -66]
Test Case: 931 | Input/Output: [(75 -40 -13 14) -40]
Test Case: 932 | Input/Output: [(25 47 33 -65) -65]
Test Case: 933 | Input/Output: [(-90 -26 -93 87) -93]
Test Case: 934 | Input/Output: [(38 74 -40 40) -40]
Test Case: 935 | Input/Output: [(55 -61 -36 5) -61]
Test Case: 936 | Input/Output: [(-16 -96 50 -10) -96]
Test Case: 937 | Input/Output: [(-88 -48 9 -64) -88]
Test Case: 938 | Input/Output: [(38 54 67 68) 38]
Test Case: 939 | Input/Output: [(11 42 81 45) 11]
Test Case: 940 | Input/Output: [(-23 95 -47 65) -47]
Test Case: 941 | Input/Output: [(49 25 15 -25) -25]
Test Case: 942 | Input/Output: [(-97 64 -77 -6) -97]
Test Case: 943 | Input/Output: [(-22 31 -60 63) -60]
Test Case: 944 | Input/Output: [(-33 -2 86 28) -33]
Test Case: 945 | Input/Output: [(-59 35 25 47) -59]
Test Case: 946 | Input/Output: [(-1 -66 47 31) -66]
Test Case: 947 | Input/Output: [(-12 72 61 -66) -66]
Test Case: 948 | Input/Output: [(0 -57 30 22) -57]
Test Case: 949 | Input/Output: [(65 96 -23 13) -23]
Test Case: 950 | Input/Output: [(91 -10 48 12) -10]
Test Case: 951 | Input/Output: [(-57 -73 22 -99) -99]
Test Case: 952 | Input/Output: [(11 -98 -94 -96) -98]
Test Case: 953 | Input/Output: [(63 -3 4 75) -3]
Test Case: 954 | Input/Output: [(69 67 -29 80) -29]
Test Case: 955 | Input/Output: [(68 1 -70 -92) -92]
Test Case: 956 | Input/Output: [(46 24 66 -75) -75]
Test Case: 957 | Input/Output: [(-87 -100 -59 35) -100]
Test Case: 958 | Input/Output: [(-64 55 82 -8) -64]
Test Case: 959 | Input/Output: [(-82 -99 7 72) -99]
Test Case: 960 | Input/Output: [(67 4 32 55) 4]
Test Case: 961 | Input/Output: [(-97 100 42 -71) -97]
Test Case: 962 | Input/Output: [(-67 -50 -46 13) -67]
Test Case: 963 | Input/Output: [(15 -14 10 36) -14]
Test Case: 964 | Input/Output: [(37 58 -42 -41) -42]
Test Case: 965 | Input/Output: [(-27 8 -66 24) -66]
Test Case: 966 | Input/Output: [(-82 -33 26 -69) -82]
Test Case: 967 | Input/Output: [(-23 25 -50 66) -50]
Test Case: 968 | Input/Output: [(44 100 57 -68) -68]
Test Case: 969 | Input/Output: [(-75 43 0 35) -75]
Test Case: 970 | Input/Output: [(69 -68 42 78) -68]
Test Case: 971 | Input/Output: [(-9 56 44 -37) -37]
Test Case: 972 | Input/Output: [(-40 -7 51 51) -40]
Test Case: 973 | Input/Output: [(-38 9 -61 74) -61]
Test Case: 974 | Input/Output: [(-48 -69 88 7) -69]
Test Case: 975 | Input/Output: [(-70 30 98 -88) -88]
Test Case: 976 | Input/Output: [(15 -54 -4 99) -54]
Test Case: 977 | Input/Output: [(72 -11 76 41) -11]
Test Case: 978 | Input/Output: [(-28 24 21 -7) -28]
Test Case: 979 | Input/Output: [(64 43 -57 -61) -61]
Test Case: 980 | Input/Output: [(-68 -42 22 80) -68]
Test Case: 981 | Input/Output: [(5 60 69 64) 5]
Test Case: 982 | Input/Output: [(2 97 -34 -22) -34]
Test Case: 983 | Input/Output: [(-66 89 76 -42) -66]
Test Case: 984 | Input/Output: [(-55 32 -13 61) -55]
Test Case: 985 | Input/Output: [(-3 43 58 17) -3]
Test Case: 986 | Input/Output: [(-11 -39 -60 -65) -65]
Test Case: 987 | Input/Output: [(-84 -92 -2 78) -92]
Test Case: 988 | Input/Output: [(42 92 -81 -64) -81]
Test Case: 989 | Input/Output: [(-28 -96 32 -14) -96]
Test Case: 990 | Input/Output: [(-76 -25 -26 17) -76]
Test Case: 991 | Input/Output: [(-66 52 -34 -26) -66]
Test Case: 992 | Input/Output: [(-58 54 69 42) -58]
Test Case: 993 | Input/Output: [(89 -27 68 -41) -41]
Test Case: 994 | Input/Output: [(-65 29 61 -27) -65]
Test Case: 995 | Input/Output: [(12 26 -57 -36) -57]
Test Case: 996 | Input/Output: [(-14 -44 -86 2) -86]
Test Case: 997 | Input/Output: [(-84 18 -52 49) -84]
Test Case: 998 | Input/Output: [(45 15 46 -47) -47]
Test Case: 999 | Input/Output: [(-79 -68 75 69) -79]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x17e6b7e4 clojush.problems.software.smallest$fn__7460@17e6b7e4] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0xb842275 clojush.instructions.tag$tag_instruction_erc$fn__2160@b842275] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x11c25846 clojush.instructions.tag$tagged_instruction_erc$fn__2166@11c25846] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0xdd9de63 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@dd9de63]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x98712fa clojush.problems.software.smallest$smallest_initial_report@98712fa]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x3b8d2abe clojush.problems.software.smallest$smallest_report@3b8d2abe]
random-screen = false
random-seed = 74 -12 17 -113 108 -63 -36 -88 -39 -93 -35 83 -82 -96 -113 84
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-30 10 -30 -30] -30] [[-60 -7 -7 -7] -60] [[-61 -85 -85 -85] -85] [[75 -76 -76 -76] -76] [[95 -72 95 95] -72] [[-53 -63 -53 -53] -63] [[55 55 -64 55] -64] [[28 28 68 28] 28] [[-90 -88 -88 -88] -90] [[-65 -90 -65 -65] -90] [(70 70 70 70) 70] [(77 77 77 77) 77] [(-34 -34 -34 -34) -34] [(-54 -54 -54 -54) -54] [(7 7 7 7) 7] [(14 84 74 29) 14] [(96 81 21 80) 21] [(1 66 74 21) 1] [(25 2 8 98) 2] [(96 43 88 6) 6] [(43 32 72 21) 21] [(59 31 49 95) 31] [(85 90 28 21) 21] [(50 73 48 60) 48] [(59 30 3 46) 3] [(86 49 86 46) 46] [(65 53 36 71) 36] [(15 23 19 81) 15] [(45 60 71 97) 45] [(68 64 14 31) 14] [(44 89 27 97) 27] [(85 28 40 25) 25] [(61 7 30 23) 7] [(6 82 28 24) 6] [(43 80 76 28) 28] [(41 -51 -60 -11) -60] [(89 -71 -47 -22) -71] [(-88 -60 -76 94) -88] [(82 15 -31 30) -31] [(-1 46 6 5) -1] [(-79 -55 89 -96) -96] [(62 2 -6 -30) -30] [(24 -24 -85 62) -85] [(100 -8 -53 11) -53] [(84 39 38 70) 38] [(23 75 -20 -15) -20] [(-59 67 -38 22) -59] [(97 -7 -96 19) -96] [(0 -91 -54 26) -91] [(-6 74 14 84) -6] [(-100 45 -8 31) -100] [(-56 45 48 -36) -56] [(-51 -14 37 -59) -59] [(73 17 52 -9) -9] [(100 -7 68 -98) -98] [(86 -7 14 -7) -7] [(-60 -61 26 78) -61] [(-62 62 4 12) -62] [(50 -91 82 -67) -91] [(-46 -18 66 82) -46] [(-90 3 18 93) -90] [(-90 -22 44 -43) -90] [(35 31 36 -36) -36] [(58 -78 -33 -78) -78] [(86 -59 0 26) -59] [(-70 -43 91 -1) -70] [(-33 -64 39 -3) -64] [(25 -45 47 -70) -70] [(68 67 4 82) 4] [(-17 25 -83 41) -83] [(-94 29 100 -78) -94] [(-60 1 -3 63) -60] [(-21 -34 70 34) -34] [(57 -75 39 -64) -75] [(-11 22 41 -10) -11] [(-57 -14 22 -1) -57] [(-87 -42 -71 41) -87] [(58 -17 40 27) -17] [(-3 56 -66 -76) -76] [(-94 10 -5 52) -94] [(-75 -27 -22 74) -75] [(16 -28 -34 40) -34] [(-58 -58 -55 39) -58] [(-5 -50 -37 -96) -96] [(54 -47 81 64) -47] [(73 -61 -20 -47) -61] [(25 -66 -75 -42) -75] [(-20 1 -43 42) -43] [(72 37 -67 -88) -88] [(-88 23 -35 49) -88] [(-84 -99 59 -91) -99] [(-85 -9 32 -47) -85] [(-2 -9 -56 29) -56] [(94 87 -87 68) -87] [(89 -75 37 87) -75])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (exec_pop (in4 exec_k_when_autoconstructing (integer_sub in4 integer_yankdup integer_gte) (integer_eq boolean_invert_first_then_and integer_dup_times)) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor integer_yankdup exec_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))))
Lexicase best errors: [0 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (exec_pop (in4 exec_k_when_autoconstructing (integer_sub in4 integer_yankdup integer_gte) (integer_eq boolean_invert_first_then_and integer_dup_times)) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor integer_yankdup exec_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))))
Zero cases best errors: [0 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 1 2 4 1 1 1 5 5 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (12 1 2 4 1 1 1 5 5 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Best program: (exec_pop (in4 exec_k_when_autoconstructing (integer_sub in4 integer_yankdup integer_gte) (integer_eq boolean_invert_first_then_and integer_dup_times)) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor integer_yankdup exec_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))))
Errors: [0 0 0 1 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.988 0.999 0.998 0.996 0.999 0.999 0.999 0.995 0.995 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.475
Average program size in population (points): 70.707
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 464452
--- Timings ---
Current time: 1559314506150 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.9 seconds, 33.8%
Fitness Testing:      1.6 seconds, 61.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction tag_exec_955} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_pop integer_rot exec_s_when_autoconstructing () (integer_empty) (tag_exec_955 () exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_sub) in2 boolean_dup_times integer_yankdup exec_eq exec_do*count (boolean_invert_second_then_and integer_fromboolean integer_rot integer_min integer_flush integer_div integer_pop) boolean_rot) boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range () tag_integer_956 exec_do*count (exec_noop))) () ())
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction tag_exec_955} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_pop integer_rot exec_s_when_autoconstructing () (integer_empty) (tag_exec_955 () exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_sub) in2 boolean_dup_times integer_yankdup exec_eq exec_do*count (boolean_invert_second_then_and integer_fromboolean integer_rot integer_min integer_flush integer_div integer_pop) boolean_rot) boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range () tag_integer_956 exec_do*count (exec_noop))) () ())
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 79 86 611 68 263 614 614 79 86)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (108 79 86 611 68 263 614 614 79 86)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction -97} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction -76} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor})
Best program: (integer_pop in2 boolean_yankdup integer_sub print_integer boolean_yankdup in4 integer_lte exec_y (integer_fromboolean) in1 boolean_dup_items exec_empty integer_mod print_boolean in3 integer_pop -97 integer_sub integer_yank print_exec (boolean_yank exec_when (boolean_xor integer_flush) print_boolean in2 boolean_swap -76 integer_dup_items) print_integer integer_yankdup exec_dup_times (in3 integer_max) integer_lt integer_empty boolean_shove exec_shove (boolean_invert_second_then_and) exec_do*times () integer_gt integer_inc integer_fromboolean exec_s () (integer_flush boolean_pop boolean_shove in3 integer_mult exec_do*while (exec_rot () (exec_do*range () integer_empty exec_dup () integer_fromboolean exec_pop ()) (exec_empty integer_mult) integer_max) exec_k () (exec_do*while () boolean_shove in1 integer_dup integer_div) boolean_xor) ())
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 67
Size: 87
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 7.392
Median total errors in population: 7
Error averages by case: (0.892 0.921 0.914 0.389 0.932 0.737 0.386 0.386 0.921 0.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.622
Average program size in population (points): 53.379
Average percent parens in population: 0.257
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.526
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 375
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 392
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1401398
--- Timings ---
Current time: 1559314509298 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 40.1%
Fitness Testing:      2.5 seconds, 42.2%
Report:               1.0 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction tag_exec_955} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_pop integer_rot exec_s_when_autoconstructing () (integer_empty) (tag_exec_955 () exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_sub) in2 boolean_dup_times integer_yankdup exec_eq exec_do*count (boolean_invert_second_then_and integer_fromboolean integer_rot integer_min integer_flush integer_div boolean_stackdepth) boolean_rot) boolean_xor boolean_not in2 print_integer print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))
Lexicase best errors: [1 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction tag_exec_955} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_pop integer_rot exec_s_when_autoconstructing () (integer_empty) (tag_exec_955 () exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_sub) in2 boolean_dup_times integer_yankdup exec_eq exec_do*count (boolean_invert_second_then_and integer_fromboolean integer_rot integer_min integer_flush integer_div boolean_stackdepth) boolean_rot) boolean_xor boolean_not in2 print_integer print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))
Zero cases best errors: [1 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 318 862 318 106 318 266 106 863 106)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (172 318 862 318 106 318 266 106 863 106)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_761} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_136} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec})
Best program: (exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth boolean_invert_first_then_and integer_gt in3 print_integer integer_pop integer_pop exec_empty integer_swap integer_fromboolean exec_pop () integer_swap tagged_761 exec_stackdepth boolean_flush boolean_not tagged_136 integer_empty boolean_and integer_yankdup integer_add boolean_or exec_pop (integer_dec))
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 33
Percent parens: 0.121
--- Population Statistics ---
Average total errors in population: 6.565
Median total errors in population: 7
Error averages by case: (0.828 0.682 0.138 0.682 0.894 0.682 0.734 0.894 0.137 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.526
Average program size in population (points): 56.552
Average percent parens in population: 0.246
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.05
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2174098
--- Timings ---
Current time: 1559314512136 milliseconds
Total Time:           9.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 46.6%
Fitness Testing:      3.3 seconds, 35.3%
Report:               1.6 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction -97} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_pop in2 boolean_yankdup boolean_dup_times print_integer boolean_yankdup in4 integer_lte exec_y (integer_fromboolean) in1 boolean_dup_items exec_empty integer_mod print_boolean in3 integer_pop -97 integer_sub integer_yank print_exec (boolean_yank exec_when (boolean_xor integer_flush) print_boolean in2 boolean_swap boolean_dup integer_dup_items) print_integer integer_yankdup exec_dup_times (in3 integer_max) integer_lt integer_empty boolean_shove exec_shove (boolean_invert_second_then_and) exec_do*times () integer_gt integer_inc integer_fromboolean integer_inc integer_flush boolean_pop boolean_shove in3 integer_mult exec_do*while (exec_rot () (exec_do*range () integer_empty exec_dup () integer_fromboolean exec_pop ()) (exec_empty integer_mult) integer_max) exec_k () (exec_do*while () boolean_shove in1 integer_dup integer_div) boolean_xor boolean_swap exec_s () (boolean_invert_first_then_and) ())
Lexicase best errors: [0 1 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction -97} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_pop in2 boolean_yankdup boolean_dup_times print_integer boolean_yankdup in4 integer_lte exec_y (integer_fromboolean) in1 boolean_dup_items exec_empty integer_mod print_boolean in3 integer_pop -97 integer_sub integer_yank print_exec (boolean_yank exec_when (boolean_xor integer_flush) print_boolean in2 boolean_swap boolean_dup integer_dup_items) print_integer integer_yankdup exec_dup_times (in3 integer_max) integer_lt integer_empty boolean_shove exec_shove (boolean_invert_second_then_and) exec_do*times () integer_gt integer_inc integer_fromboolean integer_inc integer_flush boolean_pop boolean_shove in3 integer_mult exec_do*while (exec_rot () (exec_do*range () integer_empty exec_dup () integer_fromboolean exec_pop ()) (exec_empty integer_mult) integer_max) exec_k () (exec_do*while () boolean_shove in1 integer_dup integer_div) boolean_xor boolean_swap exec_s () (boolean_invert_first_then_and) ())
Zero cases best errors: [0 1 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (315 101 115 115 449 333 419 115 315 315)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (315 101 115 115 449 333 419 115 315 315)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction -97} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_pop in2 boolean_yankdup integer_sub print_integer boolean_yankdup in4 integer_lte exec_y (integer_fromboolean) exec_dup () boolean_dup_items exec_empty integer_mod in3 in3 integer_pop -97 integer_sub integer_yank print_exec (boolean_yank exec_when (boolean_xor integer_flush) print_boolean boolean_xor integer_flush) print_boolean in2 boolean_swap boolean_dup integer_dup_items print_integer integer_yankdup exec_dup_times (in3 integer_max) integer_lt integer_empty boolean_shove exec_shove (boolean_invert_second_then_and) exec_do*times () integer_gt integer_inc integer_fromboolean exec_s () (integer_flush boolean_pop boolean_shove in3 integer_mult exec_do*while (in3 integer_mult exec_do*while (exec_rot () (exec_do*range () integer_empty exec_dup () integer_fromboolean exec_pop ()) (exec_empty integer_mult) integer_max) exec_k () (exec_do*while () boolean_shove in1 integer_dup integer_div) boolean_xor boolean_swap) exec_s () (boolean_invert_first_then_and) ()) ())
Errors: [0 1 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 76
Size: 101
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 7.408
Median total errors in population: 8
Error averages by case: (0.685 0.899 0.885 0.885 0.551 0.667 0.581 0.885 0.685 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.019
Average program size in population (points): 56.196
Average percent parens in population: 0.248
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.49025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2739411
--- Timings ---
Current time: 1559314515688 milliseconds
Total Time:          12.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 54.1%
Fitness Testing:      3.8 seconds, 30.3%
Report:               1.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction tag_exec_955} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (boolean_pop integer_rot exec_s_when_autoconstructing () (integer_empty) (tag_exec_955 () exec_shove () boolean_dup boolean_invert_first_then_and integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank integer_sub in2 boolean_dup_times integer_yankdup exec_eq exec_do*count (boolean_invert_second_then_and integer_fromboolean integer_rot integer_min integer_flush integer_div integer_pop) boolean_rot boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range () tag_integer_956 exec_do*count (exec_noop))) () ())
Lexicase best errors: [1 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction tag_exec_955} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (boolean_pop integer_rot exec_s_when_autoconstructing () (integer_empty) (tag_exec_955 () exec_shove () boolean_dup boolean_invert_first_then_and integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank integer_sub in2 boolean_dup_times integer_yankdup exec_eq exec_do*count (boolean_invert_second_then_and integer_fromboolean integer_rot integer_min integer_flush integer_div integer_pop) boolean_rot boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range () tag_integer_956 exec_do*count (exec_noop))) () ())
Zero cases best errors: [1 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 125 73 332 345 543 332 332 677 344)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (73 125 73 332 345 543 332 332 677 344)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 2, :instruction exec_do*range})
Best program: (boolean_dup_items integer_dup_items integer_dup_times boolean_invert_first_then_and boolean_eq integer_empty integer_div boolean_invert_first_then_and integer_dup_times exec_shove (boolean_shove boolean_flush boolean_rot boolean_not boolean_not) boolean_flush integer_empty integer_lte boolean_flush exec_do*count () boolean_dup boolean_flush integer_inc boolean_eq integer_eq integer_swap boolean_or boolean_not in1 integer_min boolean_dup_items integer_pop boolean_xor in2 integer_mult boolean_not print_integer boolean_yankdup integer_mult exec_eq exec_yank exec_do*range ())
Errors: [1 1 1 1 0 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 42
Size: 46
Percent parens: 0.087
--- Population Statistics ---
Average total errors in population: 6.824
Median total errors in population: 6
Error averages by case: (0.927 0.875 0.927 0.668 0.655 0.457 0.668 0.668 0.323 0.656)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.073
Average program size in population (points): 54.271
Average percent parens in population: 0.239
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.97325
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3489180
--- Timings ---
Current time: 1559314518865 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 56.2%
Fitness Testing:      4.4 seconds, 27.8%
Report:               2.4 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer})
Lexicase best program: (exec_pop () integer_gte integer_yankdup exec_do*range (exec_swap (integer_div) () in3 boolean_pop print_integer integer_inc) exec_do*while (integer_mult) boolean_swap exec_do*times () integer_pop exec_k (in2 boolean_invert_second_then_and exec_flush integer_dup boolean_frominteger exec_do*count () boolean_dup integer_lt integer_inc boolean_eq integer_eq integer_swap boolean_or boolean_not in1 integer_min boolean_dup_items integer_pop integer_gt in2 exec_rot (boolean_not print_integer) () ()) ())
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer})
Zero cases best program: (exec_pop () integer_gte integer_yankdup exec_do*range (exec_swap (integer_div) () in3 boolean_pop print_integer integer_inc) exec_do*while (integer_mult) boolean_swap exec_do*times () integer_pop exec_k (in2 boolean_invert_second_then_and exec_flush integer_dup boolean_frominteger exec_do*count () boolean_dup integer_lt integer_inc boolean_eq integer_eq integer_swap boolean_or boolean_not in1 integer_min boolean_dup_items integer_pop integer_gt in2 exec_rot (boolean_not print_integer) () ()) ())
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 194 115 194 301 865 194 301 115 115)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (252 194 115 194 301 865 194 301 115 115)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max})
Best program: (in3 integer_eq exec_s (print_integer integer_lte integer_rot) (exec_flush exec_dup_items) () exec_dup_items exec_y () print_boolean boolean_frominteger exec_when (exec_empty) in1 exec_if () (boolean_not exec_s (exec_dup (integer_yank boolean_flush integer_dup_items exec_stackdepth exec_s_when_autoconstructing (integer_max) () ())) () ()))
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 40
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.354
Median total errors in population: 7
Error averages by case: (0.748 0.806 0.885 0.806 0.699 0.135 0.806 0.699 0.885 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.312
Average program size in population (points): 53.19
Average percent parens in population: 0.239
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.45925
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4280146
--- Timings ---
Current time: 1559314522073 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.3 seconds, 58.7%
Fitness Testing:      5.1 seconds, 26.6%
Report:               2.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (in3 boolean_pop print_integer integer_inc exec_do*while (integer_mult) boolean_swap exec_do*times () exec_do*count (exec_k (in2 boolean_invert_second_then_and exec_flush integer_dup boolean_frominteger exec_stackdepth) (integer_add) integer_gte in4 boolean_stackdepth boolean_frominteger integer_min exec_shove (integer_yankdup boolean_invert_first_then_and)))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (in3 boolean_pop print_integer integer_inc exec_do*while (integer_mult) boolean_swap exec_do*times () exec_do*count (exec_k (in2 boolean_invert_second_then_and exec_flush integer_dup boolean_frominteger exec_stackdepth) (integer_add) integer_gte in4 boolean_stackdepth boolean_frominteger integer_min exec_shove (integer_yankdup boolean_invert_first_then_and)))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 222 307 307 267 662 86 878 266 662)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (307 222 307 307 267 662 86 878 266 662)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Best program: (exec_pop () integer_gte integer_yankdup exec_do*range () exec_swap (integer_div) (in3 boolean_pop print_integer integer_inc) exec_do*while (integer_mult) boolean_swap exec_do*times () integer_pop exec_k (in2 exec_swap (exec_flush integer_dup boolean_frominteger exec_stackdepth) (integer_add) print_integer in4 boolean_invert_second_then_and boolean_frominteger integer_min exec_shove () integer_yankdup integer_gt) (exec_do*times (exec_y (integer_pop exec_stackdepth exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ())))))
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 61
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.036
Median total errors in population: 5
Error averages by case: (0.693 0.778 0.693 0.693 0.733 0.338 0.914 0.122 0.734 0.338)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.975
Average program size in population (points): 52.189
Average percent parens in population: 0.250
Minimum age in population: 6.0
Maximum age in population: 11.15625
Average age in population: 8.91259375
Median age in population: 8.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4979807
--- Timings ---
Current time: 1559314525348 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 61.2%
Fitness Testing:      5.7 seconds, 25.5%
Report:               2.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_swap} {:close 1, :instruction tagged_963} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_integer_993} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 1, :instruction -57} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_lte print_integer exec_y (integer_dup_times integer_lte integer_swap) integer_yank exec_do*count (print_exec (exec_empty) boolean_frominteger integer_rot exec_eq exec_do*while (exec_eq integer_rot) print_newline integer_sub integer_sub integer_gte integer_swap) tagged_963 boolean_pop print_exec (integer_shove) tag_integer_993 integer_dec print_integer integer_gte integer_empty -57 exec_do*range () tag_integer_956 exec_do*count (exec_noop))
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_swap} {:close 1, :instruction tagged_963} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_integer_993} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 1, :instruction -57} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_lte print_integer exec_y (integer_dup_times integer_lte integer_swap) integer_yank exec_do*count (print_exec (exec_empty) boolean_frominteger integer_rot exec_eq exec_do*while (exec_eq integer_rot) print_newline integer_sub integer_sub integer_gte integer_swap) tagged_963 boolean_pop print_exec (integer_shove) tag_integer_993 integer_dec print_integer integer_gte integer_empty -57 exec_do*range () tag_integer_956 exec_do*count (exec_noop))
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (400 894 258 258 116 398 258 116 398 258)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (400 894 258 258 116 398 258 116 398 258)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_96} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 1, :instruction tag_integer_993} {:close 1, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 1, :instruction -57} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_gt})
Best program: (boolean_shove integer_add exec_noop integer_flush exec_shove () exec_dup (integer_pop tagged_96 boolean_stackdepth boolean_dup) boolean_and boolean_rot integer_flush exec_stackdepth in4 exec_swap (exec_yank boolean_invert_first_then_and boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte boolean_rot boolean_and exec_stackdepth exec_do*count (boolean_or) integer_dup_times integer_pop boolean_dup_times boolean_eq exec_noop integer_shove) tag_integer_993) integer_dec) (print_integer integer_gte integer_empty -57) boolean_xor boolean_dup integer_empty in3 integer_gt)
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 55
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 6.646
Median total errors in population: 6
Error averages by case: (0.6 0.106 0.742 0.742 0.884 0.602 0.742 0.884 0.602 0.742)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.821
Average program size in population (points): 52.061
Average percent parens in population: 0.250
Minimum age in population: 7.0
Maximum age in population: 12.46875
Average age in population: 10.393828125
Median age in population: 10.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5627735
--- Timings ---
Current time: 1559314528745 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 62.8%
Fitness Testing:      6.3 seconds, 24.7%
Report:               3.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq exec_s_when_autoconstructing () (in4) (integer_rot boolean_yank boolean_dup_times integer_lte print_integer exec_y (integer_min integer_flush integer_div integer_pop) boolean_rot) boolean_xor boolean_not) in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range () tag_integer_956 exec_do*count (exec_noop))) () ())
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq exec_s_when_autoconstructing () (in4) (integer_rot boolean_yank boolean_dup_times integer_lte print_integer exec_y (integer_min integer_flush integer_div integer_pop) boolean_rot) boolean_xor boolean_not) in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range () tag_integer_956 exec_do*count (exec_noop))) () ())
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 189 189 2 189 314 2 2 377 2)
Population mean number of elite cases: 1.27
Count of perfect (error zero) individuals by case: (2 189 189 2 189 314 2 2 377 2)
Population mean number of perfect (error zero) cases: 1.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (in3 boolean_or in2 print_integer integer_lte integer_swap exec_flush exec_dup_items exec_dup_items exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_eq boolean_frominteger integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div exec_y_when_autoconstructing (integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor exec_s (boolean_invert_first_then_and) () ()))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 8.732
Median total errors in population: 9
Error averages by case: (0.998 0.811 0.811 0.998 0.811 0.686 0.998 0.998 0.623 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.55
Average program size in population (points): 51.718
Average percent parens in population: 0.251
Minimum age in population: 8.75
Maximum age in population: 14.15625
Average age in population: 11.8699609375
Median age in population: 11.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6384583
--- Timings ---
Current time: 1559314531956 milliseconds
Total Time:          29.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.4 seconds, 63.1%
Fitness Testing:      6.9 seconds, 23.7%
Report:               3.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (in3 boolean_or in2 print_integer integer_lte integer_swap exec_flush exec_dup_items in4 exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_eq boolean_frominteger integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div exec_y_when_autoconstructing (integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor exec_s (boolean_invert_first_then_and) () ()))
Lexicase best errors: [0 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (in3 boolean_or in2 print_integer integer_lte integer_swap exec_flush exec_dup_items in4 exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_eq boolean_frominteger integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div exec_y_when_autoconstructing (integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor exec_s (boolean_invert_first_then_and) () ()))
Zero cases best errors: [0 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (458 83 90 458 893 458 83 261 83 261)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (458 83 90 458 893 458 83 261 83 261)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (in3 boolean_or in2 print_integer integer_lte integer_swap exec_flush exec_dup_items exec_do*count () exec_shove () boolean_dup boolean_and exec_y_when_autoconstructing (integer_eq boolean_frominteger integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div exec_y_when_autoconstructing (integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor exec_s (boolean_invert_first_then_and) () ()))
Errors: [0 1 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.872
Median total errors in population: 6
Error averages by case: (0.542 0.917 0.91 0.542 0.107 0.542 0.917 0.739 0.917 0.739)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.029
Average program size in population (points): 46.67
Average percent parens in population: 0.247
Minimum age in population: 10.0
Maximum age in population: 15.58984375
Average age in population: 13.65101953125
Median age in population: 13.810546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6850333
--- Timings ---
Current time: 1559314534600 milliseconds
Total Time:          31.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.5 seconds, 64.4%
Fitness Testing:      7.3 seconds, 23.0%
Report:               3.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Lexicase best program: (exec_pop (in4 exec_k_when_autoconstructing (integer_sub in4 integer_yankdup integer_gte) (integer_eq exec_empty in4 integer_yankdup integer_gte) integer_eq boolean_invert_first_then_and integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_stackdepth boolean_xor integer_yankdup exec_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Zero cases best program: (exec_pop (in4 exec_k_when_autoconstructing (integer_sub in4 integer_yankdup integer_gte) (integer_eq exec_empty in4 integer_yankdup integer_gte) integer_eq boolean_invert_first_then_and integer_dup_times) boolean_empty boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_stackdepth boolean_xor integer_yankdup exec_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 518 225 294 388 93 223 223 294 905)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (225 518 225 294 388 93 223 223 294 905)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Best program: (exec_pop (integer_lt exec_k_when_autoconstructing (boolean_dup_items in4 integer_yankdup integer_gte) (integer_eq boolean_invert_first_then_and integer_dup_times)) exec_pop () boolean_invert_first_then_and boolean_yank integer_yank boolean_frominteger in1 print_integer integer_dup_times exec_while () boolean_swap integer_div integer_stackdepth boolean_xor integer_yankdup exec_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ()))))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.612
Median total errors in population: 6
Error averages by case: (0.775 0.482 0.775 0.706 0.612 0.907 0.777 0.777 0.706 0.095)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.562
Average program size in population (points): 47.728
Average percent parens in population: 0.250
Minimum age in population: 12.42578125
Maximum age in population: 17.154296875
Average age in population: 15.0423828125
Median age in population: 15.119140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7331229
--- Timings ---
Current time: 1559314538016 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 65.7%
Fitness Testing:      7.7 seconds, 22.4%
Report:               4.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 769
Test mean error for best: 0.76900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 6                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output:                    
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output:                    
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ())))))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ())))))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 1000 298 1000 522 393 194 357 194 163)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (522 0 298 0 522 393 194 357 194 163)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer integer_stackdepth exec_while () boolean_swap integer_div integer_stackdepth boolean_xor integer_yankdup exec_stackdepth) integer_gt exec_do*times (exec_y (integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ()))))
Errors: [0 1 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 43
Size: 57
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.357
Median total errors in population: 7
Error averages by case: (0.478 1.0 0.702 1.0 0.478 0.607 0.806 0.643 0.806 0.837)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 36.224
Average program size in population (points): 48.432
Average percent parens in population: 0.249
Minimum age in population: 13.46875
Maximum age in population: 18.291015625
Average age in population: 16.6335224609375
Median age in population: 16.78955078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8226741
--- Timings ---
Current time: 1559314541285 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.6 seconds, 64.8%
Fitness Testing:      8.5 seconds, 22.4%
Report:               4.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ()))))
Lexicase best errors: [1 1 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ()))))
Zero cases best errors: [1 1 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 234 34 35 1000 264 234 263 35 1)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (0 234 34 35 0 264 234 263 35 1)
Population mean number of perfect (error zero) cases: 1.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () exec_when (boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer integer_stackdepth exec_while () boolean_swap integer_div integer_stackdepth boolean_xor integer_yankdup exec_stackdepth) integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ()))))
Errors: [1 1 0 0 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 8.9
Median total errors in population: 8
Error averages by case: (1.0 0.766 0.966 0.965 1.0 0.736 0.766 0.737 0.965 0.999)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 37.413
Average program size in population (points): 50.582
Average percent parens in population: 0.257
Minimum age in population: 15.517578125
Maximum age in population: 19.95703125
Average age in population: 18.21861181640625
Median age in population: 18.138671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9145337
--- Timings ---
Current time: 1559314545109 milliseconds
Total Time:          41.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.9 seconds, 64.5%
Fitness Testing:      9.3 seconds, 22.2%
Report:               5.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_761} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_136} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Lexicase best program: (boolean_dup_items integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth boolean_invert_first_then_and integer_gt in3 print_integer integer_pop integer_pop exec_empty integer_swap integer_fromboolean exec_pop () integer_swap tagged_761 exec_stackdepth integer_empty boolean_not tagged_136 integer_empty integer_dup integer_yankdup integer_add boolean_or integer_mult integer_dec)
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_761} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_136} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dec})
Zero cases best program: (boolean_dup_items integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth boolean_invert_first_then_and integer_gt in3 print_integer integer_pop integer_pop exec_empty integer_swap integer_fromboolean exec_pop () integer_swap tagged_761 exec_stackdepth integer_empty boolean_not tagged_136 integer_empty integer_dup integer_yankdup integer_add boolean_or integer_mult integer_dec)
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (413 234 233 775 225 225 142 861 275 3)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (413 234 233 775 225 225 142 861 275 3)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap})
Best program: (in3 integer_eq exec_s (print_integer integer_lte integer_swap) (exec_flush exec_dup_items) () exec_dup_items exec_y () exec_yank boolean_frominteger exec_when (in2) in1 exec_if () (boolean_not exec_s (exec_dup (boolean_empty) boolean_invert_first_then_and boolean_yank) (integer_yank boolean_frominteger in1 boolean_or integer_dup_times exec_while () boolean_swap integer_div exec_do*while (boolean_xor integer_yankdup exec_stackdepth) integer_gt) (exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap () ()))))))
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 60
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.614
Median total errors in population: 7
Error averages by case: (0.587 0.766 0.767 0.225 0.775 0.775 0.858 0.139 0.725 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.264
Average program size in population (points): 52.655
Average percent parens in population: 0.268
Minimum age in population: 16.62109375
Maximum age in population: 21.540283203125
Average age in population: 19.64264526367188
Median age in population: 19.69287109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9917714
--- Timings ---
Current time: 1559314547908 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 64.1%
Fitness Testing:      9.9 seconds, 22.0%
Report:               6.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 766
Test mean error for best: 0.76600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 5                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -16                
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) (in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (exec_swap (boolean_flush) ()) ())))))))
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) (in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (exec_swap (boolean_flush) ()) ())))))))
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 441 337 146 103 312 337 457 871 25)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (312 441 337 146 103 312 337 457 871 25)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Best program: (in3 exec_pop () boolean_or boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) (in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and integer_empty integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (exec_swap (boolean_flush) ()) ())))))))
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 6.659
Median total errors in population: 6
Error averages by case: (0.688 0.559 0.663 0.854 0.897 0.688 0.663 0.543 0.129 0.975)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.706
Average program size in population (points): 51.038
Average percent parens in population: 0.276
Minimum age in population: 18.1796875
Maximum age in population: 22.8065185546875
Average age in population: 21.18947668457031
Median age in population: 21.275634765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10585908
--- Timings ---
Current time: 1559314550902 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.6 seconds, 64.4%
Fitness Testing:     10.5 seconds, 22.0%
Report:               6.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_noop)))) () ())
Lexicase best errors: [0 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_noop)))) () ())
Zero cases best errors: [0 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 248 247 114 114 243 249 252 114 883)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (113 248 247 114 114 243 249 252 114 883)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (exec_empty) (boolean_not exec_s (integer_eq integer_yank boolean_flush boolean_xor boolean_not) (in2 print_integer integer_mult exec_eq) () exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_noop)))) () ()) ()))
Errors: [0 1 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.423
Median total errors in population: 7
Error averages by case: (0.887 0.752 0.753 0.886 0.886 0.757 0.751 0.748 0.886 0.117)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.463
Average program size in population (points): 53.864
Average percent parens in population: 0.280
Minimum age in population: 20.49560546875
Maximum age in population: 24.41064453125
Average age in population: 22.77817858886719
Median age in population: 22.81344604492188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 11315732
--- Timings ---
Current time: 1559314553555 milliseconds
Total Time:          50.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 64.0%
Fitness Testing:     11.1 seconds, 22.0%
Report:               7.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 0N                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (exec_empty) (boolean_not exec_s (integer_eq integer_yank boolean_flush boolean_xor boolean_not) (in2 in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ())))) ()) ()))
Lexicase best errors: [0 0 1 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 58
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (exec_empty) (boolean_not exec_s (integer_eq integer_yank boolean_flush boolean_xor boolean_not) (in2 in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ())))) ()) ()))
Zero cases best errors: [0 0 1 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 58
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 275 415 278 421 207 2 207 2 2)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (278 275 415 278 421 207 2 207 2 2)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth})
Best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) (in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean)) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth))))
Errors: [0 0 1 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.913
Median total errors in population: 8
Error averages by case: (0.722 0.725 0.585 0.722 0.579 0.793 0.998 0.793 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.959
Average program size in population (points): 49.505
Average percent parens in population: 0.289
Minimum age in population: 21.49560546875
Maximum age in population: 26.07208251953125
Average age in population: 24.16846566772461
Median age in population: 24.24186706542969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 11827117
--- Timings ---
Current time: 1559314556975 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.9 seconds, 64.8%
Fitness Testing:     11.6 seconds, 21.5%
Report:               7.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 exec_pop () integer_gte in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) (boolean_frominteger boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop exec_k_when_autoconstructing (exec_do*times (exec_swap (exec_swap (boolean_flush) ()) ())) ()))))))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 exec_pop () integer_gte in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) (boolean_frominteger boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop exec_k_when_autoconstructing (exec_do*times (exec_swap (exec_swap (boolean_flush) ()) ())) ()))))))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 208 240 240 258 624 208 253 262 253)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (262 208 240 240 258 624 208 253 262 253)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction -82} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (exec_empty) (boolean_not exec_s (integer_eq integer_yank boolean_flush boolean_xor boolean_not) (boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_do*times (integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max -82 integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ()))))) ()) ()))
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 67
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.192
Median total errors in population: 7
Error averages by case: (0.738 0.792 0.76 0.76 0.742 0.376 0.792 0.747 0.738 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.364
Average program size in population (points): 47.963
Average percent parens in population: 0.279
Minimum age in population: 22.49560546875
Maximum age in population: 27.59559631347656
Average age in population: 25.70415019226074
Median age in population: 25.73483276367188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 12398169
--- Timings ---
Current time: 1559314560158 milliseconds
Total Time:          56.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 64.9%
Fitness Testing:     12.1 seconds, 21.2%
Report:               7.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (exec_empty) (boolean_not exec_s (integer_eq in4 boolean_flush boolean_xor boolean_not) (in2 in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ())))) ()) ()))
Lexicase best errors: [1 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (exec_empty) (boolean_not exec_s (integer_eq in4 boolean_flush boolean_xor boolean_not) (in2 in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap (boolean_flush) ())))) ()) ()))
Zero cases best errors: [1 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 238 219 697 238 454 438 439 5 5)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (5 238 219 697 238 454 438 439 5 5)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Best program: (in3 exec_pop () boolean_rot boolean_invert_first_then_and integer_sub exec_swap (integer_swap) () in3 boolean_pop integer_dup_items integer_div in3 boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup integer_shove) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap () (exec_swap (boolean_flush) ()))))))
Errors: [1 1 1 0 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.262
Median total errors in population: 7
Error averages by case: (0.995 0.762 0.781 0.303 0.762 0.546 0.562 0.561 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.223
Average program size in population (points): 48.734
Average percent parens in population: 0.273
Minimum age in population: 24.88653564453125
Maximum age in population: 29.27264404296875
Average age in population: 27.24795223999023
Median age in population: 27.29788208007812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 13072220
--- Timings ---
Current time: 1559314563288 milliseconds
Total Time:          59.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.7 seconds, 64.6%
Fitness Testing:     12.6 seconds, 21.1%
Report:               8.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte exec_while (boolean_flush boolean_xor boolean_not) integer_lt print_integer integer_mult exec_eq exec_when () integer_dec integer_stackdepth exec_while () boolean_swap integer_div integer_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap () (boolean_flush)))))
Lexicase best errors: [0 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte exec_while (boolean_flush boolean_xor boolean_not) integer_lt print_integer integer_mult exec_eq exec_when () integer_dec integer_stackdepth exec_while () boolean_swap integer_div integer_stackdepth integer_gt exec_do*times (exec_y (integer_pop print_integer exec_do*times (exec_swap () (boolean_flush)))))
Zero cases best errors: [0 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 805 211 299 212 817 94 94 303 94)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (94 805 211 299 212 817 94 94 303 94)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction tag_integer_226} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Best program: (integer_eq exec_while (integer_lte boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not print_integer integer_mult exec_eq exec_when () integer_dec exec_s (tag_integer_226 exec_do*range (tag_integer_956 exec_do*count (exec_flush))) () ())
Errors: [0 0 1 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.977
Median total errors in population: 7
Error averages by case: (0.906 0.195 0.789 0.701 0.788 0.183 0.906 0.906 0.697 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.837
Average program size in population (points): 45.154
Average percent parens in population: 0.268
Minimum age in population: 25.90869140625
Maximum age in population: 30.71905899047852
Average age in population: 28.85495063018799
Median age in population: 28.88379669189453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 13711000
--- Timings ---
Current time: 1559314565729 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.4 seconds, 64.2%
Fitness Testing:     13.2 seconds, 21.0%
Report:               9.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq exec_while (integer_lte boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times boolean_and exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_flush)))) () ())
Lexicase best errors: [0 1 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq exec_while (integer_lte boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times boolean_and exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_flush)))) () ())
Zero cases best errors: [0 1 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (558 205 128 433 433 207 128 210 433 124)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (558 205 128 433 433 207 128 210 433 124)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Best program: (integer_rot exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte exec_while (boolean_flush boolean_xor boolean_not) integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Errors: [0 1 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 30
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.141
Median total errors in population: 7
Error averages by case: (0.442 0.795 0.872 0.567 0.567 0.793 0.872 0.79 0.567 0.876)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.544
Average program size in population (points): 44.179
Average percent parens in population: 0.258
Minimum age in population: 27.91544342041016
Maximum age in population: 32.04400062561035
Average age in population: 30.24394066429138
Median age in population: 30.32076168060303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 14335677
--- Timings ---
Current time: 1559314568164 milliseconds
Total Time:          65.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.1 seconds, 64.4%
Fitness Testing:     13.7 seconds, 21.0%
Report:               9.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Lexicase best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Zero cases best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 181 887 275 272 120 887 271 604 302)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (181 181 887 275 272 120 887 271 604 302)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Best program: (in3 exec_pop () boolean_rot boolean_invert_first_then_and integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte exec_while (boolean_flush boolean_xor boolean_not) integer_lt print_integer integer_mult exec_eq exec_when () integer_dec integer_stackdepth exec_while () boolean_swap integer_div integer_stackdepth integer_gt exec_do*times (exec_y (integer_pop exec_k_when_autoconstructing (print_integer exec_do*times (exec_swap (boolean_flush) ())) ())))
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 47
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.02
Median total errors in population: 6
Error averages by case: (0.819 0.819 0.113 0.725 0.728 0.88 0.113 0.729 0.396 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.311
Average program size in population (points): 43.821
Average percent parens in population: 0.256
Minimum age in population: 28.919921875
Maximum age in population: 33.68756771087646
Average age in population: 31.78379932594299
Median age in population: 31.84903049468994
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 14947422
--- Timings ---
Current time: 1559314571503 milliseconds
Total Time:          68.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.2 seconds, 64.9%
Fitness Testing:     14.3 seconds, 20.9%
Report:               9.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times})
Lexicase best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () boolean_dup_items boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times})
Zero cases best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () boolean_dup_items boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (333 900 269 899 156 269 324 332 155 881)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (333 900 269 899 156 269 324 332 155 881)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times})
Best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap () (integer_div)) integer_shove boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and boolean_pop integer_dup_items integer_dup_times boolean_invert_first_then_and exec_yank boolean_swap exec_do*count (integer_fromboolean) boolean_and exec_stackdepth integer_yank boolean_frominteger in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () (exec_dup_items integer_max integer_gte integer_yankdup exec_stackdepth) integer_gt) exec_do*times (exec_y (integer_pop print_integer exec_do*times () exec_swap (exec_swap (boolean_flush) (exec_swap (boolean_flush exec_swap (print_boolean exec_dup_times ()) ()) ())) ())))
Errors: [0 0 1 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 69
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.482
Median total errors in population: 5
Error averages by case: (0.667 0.1 0.731 0.101 0.844 0.731 0.676 0.668 0.845 0.119)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.053
Average program size in population (points): 43.616
Average percent parens in population: 0.257
Minimum age in population: 30.01283264160156
Maximum age in population: 35.37811326980591
Average age in population: 33.3017838807106
Median age in population: 33.37945580482483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 15517382
--- Timings ---
Current time: 1559314574627 milliseconds
Total Time:          71.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.2 seconds, 64.8%
Fitness Testing:     14.7 seconds, 20.7%
Report:              10.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_784} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor in4) integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte integer_yank exec_do*while (boolean_xor boolean_not) in2 print_integer integer_mult exec_eq exec_when (integer_dec exec_s (exec_when (exec_do*range (tag_integer_784 exec_do*count (exec_noop)))) () ()))
Lexicase best errors: [0 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_784} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor in4) integer_rot boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte integer_yank exec_do*while (boolean_xor boolean_not) in2 print_integer integer_mult exec_eq exec_when (integer_dec exec_s (exec_when (exec_do*range (tag_integer_784 exec_do*count (exec_noop)))) () ()))
Zero cases best errors: [0 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 228 247 247 1 1 246 227 1 228)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (227 228 247 247 1 1 246 227 1 228)
Population mean number of perfect (error zero) cases: 1.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_dup_times} {:close 3, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth})
Best program: (boolean_yank boolean_dup_times integer_div exec_s (boolean_pop exec_yank boolean_swap exec_do*count (integer_fromboolean boolean_flush boolean_xor boolean_not) in2 print_integer integer_mult exec_eq) (exec_when (integer_dec exec_k (integer_yank boolean_invert_second_then_and exec_flush exec_flush boolean_frominteger exec_stackdepth) ())) ())
Errors: [0 0 1 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 8.347
Median total errors in population: 10
Error averages by case: (0.773 0.772 0.753 0.753 0.999 0.999 0.754 0.773 0.999 0.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.777
Average program size in population (points): 44.685
Average percent parens in population: 0.258
Minimum age in population: 31.35485076904297
Maximum age in population: 36.73286843299866
Average age in population: 34.77891162228584
Median age in population: 34.89373970031738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 16111034
--- Timings ---
Current time: 1559314577102 milliseconds
Total Time:          74.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 64.6%
Fitness Testing:     15.2 seconds, 20.5%
Report:              10.9 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Lexicase best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Zero cases best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 915 271 272 288 272 357 271 1000)
Population mean number of elite cases: 5.65
Count of perfect (error zero) individuals by case: (0 0 915 271 272 288 272 357 271 0)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Best program: (boolean_xor integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) (in3 boolean_yank boolean_dup_times integer_fromboolean exec_pop () integer_gte print_integer integer_mult exec_eq)) exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_flush)))) () ())
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.354
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.085 0.729 0.728 0.712 0.728 0.643 0.729 1.0)
Error minima by case: (1 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 24.859
Average program size in population (points): 32.634
Average percent parens in population: 0.216
Minimum age in population: 32.66139984130859
Maximum age in population: 38.34220206737518
Average age in population: 36.52571773540974
Median age in population: 36.43701553344727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 275
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 299
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 16409522
--- Timings ---
Current time: 1559314579197 milliseconds
Total Time:          76.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 65.0%
Fitness Testing:     15.5 seconds, 20.3%
Report:              11.1 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output:                    
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) exec_do*range () integer_rot boolean_yank boolean_dup_times integer_dec exec_pop () integer_gte integer_yank integer_fromboolean exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec integer_dec exec_when (exec_s (exec_when (exec_dup_items tag_integer_956 exec_do*count (print_integer exec_do*times (exec_swap (boolean_flush) ())))) () ()))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) exec_do*range () integer_rot boolean_yank boolean_dup_times integer_dec exec_pop () integer_gte integer_yank integer_fromboolean exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec integer_dec exec_when (exec_s (exec_when (exec_dup_items tag_integer_956 exec_do*count (print_integer exec_do*times (exec_swap (boolean_flush) ())))) () ()))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 143 585 898 1000 143 143 586 1000 1000)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (170 143 585 898 0 143 143 586 0 0)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (exec_empty) (boolean_not exec_s (integer_eq in4 boolean_flush boolean_xor boolean_not) (in2 print_integer integer_mult exec_eq) (exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_noop)))) () ())) ()))
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 33
Size: 51
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.332
Median total errors in population: 7
Error averages by case: (0.83 0.857 0.415 0.102 1.0 0.857 0.857 0.414 1.0 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 1 1)
Average genome size in population (length): 25.16
Average program size in population (points): 33.162
Average percent parens in population: 0.226
Minimum age in population: 33.66139984130859
Maximum age in population: 39.95973718166351
Average age in population: 37.96465698510408
Median age in population: 38.06969457864761
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 16784770
--- Timings ---
Current time: 1559314581918 milliseconds
Total Time:          79.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.7 seconds, 65.5%
Fitness Testing:     15.8 seconds, 20.1%
Report:              11.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_eq boolean_eq boolean_xor in4 integer_rot boolean_dup_times boolean_xor boolean_not integer_lt print_integer boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Lexicase best errors: [1 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_eq boolean_eq boolean_xor in4 integer_rot boolean_dup_times boolean_xor boolean_not integer_lt print_integer boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Zero cases best errors: [1 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 290 1000 1000 1000 158 461 158 914 907)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (290 290 0 0 0 158 461 158 914 907)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Best program: (integer_eq boolean_eq boolean_xor in4 integer_rot boolean_dup_times boolean_xor boolean_not integer_lt print_integer boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Errors: [1 1 1 1 1 0 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 6.822
Median total errors in population: 7
Error averages by case: (0.71 0.71 1.0 1.0 1.0 0.842 0.539 0.842 0.086 0.093)
Error minima by case: (0 0 1 1 1 0 0 0 0 0)
Average genome size in population (length): 26.604
Average program size in population (points): 35.901
Average percent parens in population: 0.242
Minimum age in population: 35.15645027160645
Maximum age in population: 41.29716894030571
Average age in population: 39.46747334110737
Median age in population: 39.51303431391716
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 17104042
--- Timings ---
Current time: 1559314584166 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 65.8%
Fitness Testing:     16.1 seconds, 19.8%
Report:              11.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_yank boolean_swap print_integer integer_mult exec_eq exec_when (integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_noop)))) () ()))
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (in3 exec_pop () integer_gte integer_rot boolean_yank boolean_dup_times boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_yank boolean_swap print_integer integer_mult exec_eq exec_when (integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_noop)))) () ()))
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 186 931 185 184 355 355 184 390 355)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (355 186 931 185 184 355 355 184 390 355)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction 11} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_980} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Best program: (in3 exec_pop () exec_rot (boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 11 integer_dup_items integer_div boolean_invert_first_then_and integer_yankdup boolean_swap print_integer integer_mult exec_eq)) (exec_s () (integer_dec exec_s (exec_when (exec_do*range (tag_integer_980 exec_do*count (exec_noop)))) () ()) ()) ())
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 42
Percent parens: 0.405
--- Population Statistics ---
Average total errors in population: 6.52
Median total errors in population: 5
Error averages by case: (0.645 0.814 0.069 0.815 0.816 0.645 0.645 0.816 0.61 0.645)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.362
Average program size in population (points): 30.2
Average percent parens in population: 0.209
Minimum age in population: 37.64018902182579
Maximum age in population: 42.8530795276165
Average age in population: 40.99427891848981
Median age in population: 41.06637508422136
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 17394073
--- Timings ---
Current time: 1559314586687 milliseconds
Total Time:          83.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.6 seconds, 66.3%
Fitness Testing:     16.4 seconds, 19.6%
Report:              11.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Lexicase best program: (in3 exec_pop () integer_gte integer_rot boolean_yank exec_do*range (boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq) exec_when () integer_dec exec_do*count (exec_flush))
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Zero cases best program: (in3 exec_pop () integer_gte integer_rot boolean_yank exec_do*range (boolean_xor boolean_not integer_lt print_integer integer_mult exec_eq) exec_when () integer_dec exec_do*count (exec_flush))
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 396 396 1000 422 1000 925 1000 528 398)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (106 396 396 0 422 0 925 0 528 398)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush})
Best program: (in3 exec_pop () integer_gte integer_rot boolean_yank exec_do*range (boolean_xor boolean_not) integer_lt print_integer integer_mult exec_eq exec_when () integer_dec exec_do*count (exec_flush))
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.829
Median total errors in population: 7
Error averages by case: (0.894 0.604 0.604 1.0 0.578 1.0 0.075 1.0 0.472 0.602)
Error minima by case: (0 0 0 1 0 1 0 1 0 0)
Average genome size in population (length): 25.773
Average program size in population (points): 34.866
Average percent parens in population: 0.247
Minimum age in population: 38.64018902182579
Maximum age in population: 44.60850796103477
Average age in population: 42.43395540744066
Median age in population: 42.55543844774365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 17730854
--- Timings ---
Current time: 1559314588991 milliseconds
Total Time:          86.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.4 seconds, 66.6%
Fitness Testing:     16.7 seconds, 19.4%
Report:              12.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_eq exec_while (integer_lte boolean_eq exec_y_when_autoconstructing (integer_div)) boolean_eq boolean_pop integer_dup_items exec_yank exec_yank boolean_stackdepth exec_do*range (exec_swap (boolean_or) () in3 boolean_pop exec_s (integer_eq integer_yank boolean_flush boolean_xor boolean_not) (in2 print_integer integer_mult exec_eq) () exec_do*times (exec_swap (exec_k_when_autoconstructing () ()) ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_eq exec_while (integer_lte boolean_eq exec_y_when_autoconstructing (integer_div)) boolean_eq boolean_pop integer_dup_items exec_yank exec_yank boolean_stackdepth exec_do*range (exec_swap (boolean_or) () in3 boolean_pop exec_s (integer_eq integer_yank boolean_flush boolean_xor boolean_not) (in2 print_integer integer_mult exec_eq) () exec_do*times (exec_swap (exec_k_when_autoconstructing () ()) ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 221 219 219 911 454 1 911 1 457)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (219 221 219 219 911 454 1 911 1 457)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_1005})
Best program: (in3 exec_pop () boolean_yank boolean_dup_times boolean_dup_times integer_fromboolean exec_pop () integer_gte integer_yank boolean_flush boolean_xor boolean_not in2 print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_1005))) () ())
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.387
Median total errors in population: 7
Error averages by case: (0.781 0.779 0.781 0.781 0.089 0.546 0.999 0.089 0.999 0.543)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.348
Average program size in population (points): 32.205
Average percent parens in population: 0.229
Minimum age in population: 39.64018902182579
Maximum age in population: 46.00930607691407
Average age in population: 43.96023390169069
Median age in population: 44.0202294960618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 18047064
--- Timings ---
Current time: 1559314591181 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 66.9%
Fitness Testing:     17.0 seconds, 19.2%
Report:              12.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_eq boolean_xor in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_eq boolean_xor in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 182 110 622 1 182 1 110 1 111)
Population mean number of elite cases: 1.50
Count of perfect (error zero) individuals by case: (182 182 110 622 1 182 1 110 1 111)
Population mean number of perfect (error zero) cases: 1.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Errors: [0 0 1 1 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 8.498
Median total errors in population: 9
Error averages by case: (0.818 0.818 0.89 0.378 0.999 0.818 0.999 0.89 0.999 0.889)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.501
Average program size in population (points): 36.539
Average percent parens in population: 0.263
Minimum age in population: 41.92604222893715
Maximum age in population: 47.47884377837181
Average age in population: 45.22593726026639
Median age in population: 45.28681331500411
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 18462106
--- Timings ---
Current time: 1559314593786 milliseconds
Total Time:          90.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 67.2%
Fitness Testing:     17.3 seconds, 19.1%
Report:              12.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -50} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () integer_mod boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (-50) (boolean_not boolean_empty integer_eq exec_s (boolean_flush boolean_xor boolean_not) (in2 print_integer integer_mult exec_when (exec_rot (exec_yank boolean_invert_first_then_and) () ())) ()) ()))
Lexicase best errors: [0 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction -50} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (in3 exec_pop () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () integer_mod boolean_pop integer_dup_items exec_yank exec_yank exec_s_when_autoconstructing (-50) (boolean_not boolean_empty integer_eq exec_s (boolean_flush boolean_xor boolean_not) (in2 print_integer integer_mult exec_when (exec_rot (exec_yank boolean_invert_first_then_and) () ())) ()) ()))
Zero cases best errors: [0 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 382 94 288 288 92 94 296 939 288)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (94 382 94 288 288 92 94 296 939 288)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger})
Best program: (in3 exec_while () integer_gte boolean_invert_first_then_and exec_do*range (exec_swap (integer_div) () in3 boolean_pop integer_dup_items exec_yank exec_yank in2 exec_empty) boolean_not exec_s (integer_eq integer_yank boolean_flush boolean_xor boolean_not) (in2 print_integer integer_mult exec_eq) () exec_when () integer_dec exec_s (exec_when (exec_yankdup tag_integer_956 exec_do*count (boolean_frominteger))) () ())
Errors: [0 0 0 1 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 7.145
Median total errors in population: 8
Error averages by case: (0.906 0.618 0.906 0.712 0.712 0.908 0.906 0.704 0.061 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.538
Average program size in population (points): 25.937
Average percent parens in population: 0.242
Minimum age in population: 44.29696150869131
Maximum age in population: 49.19544822070748
Average age in population: 46.69793283827137
Median age in population: 46.69663144741207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 239
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 18880912
--- Timings ---
Current time: 1559314596013 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 67.2%
Fitness Testing:     17.7 seconds, 19.0%
Report:              12.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Lexicase best errors: [0 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Zero cases best errors: [0 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 5 466 93 5 93 93 5 5 93)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (925 5 466 93 5 93 93 5 5 93)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Errors: [0 1 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 8.217
Median total errors in population: 8
Error averages by case: (0.075 0.995 0.534 0.907 0.995 0.907 0.907 0.995 0.995 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.742
Average program size in population (points): 30.405
Average percent parens in population: 0.246
Minimum age in population: 45.29696150869131
Maximum age in population: 50.24946822924539
Average age in population: 48.22019085312728
Median age in population: 48.28626694553532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.401
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 19211067
--- Timings ---
Current time: 1559314598808 milliseconds
Total Time:          95.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.7 seconds, 67.6%
Fitness Testing:     17.9 seconds, 18.8%
Report:              13.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (357 450 100 357 455 450 358 358 554 100)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (357 450 100 357 455 450 358 358 554 100)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_s (integer_mult boolean_eq boolean_xor) () (in4) integer_rot boolean_yank in1 print_integer exec_dup (exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())))
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.461
Median total errors in population: 6
Error averages by case: (0.643 0.55 0.9 0.643 0.545 0.55 0.642 0.642 0.446 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.14
Average program size in population (points): 26.536
Average percent parens in population: 0.274
Minimum age in population: 47.16242960840464
Maximum age in population: 51.82978294882923
Average age in population: 49.9711745869664
Median age in population: 50.04918818874285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.368
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.343
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 19684109
--- Timings ---
Current time: 1559314601351 milliseconds
Total Time:          98.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.4 seconds, 67.6%
Fitness Testing:     18.3 seconds, 18.7%
Report:              13.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction tagged_184} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq tagged_184) in4 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Lexicase best errors: [1 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction tagged_184} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq tagged_184) in4 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Zero cases best errors: [1 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 333 230 5 354 4 224 333 224 5)
Population mean number of elite cases: 2.04
Count of perfect (error zero) individuals by case: (332 333 230 5 354 4 224 333 224 5)
Population mean number of perfect (error zero) cases: 2.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_fromboolean exec_pop () integer_gte integer_yank exec_do*while (boolean_xor exec_eq) print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (print_exec (exec_while (exec_noop))))) () ())
Errors: [1 1 0 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 24
Size: 36
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.956
Median total errors in population: 7
Error averages by case: (0.668 0.667 0.77 0.995 0.646 0.996 0.776 0.667 0.776 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.566
Average program size in population (points): 28.473
Average percent parens in population: 0.274
Minimum age in population: 48.26055848971009
Maximum age in population: 53.46935132017825
Average age in population: 51.40336248807178
Median age in population: 51.46337158739334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 20069792
--- Timings ---
Current time: 1559314603603 milliseconds
Total Time:         100.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.1 seconds, 67.6%
Fitness Testing:     18.6 seconds, 18.5%
Report:              13.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (in3 exec_pop () integer_gte boolean_pop print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Lexicase best errors: [1 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (in3 exec_pop () integer_gte boolean_pop print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Zero cases best errors: [1 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 94 94 271 365 352 94 202 353 270)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (353 94 94 271 365 352 94 202 353 270)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte})
Best program: (in3 exec_pop () integer_gte boolean_pop print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.552
Median total errors in population: 7
Error averages by case: (0.647 0.906 0.906 0.729 0.635 0.648 0.906 0.798 0.647 0.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.914
Average program size in population (points): 27.59
Average percent parens in population: 0.275
Minimum age in population: 49.26055848971009
Maximum age in population: 54.80022616905626
Average age in population: 52.90681344387785
Median age in population: 52.96716902463231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 20467372
--- Timings ---
Current time: 1559314605916 milliseconds
Total Time:         103.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.0 seconds, 67.9%
Fitness Testing:     19.0 seconds, 18.4%
Report:              14.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (in3 boolean_rot boolean_invert_first_then_and integer_rot boolean_yank boolean_dup_times integer_fromboolean boolean_yank tagged_682 exec_while (boolean_flush boolean_xor boolean_not) exec_rot (print_integer exec_k_when_autoconstructing (exec_dup_items integer_max boolean_stackdepth) ()) () ())
Lexicase best errors: [1 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (in3 boolean_rot boolean_invert_first_then_and integer_rot boolean_yank boolean_dup_times integer_fromboolean boolean_yank tagged_682 exec_while (boolean_flush boolean_xor boolean_not) exec_rot (print_integer exec_k_when_autoconstructing (exec_dup_items integer_max boolean_stackdepth) ()) () ())
Zero cases best errors: [1 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 306 281 94 243 306 281 307 681 243)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (281 306 281 94 243 306 281 307 681 243)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (exec_while (integer_mult boolean_eq boolean_xor) in4 integer_fromboolean exec_pop () integer_gte integer_yank exec_do*while (boolean_xor exec_eq) print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (print_exec (exec_while (exec_noop))))) () ())
Errors: [0 1 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 6.977
Median total errors in population: 6
Error averages by case: (0.719 0.694 0.719 0.906 0.757 0.694 0.719 0.693 0.319 0.757)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.602
Average program size in population (points): 26.237
Average percent parens in population: 0.288
Minimum age in population: 50.69874447863549
Maximum age in population: 56.15129034445272
Average age in population: 54.47418668810368
Median age in population: 54.56624877356808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 20835633
--- Timings ---
Current time: 1559314608468 milliseconds
Total Time:         105.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.1 seconds, 68.2%
Fitness Testing:     19.3 seconds, 18.3%
Report:              14.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_s (exec_dup_items integer_max integer_gte) () ()))
Lexicase best errors: [0 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_s (exec_dup_items integer_max integer_gte) () ()))
Zero cases best errors: [0 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 103 313 315 210 295 294 295 313 923)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (210 103 313 315 210 295 294 295 313 923)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_dec} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_while (integer_mult boolean_eq integer_dec) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Errors: [0 1 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.729
Median total errors in population: 6
Error averages by case: (0.79 0.897 0.687 0.685 0.79 0.705 0.706 0.705 0.687 0.077)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.4
Average program size in population (points): 25.967
Average percent parens in population: 0.289
Minimum age in population: 52.56864028144628
Maximum age in population: 57.93560127603996
Average age in population: 55.96441078480637
Median age in population: 56.01583943632431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 21235512
--- Timings ---
Current time: 1559314611308 milliseconds
Total Time:         108.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.1 seconds, 68.5%
Fitness Testing:     19.6 seconds, 18.1%
Report:              14.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_fromboolean exec_pop () integer_gte integer_yank exec_do*while (boolean_xor exec_eq) print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (print_exec (exec_while (exec_noop))))) () ())
Lexicase best errors: [1 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_fromboolean exec_pop () integer_gte integer_yank exec_do*while (boolean_xor exec_eq) print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (print_exec (exec_while (exec_noop))))) () ())
Zero cases best errors: [1 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (315 95 95 341 930 315 931 179 95 342)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (315 95 95 341 930 315 931 179 95 342)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_fromboolean exec_pop () integer_gte integer_yank exec_do*while (boolean_xor exec_eq) print_integer integer_mult exec_eq exec_when () integer_dec exec_s (exec_when (exec_do*range (print_exec (exec_while (exec_noop))))) () ())
Errors: [1 0 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 36
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.362
Median total errors in population: 6
Error averages by case: (0.685 0.905 0.905 0.659 0.07 0.685 0.069 0.821 0.905 0.658)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.867
Average program size in population (points): 26.053
Average percent parens in population: 0.274
Minimum age in population: 54.02585113840178
Maximum age in population: 59.58752622667089
Average age in population: 57.47699161013345
Median age in population: 57.54227147501661
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 21609833
--- Timings ---
Current time: 1559314613817 milliseconds
Total Time:         111.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.2 seconds, 68.6%
Fitness Testing:     19.9 seconds, 18.0%
Report:              14.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_eq exec_while (integer_eq boolean_eq integer_min) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (integer_fromboolean integer_max integer_dup_times) ()))
Lexicase best errors: [1 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_eq exec_while (integer_eq boolean_eq integer_min) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (integer_fromboolean integer_max integer_dup_times) ()))
Zero cases best errors: [1 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 227 120 223 228 721 227 223 347 495)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (223 227 120 223 228 721 227 223 347 495)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_while (integer_eq boolean_eq integer_min) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Errors: [1 0 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.966
Median total errors in population: 7
Error averages by case: (0.777 0.773 0.88 0.777 0.772 0.279 0.773 0.777 0.653 0.505)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.024
Average program size in population (points): 25.198
Average percent parens in population: 0.283
Minimum age in population: 55.02585113840178
Maximum age in population: 61.06621641579841
Average age in population: 59.05304159597362
Median age in population: 59.10586313420936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 21962664
--- Timings ---
Current time: 1559314617140 milliseconds
Total Time:         114.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.8 seconds, 69.1%
Fitness Testing:     20.2 seconds, 17.7%
Report:              14.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (print_integer integer_mult exec_eq)) exec_when () integer_dec exec_s (exec_when (exec_do*range (boolean_yank exec_do*count (exec_noop)))) () ())
Lexicase best errors: [0 1 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items) (print_integer integer_mult exec_eq)) exec_when () integer_dec exec_s (exec_when (exec_do*range (boolean_yank exec_do*count (exec_noop)))) () ())
Zero cases best errors: [0 1 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 273 402 246 273 655 9 244 273 402)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (402 273 402 246 273 655 9 244 273 402)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer exec_dup (exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())))
Errors: [0 1 0 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 16
Size: 22
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.821
Median total errors in population: 7
Error averages by case: (0.598 0.727 0.598 0.754 0.727 0.345 0.991 0.756 0.727 0.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.277
Average program size in population (points): 26.149
Average percent parens in population: 0.262
Minimum age in population: 57.19032234349288
Maximum age in population: 62.37719944164019
Average age in population: 60.4439757674532
Median age in population: 60.53431839809491
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 22394620
--- Timings ---
Current time: 1559314620043 milliseconds
Total Time:         116.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.9 seconds, 69.2%
Fitness Testing:     20.6 seconds, 17.6%
Report:              15.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 68                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 74                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 74                 
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 72                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 19                 
Correct output: 45                  | Program output: 71                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 28                 
Correct output: 28                  | Program output: 76                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: 6                  
Correct output: -96                 | Program output: 89                 
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: 14                 
Correct output: -100                | Program output: -8                 
Correct output: -56                 | Program output: 48                 
Correct output: -59                 | Program output: 37                 
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: 26                 
Correct output: -62                 | Program output: 4                  
Correct output: -91                 | Program output: 82                 
Correct output: -46                 | Program output: 66                 
Correct output: -90                 | Program output: 18                 
Correct output: -90                 | Program output: 44                 
Correct output: -36                 | Program output: 36                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: 91                 
Correct output: -64                 | Program output: 39                 
Correct output: -70                 | Program output: 47                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: 100                
Correct output: -60                 | Program output: -3                 
Correct output: -34                 | Program output: 70                 
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: 41                 
Correct output: -57                 | Program output: 22                 
Correct output: -87                 | Program output: -71                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -5                 
Correct output: -75                 | Program output: -22                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -55                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 81                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -35                
Correct output: -99                 | Program output: 59                 
Correct output: -85                 | Program output: 32                 
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (in3 exec_pop () integer_gte boolean_pop print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max boolean_xor boolean_not) (exec_rot (integer_dup_times exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()) () ())))
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (in3 exec_pop () integer_gte boolean_pop print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max boolean_xor boolean_not) (exec_rot (integer_dup_times exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()) () ())))
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 108 339 263 314 313 339 263 577 918)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (263 108 339 263 314 313 339 263 577 918)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (in3 exec_pop () integer_gte boolean_pop print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (print_integer exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()) ()))
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 20
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 6.303
Median total errors in population: 6
Error averages by case: (0.737 0.892 0.661 0.737 0.686 0.687 0.661 0.737 0.423 0.082)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.442
Average program size in population (points): 26.534
Average percent parens in population: 0.266
Minimum age in population: 58.61006661740248
Maximum age in population: 64.09698021015356
Average age in population: 61.98650468313817
Median age in population: 62.06412591424896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 22747928
--- Timings ---
Current time: 1559314622331 milliseconds
Total Time:         119.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.7 seconds, 69.2%
Fitness Testing:     20.9 seconds, 17.5%
Report:              15.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 3, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 2, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 exec_rot (boolean_yank) (in1) () print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max) (integer_gte)))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 3, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 2, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 exec_rot (boolean_yank) (in1) () print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max) (integer_gte)))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 219 219 1 219 219 1 901 397 217)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (219 219 219 1 219 219 1 901 397 217)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 3, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_956} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 boolean_yank boolean_dup_times exec_rot () (integer_div exec_if (boolean_dup_times integer_eq boolean_yank integer_mult boolean_eq boolean_xor) () in4) (integer_rot boolean_yank) in1 exec_stackdepth boolean_swap exec_yank boolean_swap print_integer integer_mult exec_do*range () exec_when () integer_dec exec_s (exec_when (exec_do*range (tag_integer_956 exec_do*count (exec_noop)))) () ())
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.388
Median total errors in population: 8
Error averages by case: (0.781 0.781 0.781 0.999 0.781 0.781 0.999 0.099 0.603 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.369
Average program size in population (points): 26.922
Average percent parens in population: 0.281
Minimum age in population: 60.44656700493033
Maximum age in population: 65.6392450235171
Average age in population: 63.59982054983175
Median age in population: 63.70443249154141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 23096851
--- Timings ---
Current time: 1559314625410 milliseconds
Total Time:         122.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.3 seconds, 69.6%
Fitness Testing:     21.2 seconds, 17.3%
Report:              15.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_eq} {:close 2, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (boolean_yank integer_mult boolean_eq print_boolean in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_eq} {:close 2, :instruction print_boolean} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (boolean_yank integer_mult boolean_eq print_boolean in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (637 640 948 97 640 640 90 208 638 209)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (637 640 948 97 640 640 90 208 638 209)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (print_boolean integer_max integer_gte) ()))
Errors: [0 0 0 1 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 5.253
Median total errors in population: 4
Error averages by case: (0.363 0.36 0.052 0.903 0.36 0.36 0.91 0.792 0.362 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.954
Average program size in population (points): 21.344
Average percent parens in population: 0.251
Minimum age in population: 61.44656700493033
Maximum age in population: 67.01727110859179
Average age in population: 65.29357495496308
Median age in population: 65.36514524533095
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.37
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 23640590
--- Timings ---
Current time: 1559314628180 milliseconds
Total Time:         125.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.3 seconds, 69.7%
Fitness Testing:     21.6 seconds, 17.3%
Report:              16.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) in4 integer_rot boolean_yank integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () (exec_dup_items integer_max) boolean_shove))
Lexicase best errors: [0 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) in4 integer_rot boolean_yank integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () (exec_dup_items integer_max) boolean_shove))
Zero cases best errors: [0 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 5 518 5 424 181 756 182 184 943)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (5 5 518 5 424 181 756 182 184 943)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction print_boolean} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (in3 integer_mult boolean_eq print_boolean in4 integer_rot boolean_yank exec_empty print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Errors: [0 0 1 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 19
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.797
Median total errors in population: 7
Error averages by case: (0.995 0.995 0.482 0.995 0.576 0.819 0.244 0.818 0.816 0.057)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.483
Average program size in population (points): 20.939
Average percent parens in population: 0.260
Minimum age in population: 63.03757551909439
Maximum age in population: 68.83300273178838
Average age in population: 66.8724753546098
Median age in population: 66.96006647381546
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 24056696
--- Timings ---
Current time: 1559314630621 milliseconds
Total Time:         127.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.9 seconds, 69.7%
Fitness Testing:     21.9 seconds, 17.2%
Report:              16.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -11                
Correct output: -71                 | Program output: -22                
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: -15                
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -43                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -1                 
Correct output: -64                 | Program output: -3                 
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -78                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -10                
Correct output: -57                 | Program output: -1                 
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -42                
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -47                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_gte exec_while (boolean_flush boolean_xor boolean_not) exec_rot (print_integer exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()) () ())
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_gte exec_while (boolean_flush boolean_xor boolean_not) exec_rot (print_integer exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()) () ())
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (939 224 224 331 147 331 332 937 234 224)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (939 224 224 331 147 331 332 937 234 224)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_gte exec_while (boolean_flush boolean_xor boolean_not) exec_rot (print_integer exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()) () ())
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 6.077
Median total errors in population: 5
Error averages by case: (0.061 0.776 0.776 0.669 0.853 0.669 0.668 0.063 0.766 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.512
Average program size in population (points): 21.165
Average percent parens in population: 0.266
Minimum age in population: 64.03757551909439
Maximum age in population: 70.52676934386011
Average age in population: 68.4902397001842
Median age in population: 68.56853404663383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 24330390
--- Timings ---
Current time: 1559314633066 milliseconds
Total Time:         130.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.0 seconds, 69.9%
Fitness Testing:     22.2 seconds, 17.0%
Report:              17.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_788} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (in3 exec_pop () in2 boolean_pop print_integer boolean_swap tagged_788 exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_788} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (in3 exec_pop () in2 boolean_pop print_integer boolean_swap tagged_788 exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 348 117 349 939 356 117 588 349 116)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (116 348 117 349 939 356 117 588 349 116)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_788} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (in3 exec_pop () in2 boolean_pop print_integer boolean_swap tagged_788 exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 15
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.605
Median total errors in population: 7
Error averages by case: (0.884 0.652 0.883 0.651 0.061 0.644 0.883 0.412 0.651 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.951
Average program size in population (points): 21.901
Average percent parens in population: 0.270
Minimum age in population: 66.61942274812986
Maximum age in population: 72.21652436287323
Average age in population: 69.97752867100841
Median age in population: 70.07943326045238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 24577995
--- Timings ---
Current time: 1559314635590 milliseconds
Total Time:         132.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.2 seconds, 70.2%
Fitness Testing:     22.4 seconds, 16.9%
Report:              17.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: 10                 
Correct output: -60                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 84                 
Correct output: 21                  | Program output: 81                 
Correct output: 1                   | Program output: 66                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 90                 
Correct output: 48                  | Program output: 73                 
Correct output: 3                   | Program output: 30                 
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 53                 
Correct output: 15                  | Program output: 23                 
Correct output: 45                  | Program output: 60                 
Correct output: 14                  | Program output: 64                 
Correct output: 27                  | Program output: 89                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 82                 
Correct output: 28                  | Program output: 80                 
Correct output: -60                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -60                
Correct output: -31                 | Program output: 15                 
Correct output: -1                  | Program output: 46                 
Correct output: -96                 | Program output: -55                
Correct output: -30                 | Program output: 2                  
Correct output: -85                 | Program output: -24                
Correct output: -53                 | Program output: -8                 
Correct output: 38                  | Program output: 39                 
Correct output: -20                 | Program output: 75                 
Correct output: -59                 | Program output: 67                 
Correct output: -96                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: 74                 
Correct output: -100                | Program output: 45                 
Correct output: -56                 | Program output: 45                 
Correct output: -59                 | Program output: -14                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 62                 
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -18                
Correct output: -90                 | Program output: 3                  
Correct output: -90                 | Program output: -22                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 67                 
Correct output: -83                 | Program output: 25                 
Correct output: -94                 | Program output: 29                 
Correct output: -60                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: 22                 
Correct output: -57                 | Program output: -14                
Correct output: -87                 | Program output: -42                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: 56                 
Correct output: -94                 | Program output: 10                 
Correct output: -75                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -66                
Correct output: -43                 | Program output: 1                  
Correct output: -88                 | Program output: 37                 
Correct output: -88                 | Program output: 23                 
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -9                 
Correct output: -56                 | Program output: -9                 
Correct output: -87                 | Program output: 87                 
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_788} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (in3 exec_pop () in2 boolean_pop print_integer boolean_swap tagged_788 exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())
Lexicase best errors: [1 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_788} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (in3 exec_pop () in2 boolean_pop print_integer boolean_swap tagged_788 exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())
Zero cases best errors: [1 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 503 935 269 302 269 132 303 269 131)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (8 503 935 269 302 269 132 303 269 131)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_788} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Best program: (in3 exec_pop () in2 boolean_pop print_integer boolean_swap tagged_788 exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ())
Errors: [1 0 0 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 11
Size: 15
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.879
Median total errors in population: 7
Error averages by case: (0.992 0.497 0.065 0.731 0.698 0.731 0.868 0.697 0.731 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.228
Average program size in population (points): 20.93
Average percent parens in population: 0.272
Minimum age in population: 67.61942274812986
Maximum age in population: 73.5397407326345
Average age in population: 71.56900238414374
Median age in population: 71.60321292999467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.369
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 24879726
--- Timings ---
Current time: 1559314637821 milliseconds
Total Time:         135.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.0 seconds, 70.4%
Fitness Testing:     22.7 seconds, 16.8%
Report:              17.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Lexicase best errors: [1 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_gte) ()))
Zero cases best errors: [1 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 204 23 497 449 205 205 20 947 205)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (20 204 23 497 449 205 205 20 947 205)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_yank} {:close 2, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 exec_rot (boolean_yank) (in1) () print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Errors: [1 0 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 7.225
Median total errors in population: 8
Error averages by case: (0.98 0.796 0.977 0.503 0.551 0.795 0.795 0.98 0.053 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.675
Average program size in population (points): 22.113
Average percent parens in population: 0.249
Minimum age in population: 69.64340315436618
Maximum age in population: 74.71643711920126
Average age in population: 73.3031817829268
Median age in population: 73.25298363170008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.352
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.304
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 25209244
--- Timings ---
Current time: 1559314640143 milliseconds
Total Time:         137.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.8 seconds, 70.6%
Fitness Testing:     22.9 seconds, 16.7%
Report:              17.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 25                 
Correct output: 6                   | Program output: 96                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 59                 
Correct output: 21                  | Program output: 85                 
Correct output: 48                  | Program output: 50                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 65                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 68                 
Correct output: 27                  | Program output: 44                 
Correct output: 25                  | Program output: 85                 
Correct output: 7                   | Program output: 61                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: 82                 
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 24                 
Correct output: -53                 | Program output: 100                
Correct output: 38                  | Program output: 84                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 97                 
Correct output: -91                 | Program output: 0                  
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 68                 
Correct output: -83                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 58                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: -20                
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -2                 
Correct output: -87                 | Program output: 94                 
Correct output: -75                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_eq exec_while (integer_eq boolean_eq integer_min) integer_mult boolean_eq integer_min in4 integer_rot boolean_yank in1 integer_mult boolean_eq boolean_xor in4 integer_div boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_dup_items) ()))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_eq exec_while (integer_eq boolean_eq integer_min) integer_mult boolean_eq integer_min in4 integer_rot boolean_yank in1 integer_mult boolean_eq boolean_xor in4 integer_div boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_dup_items) ()))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (926 473 2 472 241 471 454 10 474 472)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (926 473 2 472 241 471 454 10 474 472)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items})
Best program: (integer_eq exec_while (integer_eq boolean_eq integer_min) integer_mult boolean_eq integer_min in4 integer_rot boolean_yank in1 integer_mult boolean_eq boolean_xor in4 integer_div boolean_yank in1 print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing (exec_dup_items integer_max integer_dup_items) ()))
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.005
Median total errors in population: 7
Error averages by case: (0.074 0.527 0.998 0.528 0.759 0.529 0.546 0.99 0.526 0.528)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.269
Average program size in population (points): 25.274
Average percent parens in population: 0.235
Minimum age in population: 72.00323610782738
Maximum age in population: 76.30571334906136
Average age in population: 74.88764903134928
Median age in population: 74.94997147277789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.38
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.329
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 25695191
--- Timings ---
Current time: 1559314642723 milliseconds
Total Time:         139.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.6 seconds, 70.6%
Fitness Testing:     23.3 seconds, 16.7%
Report:              17.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 724
Test mean error for best: 0.72400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -61                
Correct output: -76                 | Program output: 75                 
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: 55                 
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 29                 
Correct output: 21                  | Program output: 80                 
Correct output: 1                   | Program output: 21                 
Correct output: 2                   | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 95                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 60                 
Correct output: 3                   | Program output: 46                 
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 71                 
Correct output: 15                  | Program output: 81                 
Correct output: 45                  | Program output: 97                 
Correct output: 14                  | Program output: 31                 
Correct output: 27                  | Program output: 97                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 24                 
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: 41                 
Correct output: -71                 | Program output: 89                 
Correct output: -88                 | Program output: 94                 
Correct output: -31                 | Program output: 30                 
Correct output: -1                  | Program output: 5                  
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: 62                 
Correct output: -85                 | Program output: 62                 
Correct output: -53                 | Program output: 11                 
Correct output: 38                  | Program output: 70                 
Correct output: -20                 | Program output: 23                 
Correct output: -59                 | Program output: 22                 
Correct output: -96                 | Program output: 19                 
Correct output: -91                 | Program output: 26                 
Correct output: -6                  | Program output: 84                 
Correct output: -100                | Program output: 31                 
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 73                 
Correct output: -98                 | Program output: 100                
Correct output: -7                  | Program output: 86                 
Correct output: -61                 | Program output: 78                 
Correct output: -62                 | Program output: 12                 
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: 82                 
Correct output: -90                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: 58                 
Correct output: -59                 | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 82                 
Correct output: -83                 | Program output: 41                 
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: 63                 
Correct output: -34                 | Program output: 34                 
Correct output: -75                 | Program output: 57                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: 41                 
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -3                 
Correct output: -94                 | Program output: 52                 
Correct output: -75                 | Program output: 74                 
Correct output: -34                 | Program output: 40                 
Correct output: -58                 | Program output: 39                 
Correct output: -96                 | Program output: -5                 
Correct output: -47                 | Program output: 64                 
Correct output: -61                 | Program output: 73                 
Correct output: -75                 | Program output: 25                 
Correct output: -43                 | Program output: 42                 
Correct output: -88                 | Program output: 72                 
Correct output: -88                 | Program output: 49                 
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: 29                 
Correct output: -87                 | Program output: 68                 
Correct output: -75                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot integer_eq in1 boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) in4 integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) boolean_dup exec_y_when_autoconstructing (exec_while () integer_dup_times) print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot integer_eq in1 boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) in4 integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) boolean_dup exec_y_when_autoconstructing (exec_while () integer_dup_times) print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 586 11 69 638 260 117 284 454 456)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (284 586 11 69 638 260 117 284 454 456)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_eq exec_while (integer_mult boolean_eq boolean_xor) in4 integer_rot integer_eq in1 boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) in4 integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_xor) boolean_dup exec_y_when_autoconstructing (exec_while () integer_dup_times) print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Errors: [0 0 1 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.841
Median total errors in population: 7
Error averages by case: (0.716 0.414 0.989 0.931 0.362 0.74 0.883 0.716 0.546 0.544)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.209
Average program size in population (points): 29.428
Average percent parens in population: 0.244
Minimum age in population: 73.00323610782738
Maximum age in population: 78.14183416315927
Average age in population: 76.60694285092667
Median age in population: 76.73295980784049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.006
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 26265874
--- Timings ---
Current time: 1559314645244 milliseconds
Total Time:         142.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.3 seconds, 70.5%
Fitness Testing:     23.8 seconds, 16.7%
Report:              18.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 88                 
Correct output: 21                  | Program output: 43                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 40                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 52                 
Correct output: -98                 | Program output: 68                 
Correct output: -7                  | Program output: 14                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: 50                 
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 35                 
Correct output: -78                 | Program output: -33                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: 25                 
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: 39                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 40                 
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -37                
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 876 358 46 24 426 129 940 128 43)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (358 876 358 46 24 426 129 940 128 43)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) in4 exec_dup_items boolean_yank integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.672
Median total errors in population: 7
Error averages by case: (0.642 0.124 0.642 0.954 0.976 0.574 0.871 0.06 0.872 0.957)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.14
Average program size in population (points): 33.497
Average percent parens in population: 0.252
Minimum age in population: 76.25029726810405
Maximum age in population: 79.81302151349917
Average age in population: 78.44558157628846
Median age in population: 78.52215288467436
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.38
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 26798435
--- Timings ---
Current time: 1559314647556 milliseconds
Total Time:         144.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.0 seconds, 70.5%
Fitness Testing:     24.2 seconds, 16.7%
Report:              18.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) in2 boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) in2 boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 350 417 61 427 425 407 417 922 60)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (352 350 417 61 427 425 407 417 922 60)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) in2 boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.162
Median total errors in population: 7
Error averages by case: (0.648 0.65 0.583 0.939 0.573 0.575 0.593 0.583 0.078 0.94)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.932
Average program size in population (points): 36.905
Average percent parens in population: 0.243
Minimum age in population: 78.4059882899468
Maximum age in population: 81.79742574671812
Average age in population: 80.19153664332008
Median age in population: 80.27310654883189
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.37
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.318
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 27305320
--- Timings ---
Current time: 1559314649823 milliseconds
Total Time:         147.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.7 seconds, 70.6%
Fitness Testing:     24.6 seconds, 16.7%
Report:              18.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 43                 
Correct output: 21                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: 21                  | Program output: 28                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 49                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -79                
Correct output: -30                 | Program output: -6                 
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -51                
Correct output: -9                  | Program output: 17                 
Correct output: -98                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: -91                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: 31                 
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: -59                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -70                 | Program output: -45                
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -50                
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -67                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: -75                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) in2 boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) in2 boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 659 554 599 554 590 618 138 637 299)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (925 659 554 599 554 590 618 138 637 299)
Population mean number of perfect (error zero) cases: 5.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) in2 boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 4.427
Median total errors in population: 5
Error averages by case: (0.075 0.341 0.446 0.401 0.446 0.41 0.382 0.862 0.363 0.701)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.489
Average program size in population (points): 43.636
Average percent parens in population: 0.233
Minimum age in population: 80.50683190188091
Maximum age in population: 83.30330316917534
Average age in population: 81.87655920798058
Median age in population: 82.10354432223214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 343
Genome diversity (% unique genomes):	 0.424
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 364
Syntactic diversity (% unique Push programs):	 0.389
Total error diversity:				 0.009
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 27690366
--- Timings ---
Current time: 1559314652059 milliseconds
Total Time:         149.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.5 seconds, 70.7%
Fitness Testing:     24.9 seconds, 16.7%
Report:              18.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 46
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer boolean_swap exec_do*count (exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 46
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 881 872 876 548 643 551 853 516 888)
Population mean number of elite cases: 7.51
Count of perfect (error zero) individuals by case: (880 881 872 876 548 643 551 853 516 888)
Population mean number of perfect (error zero) cases: 7.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 2, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 2, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 2.492
Median total errors in population: 3/2
Error averages by case: (0.12 0.119 0.128 0.124 0.452 0.357 0.449 0.147 0.484 0.112)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.446
Average program size in population (points): 46.296
Average percent parens in population: 0.214
Minimum age in population: 82.10354432223214
Maximum age in population: 84.67330369621287
Average age in population: 83.52791536789337
Median age in population: 83.67330369621287
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 215
Syntactic diversity (% unique Push programs):	 0.427
Total error diversity:				 0.011
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 27920748
--- Timings ---
Current time: 1559314654215 milliseconds
Total Time:         151.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.2 seconds, 70.8%
Fitness Testing:     25.1 seconds, 16.6%
Report:              18.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 54
Successful program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 46


Auto-simplifying with starting size: 46
step: 0
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 500
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1000
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 1500
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2000
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 2500
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3000
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 3500
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4000
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 4500
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

step: 5000
program: (boolean_yank in1 in3 exec_pop (in2 boolean_pop) integer_min exec_while (boolean_shove boolean_eq exec_while (boolean_shove boolean_eq boolean_xor)) boolean_xor boolean_or boolean_xor in4 integer_rot boolean_pop integer_rot boolean_pop boolean_invert_first_then_and exec_while (boolean_shove boolean_eq boolean_shove boolean_eq boolean_xor) integer_min exec_y_when_autoconstructing (boolean_yank) integer_dup_times print_integer integer_gt exec_do*count (exec_k_when_autoconstructing () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 46

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -72                 | Program output: 95                 
Correct output: -63                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: 28                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -65                
Correct output: 70                  | Program output: 70                 
Correct output: 77                  | Program output: 77                 
Correct output: -34                 | Program output: -34                
Correct output: -54                 | Program output: -54                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 2                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 49                 
Correct output: 21                  | Program output: 21                 
Correct output: 48                  | Program output: 48                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: 45                  | Program output: 45                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 28                 
Correct output: -60                 | Program output: -60                
Correct output: -71                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: -31                 | Program output: -31                
Correct output: -1                  | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: 38                  | Program output: 38                 
Correct output: -20                 | Program output: -20                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -9                  | Program output: -9                 
Correct output: -98                 | Program output: -98                
Correct output: -7                  | Program output: -7                 
Correct output: -61                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -91                 | Program output: -67                
Correct output: -46                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -36                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -59                 | Program output: 0                  
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -33                
Correct output: -70                 | Program output: -70                
Correct output: 4                   | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -34                 | Program output: -21                
Correct output: -75                 | Program output: -64                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -75                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -47                 | Program output: 54                 
Correct output: -61                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -75                 | Program output: 37                 
;;******************************
