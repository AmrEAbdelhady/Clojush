Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x9763e61 clojush.problems.software.smallest$fn__7460@9763e61] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x44c27b8b clojush.instructions.tag$tag_instruction_erc$fn__2160@44c27b8b] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x33399052 clojush.instructions.tag$tagged_instruction_erc$fn__2166@33399052] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x1071ae7c clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@1071ae7c]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x4a6ef712 clojush.problems.software.smallest$smallest_initial_report@4a6ef712]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x61288814 clojush.problems.software.smallest$smallest_report@61288814]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[98 98 -92 98] -92] [[1 1 1 -19] -19] [[6 6 -34 6] -34] [[82 100 100 100] 82] [[69 -43 -43 -43] -43] [[-64 -64 52 -64] -64] [[79 26 26 26] 26] [[-25 -10 -10 -10] -25] [[20 -83 -83 -83] -83] [[55 -100 -100 -100] -100] [(15 15 15 15) 15] [(85 85 85 85) 85] [(-98 -98 -98 -98) -98] [(16 16 16 16) 16] [(93 93 93 93) 93] [(21 43 54 22) 21] [(12 24 80 87) 12] [(65 46 23 90) 23] [(49 34 61 19) 19] [(41 39 84 23) 23] [(45 65 53 48) 45] [(88 38 13 35) 13] [(27 32 44 57) 27] [(26 38 1 64) 1] [(39 14 26 85) 14] [(6 77 19 56) 6] [(77 67 49 59) 49] [(93 99 16 29) 16] [(65 90 40 51) 40] [(93 71 60 18) 18] [(92 53 44 53) 44] [(61 31 81 15) 15] [(82 96 36 85) 36] [(86 72 87 57) 57] [(67 85 13 10) 10] [(17 68 -15 33) -15] [(-55 -10 6 27) -55] [(-94 -46 78 -29) -94] [(-6 75 -94 39) -94] [(45 -94 41 -49) -94] [(53 53 -8 26) -8] [(75 -33 -65 -9) -65] [(27 -48 -30 -85) -85] [(-8 -39 25 -4) -39] [(90 65 -100 -70) -100] [(83 -35 24 -20) -35] [(73 -35 -3 97) -35] [(71 -64 55 -46) -64] [(-15 0 91 -22) -22] [(-82 49 79 27) -82] [(-27 -66 -8 72) -66] [(54 -17 -23 65) -23] [(99 -81 -70 -64) -81] [(-77 -20 49 24) -77] [(-90 49 -38 -44) -90] [(5 -66 -31 -31) -66] [(-72 -73 88 100) -73] [(94 -23 -32 67) -32] [(22 -49 -64 -24) -64] [(-5 -40 74 0) -40] [(-74 -11 -22 -48) -74] [(-69 -10 -81 -67) -81] [(-70 -67 43 97) -70] [(23 -69 -50 41) -69] [(-13 -16 -64 30) -64] [(73 57 52 48) 48] [(34 44 44 -72) -72] [(-51 83 63 -4) -51] [(16 93 -33 36) -33] [(-48 -69 24 31) -69] [(28 81 -46 -72) -72] [(-75 -92 -23 -30) -92] [(26 -39 -41 -11) -41] [(43 20 -14 57) -14] [(-83 53 -25 22) -83] [(61 -16 -51 21) -51] [(41 -37 -58 60) -58] [(-29 35 12 15) -29] [(41 -39 92 -23) -39] [(-29 -61 9 -88) -88] [(67 43 -96 69) -96] [(-40 -16 -23 -69) -69] [(49 96 30 74) 30] [(-9 -60 -54 -99) -99] [(60 59 62 -87) -87] [(-65 -79 94 74) -79] [(84 35 66 93) 35] [(58 79 26 74) 26] [(52 -39 33 26) -39] [(4 -38 -51 -37) -51] [(21 -84 -4 -71) -84] [(-74 -34 -88 -30) -88] [(-50 -15 31 -88) -88] [(41 60 29 -97) -97] [(-40 49 81 -12) -40])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[98 98 -92 98] -92]
Train Case:   6 | Input/Output: [[1 1 1 -19] -19]
Train Case:   7 | Input/Output: [[6 6 -34 6] -34]
Train Case:   8 | Input/Output: [[82 100 100 100] 82]
Train Case:   9 | Input/Output: [[69 -43 -43 -43] -43]
Train Case:  10 | Input/Output: [[-64 -64 52 -64] -64]
Train Case:  11 | Input/Output: [[79 26 26 26] 26]
Train Case:  12 | Input/Output: [[-25 -10 -10 -10] -25]
Train Case:  13 | Input/Output: [[20 -83 -83 -83] -83]
Train Case:  14 | Input/Output: [[55 -100 -100 -100] -100]
Train Case:  15 | Input/Output: [(15 15 15 15) 15]
Train Case:  16 | Input/Output: [(85 85 85 85) 85]
Train Case:  17 | Input/Output: [(-98 -98 -98 -98) -98]
Train Case:  18 | Input/Output: [(16 16 16 16) 16]
Train Case:  19 | Input/Output: [(93 93 93 93) 93]
Train Case:  20 | Input/Output: [(21 43 54 22) 21]
Train Case:  21 | Input/Output: [(12 24 80 87) 12]
Train Case:  22 | Input/Output: [(65 46 23 90) 23]
Train Case:  23 | Input/Output: [(49 34 61 19) 19]
Train Case:  24 | Input/Output: [(41 39 84 23) 23]
Train Case:  25 | Input/Output: [(45 65 53 48) 45]
Train Case:  26 | Input/Output: [(88 38 13 35) 13]
Train Case:  27 | Input/Output: [(27 32 44 57) 27]
Train Case:  28 | Input/Output: [(26 38 1 64) 1]
Train Case:  29 | Input/Output: [(39 14 26 85) 14]
Train Case:  30 | Input/Output: [(6 77 19 56) 6]
Train Case:  31 | Input/Output: [(77 67 49 59) 49]
Train Case:  32 | Input/Output: [(93 99 16 29) 16]
Train Case:  33 | Input/Output: [(65 90 40 51) 40]
Train Case:  34 | Input/Output: [(93 71 60 18) 18]
Train Case:  35 | Input/Output: [(92 53 44 53) 44]
Train Case:  36 | Input/Output: [(61 31 81 15) 15]
Train Case:  37 | Input/Output: [(82 96 36 85) 36]
Train Case:  38 | Input/Output: [(86 72 87 57) 57]
Train Case:  39 | Input/Output: [(67 85 13 10) 10]
Train Case:  40 | Input/Output: [(17 68 -15 33) -15]
Train Case:  41 | Input/Output: [(-55 -10 6 27) -55]
Train Case:  42 | Input/Output: [(-94 -46 78 -29) -94]
Train Case:  43 | Input/Output: [(-6 75 -94 39) -94]
Train Case:  44 | Input/Output: [(45 -94 41 -49) -94]
Train Case:  45 | Input/Output: [(53 53 -8 26) -8]
Train Case:  46 | Input/Output: [(75 -33 -65 -9) -65]
Train Case:  47 | Input/Output: [(27 -48 -30 -85) -85]
Train Case:  48 | Input/Output: [(-8 -39 25 -4) -39]
Train Case:  49 | Input/Output: [(90 65 -100 -70) -100]
Train Case:  50 | Input/Output: [(83 -35 24 -20) -35]
Train Case:  51 | Input/Output: [(73 -35 -3 97) -35]
Train Case:  52 | Input/Output: [(71 -64 55 -46) -64]
Train Case:  53 | Input/Output: [(-15 0 91 -22) -22]
Train Case:  54 | Input/Output: [(-82 49 79 27) -82]
Train Case:  55 | Input/Output: [(-27 -66 -8 72) -66]
Train Case:  56 | Input/Output: [(54 -17 -23 65) -23]
Train Case:  57 | Input/Output: [(99 -81 -70 -64) -81]
Train Case:  58 | Input/Output: [(-77 -20 49 24) -77]
Train Case:  59 | Input/Output: [(-90 49 -38 -44) -90]
Train Case:  60 | Input/Output: [(5 -66 -31 -31) -66]
Train Case:  61 | Input/Output: [(-72 -73 88 100) -73]
Train Case:  62 | Input/Output: [(94 -23 -32 67) -32]
Train Case:  63 | Input/Output: [(22 -49 -64 -24) -64]
Train Case:  64 | Input/Output: [(-5 -40 74 0) -40]
Train Case:  65 | Input/Output: [(-74 -11 -22 -48) -74]
Train Case:  66 | Input/Output: [(-69 -10 -81 -67) -81]
Train Case:  67 | Input/Output: [(-70 -67 43 97) -70]
Train Case:  68 | Input/Output: [(23 -69 -50 41) -69]
Train Case:  69 | Input/Output: [(-13 -16 -64 30) -64]
Train Case:  70 | Input/Output: [(73 57 52 48) 48]
Train Case:  71 | Input/Output: [(34 44 44 -72) -72]
Train Case:  72 | Input/Output: [(-51 83 63 -4) -51]
Train Case:  73 | Input/Output: [(16 93 -33 36) -33]
Train Case:  74 | Input/Output: [(-48 -69 24 31) -69]
Train Case:  75 | Input/Output: [(28 81 -46 -72) -72]
Train Case:  76 | Input/Output: [(-75 -92 -23 -30) -92]
Train Case:  77 | Input/Output: [(26 -39 -41 -11) -41]
Train Case:  78 | Input/Output: [(43 20 -14 57) -14]
Train Case:  79 | Input/Output: [(-83 53 -25 22) -83]
Train Case:  80 | Input/Output: [(61 -16 -51 21) -51]
Train Case:  81 | Input/Output: [(41 -37 -58 60) -58]
Train Case:  82 | Input/Output: [(-29 35 12 15) -29]
Train Case:  83 | Input/Output: [(41 -39 92 -23) -39]
Train Case:  84 | Input/Output: [(-29 -61 9 -88) -88]
Train Case:  85 | Input/Output: [(67 43 -96 69) -96]
Train Case:  86 | Input/Output: [(-40 -16 -23 -69) -69]
Train Case:  87 | Input/Output: [(49 96 30 74) 30]
Train Case:  88 | Input/Output: [(-9 -60 -54 -99) -99]
Train Case:  89 | Input/Output: [(60 59 62 -87) -87]
Train Case:  90 | Input/Output: [(-65 -79 94 74) -79]
Train Case:  91 | Input/Output: [(84 35 66 93) 35]
Train Case:  92 | Input/Output: [(58 79 26 74) 26]
Train Case:  93 | Input/Output: [(52 -39 33 26) -39]
Train Case:  94 | Input/Output: [(4 -38 -51 -37) -51]
Train Case:  95 | Input/Output: [(21 -84 -4 -71) -84]
Train Case:  96 | Input/Output: [(-74 -34 -88 -30) -88]
Train Case:  97 | Input/Output: [(-50 -15 31 -88) -88]
Train Case:  98 | Input/Output: [(41 60 29 -97) -97]
Train Case:  99 | Input/Output: [(-40 49 81 -12) -40]
Test Case:   0 | Input/Output: [[20 20 90 20] 20]
Test Case:   1 | Input/Output: [[-25 -25 31 -25] -25]
Test Case:   2 | Input/Output: [[-58 -58 -40 -58] -58]
Test Case:   3 | Input/Output: [[58 -3 -3 -3] -3]
Test Case:   4 | Input/Output: [[29 76 29 29] 29]
Test Case:   5 | Input/Output: [[-73 -73 -48 -73] -73]
Test Case:   6 | Input/Output: [[64 -68 64 64] -68]
Test Case:   7 | Input/Output: [[-51 7 -51 -51] -51]
Test Case:   8 | Input/Output: [[-27 -27 -27 13] -27]
Test Case:   9 | Input/Output: [[50 50 -17 50] -17]
Test Case:  10 | Input/Output: [[5 5 20 5] 5]
Test Case:  11 | Input/Output: [[83 82 83 83] 82]
Test Case:  12 | Input/Output: [[-68 79 -68 -68] -68]
Test Case:  13 | Input/Output: [[31 31 31 -83] -83]
Test Case:  14 | Input/Output: [[-83 53 53 53] -83]
Test Case:  15 | Input/Output: [[-29 -29 -29 32] -29]
Test Case:  16 | Input/Output: [[-18 -18 -18 26] -18]
Test Case:  17 | Input/Output: [[-65 -81 -65 -65] -81]
Test Case:  18 | Input/Output: [[-14 -14 -14 70] -14]
Test Case:  19 | Input/Output: [[7 7 39 7] 7]
Test Case:  20 | Input/Output: [[-27 -27 -27 -44] -44]
Test Case:  21 | Input/Output: [[-20 -34 -34 -34] -34]
Test Case:  22 | Input/Output: [[-26 -72 -72 -72] -72]
Test Case:  23 | Input/Output: [[-100 -100 -53 -100] -100]
Test Case:  24 | Input/Output: [[78 78 44 78] 44]
Test Case:  25 | Input/Output: [[-79 72 -79 -79] -79]
Test Case:  26 | Input/Output: [[78 78 78 -86] -86]
Test Case:  27 | Input/Output: [[58 58 -21 58] -21]
Test Case:  28 | Input/Output: [[-34 -34 -34 -45] -45]
Test Case:  29 | Input/Output: [[80 99 80 80] 80]
Test Case:  30 | Input/Output: [[52 52 9 52] 9]
Test Case:  31 | Input/Output: [[-61 -61 -61 -43] -61]
Test Case:  32 | Input/Output: [[-29 1 -29 -29] -29]
Test Case:  33 | Input/Output: [[38 23 38 38] 23]
Test Case:  34 | Input/Output: [[70 85 70 70] 70]
Test Case:  35 | Input/Output: [[-66 43 43 43] -66]
Test Case:  36 | Input/Output: [[-23 -23 -18 -23] -23]
Test Case:  37 | Input/Output: [[83 83 83 76] 76]
Test Case:  38 | Input/Output: [[92 92 92 -36] -36]
Test Case:  39 | Input/Output: [[41 -49 41 41] -49]
Test Case:  40 | Input/Output: [[-61 -61 -61 17] -61]
Test Case:  41 | Input/Output: [[87 87 -70 87] -70]
Test Case:  42 | Input/Output: [[16 16 16 16] 16]
Test Case:  43 | Input/Output: [[-87 -87 -87 51] -87]
Test Case:  44 | Input/Output: [[-65 -99 -65 -65] -99]
Test Case:  45 | Input/Output: [[32 32 32 28] 28]
Test Case:  46 | Input/Output: [[29 29 29 29] 29]
Test Case:  47 | Input/Output: [[10 -4 10 10] -4]
Test Case:  48 | Input/Output: [[-16 -50 -50 -50] -50]
Test Case:  49 | Input/Output: [[-27 -27 44 -27] -27]
Test Case:  50 | Input/Output: [[-38 53 -38 -38] -38]
Test Case:  51 | Input/Output: [[64 64 89 64] 64]
Test Case:  52 | Input/Output: [[50 50 4 50] 4]
Test Case:  53 | Input/Output: [[49 49 -76 49] -76]
Test Case:  54 | Input/Output: [[38 -72 38 38] -72]
Test Case:  55 | Input/Output: [[-5 -82 -82 -82] -82]
Test Case:  56 | Input/Output: [[2 2 2 31] 2]
Test Case:  57 | Input/Output: [[94 -68 -68 -68] -68]
Test Case:  58 | Input/Output: [[-80 -80 -80 -36] -80]
Test Case:  59 | Input/Output: [[-97 -97 45 -97] -97]
Test Case:  60 | Input/Output: [[62 62 -5 62] -5]
Test Case:  61 | Input/Output: [[-9 -9 29 -9] -9]
Test Case:  62 | Input/Output: [[69 -91 69 69] -91]
Test Case:  63 | Input/Output: [[91 91 26 91] 26]
Test Case:  64 | Input/Output: [[-15 -9 -9 -9] -15]
Test Case:  65 | Input/Output: [[-81 -42 -81 -81] -81]
Test Case:  66 | Input/Output: [[-36 -36 -36 -54] -54]
Test Case:  67 | Input/Output: [[91 -95 91 91] -95]
Test Case:  68 | Input/Output: [[-38 94 94 94] -38]
Test Case:  69 | Input/Output: [[39 -28 39 39] -28]
Test Case:  70 | Input/Output: [[11 -36 11 11] -36]
Test Case:  71 | Input/Output: [[-65 -9 -65 -65] -65]
Test Case:  72 | Input/Output: [[16 16 8 16] 8]
Test Case:  73 | Input/Output: [[54 54 -9 54] -9]
Test Case:  74 | Input/Output: [[55 55 70 55] 55]
Test Case:  75 | Input/Output: [[-79 -79 -79 -84] -84]
Test Case:  76 | Input/Output: [[68 68 -90 68] -90]
Test Case:  77 | Input/Output: [[42 42 -60 42] -60]
Test Case:  78 | Input/Output: [[-45 64 -45 -45] -45]
Test Case:  79 | Input/Output: [[58 -11 58 58] -11]
Test Case:  80 | Input/Output: [[-62 -62 -62 -62] -62]
Test Case:  81 | Input/Output: [[82 82 82 57] 57]
Test Case:  82 | Input/Output: [[44 44 44 63] 44]
Test Case:  83 | Input/Output: [[-43 -43 -43 -36] -43]
Test Case:  84 | Input/Output: [[-79 -19 -19 -19] -79]
Test Case:  85 | Input/Output: [[41 41 51 41] 41]
Test Case:  86 | Input/Output: [[-38 -38 -38 55] -38]
Test Case:  87 | Input/Output: [[99 78 99 99] 78]
Test Case:  88 | Input/Output: [[-94 -10 -10 -10] -94]
Test Case:  89 | Input/Output: [[7 89 7 7] 7]
Test Case:  90 | Input/Output: [[-73 -73 -73 38] -73]
Test Case:  91 | Input/Output: [[-58 -58 -58 -43] -58]
Test Case:  92 | Input/Output: [[-86 -86 -28 -86] -86]
Test Case:  93 | Input/Output: [[-11 61 -11 -11] -11]
Test Case:  94 | Input/Output: [[-41 -41 -41 8] -41]
Test Case:  95 | Input/Output: [[-95 -84 -95 -95] -95]
Test Case:  96 | Input/Output: [[-87 -14 -14 -14] -87]
Test Case:  97 | Input/Output: [[61 -80 61 61] -80]
Test Case:  98 | Input/Output: [[-100 53 53 53] -100]
Test Case:  99 | Input/Output: [[39 -61 39 39] -61]
Test Case: 100 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 101 | Input/Output: [(0 0 0 0) 0]
Test Case: 102 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 103 | Input/Output: [(17 17 17 17) 17]
Test Case: 104 | Input/Output: [(64 64 64 64) 64]
Test Case: 105 | Input/Output: [(18 18 18 18) 18]
Test Case: 106 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 107 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 108 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 109 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 110 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 111 | Input/Output: [(50 50 50 50) 50]
Test Case: 112 | Input/Output: [(86 86 86 86) 86]
Test Case: 113 | Input/Output: [(11 11 11 11) 11]
Test Case: 114 | Input/Output: [(31 31 31 31) 31]
Test Case: 115 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 116 | Input/Output: [(36 36 36 36) 36]
Test Case: 117 | Input/Output: [(86 86 86 86) 86]
Test Case: 118 | Input/Output: [(31 31 31 31) 31]
Test Case: 119 | Input/Output: [(86 86 86 86) 86]
Test Case: 120 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 121 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 122 | Input/Output: [(81 81 81 81) 81]
Test Case: 123 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 124 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 125 | Input/Output: [(68 68 68 68) 68]
Test Case: 126 | Input/Output: [(100 100 100 100) 100]
Test Case: 127 | Input/Output: [(2 2 2 2) 2]
Test Case: 128 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 129 | Input/Output: [(22 22 22 22) 22]
Test Case: 130 | Input/Output: [(42 42 42 42) 42]
Test Case: 131 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 132 | Input/Output: [(10 10 10 10) 10]
Test Case: 133 | Input/Output: [(33 33 33 33) 33]
Test Case: 134 | Input/Output: [(73 73 73 73) 73]
Test Case: 135 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 136 | Input/Output: [(84 84 84 84) 84]
Test Case: 137 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 138 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 139 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 140 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 141 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 142 | Input/Output: [(95 95 95 95) 95]
Test Case: 143 | Input/Output: [(95 95 95 95) 95]
Test Case: 144 | Input/Output: [(97 97 97 97) 97]
Test Case: 145 | Input/Output: [(17 17 17 17) 17]
Test Case: 146 | Input/Output: [(54 54 54 54) 54]
Test Case: 147 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 148 | Input/Output: [(77 77 77 77) 77]
Test Case: 149 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 150 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 151 | Input/Output: [(75 75 75 75) 75]
Test Case: 152 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 153 | Input/Output: [(29 29 29 29) 29]
Test Case: 154 | Input/Output: [(63 63 63 63) 63]
Test Case: 155 | Input/Output: [(67 67 67 67) 67]
Test Case: 156 | Input/Output: [(35 35 35 35) 35]
Test Case: 157 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 158 | Input/Output: [(15 15 15 15) 15]
Test Case: 159 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 160 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 161 | Input/Output: [(11 11 11 11) 11]
Test Case: 162 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 163 | Input/Output: [(80 80 80 80) 80]
Test Case: 164 | Input/Output: [(84 84 84 84) 84]
Test Case: 165 | Input/Output: [(99 99 99 99) 99]
Test Case: 166 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 167 | Input/Output: [(25 25 25 25) 25]
Test Case: 168 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 169 | Input/Output: [(94 94 94 94) 94]
Test Case: 170 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 171 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 172 | Input/Output: [(8 8 8 8) 8]
Test Case: 173 | Input/Output: [(74 74 74 74) 74]
Test Case: 174 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 175 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 176 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 177 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 178 | Input/Output: [(65 65 65 65) 65]
Test Case: 179 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 180 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 181 | Input/Output: [(2 2 2 2) 2]
Test Case: 182 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 183 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 184 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 185 | Input/Output: [(65 65 65 65) 65]
Test Case: 186 | Input/Output: [(80 80 80 80) 80]
Test Case: 187 | Input/Output: [(57 57 57 57) 57]
Test Case: 188 | Input/Output: [(30 30 30 30) 30]
Test Case: 189 | Input/Output: [(66 66 66 66) 66]
Test Case: 190 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 191 | Input/Output: [(9 9 9 9) 9]
Test Case: 192 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 193 | Input/Output: [(58 58 58 58) 58]
Test Case: 194 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 195 | Input/Output: [(88 88 88 88) 88]
Test Case: 196 | Input/Output: [(29 29 29 29) 29]
Test Case: 197 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 198 | Input/Output: [(72 72 72 72) 72]
Test Case: 199 | Input/Output: [(29 29 29 29) 29]
Test Case: 200 | Input/Output: [(31 52 81 63) 31]
Test Case: 201 | Input/Output: [(82 75 78 62) 62]
Test Case: 202 | Input/Output: [(89 25 86 69) 25]
Test Case: 203 | Input/Output: [(29 83 60 2) 2]
Test Case: 204 | Input/Output: [(70 3 56 32) 3]
Test Case: 205 | Input/Output: [(7 70 28 17) 7]
Test Case: 206 | Input/Output: [(7 7 95 71) 7]
Test Case: 207 | Input/Output: [(76 97 75 20) 20]
Test Case: 208 | Input/Output: [(43 58 90 90) 43]
Test Case: 209 | Input/Output: [(37 100 75 17) 17]
Test Case: 210 | Input/Output: [(85 78 4 97) 4]
Test Case: 211 | Input/Output: [(25 14 6 5) 5]
Test Case: 212 | Input/Output: [(31 73 83 89) 31]
Test Case: 213 | Input/Output: [(75 32 97 94) 32]
Test Case: 214 | Input/Output: [(68 42 33 98) 33]
Test Case: 215 | Input/Output: [(89 42 0 40) 0]
Test Case: 216 | Input/Output: [(2 75 4 31) 2]
Test Case: 217 | Input/Output: [(41 11 27 64) 11]
Test Case: 218 | Input/Output: [(58 70 63 50) 50]
Test Case: 219 | Input/Output: [(51 96 15 58) 15]
Test Case: 220 | Input/Output: [(41 94 81 6) 6]
Test Case: 221 | Input/Output: [(60 53 38 86) 38]
Test Case: 222 | Input/Output: [(1 81 9 4) 1]
Test Case: 223 | Input/Output: [(81 55 38 27) 27]
Test Case: 224 | Input/Output: [(72 15 69 76) 15]
Test Case: 225 | Input/Output: [(86 9 50 98) 9]
Test Case: 226 | Input/Output: [(44 54 12 8) 8]
Test Case: 227 | Input/Output: [(98 18 2 94) 2]
Test Case: 228 | Input/Output: [(51 3 69 91) 3]
Test Case: 229 | Input/Output: [(46 19 88 59) 19]
Test Case: 230 | Input/Output: [(44 35 54 36) 35]
Test Case: 231 | Input/Output: [(68 1 13 0) 0]
Test Case: 232 | Input/Output: [(5 60 28 39) 5]
Test Case: 233 | Input/Output: [(89 41 26 6) 6]
Test Case: 234 | Input/Output: [(45 26 22 51) 22]
Test Case: 235 | Input/Output: [(8 39 68 0) 0]
Test Case: 236 | Input/Output: [(13 91 53 13) 13]
Test Case: 237 | Input/Output: [(3 1 14 32) 1]
Test Case: 238 | Input/Output: [(67 15 50 72) 15]
Test Case: 239 | Input/Output: [(77 93 67 36) 36]
Test Case: 240 | Input/Output: [(89 1 21 80) 1]
Test Case: 241 | Input/Output: [(57 59 89 28) 28]
Test Case: 242 | Input/Output: [(30 18 33 46) 18]
Test Case: 243 | Input/Output: [(80 28 86 81) 28]
Test Case: 244 | Input/Output: [(8 15 95 24) 8]
Test Case: 245 | Input/Output: [(75 86 62 68) 62]
Test Case: 246 | Input/Output: [(73 38 85 85) 38]
Test Case: 247 | Input/Output: [(66 99 65 24) 24]
Test Case: 248 | Input/Output: [(82 83 74 57) 57]
Test Case: 249 | Input/Output: [(19 81 87 86) 19]
Test Case: 250 | Input/Output: [(20 23 79 81) 20]
Test Case: 251 | Input/Output: [(77 75 37 41) 37]
Test Case: 252 | Input/Output: [(21 99 42 58) 21]
Test Case: 253 | Input/Output: [(5 13 85 36) 5]
Test Case: 254 | Input/Output: [(88 44 40 93) 40]
Test Case: 255 | Input/Output: [(14 67 63 5) 5]
Test Case: 256 | Input/Output: [(56 77 20 85) 20]
Test Case: 257 | Input/Output: [(61 53 97 88) 53]
Test Case: 258 | Input/Output: [(20 18 6 36) 6]
Test Case: 259 | Input/Output: [(81 45 76 20) 20]
Test Case: 260 | Input/Output: [(54 52 32 47) 32]
Test Case: 261 | Input/Output: [(3 22 21 64) 3]
Test Case: 262 | Input/Output: [(85 45 20 82) 20]
Test Case: 263 | Input/Output: [(77 71 39 17) 17]
Test Case: 264 | Input/Output: [(99 64 42 64) 42]
Test Case: 265 | Input/Output: [(45 44 18 34) 18]
Test Case: 266 | Input/Output: [(28 39 87 57) 28]
Test Case: 267 | Input/Output: [(25 28 16 24) 16]
Test Case: 268 | Input/Output: [(29 17 76 81) 17]
Test Case: 269 | Input/Output: [(70 40 80 0) 0]
Test Case: 270 | Input/Output: [(34 28 7 87) 7]
Test Case: 271 | Input/Output: [(9 55 70 3) 3]
Test Case: 272 | Input/Output: [(75 36 90 87) 36]
Test Case: 273 | Input/Output: [(46 85 73 65) 46]
Test Case: 274 | Input/Output: [(44 5 84 65) 5]
Test Case: 275 | Input/Output: [(78 38 8 25) 8]
Test Case: 276 | Input/Output: [(39 7 55 36) 7]
Test Case: 277 | Input/Output: [(56 72 4 63) 4]
Test Case: 278 | Input/Output: [(29 29 94 19) 19]
Test Case: 279 | Input/Output: [(62 4 14 80) 4]
Test Case: 280 | Input/Output: [(66 51 19 67) 19]
Test Case: 281 | Input/Output: [(49 19 3 29) 3]
Test Case: 282 | Input/Output: [(43 45 57 57) 43]
Test Case: 283 | Input/Output: [(95 10 72 20) 10]
Test Case: 284 | Input/Output: [(79 85 30 4) 4]
Test Case: 285 | Input/Output: [(13 22 35 7) 7]
Test Case: 286 | Input/Output: [(58 79 50 63) 50]
Test Case: 287 | Input/Output: [(16 1 12 27) 1]
Test Case: 288 | Input/Output: [(87 4 79 84) 4]
Test Case: 289 | Input/Output: [(68 95 94 34) 34]
Test Case: 290 | Input/Output: [(24 98 11 94) 11]
Test Case: 291 | Input/Output: [(46 42 88 3) 3]
Test Case: 292 | Input/Output: [(84 40 36 23) 23]
Test Case: 293 | Input/Output: [(34 61 34 59) 34]
Test Case: 294 | Input/Output: [(51 79 10 7) 7]
Test Case: 295 | Input/Output: [(11 76 27 43) 11]
Test Case: 296 | Input/Output: [(80 81 11 73) 11]
Test Case: 297 | Input/Output: [(5 26 15 46) 5]
Test Case: 298 | Input/Output: [(89 56 30 76) 30]
Test Case: 299 | Input/Output: [(39 79 77 99) 39]
Test Case: 300 | Input/Output: [(26 15 14 41) 14]
Test Case: 301 | Input/Output: [(11 89 60 25) 11]
Test Case: 302 | Input/Output: [(33 59 42 93) 33]
Test Case: 303 | Input/Output: [(89 57 64 88) 57]
Test Case: 304 | Input/Output: [(98 42 62 52) 42]
Test Case: 305 | Input/Output: [(45 7 0 70) 0]
Test Case: 306 | Input/Output: [(74 2 88 92) 2]
Test Case: 307 | Input/Output: [(92 96 85 43) 43]
Test Case: 308 | Input/Output: [(64 25 72 53) 25]
Test Case: 309 | Input/Output: [(3 99 14 72) 3]
Test Case: 310 | Input/Output: [(48 49 84 55) 48]
Test Case: 311 | Input/Output: [(97 79 79 69) 69]
Test Case: 312 | Input/Output: [(86 34 0 97) 0]
Test Case: 313 | Input/Output: [(81 26 60 95) 26]
Test Case: 314 | Input/Output: [(11 95 27 79) 11]
Test Case: 315 | Input/Output: [(86 24 35 12) 12]
Test Case: 316 | Input/Output: [(88 29 6 19) 6]
Test Case: 317 | Input/Output: [(71 39 8 10) 8]
Test Case: 318 | Input/Output: [(60 69 66 58) 58]
Test Case: 319 | Input/Output: [(73 61 94 22) 22]
Test Case: 320 | Input/Output: [(69 4 62 3) 3]
Test Case: 321 | Input/Output: [(89 80 54 82) 54]
Test Case: 322 | Input/Output: [(69 4 93 53) 4]
Test Case: 323 | Input/Output: [(29 86 11 67) 11]
Test Case: 324 | Input/Output: [(96 84 21 91) 21]
Test Case: 325 | Input/Output: [(95 84 30 43) 30]
Test Case: 326 | Input/Output: [(89 77 26 52) 26]
Test Case: 327 | Input/Output: [(100 93 66 89) 66]
Test Case: 328 | Input/Output: [(84 19 76 34) 19]
Test Case: 329 | Input/Output: [(90 50 56 6) 6]
Test Case: 330 | Input/Output: [(27 46 82 9) 9]
Test Case: 331 | Input/Output: [(11 12 55 16) 11]
Test Case: 332 | Input/Output: [(19 41 79 4) 4]
Test Case: 333 | Input/Output: [(8 83 35 54) 8]
Test Case: 334 | Input/Output: [(64 65 2 49) 2]
Test Case: 335 | Input/Output: [(98 71 84 80) 71]
Test Case: 336 | Input/Output: [(36 34 71 34) 34]
Test Case: 337 | Input/Output: [(1 60 18 96) 1]
Test Case: 338 | Input/Output: [(89 18 94 3) 3]
Test Case: 339 | Input/Output: [(88 19 72 7) 7]
Test Case: 340 | Input/Output: [(58 71 89 92) 58]
Test Case: 341 | Input/Output: [(48 79 72 4) 4]
Test Case: 342 | Input/Output: [(21 27 62 55) 21]
Test Case: 343 | Input/Output: [(56 100 98 36) 36]
Test Case: 344 | Input/Output: [(77 5 8 19) 5]
Test Case: 345 | Input/Output: [(30 33 70 12) 12]
Test Case: 346 | Input/Output: [(5 8 60 40) 5]
Test Case: 347 | Input/Output: [(68 95 29 10) 10]
Test Case: 348 | Input/Output: [(24 74 78 30) 24]
Test Case: 349 | Input/Output: [(73 71 48 96) 48]
Test Case: 350 | Input/Output: [(41 32 100 98) 32]
Test Case: 351 | Input/Output: [(86 2 54 42) 2]
Test Case: 352 | Input/Output: [(86 96 42 34) 34]
Test Case: 353 | Input/Output: [(21 68 74 7) 7]
Test Case: 354 | Input/Output: [(71 57 68 98) 57]
Test Case: 355 | Input/Output: [(92 68 51 55) 51]
Test Case: 356 | Input/Output: [(68 90 34 13) 13]
Test Case: 357 | Input/Output: [(24 86 82 96) 24]
Test Case: 358 | Input/Output: [(96 41 48 35) 35]
Test Case: 359 | Input/Output: [(0 41 62 25) 0]
Test Case: 360 | Input/Output: [(99 65 26 9) 9]
Test Case: 361 | Input/Output: [(63 21 98 92) 21]
Test Case: 362 | Input/Output: [(35 21 3 87) 3]
Test Case: 363 | Input/Output: [(74 82 15 94) 15]
Test Case: 364 | Input/Output: [(100 85 1 48) 1]
Test Case: 365 | Input/Output: [(100 25 75 78) 25]
Test Case: 366 | Input/Output: [(8 69 96 90) 8]
Test Case: 367 | Input/Output: [(71 12 18 79) 12]
Test Case: 368 | Input/Output: [(25 13 54 93) 13]
Test Case: 369 | Input/Output: [(40 31 24 5) 5]
Test Case: 370 | Input/Output: [(26 40 82 68) 26]
Test Case: 371 | Input/Output: [(59 38 69 86) 38]
Test Case: 372 | Input/Output: [(95 27 65 100) 27]
Test Case: 373 | Input/Output: [(66 5 81 59) 5]
Test Case: 374 | Input/Output: [(36 95 36 82) 36]
Test Case: 375 | Input/Output: [(53 66 15 51) 15]
Test Case: 376 | Input/Output: [(43 40 73 8) 8]
Test Case: 377 | Input/Output: [(39 26 88 57) 26]
Test Case: 378 | Input/Output: [(85 24 17 60) 17]
Test Case: 379 | Input/Output: [(74 46 94 36) 36]
Test Case: 380 | Input/Output: [(38 69 89 69) 38]
Test Case: 381 | Input/Output: [(90 86 92 10) 10]
Test Case: 382 | Input/Output: [(36 87 23 15) 15]
Test Case: 383 | Input/Output: [(93 2 23 27) 2]
Test Case: 384 | Input/Output: [(88 43 18 72) 18]
Test Case: 385 | Input/Output: [(64 87 0 69) 0]
Test Case: 386 | Input/Output: [(48 28 16 77) 16]
Test Case: 387 | Input/Output: [(30 5 90 82) 5]
Test Case: 388 | Input/Output: [(2 43 69 39) 2]
Test Case: 389 | Input/Output: [(34 19 96 67) 19]
Test Case: 390 | Input/Output: [(28 48 42 25) 25]
Test Case: 391 | Input/Output: [(32 65 53 9) 9]
Test Case: 392 | Input/Output: [(58 76 80 71) 58]
Test Case: 393 | Input/Output: [(21 72 49 9) 9]
Test Case: 394 | Input/Output: [(24 5 30 28) 5]
Test Case: 395 | Input/Output: [(27 62 11 70) 11]
Test Case: 396 | Input/Output: [(99 66 93 32) 32]
Test Case: 397 | Input/Output: [(15 66 60 100) 15]
Test Case: 398 | Input/Output: [(65 74 13 77) 13]
Test Case: 399 | Input/Output: [(32 94 58 23) 23]
Test Case: 400 | Input/Output: [(99 66 95 -29) -29]
Test Case: 401 | Input/Output: [(-86 9 -7 -55) -86]
Test Case: 402 | Input/Output: [(-47 83 21 12) -47]
Test Case: 403 | Input/Output: [(75 -79 -37 -21) -79]
Test Case: 404 | Input/Output: [(55 32 97 -41) -41]
Test Case: 405 | Input/Output: [(-86 -80 50 60) -86]
Test Case: 406 | Input/Output: [(-50 -55 86 -53) -55]
Test Case: 407 | Input/Output: [(39 75 27 68) 27]
Test Case: 408 | Input/Output: [(40 -73 -2 64) -73]
Test Case: 409 | Input/Output: [(93 60 -32 -92) -92]
Test Case: 410 | Input/Output: [(37 54 53 -41) -41]
Test Case: 411 | Input/Output: [(44 -16 79 -3) -16]
Test Case: 412 | Input/Output: [(44 -72 65 21) -72]
Test Case: 413 | Input/Output: [(-81 -73 -79 64) -81]
Test Case: 414 | Input/Output: [(-24 7 -21 -93) -93]
Test Case: 415 | Input/Output: [(19 -5 97 -72) -72]
Test Case: 416 | Input/Output: [(71 -40 -64 -76) -76]
Test Case: 417 | Input/Output: [(7 16 24 7) 7]
Test Case: 418 | Input/Output: [(74 56 69 -26) -26]
Test Case: 419 | Input/Output: [(-73 82 66 59) -73]
Test Case: 420 | Input/Output: [(-60 55 19 -44) -60]
Test Case: 421 | Input/Output: [(-94 0 16 61) -94]
Test Case: 422 | Input/Output: [(-29 -47 38 -38) -47]
Test Case: 423 | Input/Output: [(0 7 39 -2) -2]
Test Case: 424 | Input/Output: [(-36 40 -84 53) -84]
Test Case: 425 | Input/Output: [(-87 -50 87 -57) -87]
Test Case: 426 | Input/Output: [(-10 89 44 -22) -22]
Test Case: 427 | Input/Output: [(-64 -92 68 18) -92]
Test Case: 428 | Input/Output: [(68 -78 -27 67) -78]
Test Case: 429 | Input/Output: [(41 12 3 -19) -19]
Test Case: 430 | Input/Output: [(-94 -20 78 -19) -94]
Test Case: 431 | Input/Output: [(19 -12 1 70) -12]
Test Case: 432 | Input/Output: [(-53 -3 -97 -94) -97]
Test Case: 433 | Input/Output: [(11 5 13 10) 5]
Test Case: 434 | Input/Output: [(-9 -34 35 -37) -37]
Test Case: 435 | Input/Output: [(-97 -87 3 -88) -97]
Test Case: 436 | Input/Output: [(-85 -9 17 26) -85]
Test Case: 437 | Input/Output: [(48 -18 -7 -5) -18]
Test Case: 438 | Input/Output: [(-94 -47 -57 -24) -94]
Test Case: 439 | Input/Output: [(94 18 34 -94) -94]
Test Case: 440 | Input/Output: [(-95 -21 -86 -45) -95]
Test Case: 441 | Input/Output: [(53 63 -46 -1) -46]
Test Case: 442 | Input/Output: [(93 -79 -46 99) -79]
Test Case: 443 | Input/Output: [(-88 -55 19 -37) -88]
Test Case: 444 | Input/Output: [(-58 -59 90 -12) -59]
Test Case: 445 | Input/Output: [(66 -62 -2 -86) -86]
Test Case: 446 | Input/Output: [(-82 14 -12 37) -82]
Test Case: 447 | Input/Output: [(-59 -65 -51 -98) -98]
Test Case: 448 | Input/Output: [(-49 13 -97 24) -97]
Test Case: 449 | Input/Output: [(-7 -32 -15 -39) -39]
Test Case: 450 | Input/Output: [(-97 -21 62 54) -97]
Test Case: 451 | Input/Output: [(16 90 37 -29) -29]
Test Case: 452 | Input/Output: [(37 -67 70 56) -67]
Test Case: 453 | Input/Output: [(-56 -18 83 61) -56]
Test Case: 454 | Input/Output: [(48 -27 85 54) -27]
Test Case: 455 | Input/Output: [(-35 25 47 28) -35]
Test Case: 456 | Input/Output: [(91 72 -76 -39) -76]
Test Case: 457 | Input/Output: [(-33 -15 48 89) -33]
Test Case: 458 | Input/Output: [(-63 -11 -75 21) -75]
Test Case: 459 | Input/Output: [(26 69 96 60) 26]
Test Case: 460 | Input/Output: [(96 -51 -31 -77) -77]
Test Case: 461 | Input/Output: [(-31 84 -97 -83) -97]
Test Case: 462 | Input/Output: [(82 -8 -61 50) -61]
Test Case: 463 | Input/Output: [(55 69 -30 -9) -30]
Test Case: 464 | Input/Output: [(-72 49 85 65) -72]
Test Case: 465 | Input/Output: [(-54 -37 69 -85) -85]
Test Case: 466 | Input/Output: [(-23 -95 4 -27) -95]
Test Case: 467 | Input/Output: [(20 -48 14 14) -48]
Test Case: 468 | Input/Output: [(-37 -19 86 -82) -82]
Test Case: 469 | Input/Output: [(-15 -99 64 36) -99]
Test Case: 470 | Input/Output: [(-43 -65 79 83) -65]
Test Case: 471 | Input/Output: [(-20 78 15 2) -20]
Test Case: 472 | Input/Output: [(-41 27 36 52) -41]
Test Case: 473 | Input/Output: [(75 61 -27 70) -27]
Test Case: 474 | Input/Output: [(-23 58 -90 28) -90]
Test Case: 475 | Input/Output: [(-14 -82 -78 86) -82]
Test Case: 476 | Input/Output: [(-49 39 -23 -51) -51]
Test Case: 477 | Input/Output: [(-15 18 -85 -89) -89]
Test Case: 478 | Input/Output: [(2 98 42 -70) -70]
Test Case: 479 | Input/Output: [(94 -81 -70 -90) -90]
Test Case: 480 | Input/Output: [(-76 93 -85 -19) -85]
Test Case: 481 | Input/Output: [(-98 -78 9 15) -98]
Test Case: 482 | Input/Output: [(-12 26 76 -67) -67]
Test Case: 483 | Input/Output: [(7 66 -39 95) -39]
Test Case: 484 | Input/Output: [(44 -80 -33 -100) -100]
Test Case: 485 | Input/Output: [(-94 -18 4 -100) -100]
Test Case: 486 | Input/Output: [(74 7 -46 17) -46]
Test Case: 487 | Input/Output: [(39 -14 8 -30) -30]
Test Case: 488 | Input/Output: [(49 39 85 34) 34]
Test Case: 489 | Input/Output: [(64 -13 -18 -98) -98]
Test Case: 490 | Input/Output: [(0 -50 -11 -11) -50]
Test Case: 491 | Input/Output: [(-71 14 -13 -39) -71]
Test Case: 492 | Input/Output: [(22 67 55 65) 22]
Test Case: 493 | Input/Output: [(11 -67 97 5) -67]
Test Case: 494 | Input/Output: [(-21 -79 7 95) -79]
Test Case: 495 | Input/Output: [(46 -48 -6 95) -48]
Test Case: 496 | Input/Output: [(-80 -79 8 -85) -85]
Test Case: 497 | Input/Output: [(36 -9 -17 -94) -94]
Test Case: 498 | Input/Output: [(-30 -81 -98 -98) -98]
Test Case: 499 | Input/Output: [(-55 85 -81 -89) -89]
Test Case: 500 | Input/Output: [(55 42 -51 3) -51]
Test Case: 501 | Input/Output: [(-26 94 74 -57) -57]
Test Case: 502 | Input/Output: [(25 74 -85 -5) -85]
Test Case: 503 | Input/Output: [(34 41 -57 -29) -57]
Test Case: 504 | Input/Output: [(-11 -55 -42 22) -55]
Test Case: 505 | Input/Output: [(66 -49 49 47) -49]
Test Case: 506 | Input/Output: [(-22 -100 -14 -33) -100]
Test Case: 507 | Input/Output: [(-16 -100 70 30) -100]
Test Case: 508 | Input/Output: [(67 73 43 39) 39]
Test Case: 509 | Input/Output: [(-74 -66 10 -72) -74]
Test Case: 510 | Input/Output: [(-94 -67 12 -79) -94]
Test Case: 511 | Input/Output: [(-48 2 82 92) -48]
Test Case: 512 | Input/Output: [(77 -28 70 -31) -31]
Test Case: 513 | Input/Output: [(65 3 26 -70) -70]
Test Case: 514 | Input/Output: [(88 12 81 -98) -98]
Test Case: 515 | Input/Output: [(56 -46 -57 82) -57]
Test Case: 516 | Input/Output: [(34 59 -82 0) -82]
Test Case: 517 | Input/Output: [(-50 13 2 -35) -50]
Test Case: 518 | Input/Output: [(41 91 36 -70) -70]
Test Case: 519 | Input/Output: [(65 -63 -23 -73) -73]
Test Case: 520 | Input/Output: [(58 -13 48 -64) -64]
Test Case: 521 | Input/Output: [(-90 -86 55 -49) -90]
Test Case: 522 | Input/Output: [(78 -62 32 1) -62]
Test Case: 523 | Input/Output: [(-74 -59 87 -33) -74]
Test Case: 524 | Input/Output: [(100 -49 -99 -9) -99]
Test Case: 525 | Input/Output: [(-98 -57 72 71) -98]
Test Case: 526 | Input/Output: [(-14 33 41 75) -14]
Test Case: 527 | Input/Output: [(91 73 -22 -19) -22]
Test Case: 528 | Input/Output: [(35 -18 -1 73) -18]
Test Case: 529 | Input/Output: [(-19 -45 -19 -64) -64]
Test Case: 530 | Input/Output: [(93 95 -80 -26) -80]
Test Case: 531 | Input/Output: [(-99 80 82 -3) -99]
Test Case: 532 | Input/Output: [(98 -17 64 -4) -17]
Test Case: 533 | Input/Output: [(-62 -42 72 -53) -62]
Test Case: 534 | Input/Output: [(37 38 66 63) 37]
Test Case: 535 | Input/Output: [(23 -78 -99 5) -99]
Test Case: 536 | Input/Output: [(-11 69 -82 -77) -82]
Test Case: 537 | Input/Output: [(22 78 -51 -39) -51]
Test Case: 538 | Input/Output: [(37 -85 -33 -69) -85]
Test Case: 539 | Input/Output: [(-50 -34 9 -25) -50]
Test Case: 540 | Input/Output: [(-4 52 -80 -13) -80]
Test Case: 541 | Input/Output: [(-62 -90 -64 67) -90]
Test Case: 542 | Input/Output: [(-87 84 58 9) -87]
Test Case: 543 | Input/Output: [(88 -46 -100 98) -100]
Test Case: 544 | Input/Output: [(24 68 73 13) 13]
Test Case: 545 | Input/Output: [(22 25 -95 86) -95]
Test Case: 546 | Input/Output: [(-43 99 76 -31) -43]
Test Case: 547 | Input/Output: [(-54 56 -40 60) -54]
Test Case: 548 | Input/Output: [(-35 29 -98 -83) -98]
Test Case: 549 | Input/Output: [(-37 10 29 12) -37]
Test Case: 550 | Input/Output: [(23 61 52 42) 23]
Test Case: 551 | Input/Output: [(-91 -26 -47 -24) -91]
Test Case: 552 | Input/Output: [(16 44 -68 -81) -81]
Test Case: 553 | Input/Output: [(-8 -76 -30 -35) -76]
Test Case: 554 | Input/Output: [(66 66 16 -76) -76]
Test Case: 555 | Input/Output: [(-63 40 57 89) -63]
Test Case: 556 | Input/Output: [(74 -81 80 -70) -81]
Test Case: 557 | Input/Output: [(38 37 -97 -34) -97]
Test Case: 558 | Input/Output: [(-25 -77 92 -56) -77]
Test Case: 559 | Input/Output: [(-89 -96 -78 -71) -96]
Test Case: 560 | Input/Output: [(94 46 50 -22) -22]
Test Case: 561 | Input/Output: [(19 -8 76 -44) -44]
Test Case: 562 | Input/Output: [(-53 -75 -67 15) -75]
Test Case: 563 | Input/Output: [(-29 31 -64 -27) -64]
Test Case: 564 | Input/Output: [(8 26 41 75) 8]
Test Case: 565 | Input/Output: [(-41 69 -86 15) -86]
Test Case: 566 | Input/Output: [(96 64 20 38) 20]
Test Case: 567 | Input/Output: [(49 7 -32 -42) -42]
Test Case: 568 | Input/Output: [(-52 -36 -3 85) -52]
Test Case: 569 | Input/Output: [(-41 1 17 52) -41]
Test Case: 570 | Input/Output: [(14 53 -82 -97) -97]
Test Case: 571 | Input/Output: [(-11 -12 97 34) -12]
Test Case: 572 | Input/Output: [(98 20 -67 -26) -67]
Test Case: 573 | Input/Output: [(-70 -7 50 -22) -70]
Test Case: 574 | Input/Output: [(97 -76 -51 97) -76]
Test Case: 575 | Input/Output: [(32 25 48 68) 25]
Test Case: 576 | Input/Output: [(53 47 -57 -74) -74]
Test Case: 577 | Input/Output: [(-4 -79 -64 -80) -80]
Test Case: 578 | Input/Output: [(43 1 -29 -89) -89]
Test Case: 579 | Input/Output: [(-32 38 12 -31) -32]
Test Case: 580 | Input/Output: [(13 -55 97 17) -55]
Test Case: 581 | Input/Output: [(89 -52 -76 38) -76]
Test Case: 582 | Input/Output: [(8 -78 38 -75) -78]
Test Case: 583 | Input/Output: [(80 94 -6 73) -6]
Test Case: 584 | Input/Output: [(-95 48 -96 -65) -96]
Test Case: 585 | Input/Output: [(75 9 -80 -26) -80]
Test Case: 586 | Input/Output: [(73 13 -38 83) -38]
Test Case: 587 | Input/Output: [(-53 42 -12 -77) -77]
Test Case: 588 | Input/Output: [(-91 36 61 54) -91]
Test Case: 589 | Input/Output: [(-89 32 -63 -95) -95]
Test Case: 590 | Input/Output: [(98 -28 -6 -100) -100]
Test Case: 591 | Input/Output: [(39 34 -92 81) -92]
Test Case: 592 | Input/Output: [(13 43 86 56) 13]
Test Case: 593 | Input/Output: [(-42 -48 -35 -18) -48]
Test Case: 594 | Input/Output: [(-100 41 -38 -28) -100]
Test Case: 595 | Input/Output: [(-41 -91 -24 -79) -91]
Test Case: 596 | Input/Output: [(33 -20 -17 -89) -89]
Test Case: 597 | Input/Output: [(39 -62 -86 -80) -86]
Test Case: 598 | Input/Output: [(-2 40 73 96) -2]
Test Case: 599 | Input/Output: [(-10 -56 44 49) -56]
Test Case: 600 | Input/Output: [(75 63 35 73) 35]
Test Case: 601 | Input/Output: [(-33 10 43 -66) -66]
Test Case: 602 | Input/Output: [(-43 40 -77 -45) -77]
Test Case: 603 | Input/Output: [(-68 51 -64 -1) -68]
Test Case: 604 | Input/Output: [(-31 -80 -23 -22) -80]
Test Case: 605 | Input/Output: [(71 42 84 82) 42]
Test Case: 606 | Input/Output: [(89 -32 -61 -19) -61]
Test Case: 607 | Input/Output: [(-27 10 81 80) -27]
Test Case: 608 | Input/Output: [(-15 27 -36 23) -36]
Test Case: 609 | Input/Output: [(-37 -51 30 71) -51]
Test Case: 610 | Input/Output: [(50 -53 -1 -92) -92]
Test Case: 611 | Input/Output: [(57 -52 -27 -96) -96]
Test Case: 612 | Input/Output: [(70 63 90 -15) -15]
Test Case: 613 | Input/Output: [(-21 85 70 -35) -35]
Test Case: 614 | Input/Output: [(0 -44 64 -58) -58]
Test Case: 615 | Input/Output: [(-88 20 39 -98) -98]
Test Case: 616 | Input/Output: [(38 -75 6 -41) -75]
Test Case: 617 | Input/Output: [(-51 -1 56 -9) -51]
Test Case: 618 | Input/Output: [(-28 67 -16 -18) -28]
Test Case: 619 | Input/Output: [(-12 92 22 -33) -33]
Test Case: 620 | Input/Output: [(-86 18 57 -29) -86]
Test Case: 621 | Input/Output: [(35 -1 -75 27) -75]
Test Case: 622 | Input/Output: [(-97 -100 33 9) -100]
Test Case: 623 | Input/Output: [(93 -22 24 -85) -85]
Test Case: 624 | Input/Output: [(-72 44 69 -99) -99]
Test Case: 625 | Input/Output: [(-82 66 -95 -45) -95]
Test Case: 626 | Input/Output: [(-79 -99 92 -94) -99]
Test Case: 627 | Input/Output: [(-75 -14 -75 -87) -87]
Test Case: 628 | Input/Output: [(19 26 85 -78) -78]
Test Case: 629 | Input/Output: [(-85 -39 -16 5) -85]
Test Case: 630 | Input/Output: [(35 -57 55 -8) -57]
Test Case: 631 | Input/Output: [(40 97 -17 14) -17]
Test Case: 632 | Input/Output: [(40 20 -99 -38) -99]
Test Case: 633 | Input/Output: [(28 75 0 -26) -26]
Test Case: 634 | Input/Output: [(24 -1 -69 -55) -69]
Test Case: 635 | Input/Output: [(38 -23 93 -39) -39]
Test Case: 636 | Input/Output: [(29 69 -50 67) -50]
Test Case: 637 | Input/Output: [(-58 -47 -87 -75) -87]
Test Case: 638 | Input/Output: [(41 -27 -34 -50) -50]
Test Case: 639 | Input/Output: [(-67 69 -53 -66) -67]
Test Case: 640 | Input/Output: [(15 29 45 53) 15]
Test Case: 641 | Input/Output: [(26 -85 -3 4) -85]
Test Case: 642 | Input/Output: [(-64 -63 -9 -14) -64]
Test Case: 643 | Input/Output: [(-72 34 59 56) -72]
Test Case: 644 | Input/Output: [(-12 -8 -26 67) -26]
Test Case: 645 | Input/Output: [(-34 -33 -18 60) -34]
Test Case: 646 | Input/Output: [(-81 -23 74 89) -81]
Test Case: 647 | Input/Output: [(-47 -71 -42 -64) -71]
Test Case: 648 | Input/Output: [(-98 -50 75 78) -98]
Test Case: 649 | Input/Output: [(-72 80 35 -62) -72]
Test Case: 650 | Input/Output: [(-100 1 -46 -93) -100]
Test Case: 651 | Input/Output: [(-95 79 -4 96) -95]
Test Case: 652 | Input/Output: [(-80 -83 6 -20) -83]
Test Case: 653 | Input/Output: [(7 46 -55 -49) -55]
Test Case: 654 | Input/Output: [(68 72 -100 50) -100]
Test Case: 655 | Input/Output: [(2 -39 70 -21) -39]
Test Case: 656 | Input/Output: [(36 27 48 -49) -49]
Test Case: 657 | Input/Output: [(51 73 -10 48) -10]
Test Case: 658 | Input/Output: [(20 86 91 39) 20]
Test Case: 659 | Input/Output: [(100 34 -58 -58) -58]
Test Case: 660 | Input/Output: [(-81 92 -64 31) -81]
Test Case: 661 | Input/Output: [(-63 57 7 -74) -74]
Test Case: 662 | Input/Output: [(-13 39 63 5) -13]
Test Case: 663 | Input/Output: [(69 -94 79 87) -94]
Test Case: 664 | Input/Output: [(27 39 29 50) 27]
Test Case: 665 | Input/Output: [(20 -77 73 13) -77]
Test Case: 666 | Input/Output: [(-89 -61 30 -62) -89]
Test Case: 667 | Input/Output: [(-89 4 -8 89) -89]
Test Case: 668 | Input/Output: [(-1 27 -99 -3) -99]
Test Case: 669 | Input/Output: [(-54 -52 37 55) -54]
Test Case: 670 | Input/Output: [(-24 -59 -3 -98) -98]
Test Case: 671 | Input/Output: [(29 -34 58 -69) -69]
Test Case: 672 | Input/Output: [(34 -87 -69 -52) -87]
Test Case: 673 | Input/Output: [(-38 87 10 -74) -74]
Test Case: 674 | Input/Output: [(54 7 21 54) 7]
Test Case: 675 | Input/Output: [(27 76 95 -93) -93]
Test Case: 676 | Input/Output: [(69 70 -1 94) -1]
Test Case: 677 | Input/Output: [(-91 78 43 48) -91]
Test Case: 678 | Input/Output: [(78 -22 -92 55) -92]
Test Case: 679 | Input/Output: [(-31 -30 -2 28) -31]
Test Case: 680 | Input/Output: [(-43 -27 -60 61) -60]
Test Case: 681 | Input/Output: [(10 70 1 94) 1]
Test Case: 682 | Input/Output: [(46 -76 -63 80) -76]
Test Case: 683 | Input/Output: [(-98 41 -3 -50) -98]
Test Case: 684 | Input/Output: [(55 -87 70 -61) -87]
Test Case: 685 | Input/Output: [(-40 -74 -87 46) -87]
Test Case: 686 | Input/Output: [(2 69 -100 100) -100]
Test Case: 687 | Input/Output: [(-80 -3 -23 9) -80]
Test Case: 688 | Input/Output: [(-81 61 -43 97) -81]
Test Case: 689 | Input/Output: [(-69 85 -28 36) -69]
Test Case: 690 | Input/Output: [(-98 -47 18 91) -98]
Test Case: 691 | Input/Output: [(-84 55 -44 31) -84]
Test Case: 692 | Input/Output: [(75 20 -85 68) -85]
Test Case: 693 | Input/Output: [(32 2 -50 6) -50]
Test Case: 694 | Input/Output: [(64 0 61 -18) -18]
Test Case: 695 | Input/Output: [(45 -79 34 -74) -79]
Test Case: 696 | Input/Output: [(-74 26 58 71) -74]
Test Case: 697 | Input/Output: [(64 -70 93 -87) -87]
Test Case: 698 | Input/Output: [(-30 -65 48 47) -65]
Test Case: 699 | Input/Output: [(99 34 -9 -26) -26]
Test Case: 700 | Input/Output: [(-72 99 94 -15) -72]
Test Case: 701 | Input/Output: [(-70 99 24 -57) -70]
Test Case: 702 | Input/Output: [(-89 26 71 -19) -89]
Test Case: 703 | Input/Output: [(-3 13 1 87) -3]
Test Case: 704 | Input/Output: [(81 -92 -86 -44) -92]
Test Case: 705 | Input/Output: [(-78 -26 -9 -9) -78]
Test Case: 706 | Input/Output: [(7 23 90 36) 7]
Test Case: 707 | Input/Output: [(-36 -68 76 -88) -88]
Test Case: 708 | Input/Output: [(45 61 34 -31) -31]
Test Case: 709 | Input/Output: [(49 41 90 -79) -79]
Test Case: 710 | Input/Output: [(-34 45 44 -63) -63]
Test Case: 711 | Input/Output: [(52 7 -61 -5) -61]
Test Case: 712 | Input/Output: [(-36 -96 -23 -89) -96]
Test Case: 713 | Input/Output: [(-53 -72 69 -45) -72]
Test Case: 714 | Input/Output: [(-63 66 -28 25) -63]
Test Case: 715 | Input/Output: [(-74 34 4 -85) -85]
Test Case: 716 | Input/Output: [(55 94 83 -45) -45]
Test Case: 717 | Input/Output: [(-99 1 -80 45) -99]
Test Case: 718 | Input/Output: [(4 70 8 75) 4]
Test Case: 719 | Input/Output: [(-62 72 95 100) -62]
Test Case: 720 | Input/Output: [(-97 -79 -57 48) -97]
Test Case: 721 | Input/Output: [(5 -61 -50 7) -61]
Test Case: 722 | Input/Output: [(-34 39 73 65) -34]
Test Case: 723 | Input/Output: [(-53 -47 67 50) -53]
Test Case: 724 | Input/Output: [(-56 86 62 2) -56]
Test Case: 725 | Input/Output: [(-4 -89 -32 20) -89]
Test Case: 726 | Input/Output: [(-40 -34 -6 -49) -49]
Test Case: 727 | Input/Output: [(91 68 33 -57) -57]
Test Case: 728 | Input/Output: [(29 -29 74 -68) -68]
Test Case: 729 | Input/Output: [(35 -64 -87 9) -87]
Test Case: 730 | Input/Output: [(-44 52 -34 -81) -81]
Test Case: 731 | Input/Output: [(77 51 27 15) 15]
Test Case: 732 | Input/Output: [(67 54 94 57) 54]
Test Case: 733 | Input/Output: [(-7 12 -98 64) -98]
Test Case: 734 | Input/Output: [(65 77 17 70) 17]
Test Case: 735 | Input/Output: [(-57 44 53 29) -57]
Test Case: 736 | Input/Output: [(78 -13 -82 -69) -82]
Test Case: 737 | Input/Output: [(86 39 -98 -34) -98]
Test Case: 738 | Input/Output: [(21 15 -87 37) -87]
Test Case: 739 | Input/Output: [(-3 12 13 30) -3]
Test Case: 740 | Input/Output: [(54 88 -13 -77) -77]
Test Case: 741 | Input/Output: [(-5 30 52 21) -5]
Test Case: 742 | Input/Output: [(-20 69 2 -35) -35]
Test Case: 743 | Input/Output: [(77 65 41 -22) -22]
Test Case: 744 | Input/Output: [(68 -76 -4 -87) -87]
Test Case: 745 | Input/Output: [(6 -69 54 -4) -69]
Test Case: 746 | Input/Output: [(60 -4 -52 -13) -52]
Test Case: 747 | Input/Output: [(17 -80 -62 -29) -80]
Test Case: 748 | Input/Output: [(23 14 -64 -49) -64]
Test Case: 749 | Input/Output: [(-9 -35 93 34) -35]
Test Case: 750 | Input/Output: [(47 58 30 43) 30]
Test Case: 751 | Input/Output: [(-30 -61 30 39) -61]
Test Case: 752 | Input/Output: [(6 68 59 20) 6]
Test Case: 753 | Input/Output: [(72 95 -79 80) -79]
Test Case: 754 | Input/Output: [(6 -31 42 -1) -31]
Test Case: 755 | Input/Output: [(48 28 -81 -41) -81]
Test Case: 756 | Input/Output: [(-16 21 29 17) -16]
Test Case: 757 | Input/Output: [(-52 71 33 -61) -61]
Test Case: 758 | Input/Output: [(-98 3 85 9) -98]
Test Case: 759 | Input/Output: [(15 30 1 92) 1]
Test Case: 760 | Input/Output: [(85 -71 -46 -39) -71]
Test Case: 761 | Input/Output: [(60 35 -95 42) -95]
Test Case: 762 | Input/Output: [(64 38 43 100) 38]
Test Case: 763 | Input/Output: [(64 -80 -67 70) -80]
Test Case: 764 | Input/Output: [(0 -27 77 84) -27]
Test Case: 765 | Input/Output: [(62 81 -46 100) -46]
Test Case: 766 | Input/Output: [(5 62 97 10) 5]
Test Case: 767 | Input/Output: [(92 -84 51 -44) -84]
Test Case: 768 | Input/Output: [(9 70 -92 33) -92]
Test Case: 769 | Input/Output: [(30 2 20 23) 2]
Test Case: 770 | Input/Output: [(-48 -32 -43 -72) -72]
Test Case: 771 | Input/Output: [(83 0 -34 21) -34]
Test Case: 772 | Input/Output: [(-63 -75 74 -81) -81]
Test Case: 773 | Input/Output: [(-50 35 39 -25) -50]
Test Case: 774 | Input/Output: [(49 -96 -94 84) -96]
Test Case: 775 | Input/Output: [(56 28 -4 71) -4]
Test Case: 776 | Input/Output: [(-72 53 -30 -57) -72]
Test Case: 777 | Input/Output: [(12 -91 38 -55) -91]
Test Case: 778 | Input/Output: [(-19 -31 -30 -5) -31]
Test Case: 779 | Input/Output: [(-2 -3 -68 96) -68]
Test Case: 780 | Input/Output: [(-47 53 53 59) -47]
Test Case: 781 | Input/Output: [(-83 -11 -20 17) -83]
Test Case: 782 | Input/Output: [(92 -9 -89 -9) -89]
Test Case: 783 | Input/Output: [(83 11 -94 -75) -94]
Test Case: 784 | Input/Output: [(-9 -1 -62 -32) -62]
Test Case: 785 | Input/Output: [(-24 -62 -34 13) -62]
Test Case: 786 | Input/Output: [(88 13 -84 -90) -90]
Test Case: 787 | Input/Output: [(97 92 55 -32) -32]
Test Case: 788 | Input/Output: [(71 78 20 -49) -49]
Test Case: 789 | Input/Output: [(-72 5 93 37) -72]
Test Case: 790 | Input/Output: [(98 18 -4 -67) -67]
Test Case: 791 | Input/Output: [(13 82 34 -43) -43]
Test Case: 792 | Input/Output: [(24 -81 50 60) -81]
Test Case: 793 | Input/Output: [(95 52 79 70) 52]
Test Case: 794 | Input/Output: [(16 -88 -94 -64) -94]
Test Case: 795 | Input/Output: [(6 58 88 63) 6]
Test Case: 796 | Input/Output: [(-19 69 35 60) -19]
Test Case: 797 | Input/Output: [(72 36 100 -85) -85]
Test Case: 798 | Input/Output: [(37 -46 51 91) -46]
Test Case: 799 | Input/Output: [(26 -92 60 -12) -92]
Test Case: 800 | Input/Output: [(81 94 14 32) 14]
Test Case: 801 | Input/Output: [(57 8 91 -15) -15]
Test Case: 802 | Input/Output: [(-62 -21 -33 4) -62]
Test Case: 803 | Input/Output: [(50 -33 -7 -88) -88]
Test Case: 804 | Input/Output: [(97 -5 59 -46) -46]
Test Case: 805 | Input/Output: [(-8 -4 76 46) -8]
Test Case: 806 | Input/Output: [(29 -34 -78 -4) -78]
Test Case: 807 | Input/Output: [(98 84 -73 64) -73]
Test Case: 808 | Input/Output: [(-16 -87 -84 -84) -87]
Test Case: 809 | Input/Output: [(49 -14 -32 -82) -82]
Test Case: 810 | Input/Output: [(-92 -91 -3 100) -92]
Test Case: 811 | Input/Output: [(-70 -79 -36 -79) -79]
Test Case: 812 | Input/Output: [(53 -62 -51 34) -62]
Test Case: 813 | Input/Output: [(79 24 70 -58) -58]
Test Case: 814 | Input/Output: [(5 79 26 11) 5]
Test Case: 815 | Input/Output: [(-87 -94 94 -42) -94]
Test Case: 816 | Input/Output: [(96 25 -88 49) -88]
Test Case: 817 | Input/Output: [(-54 -25 -61 -40) -61]
Test Case: 818 | Input/Output: [(77 38 -60 -78) -78]
Test Case: 819 | Input/Output: [(4 -45 -34 60) -45]
Test Case: 820 | Input/Output: [(-1 61 18 50) -1]
Test Case: 821 | Input/Output: [(42 29 32 12) 12]
Test Case: 822 | Input/Output: [(32 -87 -77 37) -87]
Test Case: 823 | Input/Output: [(17 42 -50 -38) -50]
Test Case: 824 | Input/Output: [(53 12 30 71) 12]
Test Case: 825 | Input/Output: [(-19 -86 40 -85) -86]
Test Case: 826 | Input/Output: [(11 -54 67 78) -54]
Test Case: 827 | Input/Output: [(-46 46 40 -49) -49]
Test Case: 828 | Input/Output: [(-26 -23 79 49) -26]
Test Case: 829 | Input/Output: [(-17 -89 -94 6) -94]
Test Case: 830 | Input/Output: [(35 6 -95 97) -95]
Test Case: 831 | Input/Output: [(7 53 -57 8) -57]
Test Case: 832 | Input/Output: [(55 -70 -68 -73) -73]
Test Case: 833 | Input/Output: [(42 -22 45 -42) -42]
Test Case: 834 | Input/Output: [(-56 -66 8 86) -66]
Test Case: 835 | Input/Output: [(84 79 1 -5) -5]
Test Case: 836 | Input/Output: [(-1 31 -47 -2) -47]
Test Case: 837 | Input/Output: [(46 -63 -21 92) -63]
Test Case: 838 | Input/Output: [(46 -31 -78 -55) -78]
Test Case: 839 | Input/Output: [(-50 -8 -10 -16) -50]
Test Case: 840 | Input/Output: [(-27 37 -56 -38) -56]
Test Case: 841 | Input/Output: [(-34 69 -72 70) -72]
Test Case: 842 | Input/Output: [(-19 -77 60 74) -77]
Test Case: 843 | Input/Output: [(-66 84 -16 -85) -85]
Test Case: 844 | Input/Output: [(-96 41 -32 -47) -96]
Test Case: 845 | Input/Output: [(69 4 -65 -11) -65]
Test Case: 846 | Input/Output: [(-75 43 33 80) -75]
Test Case: 847 | Input/Output: [(-75 16 -65 -11) -75]
Test Case: 848 | Input/Output: [(-94 96 -39 91) -94]
Test Case: 849 | Input/Output: [(-6 13 34 -2) -6]
Test Case: 850 | Input/Output: [(-87 32 71 42) -87]
Test Case: 851 | Input/Output: [(30 3 -74 50) -74]
Test Case: 852 | Input/Output: [(2 -19 -36 55) -36]
Test Case: 853 | Input/Output: [(-76 -50 -38 -96) -96]
Test Case: 854 | Input/Output: [(76 0 -78 58) -78]
Test Case: 855 | Input/Output: [(-24 -63 49 63) -63]
Test Case: 856 | Input/Output: [(11 -22 21 83) -22]
Test Case: 857 | Input/Output: [(89 -98 75 -33) -98]
Test Case: 858 | Input/Output: [(-7 12 -28 12) -28]
Test Case: 859 | Input/Output: [(59 72 47 -20) -20]
Test Case: 860 | Input/Output: [(-34 -92 5 -17) -92]
Test Case: 861 | Input/Output: [(-1 22 83 -38) -38]
Test Case: 862 | Input/Output: [(99 -63 -76 -100) -100]
Test Case: 863 | Input/Output: [(-19 -2 -83 6) -83]
Test Case: 864 | Input/Output: [(-71 18 -50 42) -71]
Test Case: 865 | Input/Output: [(0 -100 11 100) -100]
Test Case: 866 | Input/Output: [(42 -13 -87 35) -87]
Test Case: 867 | Input/Output: [(-17 48 99 13) -17]
Test Case: 868 | Input/Output: [(28 76 -56 97) -56]
Test Case: 869 | Input/Output: [(28 56 -7 -84) -84]
Test Case: 870 | Input/Output: [(-35 -52 -18 63) -52]
Test Case: 871 | Input/Output: [(36 29 100 -8) -8]
Test Case: 872 | Input/Output: [(79 -59 10 12) -59]
Test Case: 873 | Input/Output: [(85 -45 -81 -64) -81]
Test Case: 874 | Input/Output: [(46 13 -46 -14) -46]
Test Case: 875 | Input/Output: [(70 34 43 -15) -15]
Test Case: 876 | Input/Output: [(61 67 93 -40) -40]
Test Case: 877 | Input/Output: [(27 -58 61 41) -58]
Test Case: 878 | Input/Output: [(63 55 13 -57) -57]
Test Case: 879 | Input/Output: [(87 -31 15 -33) -33]
Test Case: 880 | Input/Output: [(81 26 -93 60) -93]
Test Case: 881 | Input/Output: [(-36 -21 61 97) -36]
Test Case: 882 | Input/Output: [(-10 -95 -27 -62) -95]
Test Case: 883 | Input/Output: [(86 -61 19 68) -61]
Test Case: 884 | Input/Output: [(73 -63 -17 -88) -88]
Test Case: 885 | Input/Output: [(-8 66 69 94) -8]
Test Case: 886 | Input/Output: [(89 66 -57 -93) -93]
Test Case: 887 | Input/Output: [(25 -15 29 -74) -74]
Test Case: 888 | Input/Output: [(-24 62 87 -32) -32]
Test Case: 889 | Input/Output: [(15 -22 28 40) -22]
Test Case: 890 | Input/Output: [(47 10 73 14) 10]
Test Case: 891 | Input/Output: [(19 25 3 26) 3]
Test Case: 892 | Input/Output: [(-94 -25 74 63) -94]
Test Case: 893 | Input/Output: [(-100 16 63 -18) -100]
Test Case: 894 | Input/Output: [(24 -95 -16 51) -95]
Test Case: 895 | Input/Output: [(65 10 16 1) 1]
Test Case: 896 | Input/Output: [(60 64 -99 -25) -99]
Test Case: 897 | Input/Output: [(54 3 0 9) 0]
Test Case: 898 | Input/Output: [(90 -93 -95 59) -95]
Test Case: 899 | Input/Output: [(-31 74 88 11) -31]
Test Case: 900 | Input/Output: [(27 47 93 46) 27]
Test Case: 901 | Input/Output: [(-90 -9 -22 69) -90]
Test Case: 902 | Input/Output: [(-25 -66 -95 -62) -95]
Test Case: 903 | Input/Output: [(-2 1 4 -20) -20]
Test Case: 904 | Input/Output: [(-40 4 -70 98) -70]
Test Case: 905 | Input/Output: [(8 60 -61 37) -61]
Test Case: 906 | Input/Output: [(-90 -83 -41 26) -90]
Test Case: 907 | Input/Output: [(54 97 -4 5) -4]
Test Case: 908 | Input/Output: [(78 -69 -57 -84) -84]
Test Case: 909 | Input/Output: [(-55 -19 -11 10) -55]
Test Case: 910 | Input/Output: [(-60 46 33 69) -60]
Test Case: 911 | Input/Output: [(-44 85 25 44) -44]
Test Case: 912 | Input/Output: [(-3 99 92 75) -3]
Test Case: 913 | Input/Output: [(50 -79 -4 -41) -79]
Test Case: 914 | Input/Output: [(-78 99 -71 -20) -78]
Test Case: 915 | Input/Output: [(-28 -19 -84 -41) -84]
Test Case: 916 | Input/Output: [(24 -49 25 18) -49]
Test Case: 917 | Input/Output: [(53 61 -11 19) -11]
Test Case: 918 | Input/Output: [(-79 -86 -59 -61) -86]
Test Case: 919 | Input/Output: [(-35 5 14 26) -35]
Test Case: 920 | Input/Output: [(-35 -1 34 -94) -94]
Test Case: 921 | Input/Output: [(3 30 66 -73) -73]
Test Case: 922 | Input/Output: [(89 90 21 -76) -76]
Test Case: 923 | Input/Output: [(94 -80 65 -6) -80]
Test Case: 924 | Input/Output: [(98 -22 100 -56) -56]
Test Case: 925 | Input/Output: [(73 94 -63 96) -63]
Test Case: 926 | Input/Output: [(26 58 56 18) 18]
Test Case: 927 | Input/Output: [(92 87 -39 -95) -95]
Test Case: 928 | Input/Output: [(-25 -62 -73 17) -73]
Test Case: 929 | Input/Output: [(47 -61 62 -34) -61]
Test Case: 930 | Input/Output: [(-13 11 59 46) -13]
Test Case: 931 | Input/Output: [(-89 100 73 87) -89]
Test Case: 932 | Input/Output: [(-59 -90 -71 -44) -90]
Test Case: 933 | Input/Output: [(-64 90 -74 -24) -74]
Test Case: 934 | Input/Output: [(6 94 42 -27) -27]
Test Case: 935 | Input/Output: [(-6 -13 -50 -54) -54]
Test Case: 936 | Input/Output: [(-63 -44 -30 25) -63]
Test Case: 937 | Input/Output: [(-50 -39 47 27) -50]
Test Case: 938 | Input/Output: [(-44 -3 -85 52) -85]
Test Case: 939 | Input/Output: [(38 -86 19 -81) -86]
Test Case: 940 | Input/Output: [(-77 94 86 -82) -82]
Test Case: 941 | Input/Output: [(-49 14 16 89) -49]
Test Case: 942 | Input/Output: [(-77 46 -16 -15) -77]
Test Case: 943 | Input/Output: [(-55 69 26 -25) -55]
Test Case: 944 | Input/Output: [(-90 -87 44 -89) -90]
Test Case: 945 | Input/Output: [(-12 -21 96 52) -21]
Test Case: 946 | Input/Output: [(-66 -9 20 -3) -66]
Test Case: 947 | Input/Output: [(-3 57 17 93) -3]
Test Case: 948 | Input/Output: [(36 50 -51 -60) -60]
Test Case: 949 | Input/Output: [(25 1 15 50) 1]
Test Case: 950 | Input/Output: [(-2 68 48 -28) -28]
Test Case: 951 | Input/Output: [(76 -35 -25 -27) -35]
Test Case: 952 | Input/Output: [(36 -66 -94 -81) -94]
Test Case: 953 | Input/Output: [(-18 68 5 61) -18]
Test Case: 954 | Input/Output: [(-33 -21 97 90) -33]
Test Case: 955 | Input/Output: [(-23 71 12 -12) -23]
Test Case: 956 | Input/Output: [(24 -56 -14 99) -56]
Test Case: 957 | Input/Output: [(38 13 -3 91) -3]
Test Case: 958 | Input/Output: [(-22 -99 -78 -51) -99]
Test Case: 959 | Input/Output: [(-48 -40 44 -68) -68]
Test Case: 960 | Input/Output: [(5 38 -52 46) -52]
Test Case: 961 | Input/Output: [(-27 -57 -99 -83) -99]
Test Case: 962 | Input/Output: [(80 -35 21 -55) -55]
Test Case: 963 | Input/Output: [(82 -1 2 -37) -37]
Test Case: 964 | Input/Output: [(93 95 37 -13) -13]
Test Case: 965 | Input/Output: [(85 0 42 54) 0]
Test Case: 966 | Input/Output: [(-45 55 20 16) -45]
Test Case: 967 | Input/Output: [(-99 -54 99 -38) -99]
Test Case: 968 | Input/Output: [(33 -85 21 -2) -85]
Test Case: 969 | Input/Output: [(-84 -48 -52 40) -84]
Test Case: 970 | Input/Output: [(66 -27 -64 88) -64]
Test Case: 971 | Input/Output: [(12 26 -44 -95) -95]
Test Case: 972 | Input/Output: [(-84 -77 -85 -70) -85]
Test Case: 973 | Input/Output: [(-17 -6 -2 -64) -64]
Test Case: 974 | Input/Output: [(-4 99 -94 80) -94]
Test Case: 975 | Input/Output: [(-22 -3 14 -32) -32]
Test Case: 976 | Input/Output: [(66 -20 -44 20) -44]
Test Case: 977 | Input/Output: [(99 17 -57 -4) -57]
Test Case: 978 | Input/Output: [(81 -91 53 20) -91]
Test Case: 979 | Input/Output: [(-88 77 -71 96) -88]
Test Case: 980 | Input/Output: [(-75 99 -31 65) -75]
Test Case: 981 | Input/Output: [(39 63 22 72) 22]
Test Case: 982 | Input/Output: [(-88 -4 36 87) -88]
Test Case: 983 | Input/Output: [(79 88 50 -72) -72]
Test Case: 984 | Input/Output: [(72 13 -72 -33) -72]
Test Case: 985 | Input/Output: [(31 64 5 -68) -68]
Test Case: 986 | Input/Output: [(-4 72 60 89) -4]
Test Case: 987 | Input/Output: [(39 -15 -21 33) -21]
Test Case: 988 | Input/Output: [(9 34 2 75) 2]
Test Case: 989 | Input/Output: [(-17 -44 -24 -17) -44]
Test Case: 990 | Input/Output: [(4 80 -60 2) -60]
Test Case: 991 | Input/Output: [(96 63 -70 -24) -70]
Test Case: 992 | Input/Output: [(88 -96 -85 76) -96]
Test Case: 993 | Input/Output: [(27 -73 54 -23) -73]
Test Case: 994 | Input/Output: [(65 41 -26 10) -26]
Test Case: 995 | Input/Output: [(-92 74 97 81) -92]
Test Case: 996 | Input/Output: [(8 66 -79 -2) -79]
Test Case: 997 | Input/Output: [(-3 -21 -35 -10) -35]
Test Case: 998 | Input/Output: [(75 -12 -26 -94) -94]
Test Case: 999 | Input/Output: [(-80 42 -18 17) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x9763e61 clojush.problems.software.smallest$fn__7460@9763e61] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x44c27b8b clojush.instructions.tag$tag_instruction_erc$fn__2160@44c27b8b] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x33399052 clojush.instructions.tag$tagged_instruction_erc$fn__2166@33399052] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x1071ae7c clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@1071ae7c]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x4a6ef712 clojush.problems.software.smallest$smallest_initial_report@4a6ef712]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x61288814 clojush.problems.software.smallest$smallest_report@61288814]
random-screen = false
random-seed = 118 -126 111 -127 105 34 -25 48 -109 -18 -24 0 73 31 -9 -25
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[98 98 -92 98] -92] [[1 1 1 -19] -19] [[6 6 -34 6] -34] [[82 100 100 100] 82] [[69 -43 -43 -43] -43] [[-64 -64 52 -64] -64] [[79 26 26 26] 26] [[-25 -10 -10 -10] -25] [[20 -83 -83 -83] -83] [[55 -100 -100 -100] -100] [(15 15 15 15) 15] [(85 85 85 85) 85] [(-98 -98 -98 -98) -98] [(16 16 16 16) 16] [(93 93 93 93) 93] [(21 43 54 22) 21] [(12 24 80 87) 12] [(65 46 23 90) 23] [(49 34 61 19) 19] [(41 39 84 23) 23] [(45 65 53 48) 45] [(88 38 13 35) 13] [(27 32 44 57) 27] [(26 38 1 64) 1] [(39 14 26 85) 14] [(6 77 19 56) 6] [(77 67 49 59) 49] [(93 99 16 29) 16] [(65 90 40 51) 40] [(93 71 60 18) 18] [(92 53 44 53) 44] [(61 31 81 15) 15] [(82 96 36 85) 36] [(86 72 87 57) 57] [(67 85 13 10) 10] [(17 68 -15 33) -15] [(-55 -10 6 27) -55] [(-94 -46 78 -29) -94] [(-6 75 -94 39) -94] [(45 -94 41 -49) -94] [(53 53 -8 26) -8] [(75 -33 -65 -9) -65] [(27 -48 -30 -85) -85] [(-8 -39 25 -4) -39] [(90 65 -100 -70) -100] [(83 -35 24 -20) -35] [(73 -35 -3 97) -35] [(71 -64 55 -46) -64] [(-15 0 91 -22) -22] [(-82 49 79 27) -82] [(-27 -66 -8 72) -66] [(54 -17 -23 65) -23] [(99 -81 -70 -64) -81] [(-77 -20 49 24) -77] [(-90 49 -38 -44) -90] [(5 -66 -31 -31) -66] [(-72 -73 88 100) -73] [(94 -23 -32 67) -32] [(22 -49 -64 -24) -64] [(-5 -40 74 0) -40] [(-74 -11 -22 -48) -74] [(-69 -10 -81 -67) -81] [(-70 -67 43 97) -70] [(23 -69 -50 41) -69] [(-13 -16 -64 30) -64] [(73 57 52 48) 48] [(34 44 44 -72) -72] [(-51 83 63 -4) -51] [(16 93 -33 36) -33] [(-48 -69 24 31) -69] [(28 81 -46 -72) -72] [(-75 -92 -23 -30) -92] [(26 -39 -41 -11) -41] [(43 20 -14 57) -14] [(-83 53 -25 22) -83] [(61 -16 -51 21) -51] [(41 -37 -58 60) -58] [(-29 35 12 15) -29] [(41 -39 92 -23) -39] [(-29 -61 9 -88) -88] [(67 43 -96 69) -96] [(-40 -16 -23 -69) -69] [(49 96 30 74) 30] [(-9 -60 -54 -99) -99] [(60 59 62 -87) -87] [(-65 -79 94 74) -79] [(84 35 66 93) 35] [(58 79 26 74) 26] [(52 -39 33 26) -39] [(4 -38 -51 -37) -51] [(21 -84 -4 -71) -84] [(-74 -34 -88 -30) -88] [(-50 -15 31 -88) -88] [(41 60 29 -97) -97] [(-40 49 81 -12) -40])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_frominteger exec_yankdup integer_mod boolean_shove integer_flush exec_do*range (integer_lt exec_rot (boolean_rot boolean_dup in2) (integer_mult exec_empty integer_lte print_integer boolean_invert_second_then_and) (integer_add exec_empty integer_div) boolean_pop boolean_frominteger boolean_xor) boolean_and integer_add integer_mult exec_yankdup integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec boolean_empty print_exec (exec_if (exec_dup ()) ()))))))
Lexicase best errors: [0 1 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_frominteger exec_yankdup integer_mod boolean_shove integer_flush exec_do*range (integer_lt exec_rot (boolean_rot boolean_dup in2) (integer_mult exec_empty integer_lte print_integer boolean_invert_second_then_and) (integer_add exec_empty integer_div) boolean_pop boolean_frominteger boolean_xor) boolean_and integer_add integer_mult exec_yankdup integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec boolean_empty print_exec (exec_if (exec_dup ()) ()))))))
Zero cases best errors: [0 1 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 5 5 3 13 3 3 3 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 5 5 3 13 3 3 3 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 6
Size: 10
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.997 0.995 0.995 0.997 0.987 0.997 0.997 0.997 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.626
Average program size in population (points): 68.19
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 484793
--- Timings ---
Current time: 1559314345894 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 33.6%
Fitness Testing:      1.5 seconds, 62.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (in3 boolean_yank print_integer integer_gt boolean_not boolean_swap integer_dup_times integer_gt exec_dup_times () exec_y (boolean_frominteger exec_while (exec_noop integer_sub integer_fromboolean)) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt exec_do*range (exec_dup (exec_dup_times (exec_k_when_autoconstructing (exec_if (exec_flush boolean_xor) (integer_rot) boolean_stackdepth boolean_dup_items in3 integer_lt integer_dup_times boolean_not) ()))))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (in3 boolean_yank print_integer integer_gt boolean_not boolean_swap integer_dup_times integer_gt exec_dup_times () exec_y (boolean_frominteger exec_while (exec_noop integer_sub integer_fromboolean)) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt exec_do*range (exec_dup (exec_dup_times (exec_k_when_autoconstructing (exec_if (exec_flush boolean_xor) (integer_rot) boolean_stackdepth boolean_dup_items in3 integer_lt integer_dup_times boolean_not) ()))))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (697 288 288 185 185 317 697 886 288 288)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (697 288 288 185 185 317 697 886 288 288)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 6
Size: 10
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 5.881
Median total errors in population: 6
Error averages by case: (0.303 0.712 0.712 0.815 0.815 0.683 0.303 0.114 0.712 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.871
Average program size in population (points): 58.388
Average percent parens in population: 0.280
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.505
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 858984
--- Timings ---
Current time: 1559314348120 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.4 seconds, 50.2%
Fitness Testing:      2.0 seconds, 41.0%
Report:               0.3 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 43                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 46                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 65                 
Correct output: 13                  | Program output: 38                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 77                 
Correct output: 49                  | Program output: 67                 
Correct output: 16                  | Program output: 99                 
Correct output: 40                  | Program output: 90                 
Correct output: 18                  | Program output: 71                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 96                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 85                 
Correct output: -15                 | Program output: 68                 
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: 75                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: -33                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: 65                 
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 0                  
Correct output: -82                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -17                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -23                
Correct output: -64                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -11                
Correct output: -81                 | Program output: -10                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -16                
Correct output: 48                  | Program output: 57                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 83                 
Correct output: -33                 | Program output: 93                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: 81                 
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -39                
Correct output: -14                 | Program output: 20                 
Correct output: -83                 | Program output: 53                 
Correct output: -51                 | Program output: -16                
Correct output: -58                 | Program output: -37                
Correct output: -29                 | Program output: 35                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: 43                 
Correct output: -69                 | Program output: -16                
Correct output: 30                  | Program output: 96                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 79                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -34                
Correct output: -88                 | Program output: -15                
Correct output: -97                 | Program output: 60                 
Correct output: -40                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_frominteger exec_yankdup integer_mod boolean_shove integer_flush exec_do*range (integer_lt exec_rot (boolean_rot boolean_dup in2) (integer_mult exec_empty integer_lte print_integer boolean_invert_second_then_and) (boolean_shove exec_empty integer_div) boolean_pop boolean_frominteger boolean_xor) boolean_and integer_add integer_mult exec_yankdup integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec boolean_empty print_exec (exec_if (exec_dup ()) ()))))))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_frominteger exec_yankdup integer_mod boolean_shove integer_flush exec_do*range (integer_lt exec_rot (boolean_rot boolean_dup in2) (integer_mult exec_empty integer_lte print_integer boolean_invert_second_then_and) (boolean_shove exec_empty integer_div) boolean_pop boolean_frominteger boolean_xor) boolean_and integer_add integer_mult exec_yankdup integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec boolean_empty print_exec (exec_if (exec_dup ()) ()))))))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 185 1000 715 137 321 578 900 899 578)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (137 185 0 715 137 321 578 900 899 578)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (exec_k_when_autoconstructing (boolean_frominteger integer_add integer_inc integer_fromboolean) (exec_stackdepth boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (exec_s (in2 boolean_rot integer_max integer_add integer_dup_times print_integer) (print_integer) ()) () ()) () ()))
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 5.55
Median total errors in population: 5
Error averages by case: (0.863 0.815 1.0 0.285 0.863 0.679 0.422 0.1 0.101 0.422)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 36.887
Average program size in population (points): 49.711
Average percent parens in population: 0.280
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.983
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1152347
--- Timings ---
Current time: 1559314351199 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.9 seconds, 62.9%
Fitness Testing:      2.3 seconds, 29.2%
Report:               0.5 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (in3 boolean_yank print_integer integer_gt boolean_not boolean_swap integer_dup_times integer_gt exec_dup_times () integer_dec boolean_frominteger exec_while (exec_noop integer_sub integer_fromboolean) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt exec_do*range (exec_dup (exec_dup_times (exec_k_when_autoconstructing (exec_if (exec_noop boolean_xor) (integer_rot) boolean_stackdepth boolean_dup_items in3 integer_lt integer_dup_times boolean_not) ()))))
Lexicase best errors: [0 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (in3 boolean_yank print_integer integer_gt boolean_not boolean_swap integer_dup_times integer_gt exec_dup_times () integer_dec boolean_frominteger exec_while (exec_noop integer_sub integer_fromboolean) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt exec_do*range (exec_dup (exec_dup_times (exec_k_when_autoconstructing (exec_if (exec_noop boolean_xor) (integer_rot) boolean_stackdepth boolean_dup_items in3 integer_lt integer_dup_times boolean_not) ()))))
Zero cases best errors: [0 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 1000 1000 444 310 310 310 310 589 310)
Population mean number of elite cases: 5.49
Count of perfect (error zero) individuals by case: (907 0 0 444 310 310 310 310 589 310)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction -47} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub})
Best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_noop print_integer boolean_or integer_dup integer_mult boolean_empty -47 exec_dup_items integer_swap exec_yankdup integer_add integer_mod integer_sub)
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 6.51
Median total errors in population: 7
Error averages by case: (0.093 1.0 1.0 0.556 0.69 0.69 0.69 0.69 0.411 0.69)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 33.05
Average program size in population (points): 45.305
Average percent parens in population: 0.285
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1435859
--- Timings ---
Current time: 1559314353784 milliseconds
Total Time:          10.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.0 seconds, 66.8%
Fitness Testing:      2.6 seconds, 24.7%
Report:               0.8 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_215} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_exec_656} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_223} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_248} {:close 0, :instruction exec_while} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq})
Lexicase best program: (-51 integer_mod integer_add boolean_yankdup integer_div integer_dup integer_gte integer_gt integer_sub integer_dup_times boolean_xor in3 exec_s (print_integer exec_pop (integer_swap exec_yankdup) boolean_or exec_flush integer_stackdepth exec_k_when_autoconstructing (integer_min) (boolean_frominteger exec_do*times (exec_swap (boolean_dup_items) (boolean_not integer_div print_newline integer_shove integer_rot) integer_min integer_lte) integer_inc) exec_flush integer_swap boolean_shove tag_integer_215 boolean_invert_second_then_and tag_exec_656 () integer_lte exec_dup_times () boolean_xor) (exec_do*times (boolean_eq exec_dup_times (boolean_dup) boolean_swap exec_k (integer_div tagged_223 exec_noop boolean_yank integer_shove boolean_flush exec_if (integer_swap integer_mod boolean_flush integer_dec tagged_248) (exec_while (exec_rot () (integer_sub integer_inc exec_pop (integer_dec) integer_empty exec_pop (integer_dec) integer_empty integer_add) (integer_dup_times exec_empty boolean_eq boolean_eq)))) ())) ())
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_215} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_exec_656} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_223} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_248} {:close 0, :instruction exec_while} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq})
Zero cases best program: (-51 integer_mod integer_add boolean_yankdup integer_div integer_dup integer_gte integer_gt integer_sub integer_dup_times boolean_xor in3 exec_s (print_integer exec_pop (integer_swap exec_yankdup) boolean_or exec_flush integer_stackdepth exec_k_when_autoconstructing (integer_min) (boolean_frominteger exec_do*times (exec_swap (boolean_dup_items) (boolean_not integer_div print_newline integer_shove integer_rot) integer_min integer_lte) integer_inc) exec_flush integer_swap boolean_shove tag_integer_215 boolean_invert_second_then_and tag_exec_656 () integer_lte exec_dup_times () boolean_xor) (exec_do*times (boolean_eq exec_dup_times (boolean_dup) boolean_swap exec_k (integer_div tagged_223 exec_noop boolean_yank integer_shove boolean_flush exec_if (integer_swap integer_mod boolean_flush integer_dec tagged_248) (exec_while (exec_rot () (integer_sub integer_inc exec_pop (integer_dec) integer_empty exec_pop (integer_dec) integer_empty integer_add) (integer_dup_times exec_empty boolean_eq boolean_eq)))) ())) ())
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 918 652 652 1000 919 652 266 1)
Population mean number of elite cases: 6.06
Count of perfect (error zero) individuals by case: (1 0 918 652 652 0 919 652 266 1)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction tagged_498} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 6
Size: 10
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 5.939
Median total errors in population: 5
Error averages by case: (0.999 1.0 0.082 0.348 0.348 1.0 0.081 0.348 0.734 0.999)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 30.274
Average program size in population (points): 40.843
Average percent parens in population: 0.286
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.967375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1655934
--- Timings ---
Current time: 1559314356495 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.3 seconds, 70.5%
Fitness Testing:      2.8 seconds, 21.3%
Report:               1.0 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 43                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 46                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 65                 
Correct output: 13                  | Program output: 38                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 77                 
Correct output: 49                  | Program output: 67                 
Correct output: 16                  | Program output: 99                 
Correct output: 40                  | Program output: 90                 
Correct output: 18                  | Program output: 71                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 96                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 85                 
Correct output: -15                 | Program output: 68                 
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: 75                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: -33                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: 65                 
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 0                  
Correct output: -82                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -17                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -23                
Correct output: -64                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -11                
Correct output: -81                 | Program output: -10                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -16                
Correct output: 48                  | Program output: 57                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 83                 
Correct output: -33                 | Program output: 93                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: 81                 
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -39                
Correct output: -14                 | Program output: 20                 
Correct output: -83                 | Program output: 53                 
Correct output: -51                 | Program output: -16                
Correct output: -58                 | Program output: -37                
Correct output: -29                 | Program output: 35                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: 43                 
Correct output: -69                 | Program output: -16                
Correct output: 30                  | Program output: 96                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 79                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -34                
Correct output: -88                 | Program output: -15                
Correct output: -97                 | Program output: 60                 
Correct output: -40                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_frominteger exec_yankdup integer_mod boolean_shove integer_flush exec_do*range (integer_lt exec_rot (boolean_rot boolean_dup in2) (integer_mult exec_empty integer_lte print_integer boolean_invert_second_then_and) (integer_add exec_empty integer_div) exec_do*range (integer_add integer_mult exec_yankdup)) integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec integer_div print_exec (exec_if (exec_dup ()) ()))))))
Lexicase best errors: [1 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_frominteger exec_yankdup integer_mod boolean_shove integer_flush exec_do*range (integer_lt exec_rot (boolean_rot boolean_dup in2) (integer_mult exec_empty integer_lte print_integer boolean_invert_second_then_and) (integer_add exec_empty integer_div) exec_do*range (integer_add integer_mult exec_yankdup)) integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec integer_div print_exec (exec_if (exec_dup ()) ()))))))
Zero cases best errors: [1 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 1 155 652 158 156 156 495 494 290)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (494 1 155 652 158 156 156 495 494 290)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_215} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_exec_656} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_129} {:close 0, :instruction exec_while} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_times})
Best program: (boolean_frominteger exec_yankdup integer_mod boolean_shove integer_flush exec_do*range (integer_lt exec_rot (boolean_rot boolean_dup in2) (integer_mult exec_empty integer_lte print_integer boolean_invert_second_then_and) (integer_add exec_empty integer_div) boolean_pop boolean_frominteger boolean_xor) boolean_and integer_add integer_mult exec_yankdup integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_inc) boolean_rot integer_swap boolean_shove tag_integer_215 boolean_invert_second_then_and tag_exec_656 () integer_lte exec_dup_times () boolean_xor) exec_stackdepth boolean_eq exec_dup_times (boolean_dup) boolean_swap exec_k (boolean_or boolean_dup_items exec_noop boolean_yank integer_shove boolean_flush exec_if (integer_swap integer_mod integer_inc integer_dec tagged_129) (exec_while (exec_rot () (integer_sub integer_inc exec_pop (integer_dec) integer_empty integer_add) (integer_dup_times)))) ())
Errors: [1 1 0 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 69
Size: 89
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 6.949
Median total errors in population: 6
Error averages by case: (0.506 0.999 0.845 0.348 0.842 0.844 0.844 0.505 0.506 0.71)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.561
Average program size in population (points): 33.42
Average percent parens in population: 0.241
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.5725625
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1872046
--- Timings ---
Current time: 1559314358738 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.9 seconds, 71.9%
Fitness Testing:      3.0 seconds, 20.0%
Report:               1.1 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Lexicase best errors: [0 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 10
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Zero cases best errors: [0 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 10
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 398 892 297 397 893 84 397 296 296)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (296 398 892 297 397 893 84 397 296 296)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Errors: [0 1 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 6
Size: 10
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 5.754
Median total errors in population: 5
Error averages by case: (0.704 0.602 0.108 0.703 0.603 0.107 0.916 0.603 0.704 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.052
Average program size in population (points): 33.696
Average percent parens in population: 0.257
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 9.0980625
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2096247
--- Timings ---
Current time: 1559314361027 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.9 seconds, 72.4%
Fitness Testing:      3.2 seconds, 18.3%
Report:               1.5 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_215} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (-51 integer_mod exec_rot () () (boolean_yankdup integer_div integer_dup boolean_swap integer_gt integer_sub integer_dup_times) boolean_xor in3 exec_s (print_integer exec_pop (integer_swap exec_yankdup) boolean_or exec_flush integer_stackdepth exec_k_when_autoconstructing (integer_min) (boolean_frominteger exec_do*times (exec_swap (boolean_dup_items) (boolean_not integer_div print_newline integer_shove integer_rot) integer_min integer_lte) integer_inc) exec_flush integer_swap boolean_shove tag_integer_215 boolean_invert_second_then_and) () ())
Lexicase best errors: [1 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_215} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (-51 integer_mod exec_rot () () (boolean_yankdup integer_div integer_dup boolean_swap integer_gt integer_sub integer_dup_times) boolean_xor in3 exec_s (print_integer exec_pop (integer_swap exec_yankdup) boolean_or exec_flush integer_stackdepth exec_k_when_autoconstructing (integer_min) (boolean_frominteger exec_do*times (exec_swap (boolean_dup_items) (boolean_not integer_div print_newline integer_shove integer_rot) integer_min integer_lte) integer_inc) exec_flush integer_swap boolean_shove tag_integer_215 boolean_invert_second_then_and) () ())
Zero cases best errors: [1 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 444 128 1000 361 444 444 361 128 444)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (0 444 128 0 361 444 444 361 128 444)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_flush})
Best program: (-51 integer_mod integer_add boolean_yankdup integer_div integer_dup integer_gte integer_gt integer_sub integer_dup_times boolean_xor in3 exec_s (print_integer exec_pop (integer_swap exec_yankdup) exec_s (exec_flush integer_stackdepth exec_k_when_autoconstructing (integer_min) (boolean_frominteger exec_do*times (exec_swap (boolean_dup_items) (boolean_not integer_div print_newline integer_shove integer_rot) integer_min integer_lte) integer_max) exec_noop exec_flush) () ()) () ())
Errors: [1 0 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.246
Median total errors in population: 8
Error averages by case: (1.0 0.556 0.872 1.0 0.639 0.556 0.556 0.639 0.872 0.556)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 24.923
Average program size in population (points): 33.596
Average percent parens in population: 0.267
Minimum age in population: 7.5
Maximum age in population: 12.4375
Average age in population: 10.553375
Median age in population: 10.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2322211
--- Timings ---
Current time: 1559314363398 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.8 seconds, 73.8%
Fitness Testing:      3.5 seconds, 17.3%
Report:               1.7 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (-51 integer_mod integer_inc boolean_yankdup exec_shove (integer_dup integer_gte integer_gt integer_sub integer_dup_times boolean_xor in3 exec_s (print_integer boolean_and) (boolean_xor) (exec_k () (boolean_stackdepth boolean_dup_items in3 integer_lt integer_dup_times boolean_not))))
Lexicase best errors: [1 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (-51 integer_mod integer_inc boolean_yankdup exec_shove (integer_dup integer_gte integer_gt integer_sub integer_dup_times boolean_xor in3 exec_s (print_integer boolean_and) (boolean_xor) (exec_k () (boolean_stackdepth boolean_dup_items in3 integer_lt integer_dup_times boolean_not))))
Zero cases best errors: [1 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 1 478 713 478 478 478 478 1 478)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (234 1 478 713 478 478 478 478 1 478)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Errors: [1 1 0 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 6
Size: 10
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.183
Median total errors in population: 8
Error averages by case: (0.766 0.999 0.522 0.287 0.522 0.522 0.522 0.522 0.999 0.522)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.883
Average program size in population (points): 30.442
Average percent parens in population: 0.254
Minimum age in population: 9.25
Maximum age in population: 13.8515625
Average age in population: 12.0155078125
Median age in population: 12.078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2534962
--- Timings ---
Current time: 1559314365552 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.7 seconds, 74.7%
Fitness Testing:      3.7 seconds, 16.5%
Report:               1.9 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Lexicase best errors: [0 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Zero cases best errors: [0 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (620 620 101 209 620 930 620 101 209 209)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (620 620 101 209 620 930 620 101 209 209)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_498} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (in3 in3 print_integer print_boolean tagged_498 integer_mod exec_s_when_autoconstructing () () ())
Errors: [0 0 1 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 7
Size: 11
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.761
Median total errors in population: 5
Error averages by case: (0.38 0.38 0.899 0.791 0.38 0.07 0.38 0.899 0.791 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.228
Average program size in population (points): 26.194
Average percent parens in population: 0.302
Minimum age in population: 10.875
Maximum age in population: 15.3984375
Average age in population: 13.62116015625
Median age in population: 13.61328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2709665
--- Timings ---
Current time: 1559314367687 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 75.6%
Fitness Testing:      3.9 seconds, 15.9%
Report:               2.0 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 43                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 46                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 65                 
Correct output: 13                  | Program output: 38                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 77                 
Correct output: 49                  | Program output: 67                 
Correct output: 16                  | Program output: 99                 
Correct output: 40                  | Program output: 90                 
Correct output: 18                  | Program output: 71                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 96                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 85                 
Correct output: -15                 | Program output: 68                 
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: 75                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: -33                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: 65                 
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 0                  
Correct output: -82                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -17                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -23                
Correct output: -64                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -11                
Correct output: -81                 | Program output: -10                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -16                
Correct output: 48                  | Program output: 57                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 83                 
Correct output: -33                 | Program output: 93                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: 81                 
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -39                
Correct output: -14                 | Program output: 20                 
Correct output: -83                 | Program output: 53                 
Correct output: -51                 | Program output: -16                
Correct output: -58                 | Program output: -37                
Correct output: -29                 | Program output: 35                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: 43                 
Correct output: -69                 | Program output: -16                
Correct output: 30                  | Program output: 96                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 79                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -34                
Correct output: -88                 | Program output: -15                
Correct output: -97                 | Program output: 60                 
Correct output: -40                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Lexicase best program: (in3 boolean_yank print_integer integer_gt boolean_not boolean_swap integer_dup_times integer_gt integer_eq integer_dec boolean_frominteger exec_while (exec_noop integer_sub integer_fromboolean) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt integer_mult exec_yankdup integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec boolean_empty print_exec (exec_if (exec_dup ()) ()))))))
Lexicase best errors: [0 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_exec_101} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup})
Zero cases best program: (in3 boolean_yank print_integer integer_gt boolean_not boolean_swap integer_dup_times integer_gt integer_eq integer_dec boolean_frominteger exec_while (exec_noop integer_sub integer_fromboolean) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt integer_mult exec_yankdup integer_gte exec_swap (boolean_stackdepth) (boolean_rot exec_stackdepth tag_exec_101 (integer_stackdepth integer_inc exec_dup_times (print_exec (integer_dec boolean_empty print_exec (exec_if (exec_dup ()) ()))))))
Zero cases best errors: [0 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 1000 206 1000 438 204 204 438 204 438)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (438 0 206 0 438 204 204 438 204 438)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (exec_k_when_autoconstructing (boolean_frominteger integer_dup integer_inc integer_fromboolean) (exec_stackdepth boolean_yank integer_inc boolean_dup_items integer_mult boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (exec_s (in2 boolean_rot integer_max integer_add integer_dup_times print_integer) (print_integer) ()) () ()) () ()))
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 35
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.43
Median total errors in population: 6
Error averages by case: (0.562 1.0 0.794 1.0 0.562 0.796 0.796 0.562 0.796 0.562)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 18.072
Average program size in population (points): 25.063
Average percent parens in population: 0.316
Minimum age in population: 11.984375
Maximum age in population: 17.013671875
Average age in population: 15.1198515625
Median age in population: 15.17578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2888143
--- Timings ---
Current time: 1559314369909 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.3 seconds, 76.4%
Fitness Testing:      4.1 seconds, 15.3%
Report:               2.1 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Lexicase best program: (in3 boolean_yank print_integer exec_eq boolean_not boolean_swap integer_dup_times integer_gt exec_dup_times () integer_dec exec_dup (exec_while (exec_noop integer_sub integer_fromboolean)) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt exec_do*range (exec_dup (exec_dup_times (exec_k_when_autoconstructing (exec_if (exec_flush boolean_xor) (integer_rot) boolean_stackdepth boolean_dup_items in3 exec_y (integer_dup_times boolean_not)) ()))))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not})
Zero cases best program: (in3 boolean_yank print_integer exec_eq boolean_not boolean_swap integer_dup_times integer_gt exec_dup_times () integer_dec exec_dup (exec_while (exec_noop integer_sub integer_fromboolean)) integer_stackdepth boolean_rot in2 boolean_or in2 integer_gt exec_do*range (exec_dup (exec_dup_times (exec_k_when_autoconstructing (exec_if (exec_flush boolean_xor) (integer_rot) boolean_stackdepth boolean_dup_items in3 exec_y (integer_dup_times boolean_not)) ()))))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 448 1 448 448 1 1 448 448 448)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (0 448 1 448 448 1 1 448 448 448)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dec})
Best program: (in3 boolean_yank print_integer integer_gt boolean_not boolean_swap integer_dup_times integer_gt exec_dup_times () integer_dec)
Errors: [1 0 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 7.309
Median total errors in population: 10
Error averages by case: (1.0 0.552 0.999 0.552 0.552 0.999 0.999 0.552 0.552 0.552)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.188
Average program size in population (points): 31.878
Average percent parens in population: 0.288
Minimum age in population: 12.984375
Maximum age in population: 18.5224609375
Average age in population: 16.5148701171875
Median age in population: 16.62109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3118919
--- Timings ---
Current time: 1559314372285 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        22.3 seconds, 76.9%
Fitness Testing:      4.3 seconds, 14.8%
Report:               2.3 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 64                 
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 33                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: 39                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 57                 
Correct output: -83                 | Program output: 22                 
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: 15                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Lexicase best errors: [1 1 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Zero cases best errors: [1 1 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 1000 1000 273 274 274)
Population mean number of elite cases: 7.82
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 273 274 274)
Population mean number of perfect (error zero) cases: 0.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Errors: [1 1 1 1 1 1 1 0 0 0]
Total: 7
Mean: 0.7
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 9.179
Median total errors in population: 10
Error averages by case: (1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.727 0.726 0.726)
Error minima by case: (1 1 1 1 1 1 1 0 0 0)
Average genome size in population (length): 20.503
Average program size in population (points): 27.209
Average percent parens in population: 0.270
Minimum age in population: 15.15234375
Maximum age in population: 20.21826171875
Average age in population: 18.5393857421875
Median age in population: 18.671630859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.397
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3311731
--- Timings ---
Current time: 1559314374279 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.9 seconds, 77.3%
Fitness Testing:      4.5 seconds, 14.5%
Report:               2.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 64                 
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 33                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: 39                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 57                 
Correct output: -83                 | Program output: 22                 
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: 15                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod integer_add integer_dup_times integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Lexicase best errors: [1 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod integer_add integer_dup_times integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Zero cases best errors: [1 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 1000 1000 910 908 914 1000 1 910)
Population mean number of elite cases: 7.64
Count of perfect (error zero) individuals by case: (1 0 0 0 910 908 914 0 1 910)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Errors: [1 1 1 1 0 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.356
Median total errors in population: 6
Error averages by case: (0.999 1.0 1.0 1.0 0.09 0.092 0.086 1.0 0.999 0.09)
Error minima by case: (0 1 1 1 0 0 0 1 0 0)
Average genome size in population (length): 27.117
Average program size in population (points): 35.172
Average percent parens in population: 0.228
Minimum age in population: 18.46044921875
Maximum age in population: 22.0751953125
Average age in population: 20.7602626953125
Median age in population: 20.83642578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 506
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 535
Syntactic diversity (% unique Push programs):	 0.356
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3532160
--- Timings ---
Current time: 1559314376193 milliseconds
Total Time:          32.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.5 seconds, 77.5%
Fitness Testing:      4.7 seconds, 14.3%
Report:               2.6 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 64                 
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 33                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: 39                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 57                 
Correct output: -83                 | Program output: 22                 
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: 15                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod integer_add exec_noop integer_div integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Lexicase best errors: [1 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod integer_add exec_noop integer_div integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Zero cases best errors: [1 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 545 1000 545 533 926 534 1000 548 375)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (375 545 0 545 533 926 534 0 548 375)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Errors: [1 0 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 5.619
Median total errors in population: 4
Error averages by case: (0.625 0.455 1.0 0.455 0.467 0.074 0.466 1.0 0.452 0.625)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 27.026
Average program size in population (points): 35.09
Average percent parens in population: 0.229
Minimum age in population: 19.57861328125
Maximum age in population: 23.8251953125
Average age in population: 22.44664770507812
Median age in population: 22.3441162109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3753356
--- Timings ---
Current time: 1559314378009 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.9 seconds, 77.6%
Fitness Testing:      4.9 seconds, 14.1%
Report:               2.8 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Lexicase best errors: [1 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Zero cases best errors: [1 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 909 1000 269 631 911 1000 269 269 901)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (0 909 0 269 631 911 0 269 269 901)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (-51 integer_mod boolean_dup_times exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Errors: [1 0 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 5.841
Median total errors in population: 6
Error averages by case: (1.0 0.091 1.0 0.731 0.369 0.089 1.0 0.731 0.731 0.099)
Error minima by case: (1 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 27.226
Average program size in population (points): 35.403
Average percent parens in population: 0.230
Minimum age in population: 21.494140625
Maximum age in population: 25.46929931640625
Average age in population: 23.88325189208984
Median age in population: 23.95574951171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 3979460
--- Timings ---
Current time: 1559314380195 milliseconds
Total Time:          36.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.7 seconds, 77.8%
Fitness Testing:      5.1 seconds, 13.8%
Report:               3.0 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 64                 
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 33                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: 39                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 57                 
Correct output: -83                 | Program output: 22                 
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: 15                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (exec_empty exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Lexicase best errors: [1 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (exec_empty exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ())
Zero cases best errors: [1 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 241 1000 1000 237 237 1000 1000 1000 237)
Population mean number of elite cases: 6.63
Count of perfect (error zero) individuals by case: (673 241 0 0 237 237 0 0 0 237)
Population mean number of perfect (error zero) cases: 1.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (-51 boolean_dup_items integer_gte boolean_swap integer_shove integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot integer_max integer_add integer_dup_times print_integer print_integer) () ()) () ())
Errors: [1 0 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 8.375
Median total errors in population: 9
Error averages by case: (0.327 0.759 1.0 1.0 0.763 0.763 1.0 1.0 1.0 0.763)
Error minima by case: (0 0 1 1 0 0 1 1 1 0)
Average genome size in population (length): 27.132
Average program size in population (points): 35.232
Average percent parens in population: 0.229
Minimum age in population: 22.59033203125
Maximum age in population: 27.24313354492188
Average age in population: 25.51210906982422
Median age in population: 25.55740356445312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 193
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4199761
--- Timings ---
Current time: 1559314382211 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.3 seconds, 78.0%
Fitness Testing:      5.3 seconds, 13.6%
Report:               3.2 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod boolean_dup_times exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq in1 print_integer) () ())
Lexicase best errors: [1 1 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod boolean_dup_times exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq in1 print_integer) () ())
Zero cases best errors: [1 1 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 149 761 1000 150 1000 1000 149)
Population mean number of elite cases: 7.21
Count of perfect (error zero) individuals by case: (0 0 0 149 761 0 150 0 0 149)
Population mean number of perfect (error zero) cases: 1.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_sub exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (exec_yankdup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Errors: [1 1 1 0 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 8.791
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 0.851 0.239 1.0 0.85 1.0 1.0 0.851)
Error minima by case: (1 1 1 0 0 1 0 1 1 0)
Average genome size in population (length): 27.299
Average program size in population (points): 35.464
Average percent parens in population: 0.229
Minimum age in population: 23.59033203125
Maximum age in population: 28.62478637695312
Average age in population: 26.89558390808105
Median age in population: 26.9412841796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4429455
--- Timings ---
Current time: 1559314384337 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        32.1 seconds, 78.2%
Fitness Testing:      5.5 seconds, 13.4%
Report:               3.3 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank boolean_stackdepth boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq integer_max integer_add integer_dup_times in1 print_integer) () ())
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank boolean_stackdepth boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq integer_max integer_add integer_dup_times in1 print_integer) () ())
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 682 682 682 918 233 1000 682 917)
Population mean number of elite cases: 7.80
Count of perfect (error zero) individuals by case: (0 0 682 682 682 918 233 0 682 917)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (integer_mod boolean_dup_times exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte) boolean_swap integer_shove exec_pop (integer_sub integer_dup_times boolean_frominteger) integer_max integer_add integer_dup_times in1 print_integer)
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 27
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.204
Median total errors in population: 4
Error averages by case: (1.0 1.0 0.318 0.318 0.318 0.082 0.767 1.0 0.318 0.083)
Error minima by case: (1 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 27.024
Average program size in population (points): 35.144
Average percent parens in population: 0.228
Minimum age in population: 25.669189453125
Maximum age in population: 30.21311187744141
Average age in population: 28.46523355865479
Median age in population: 28.50915145874023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4651125
--- Timings ---
Current time: 1559314386268 milliseconds
Total Time:          43.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.6 seconds, 78.3%
Fitness Testing:      5.7 seconds, 13.3%
Report:               3.5 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Lexicase best errors: [0 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Zero cases best errors: [0 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (760 760 1000 1000 1000 1000 1000 760 168 944)
Population mean number of elite cases: 8.39
Count of perfect (error zero) individuals by case: (760 760 0 0 0 0 0 760 168 944)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (-51 integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Errors: [0 0 1 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.608
Median total errors in population: 6
Error averages by case: (0.24 0.24 1.0 1.0 1.0 1.0 1.0 0.24 0.832 0.056)
Error minima by case: (0 0 1 1 1 1 1 0 0 0)
Average genome size in population (length): 27.147
Average program size in population (points): 35.313
Average percent parens in population: 0.226
Minimum age in population: 26.669189453125
Maximum age in population: 31.78047561645508
Average age in population: 29.96021897888184
Median age in population: 30.08894920349121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4875285
--- Timings ---
Current time: 1559314388498 milliseconds
Total Time:          45.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.5 seconds, 78.6%
Fitness Testing:      5.9 seconds, 13.1%
Report:               3.7 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: 69                 
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 79                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: 20                 
Correct output: -100                | Program output: 55                 
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 65                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 88                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 26                 
Correct output: 14                  | Program output: 39                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 77                 
Correct output: 16                  | Program output: 93                 
Correct output: 40                  | Program output: 65                 
Correct output: 18                  | Program output: 93                 
Correct output: 44                  | Program output: 92                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 82                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 67                 
Correct output: -15                 | Program output: 17                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -6                 
Correct output: -94                 | Program output: 45                 
Correct output: -8                  | Program output: 53                 
Correct output: -65                 | Program output: 75                 
Correct output: -85                 | Program output: 27                 
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: 90                 
Correct output: -35                 | Program output: 83                 
Correct output: -35                 | Program output: 73                 
Correct output: -64                 | Program output: 71                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: 54                 
Correct output: -81                 | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: 5                  
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: 94                 
Correct output: -64                 | Program output: 22                 
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 23                 
Correct output: -64                 | Program output: -13                
Correct output: 48                  | Program output: 73                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: 16                 
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: 26                 
Correct output: -14                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 61                 
Correct output: -58                 | Program output: 41                 
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: 67                 
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 49                 
Correct output: -99                 | Program output: -9                 
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 84                 
Correct output: 26                  | Program output: 58                 
Correct output: -39                 | Program output: 52                 
Correct output: -51                 | Program output: 4                  
Correct output: -84                 | Program output: 21                 
Correct output: -88                 | Program output: -74                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 41                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod boolean_dup_times exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Lexicase best errors: [0 1 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod boolean_dup_times exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times in1 print_integer) ()) () ())
Zero cases best errors: [0 1 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (918 1000 1000 1 1000 1000 682 243 683 1000)
Population mean number of elite cases: 7.53
Count of perfect (error zero) individuals by case: (918 0 0 1 0 0 682 243 683 0)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (-51 integer_add exec_noop integer_div integer_mod boolean_swap exec_noop integer_div integer_dup integer_sub integer_dup_times boolean_dup_items integer_gte boolean_rot integer_max integer_add integer_dup_times in1 print_integer)
Errors: [0 1 1 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 7.473
Median total errors in population: 7
Error averages by case: (0.082 1.0 1.0 0.999 1.0 1.0 0.318 0.757 0.317 1.0)
Error minima by case: (0 1 1 0 1 1 0 0 0 1)
Average genome size in population (length): 27.058
Average program size in population (points): 35.197
Average percent parens in population: 0.225
Minimum age in population: 27.95703125
Maximum age in population: 33.45516395568848
Average age in population: 31.43583794212341
Median age in population: 31.47895812988281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 5100133
--- Timings ---
Current time: 1559314390429 milliseconds
Total Time:          47.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.0 seconds, 78.6%
Fitness Testing:      6.1 seconds, 13.0%
Report:               3.8 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 64                 
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 33                 
Correct output: -55                 | Program output: 27                 
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: 39                 
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: 97                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: 72                 
Correct output: -23                 | Program output: 65                 
Correct output: -81                 | Program output: -64                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 100                
Correct output: -32                 | Program output: 67                 
Correct output: -64                 | Program output: -24                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: 97                 
Correct output: -69                 | Program output: 41                 
Correct output: -64                 | Program output: 30                 
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: 31                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -11                
Correct output: -14                 | Program output: 57                 
Correct output: -83                 | Program output: 22                 
Correct output: -51                 | Program output: 21                 
Correct output: -58                 | Program output: 60                 
Correct output: -29                 | Program output: 15                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 69                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -37                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Lexicase best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (integer_sub in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ()) () ())
Lexicase best errors: [0 0 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Zero cases best program: (-51 integer_mod integer_add exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (integer_sub in4 boolean_rot) (integer_max integer_add integer_dup_times print_integer print_integer) ()) () ()) () ())
Zero cases best errors: [0 0 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (713 227 487 715 1000 1000 225 1000 1000 1000)
Population mean number of elite cases: 7.37
Count of perfect (error zero) individuals by case: (713 227 487 715 0 0 225 0 0 0)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer})
Best program: (-51 integer_mod boolean_dup_times exec_noop integer_div integer_dup exec_eq exec_pop (in2 integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (integer_max integer_add integer_dup_times) (exec_dup (print_integer))) () ())
Errors: [0 0 1 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.633
Median total errors in population: 7
Error averages by case: (0.287 0.773 0.513 0.285 1.0 1.0 0.775 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 1 1 0 1 1 1)
Average genome size in population (length): 23.343
Average program size in population (points): 30.055
Average percent parens in population: 0.201
Minimum age in population: 30.12351989746094
Maximum age in population: 35.06424331665039
Average age in population: 33.25534554767609
Median age in population: 33.39457225799561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 5302530
--- Timings ---
Current time: 1559314392390 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.6 seconds, 78.7%
Fitness Testing:      6.3 seconds, 12.9%
Report:               4.0 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Lexicase best program: (-51 exec_k (integer_add) () exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times) boolean_yank integer_inc boolean_dup_items integer_gte integer_dup integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup boolean_dup boolean_dup_items) (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in3 boolean_rot integer_max integer_add integer_dup_times print_integer print_integer) () ()) () ()) ()) () ())
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Zero cases best program: (-51 exec_k (integer_add) () exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times) boolean_yank integer_inc boolean_dup_items integer_gte integer_dup integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup boolean_dup boolean_dup_items) (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in3 boolean_rot integer_max integer_add integer_dup_times print_integer print_integer) () ()) () ()) ()) () ())
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 562 1 1 1 1 914 1 1 568)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (562 562 1 1 1 1 914 1 1 568)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (-51 exec_k (integer_add) () exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times) boolean_yank integer_inc boolean_dup_items integer_gte integer_dup integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup boolean_dup boolean_dup_items) (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in3 boolean_rot integer_max integer_add integer_dup_times print_integer print_integer) () ()) () ()) ()) () ())
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.388
Median total errors in population: 6
Error averages by case: (0.438 0.438 0.999 0.999 0.999 0.999 0.086 0.999 0.999 0.432)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.28
Average program size in population (points): 35.594
Average percent parens in population: 0.228
Minimum age in population: 31.12351989746094
Maximum age in population: 36.57552003860474
Average age in population: 34.4413922457695
Median age in population: 34.53471660614014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5533295
--- Timings ---
Current time: 1559314394842 milliseconds
Total Time:          51.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.6 seconds, 79.0%
Fitness Testing:      6.5 seconds, 12.7%
Report:               4.2 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: 52                 
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 54                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 61                 
Correct output: 23                  | Program output: 84                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 81                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 87                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 79                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 49                 
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 74                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -23                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: 92                 
Correct output: -88                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 62                 
Correct output: -79                 | Program output: 94                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 31                 
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 81                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Lexicase best program: (-51 exec_k (integer_add) () exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times) boolean_yank integer_inc boolean_dup_items integer_gte integer_dup integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup boolean_dup boolean_dup_items) (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in3 boolean_rot integer_max integer_add integer_dup_times print_integer print_integer) () ()) () ()) ()) () ())
Lexicase best errors: [1 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Zero cases best program: (-51 exec_k (integer_add) () exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times) boolean_yank integer_inc boolean_dup_items integer_gte integer_dup integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup boolean_dup boolean_dup_items) (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in3 boolean_rot integer_max integer_add integer_dup_times print_integer print_integer) () ()) () ()) ()) () ())
Zero cases best errors: [1 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 249 1000 1000 1000 676 676 1000 676 676)
Population mean number of elite cases: 7.95
Count of perfect (error zero) individuals by case: (0 249 0 0 0 676 676 0 676 676)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 0, :instruction exec_k} {:close 2, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer})
Best program: (-51 exec_k (integer_add) () exec_noop integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times) boolean_yank integer_inc boolean_dup_items integer_gte integer_dup integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup boolean_dup boolean_dup_items) (integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in3 boolean_rot integer_max) (integer_add integer_dup_times print_integer print_integer) ()) () ()) ()) () ())
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.047
Median total errors in population: 6
Error averages by case: (1.0 0.751 1.0 1.0 1.0 0.324 0.324 1.0 0.324 0.324)
Error minima by case: (1 0 1 1 1 0 0 1 0 0)
Average genome size in population (length): 33.645
Average program size in population (points): 47.635
Average percent parens in population: 0.288
Minimum age in population: 32.82113647460938
Maximum age in population: 37.88675951957703
Average age in population: 35.58962841272354
Median age in population: 35.7831974029541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 411
Genome diversity (% unique genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 425
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 5844082
--- Timings ---
Current time: 1559314397072 milliseconds
Total Time:          53.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.3 seconds, 78.9%
Fitness Testing:      6.8 seconds, 12.7%
Report:               4.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (703 220 701 1 924 1000 220 923 1 925)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (703 220 701 1 924 0 220 923 1 925)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.382
Median total errors in population: 5
Error averages by case: (0.297 0.78 0.299 0.999 0.076 1.0 0.78 0.077 0.999 0.075)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 34.139
Average program size in population (points): 48.421
Average percent parens in population: 0.290
Minimum age in population: 35.23942184448242
Maximum age in population: 39.17814207077026
Average age in population: 37.02760785937309
Median age in population: 36.97448682785034
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 270
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 285
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 6161492
--- Timings ---
Current time: 1559314399285 milliseconds
Total Time:          55.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.0 seconds, 78.7%
Fitness Testing:      7.1 seconds, 12.6%
Report:               4.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Lexicase best errors: [0 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Zero cases best errors: [0 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (467 467 1000 1000 467 1000 464 307 469 468)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (467 467 0 0 467 0 464 307 469 468)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Errors: [0 0 1 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.891
Median total errors in population: 9
Error averages by case: (0.533 0.533 1.0 1.0 0.533 1.0 0.536 0.693 0.531 0.532)
Error minima by case: (0 0 1 1 0 1 0 0 0 0)
Average genome size in population (length): 27.386
Average program size in population (points): 36.691
Average percent parens in population: 0.248
Minimum age in population: 36.68629264831543
Maximum age in population: 40.157859146595
Average age in population: 38.94358676838875
Median age in population: 38.87019467353821
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 247
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 6403971
--- Timings ---
Current time: 1559314401396 milliseconds
Total Time:          58.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 78.7%
Fitness Testing:      7.3 seconds, 12.6%
Report:               4.9 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Lexicase best errors: [1 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Zero cases best errors: [1 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 778 780 1000 779 781 117 912 1 767)
Population mean number of elite cases: 6.03
Count of perfect (error zero) individuals by case: (117 778 780 0 779 781 117 912 1 767)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Errors: [1 0 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 4.968
Median total errors in population: 4
Error averages by case: (0.883 0.222 0.22 1.0 0.221 0.219 0.883 0.088 0.999 0.233)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 25.985
Average program size in population (points): 34.03
Average percent parens in population: 0.236
Minimum age in population: 39.08678966760635
Maximum age in population: 42.0140269100666
Average age in population: 40.63094158867002
Median age in population: 40.72043126821518
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 452
Genome diversity (% unique genomes):	 0.39
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 488
Syntactic diversity (% unique Push programs):	 0.366
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 6623084
--- Timings ---
Current time: 1559314404086 milliseconds
Total Time:          60.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 79.0%
Fitness Testing:      7.5 seconds, 12.4%
Report:               5.2 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 43                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 0                  
Correct output: -82                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (831 395 819 819 425 817 393 425 819 817)
Population mean number of elite cases: 6.56
Count of perfect (error zero) individuals by case: (831 395 819 819 425 817 393 425 819 817)
Population mean number of perfect (error zero) cases: 6.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 3.44
Median total errors in population: 2
Error averages by case: (0.169 0.605 0.181 0.181 0.575 0.183 0.607 0.575 0.181 0.183)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.875
Average program size in population (points): 30.54
Average percent parens in population: 0.215
Minimum age in population: 40.51000165939331
Maximum age in population: 43.79531297087669
Average age in population: 42.44035584719479
Median age in population: 42.37019467353821
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 333
Genome diversity (% unique genomes):	 0.385
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 343
Syntactic diversity (% unique Push programs):	 0.36
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 6829540
--- Timings ---
Current time: 1559314406298 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.8 seconds, 79.1%
Fitness Testing:      7.7 seconds, 12.3%
Report:               5.3 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 43                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 0                  
Correct output: -82                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (470 469 1000 429 474 1000 904 919 896 908)
Population mean number of elite cases: 7.47
Count of perfect (error zero) individuals by case: (470 469 0 429 474 0 904 919 896 908)
Population mean number of perfect (error zero) cases: 5.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times exec_do*while (integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 4.531
Median total errors in population: 5
Error averages by case: (0.53 0.531 1.0 0.571 0.526 1.0 0.096 0.081 0.104 0.092)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 24.122
Average program size in population (points): 30.716
Average percent parens in population: 0.211
Minimum age in population: 41.57066786289215
Maximum age in population: 45.39554956555367
Average age in population: 43.93945638981462
Median age in population: 44.07066786289215
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 305
Genome diversity (% unique genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 322
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 7043510
--- Timings ---
Current time: 1559314408650 milliseconds
Total Time:          65.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.8 seconds, 79.3%
Fitness Testing:      7.9 seconds, 12.1%
Report:               5.5 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 43                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 0                  
Correct output: -82                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times exec_do*while (integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times exec_do*while (integer_inc boolean_dup_items) integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 927 695 927 695 918 2 2 695 219)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (219 927 695 927 695 918 2 2 695 219)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 4.701
Median total errors in population: 4
Error averages by case: (0.781 0.073 0.305 0.073 0.305 0.082 0.998 0.998 0.305 0.781)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.101
Average program size in population (points): 28.929
Average percent parens in population: 0.198
Minimum age in population: 42.57066786289215
Maximum age in population: 47.14101061969995
Average age in population: 45.43922275808826
Median age in population: 45.50320883840322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 362
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 393
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 7255716
--- Timings ---
Current time: 1559314410804 milliseconds
Total Time:          67.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.6 seconds, 79.4%
Fitness Testing:      8.1 seconds, 12.0%
Report:               5.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 49                 
Correct output: 23                  | Program output: 41                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 86                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: 41                 
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -30                
Correct output: -39                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 24                 
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: 55                 
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -27                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: -72                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -48                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -75                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: 41                 
Correct output: -88                 | Program output: -29                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -54                
Correct output: -87                 | Program output: 60                 
Correct output: -79                 | Program output: -65                
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 33                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod in3 exec_noop integer_div integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 24
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod in3 exec_noop integer_div integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 24
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (922 917 283 387 922 922 244 922 282 922)
Population mean number of elite cases: 6.72
Count of perfect (error zero) individuals by case: (922 917 283 387 922 922 244 922 282 922)
Population mean number of perfect (error zero) cases: 6.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod in3 exec_noop integer_div integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 20
Size: 24
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 3.277
Median total errors in population: 3
Error averages by case: (0.078 0.083 0.717 0.613 0.078 0.078 0.756 0.078 0.718 0.078)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.059
Average program size in population (points): 28.882
Average percent parens in population: 0.198
Minimum age in population: 43.57066786289215
Maximum age in population: 48.7429622747004
Average age in population: 47.11837132263184
Median age in population: 47.17736727185547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 7466343
--- Timings ---
Current time: 1559314413046 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        55.4 seconds, 79.5%
Fitness Testing:      8.3 seconds, 11.9%
Report:               5.9 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 43                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 53                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: 0                  
Correct output: -82                 | Program output: 49                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 44                 
Correct output: -51                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -23                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop () exec_noop integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop () exec_noop integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 892 222 892 238 235 237 919 441 223)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (905 892 222 892 238 235 237 919 441 223)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in2 boolean_rot) (in3 integer_min) (integer_dup_times print_integer boolean_shove))
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 4.796
Median total errors in population: 5
Error averages by case: (0.095 0.108 0.778 0.108 0.762 0.765 0.763 0.081 0.559 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.581
Average program size in population (points): 28.219
Average percent parens in population: 0.196
Minimum age in population: 45.97043126821518
Maximum age in population: 50.44221445731819
Average age in population: 48.70956818362325
Median age in population: 48.7956149270758
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 7677309
--- Timings ---
Current time: 1559314415295 milliseconds
Total Time:          72.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.3 seconds, 79.6%
Fitness Testing:      8.5 seconds, 11.8%
Report:               6.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 26                 
Correct output: 6                   | Program output: 19                 
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: 6                  
Correct output: -94                 | Program output: -29                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: -3                 
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: -8                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -70                
Correct output: -77                 | Program output: 24                 
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -31                
Correct output: -73                 | Program output: 88                 
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: 0                  
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: 43                 
Correct output: -69                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: 24                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -30                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: 12                 
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 74                 
Correct output: 35                  | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 -51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank boolean_rot boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 -51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank boolean_rot boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (546 519 543 190 520 545 756 571 923 517)
Population mean number of elite cases: 5.63
Count of perfect (error zero) individuals by case: (546 519 543 190 520 545 756 571 923 517)
Population mean number of perfect (error zero) cases: 5.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction exec_if} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 exec_if () (in3) exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup) (in4 boolean_rot) (in3 integer_min integer_dup_times print_integer boolean_shove)) () ())
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 36
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 4.37
Median total errors in population: 4
Error averages by case: (0.454 0.481 0.457 0.81 0.48 0.455 0.244 0.429 0.077 0.483)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.548
Average program size in population (points): 29.926
Average percent parens in population: 0.209
Minimum age in population: 47.02054956555367
Maximum age in population: 51.58570947591215
Average age in population: 49.83309515636507
Median age in population: 49.91426999121904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 7887443
--- Timings ---
Current time: 1559314417619 milliseconds
Total Time:          74.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 79.7%
Fitness Testing:      8.7 seconds, 11.7%
Report:               6.2 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: 98                 
Correct output: -19                 | Program output: -19                
Correct output: -34                 | Program output: 6                  
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -10                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 24                 
Correct output: 23                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 32                 
Correct output: 1                   | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: 33                 
Correct output: -55                 | Program output: -10                
Correct output: -94                 | Program output: -46                
Correct output: -94                 | Program output: 39                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: 26                 
Correct output: -65                 | Program output: -33                
Correct output: -85                 | Program output: -85                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -70                
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: 27                 
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -17                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -20                
Correct output: -90                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -23                
Correct output: -64                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -48                
Correct output: -81                 | Program output: -67                
Correct output: -70                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -16                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -4                 
Correct output: -33                 | Program output: 36                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -39                
Correct output: -14                 | Program output: 20                 
Correct output: -83                 | Program output: 22                 
Correct output: -51                 | Program output: -16                
Correct output: -58                 | Program output: -37                
Correct output: -29                 | Program output: 15                 
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -88                
Correct output: -96                 | Program output: 43                 
Correct output: -69                 | Program output: -69                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -38                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -34                
Correct output: -88                 | Program output: -88                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -12                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 3, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in2 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Lexicase best errors: [0 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 3, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in2 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Zero cases best errors: [0 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 281 275 279 561 888 310 309 613 619)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (311 281 275 279 561 888 310 309 613 619)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 2, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod in3 exec_noop integer_div integer_div integer_dup integer_gte exec_pop (integer_sub integer_dup_times boolean_yank integer_inc boolean_dup_items) integer_shove exec_s_when_autoconstructing (boolean_eq exec_s_when_autoconstructing (boolean_dup in4 boolean_rot) (in2 integer_min integer_dup_times print_integer boolean_shove) ()) () ())
Errors: [0 1 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 26
Size: 34
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.554
Median total errors in population: 6
Error averages by case: (0.689 0.719 0.725 0.721 0.439 0.112 0.69 0.691 0.387 0.381)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.484
Average program size in population (points): 29.967
Average percent parens in population: 0.212
Minimum age in population: 48.02054956555367
Maximum age in population: 53.00798977771774
Average age in population: 51.34471313945996
Median age in population: 51.42548646172509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 8098067
--- Timings ---
Current time: 1559314419899 milliseconds
Total Time:          76.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 79.8%
Fitness Testing:      8.9 seconds, 11.6%
Report:               6.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: 1                  
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 82                 
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 19                  | Program output: 34                 
Correct output: 23                  | Program output: 39                 
Correct output: 45                  | Program output: 45                 
Correct output: 13                  | Program output: 13                 
Correct output: 27                  | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 49                  | Program output: 49                 
Correct output: 16                  | Program output: 16                 
Correct output: 40                  | Program output: 40                 
Correct output: 18                  | Program output: 60                 
Correct output: 44                  | Program output: 44                 
Correct output: 15                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 57                  | Program output: 72                 
Correct output: 10                  | Program output: 13                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -64                
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 52                 
Correct output: -72                 | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -39                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 30                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: 59                 
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: -39                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: 29                 
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (566 567 919 323 933 567 585 924 585 664)
Population mean number of elite cases: 6.63
Count of perfect (error zero) individuals by case: (566 567 919 323 933 567 585 924 585 664)
Population mean number of perfect (error zero) cases: 6.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 25
Size: 30
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 3.367
Median total errors in population: 2
Error averages by case: (0.434 0.433 0.081 0.677 0.067 0.433 0.415 0.076 0.415 0.336)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.997
Average program size in population (points): 32.56
Average percent parens in population: 0.199
Minimum age in population: 49.02054956555367
Maximum age in population: 54.63516102847643
Average age in population: 53.08893692926748
Median age in population: 53.01272526360117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.01
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 8334771
--- Timings ---
Current time: 1559314422130 milliseconds
Total Time:          78.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.0 seconds, 79.9%
Fitness Testing:      9.1 seconds, 11.6%
Report:               6.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 327
Test mean error for best: 0.32700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output:                    
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times boolean_rot) (in4 integer_min in2 integer_min integer_dup_times print_integer boolean_shove))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times boolean_rot) (in4 integer_min in2 integer_min integer_dup_times print_integer boolean_shove))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (654 655 654 795 939 938 654 367 795 861)
Population mean number of elite cases: 7.31
Count of perfect (error zero) individuals by case: (654 655 654 795 939 938 654 367 795 861)
Population mean number of perfect (error zero) cases: 7.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -51} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 32
Size: 40
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 2.688
Median total errors in population: 1
Error averages by case: (0.346 0.345 0.346 0.205 0.061 0.062 0.346 0.633 0.205 0.139)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.453
Average program size in population (points): 30.902
Average percent parens in population: 0.175
Minimum age in population: 52.22043126821518
Maximum age in population: 55.99850331107154
Average age in population: 54.31864901524171
Median age in population: 54.53370216226904
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 405
Genome diversity (% unique genomes):	 0.391
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 419
Syntactic diversity (% unique Push programs):	 0.36
Total error diversity:				 0.011
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 8577939
--- Timings ---
Current time: 1559314424402 milliseconds
Total Time:          81.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.8 seconds, 80.0%
Fitness Testing:      9.3 seconds, 11.5%
Report:               6.8 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 40


Auto-simplifying with starting size: 40
step: 0
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 500
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 1000
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 1500
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 2000
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 2500
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 3000
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 3500
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 4000
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 4500
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

step: 5000
program: (-51 integer_mod exec_noop integer_dup integer_gte exec_pop (exec_noop) integer_dup_times boolean_yank integer_inc boolean_dup_items integer_gte boolean_swap integer_shove exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min boolean_rot) (in4 exec_s_when_autoconstructing (in1 boolean_flush) (in3 integer_min integer_dup_times in2 integer_min integer_dup_times print_integer boolean_shove) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 40

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 327
Test mean error for best: 0.32700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output:                    
Correct output: -34                 | Program output: -34                
Correct output: 82                  | Program output: 100                
Correct output: -43                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: 26                  | Program output: 26                 
Correct output: -25                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: 85                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: 16                  | Program output: 16                 
Correct output: 93                  | Program output: 93                 
Correct output: 21                  | Program output: 22                 
Correct output: 12                  | Program output: 87                 
Correct output: 23                  | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: 23                  | Program output: 23                 
Correct output: 45                  | Program output: 48                 
Correct output: 13                  | Program output: 35                 
Correct output: 27                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 85                 
Correct output: 6                   | Program output: 56                 
Correct output: 49                  | Program output: 59                 
Correct output: 16                  | Program output: 29                 
Correct output: 40                  | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 44                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 36                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -49                
Correct output: -8                  | Program output: -8                 
Correct output: -65                 | Program output: -65                
Correct output: -85                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -64                 | Program output: -46                
Correct output: -22                 | Program output: -15                
Correct output: -82                 | Program output: -82                
Correct output: -66                 | Program output: -66                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -73                 | Program output: -73                
Correct output: -32                 | Program output: -32                
Correct output: -64                 | Program output: -64                
Correct output: -40                 | Program output: -40                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -64                
Correct output: 48                  | Program output: 48                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -41                 | Program output: -41                
Correct output: -14                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -29                 | Program output: -29                
Correct output: -39                 | Program output: -23                
Correct output: -88                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -40                
Correct output: 30                  | Program output: 74                 
Correct output: -99                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: -79                
Correct output: 35                  | Program output: 93                 
Correct output: 26                  | Program output: 74                 
Correct output: -39                 | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -50                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
;;******************************
