Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[75 81 75 75] 75] [[-3 -3 -3 -24] -24] [[13 -80 -80 -80] -80] [[14 14 14 -3] -3] [[83 83 40 83] 40] [[-80 -80 -90 -80] -90] [[85 85 -62 85] -62] [[-34 73 -34 -34] -34] [[90 90 90 -84] -84] [[75 75 38 75] 38] [(-9 -9 -9 -9) -9] [(-97 -97 -97 -97) -97] [(93 93 93 93) 93] [(-78 -78 -78 -78) -78] [(73 73 73 73) 73] [(43 76 94 87) 43] [(69 60 45 65) 45] [(54 4 47 62) 4] [(37 100 83 95) 37] [(98 32 65 8) 8] [(96 91 41 37) 37] [(62 48 94 92) 48] [(73 19 26 13) 13] [(71 20 77 88) 20] [(47 69 87 25) 25] [(25 66 95 98) 25] [(41 44 19 72) 19] [(45 31 81 59) 31] [(35 74 72 56) 35] [(74 12 24 0) 0] [(51 18 7 11) 7] [(18 50 20 33) 18] [(15 12 92 33) 12] [(91 91 36 94) 36] [(52 45 32 9) 9] [(-49 -29 -13 -32) -49] [(5 60 -76 -56) -76] [(-91 63 -2 -41) -91] [(-60 -76 -76 26) -76] [(-74 22 22 -95) -95] [(95 84 -64 68) -64] [(77 1 -89 -1) -89] [(19 34 -90 99) -90] [(88 -19 -91 21) -91] [(-11 79 75 -56) -56] [(-21 26 67 52) -21] [(-82 2 -67 -38) -82] [(71 -96 42 74) -96] [(9 -13 59 -89) -89] [(-34 56 -7 -89) -89] [(67 8 60 90) 8] [(-95 62 -30 35) -95] [(30 -48 -17 5) -48] [(8 -51 -49 38) -51] [(9 -72 64 23) -72] [(47 -71 5 32) -71] [(86 -54 -94 61) -94] [(-57 16 65 -80) -80] [(-38 55 40 -63) -63] [(-3 8 -67 -17) -67] [(-95 92 43 30) -95] [(47 71 47 3) 3] [(-51 45 -16 -3) -51] [(1 44 74 -23) -23] [(2 94 -89 12) -89] [(-17 -72 23 -2) -72] [(-32 -67 20 23) -67] [(-97 98 -2 25) -97] [(87 -57 -29 45) -57] [(-86 22 4 93) -86] [(-40 -43 -13 48) -43] [(-41 56 59 -48) -48] [(-89 -15 -84 15) -89] [(-56 -81 95 -28) -81] [(-61 10 -24 100) -61] [(-62 2 33 9) -62] [(-57 -85 75 70) -85] [(49 95 -100 31) -100] [(-70 -18 -27 -11) -70] [(75 31 -60 -82) -82] [(-74 53 78 9) -74] [(-100 88 13 -32) -100] [(15 51 -84 35) -84] [(-35 -19 -27 26) -35] [(-17 4 -41 20) -41] [(53 -89 -4 61) -89] [(-61 87 53 1) -61] [(65 -100 22 50) -100] [(35 4 -75 -48) -75] [(-73 49 87 46) -73] [(19 69 8 -96) -96] [(-48 100 -43 2) -48] [(88 75 27 73) 27] [(-4 63 -46 -78) -78] [(-33 54 -35 -34) -35])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[75 81 75 75] 75]
Train Case:   6 | Input/Output: [[-3 -3 -3 -24] -24]
Train Case:   7 | Input/Output: [[13 -80 -80 -80] -80]
Train Case:   8 | Input/Output: [[14 14 14 -3] -3]
Train Case:   9 | Input/Output: [[83 83 40 83] 40]
Train Case:  10 | Input/Output: [[-80 -80 -90 -80] -90]
Train Case:  11 | Input/Output: [[85 85 -62 85] -62]
Train Case:  12 | Input/Output: [[-34 73 -34 -34] -34]
Train Case:  13 | Input/Output: [[90 90 90 -84] -84]
Train Case:  14 | Input/Output: [[75 75 38 75] 38]
Train Case:  15 | Input/Output: [(-9 -9 -9 -9) -9]
Train Case:  16 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  17 | Input/Output: [(93 93 93 93) 93]
Train Case:  18 | Input/Output: [(-78 -78 -78 -78) -78]
Train Case:  19 | Input/Output: [(73 73 73 73) 73]
Train Case:  20 | Input/Output: [(43 76 94 87) 43]
Train Case:  21 | Input/Output: [(69 60 45 65) 45]
Train Case:  22 | Input/Output: [(54 4 47 62) 4]
Train Case:  23 | Input/Output: [(37 100 83 95) 37]
Train Case:  24 | Input/Output: [(98 32 65 8) 8]
Train Case:  25 | Input/Output: [(96 91 41 37) 37]
Train Case:  26 | Input/Output: [(62 48 94 92) 48]
Train Case:  27 | Input/Output: [(73 19 26 13) 13]
Train Case:  28 | Input/Output: [(71 20 77 88) 20]
Train Case:  29 | Input/Output: [(47 69 87 25) 25]
Train Case:  30 | Input/Output: [(25 66 95 98) 25]
Train Case:  31 | Input/Output: [(41 44 19 72) 19]
Train Case:  32 | Input/Output: [(45 31 81 59) 31]
Train Case:  33 | Input/Output: [(35 74 72 56) 35]
Train Case:  34 | Input/Output: [(74 12 24 0) 0]
Train Case:  35 | Input/Output: [(51 18 7 11) 7]
Train Case:  36 | Input/Output: [(18 50 20 33) 18]
Train Case:  37 | Input/Output: [(15 12 92 33) 12]
Train Case:  38 | Input/Output: [(91 91 36 94) 36]
Train Case:  39 | Input/Output: [(52 45 32 9) 9]
Train Case:  40 | Input/Output: [(-49 -29 -13 -32) -49]
Train Case:  41 | Input/Output: [(5 60 -76 -56) -76]
Train Case:  42 | Input/Output: [(-91 63 -2 -41) -91]
Train Case:  43 | Input/Output: [(-60 -76 -76 26) -76]
Train Case:  44 | Input/Output: [(-74 22 22 -95) -95]
Train Case:  45 | Input/Output: [(95 84 -64 68) -64]
Train Case:  46 | Input/Output: [(77 1 -89 -1) -89]
Train Case:  47 | Input/Output: [(19 34 -90 99) -90]
Train Case:  48 | Input/Output: [(88 -19 -91 21) -91]
Train Case:  49 | Input/Output: [(-11 79 75 -56) -56]
Train Case:  50 | Input/Output: [(-21 26 67 52) -21]
Train Case:  51 | Input/Output: [(-82 2 -67 -38) -82]
Train Case:  52 | Input/Output: [(71 -96 42 74) -96]
Train Case:  53 | Input/Output: [(9 -13 59 -89) -89]
Train Case:  54 | Input/Output: [(-34 56 -7 -89) -89]
Train Case:  55 | Input/Output: [(67 8 60 90) 8]
Train Case:  56 | Input/Output: [(-95 62 -30 35) -95]
Train Case:  57 | Input/Output: [(30 -48 -17 5) -48]
Train Case:  58 | Input/Output: [(8 -51 -49 38) -51]
Train Case:  59 | Input/Output: [(9 -72 64 23) -72]
Train Case:  60 | Input/Output: [(47 -71 5 32) -71]
Train Case:  61 | Input/Output: [(86 -54 -94 61) -94]
Train Case:  62 | Input/Output: [(-57 16 65 -80) -80]
Train Case:  63 | Input/Output: [(-38 55 40 -63) -63]
Train Case:  64 | Input/Output: [(-3 8 -67 -17) -67]
Train Case:  65 | Input/Output: [(-95 92 43 30) -95]
Train Case:  66 | Input/Output: [(47 71 47 3) 3]
Train Case:  67 | Input/Output: [(-51 45 -16 -3) -51]
Train Case:  68 | Input/Output: [(1 44 74 -23) -23]
Train Case:  69 | Input/Output: [(2 94 -89 12) -89]
Train Case:  70 | Input/Output: [(-17 -72 23 -2) -72]
Train Case:  71 | Input/Output: [(-32 -67 20 23) -67]
Train Case:  72 | Input/Output: [(-97 98 -2 25) -97]
Train Case:  73 | Input/Output: [(87 -57 -29 45) -57]
Train Case:  74 | Input/Output: [(-86 22 4 93) -86]
Train Case:  75 | Input/Output: [(-40 -43 -13 48) -43]
Train Case:  76 | Input/Output: [(-41 56 59 -48) -48]
Train Case:  77 | Input/Output: [(-89 -15 -84 15) -89]
Train Case:  78 | Input/Output: [(-56 -81 95 -28) -81]
Train Case:  79 | Input/Output: [(-61 10 -24 100) -61]
Train Case:  80 | Input/Output: [(-62 2 33 9) -62]
Train Case:  81 | Input/Output: [(-57 -85 75 70) -85]
Train Case:  82 | Input/Output: [(49 95 -100 31) -100]
Train Case:  83 | Input/Output: [(-70 -18 -27 -11) -70]
Train Case:  84 | Input/Output: [(75 31 -60 -82) -82]
Train Case:  85 | Input/Output: [(-74 53 78 9) -74]
Train Case:  86 | Input/Output: [(-100 88 13 -32) -100]
Train Case:  87 | Input/Output: [(15 51 -84 35) -84]
Train Case:  88 | Input/Output: [(-35 -19 -27 26) -35]
Train Case:  89 | Input/Output: [(-17 4 -41 20) -41]
Train Case:  90 | Input/Output: [(53 -89 -4 61) -89]
Train Case:  91 | Input/Output: [(-61 87 53 1) -61]
Train Case:  92 | Input/Output: [(65 -100 22 50) -100]
Train Case:  93 | Input/Output: [(35 4 -75 -48) -75]
Train Case:  94 | Input/Output: [(-73 49 87 46) -73]
Train Case:  95 | Input/Output: [(19 69 8 -96) -96]
Train Case:  96 | Input/Output: [(-48 100 -43 2) -48]
Train Case:  97 | Input/Output: [(88 75 27 73) 27]
Train Case:  98 | Input/Output: [(-4 63 -46 -78) -78]
Train Case:  99 | Input/Output: [(-33 54 -35 -34) -35]
Test Case:   0 | Input/Output: [[-58 46 46 46] -58]
Test Case:   1 | Input/Output: [[-95 63 63 63] -95]
Test Case:   2 | Input/Output: [[41 -66 -66 -66] -66]
Test Case:   3 | Input/Output: [[-56 -88 -56 -56] -88]
Test Case:   4 | Input/Output: [[-97 -97 51 -97] -97]
Test Case:   5 | Input/Output: [[-1 -9 -1 -1] -9]
Test Case:   6 | Input/Output: [[-37 34 34 34] -37]
Test Case:   7 | Input/Output: [[-87 60 60 60] -87]
Test Case:   8 | Input/Output: [[99 99 -27 99] -27]
Test Case:   9 | Input/Output: [[-10 -73 -73 -73] -73]
Test Case:  10 | Input/Output: [[-44 -44 -32 -44] -44]
Test Case:  11 | Input/Output: [[-16 -19 -19 -19] -19]
Test Case:  12 | Input/Output: [[-82 -82 -82 99] -82]
Test Case:  13 | Input/Output: [[-32 -32 -32 -59] -59]
Test Case:  14 | Input/Output: [[-29 -29 -29 -56] -56]
Test Case:  15 | Input/Output: [[-66 -66 -66 -8] -66]
Test Case:  16 | Input/Output: [[1 54 1 1] 1]
Test Case:  17 | Input/Output: [[91 91 61 91] 61]
Test Case:  18 | Input/Output: [[54 82 82 82] 54]
Test Case:  19 | Input/Output: [[40 40 12 40] 12]
Test Case:  20 | Input/Output: [[40 40 40 87] 40]
Test Case:  21 | Input/Output: [[-91 -91 33 -91] -91]
Test Case:  22 | Input/Output: [[-42 27 -42 -42] -42]
Test Case:  23 | Input/Output: [[-40 -40 -40 4] -40]
Test Case:  24 | Input/Output: [[7 -10 -10 -10] -10]
Test Case:  25 | Input/Output: [[-79 -82 -79 -79] -82]
Test Case:  26 | Input/Output: [[19 -95 -95 -95] -95]
Test Case:  27 | Input/Output: [[-38 46 -38 -38] -38]
Test Case:  28 | Input/Output: [[71 71 71 -4] -4]
Test Case:  29 | Input/Output: [[46 -11 -11 -11] -11]
Test Case:  30 | Input/Output: [[-67 -58 -67 -67] -67]
Test Case:  31 | Input/Output: [[14 14 14 28] 14]
Test Case:  32 | Input/Output: [[3 3 72 3] 3]
Test Case:  33 | Input/Output: [[-92 -54 -92 -92] -92]
Test Case:  34 | Input/Output: [[-91 -91 -91 -41] -91]
Test Case:  35 | Input/Output: [[72 -29 72 72] -29]
Test Case:  36 | Input/Output: [[-96 -96 -96 -66] -96]
Test Case:  37 | Input/Output: [[72 72 -40 72] -40]
Test Case:  38 | Input/Output: [[-85 61 61 61] -85]
Test Case:  39 | Input/Output: [[17 97 97 97] 17]
Test Case:  40 | Input/Output: [[27 -51 27 27] -51]
Test Case:  41 | Input/Output: [[-45 -8 -45 -45] -45]
Test Case:  42 | Input/Output: [[-92 -92 -85 -92] -92]
Test Case:  43 | Input/Output: [[7 -37 -37 -37] -37]
Test Case:  44 | Input/Output: [[-78 -78 31 -78] -78]
Test Case:  45 | Input/Output: [[69 -72 -72 -72] -72]
Test Case:  46 | Input/Output: [[-13 19 -13 -13] -13]
Test Case:  47 | Input/Output: [[3 3 14 3] 3]
Test Case:  48 | Input/Output: [[-91 99 -91 -91] -91]
Test Case:  49 | Input/Output: [[-64 58 58 58] -64]
Test Case:  50 | Input/Output: [[-93 -93 -93 73] -93]
Test Case:  51 | Input/Output: [[26 26 26 9] 9]
Test Case:  52 | Input/Output: [[-92 23 -92 -92] -92]
Test Case:  53 | Input/Output: [[-77 -95 -95 -95] -95]
Test Case:  54 | Input/Output: [[-50 7 -50 -50] -50]
Test Case:  55 | Input/Output: [[47 47 62 47] 47]
Test Case:  56 | Input/Output: [[-92 -92 2 -92] -92]
Test Case:  57 | Input/Output: [[-26 -26 -26 -23] -26]
Test Case:  58 | Input/Output: [[-32 -32 -37 -32] -37]
Test Case:  59 | Input/Output: [[-97 -99 -99 -99] -99]
Test Case:  60 | Input/Output: [[-11 -34 -34 -34] -34]
Test Case:  61 | Input/Output: [[42 42 35 42] 35]
Test Case:  62 | Input/Output: [[45 45 45 42] 42]
Test Case:  63 | Input/Output: [[19 -72 19 19] -72]
Test Case:  64 | Input/Output: [[61 61 -49 61] -49]
Test Case:  65 | Input/Output: [[81 71 81 81] 71]
Test Case:  66 | Input/Output: [[49 4 4 4] 4]
Test Case:  67 | Input/Output: [[-83 -83 6 -83] -83]
Test Case:  68 | Input/Output: [[-65 -65 74 -65] -65]
Test Case:  69 | Input/Output: [[-72 80 -72 -72] -72]
Test Case:  70 | Input/Output: [[-80 -80 -80 -14] -80]
Test Case:  71 | Input/Output: [[28 -16 -16 -16] -16]
Test Case:  72 | Input/Output: [[-26 -26 -5 -26] -26]
Test Case:  73 | Input/Output: [[-95 -95 -95 -78] -95]
Test Case:  74 | Input/Output: [[4 4 4 -12] -12]
Test Case:  75 | Input/Output: [[-68 25 25 25] -68]
Test Case:  76 | Input/Output: [[-66 -80 -66 -66] -80]
Test Case:  77 | Input/Output: [[1 -99 -99 -99] -99]
Test Case:  78 | Input/Output: [[-45 -45 27 -45] -45]
Test Case:  79 | Input/Output: [[5 60 5 5] 5]
Test Case:  80 | Input/Output: [[47 -62 47 47] -62]
Test Case:  81 | Input/Output: [[-46 84 -46 -46] -46]
Test Case:  82 | Input/Output: [[-51 -51 -51 -65] -65]
Test Case:  83 | Input/Output: [[69 -32 -32 -32] -32]
Test Case:  84 | Input/Output: [[-17 -17 -17 31] -17]
Test Case:  85 | Input/Output: [[-49 -49 -35 -49] -49]
Test Case:  86 | Input/Output: [[-19 -19 66 -19] -19]
Test Case:  87 | Input/Output: [[-26 -26 -26 73] -26]
Test Case:  88 | Input/Output: [[-96 -96 -4 -96] -96]
Test Case:  89 | Input/Output: [[-30 74 74 74] -30]
Test Case:  90 | Input/Output: [[12 10 10 10] 10]
Test Case:  91 | Input/Output: [[-34 -34 10 -34] -34]
Test Case:  92 | Input/Output: [[-26 -26 -26 69] -26]
Test Case:  93 | Input/Output: [[7 7 7 -48] -48]
Test Case:  94 | Input/Output: [[-54 51 51 51] -54]
Test Case:  95 | Input/Output: [[-69 -45 -69 -69] -69]
Test Case:  96 | Input/Output: [[-30 74 -30 -30] -30]
Test Case:  97 | Input/Output: [[-20 -20 -20 44] -20]
Test Case:  98 | Input/Output: [[65 65 -1 65] -1]
Test Case:  99 | Input/Output: [[79 -50 79 79] -50]
Test Case: 100 | Input/Output: [(30 30 30 30) 30]
Test Case: 101 | Input/Output: [(99 99 99 99) 99]
Test Case: 102 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 103 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 104 | Input/Output: [(8 8 8 8) 8]
Test Case: 105 | Input/Output: [(91 91 91 91) 91]
Test Case: 106 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 107 | Input/Output: [(37 37 37 37) 37]
Test Case: 108 | Input/Output: [(85 85 85 85) 85]
Test Case: 109 | Input/Output: [(91 91 91 91) 91]
Test Case: 110 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 111 | Input/Output: [(12 12 12 12) 12]
Test Case: 112 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 113 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 114 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 115 | Input/Output: [(57 57 57 57) 57]
Test Case: 116 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 117 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 118 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 119 | Input/Output: [(72 72 72 72) 72]
Test Case: 120 | Input/Output: [(58 58 58 58) 58]
Test Case: 121 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 122 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 123 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 124 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 125 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 126 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 127 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 128 | Input/Output: [(37 37 37 37) 37]
Test Case: 129 | Input/Output: [(73 73 73 73) 73]
Test Case: 130 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 131 | Input/Output: [(68 68 68 68) 68]
Test Case: 132 | Input/Output: [(64 64 64 64) 64]
Test Case: 133 | Input/Output: [(39 39 39 39) 39]
Test Case: 134 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 135 | Input/Output: [(43 43 43 43) 43]
Test Case: 136 | Input/Output: [(85 85 85 85) 85]
Test Case: 137 | Input/Output: [(63 63 63 63) 63]
Test Case: 138 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 139 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 140 | Input/Output: [(77 77 77 77) 77]
Test Case: 141 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 142 | Input/Output: [(100 100 100 100) 100]
Test Case: 143 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 144 | Input/Output: [(52 52 52 52) 52]
Test Case: 145 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 146 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 147 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 148 | Input/Output: [(16 16 16 16) 16]
Test Case: 149 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 150 | Input/Output: [(40 40 40 40) 40]
Test Case: 151 | Input/Output: [(8 8 8 8) 8]
Test Case: 152 | Input/Output: [(85 85 85 85) 85]
Test Case: 153 | Input/Output: [(29 29 29 29) 29]
Test Case: 154 | Input/Output: [(32 32 32 32) 32]
Test Case: 155 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 156 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 157 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 158 | Input/Output: [(84 84 84 84) 84]
Test Case: 159 | Input/Output: [(47 47 47 47) 47]
Test Case: 160 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 161 | Input/Output: [(48 48 48 48) 48]
Test Case: 162 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 163 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 164 | Input/Output: [(38 38 38 38) 38]
Test Case: 165 | Input/Output: [(10 10 10 10) 10]
Test Case: 166 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 167 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 168 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 169 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 170 | Input/Output: [(83 83 83 83) 83]
Test Case: 171 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 172 | Input/Output: [(30 30 30 30) 30]
Test Case: 173 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 174 | Input/Output: [(60 60 60 60) 60]
Test Case: 175 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 176 | Input/Output: [(66 66 66 66) 66]
Test Case: 177 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 178 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 179 | Input/Output: [(37 37 37 37) 37]
Test Case: 180 | Input/Output: [(60 60 60 60) 60]
Test Case: 181 | Input/Output: [(92 92 92 92) 92]
Test Case: 182 | Input/Output: [(54 54 54 54) 54]
Test Case: 183 | Input/Output: [(67 67 67 67) 67]
Test Case: 184 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 185 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 186 | Input/Output: [(42 42 42 42) 42]
Test Case: 187 | Input/Output: [(75 75 75 75) 75]
Test Case: 188 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 189 | Input/Output: [(14 14 14 14) 14]
Test Case: 190 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 191 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 192 | Input/Output: [(34 34 34 34) 34]
Test Case: 193 | Input/Output: [(61 61 61 61) 61]
Test Case: 194 | Input/Output: [(41 41 41 41) 41]
Test Case: 195 | Input/Output: [(64 64 64 64) 64]
Test Case: 196 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 197 | Input/Output: [(68 68 68 68) 68]
Test Case: 198 | Input/Output: [(46 46 46 46) 46]
Test Case: 199 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 200 | Input/Output: [(58 31 97 58) 31]
Test Case: 201 | Input/Output: [(99 61 80 70) 61]
Test Case: 202 | Input/Output: [(93 15 48 95) 15]
Test Case: 203 | Input/Output: [(62 2 10 42) 2]
Test Case: 204 | Input/Output: [(7 42 9 50) 7]
Test Case: 205 | Input/Output: [(21 28 35 35) 21]
Test Case: 206 | Input/Output: [(92 94 27 76) 27]
Test Case: 207 | Input/Output: [(83 0 82 43) 0]
Test Case: 208 | Input/Output: [(57 74 45 59) 45]
Test Case: 209 | Input/Output: [(46 6 19 14) 6]
Test Case: 210 | Input/Output: [(4 20 83 5) 4]
Test Case: 211 | Input/Output: [(21 68 66 87) 21]
Test Case: 212 | Input/Output: [(94 29 99 22) 22]
Test Case: 213 | Input/Output: [(31 14 59 12) 12]
Test Case: 214 | Input/Output: [(78 0 56 95) 0]
Test Case: 215 | Input/Output: [(17 30 47 3) 3]
Test Case: 216 | Input/Output: [(68 2 69 91) 2]
Test Case: 217 | Input/Output: [(89 21 21 82) 21]
Test Case: 218 | Input/Output: [(27 94 44 1) 1]
Test Case: 219 | Input/Output: [(54 44 69 39) 39]
Test Case: 220 | Input/Output: [(71 3 47 25) 3]
Test Case: 221 | Input/Output: [(17 56 36 89) 17]
Test Case: 222 | Input/Output: [(95 6 32 67) 6]
Test Case: 223 | Input/Output: [(51 81 44 11) 11]
Test Case: 224 | Input/Output: [(99 31 42 25) 25]
Test Case: 225 | Input/Output: [(64 26 2 89) 2]
Test Case: 226 | Input/Output: [(83 31 82 77) 31]
Test Case: 227 | Input/Output: [(73 91 24 58) 24]
Test Case: 228 | Input/Output: [(52 61 24 74) 24]
Test Case: 229 | Input/Output: [(34 56 8 11) 8]
Test Case: 230 | Input/Output: [(64 82 47 4) 4]
Test Case: 231 | Input/Output: [(56 67 55 58) 55]
Test Case: 232 | Input/Output: [(18 2 23 70) 2]
Test Case: 233 | Input/Output: [(5 58 42 9) 5]
Test Case: 234 | Input/Output: [(61 59 65 19) 19]
Test Case: 235 | Input/Output: [(87 61 30 20) 20]
Test Case: 236 | Input/Output: [(99 97 42 63) 42]
Test Case: 237 | Input/Output: [(90 66 97 51) 51]
Test Case: 238 | Input/Output: [(86 84 67 51) 51]
Test Case: 239 | Input/Output: [(29 49 88 85) 29]
Test Case: 240 | Input/Output: [(99 22 61 13) 13]
Test Case: 241 | Input/Output: [(98 1 19 10) 1]
Test Case: 242 | Input/Output: [(83 66 40 4) 4]
Test Case: 243 | Input/Output: [(70 42 16 55) 16]
Test Case: 244 | Input/Output: [(92 71 3 4) 3]
Test Case: 245 | Input/Output: [(26 42 54 34) 26]
Test Case: 246 | Input/Output: [(39 2 27 87) 2]
Test Case: 247 | Input/Output: [(48 52 76 71) 48]
Test Case: 248 | Input/Output: [(30 50 44 38) 30]
Test Case: 249 | Input/Output: [(40 75 72 22) 22]
Test Case: 250 | Input/Output: [(59 82 78 33) 33]
Test Case: 251 | Input/Output: [(84 91 21 51) 21]
Test Case: 252 | Input/Output: [(10 43 17 80) 10]
Test Case: 253 | Input/Output: [(19 33 27 95) 19]
Test Case: 254 | Input/Output: [(23 54 79 27) 23]
Test Case: 255 | Input/Output: [(0 17 53 90) 0]
Test Case: 256 | Input/Output: [(58 56 40 55) 40]
Test Case: 257 | Input/Output: [(8 59 0 30) 0]
Test Case: 258 | Input/Output: [(64 99 0 19) 0]
Test Case: 259 | Input/Output: [(70 94 84 18) 18]
Test Case: 260 | Input/Output: [(83 28 46 89) 28]
Test Case: 261 | Input/Output: [(16 59 11 53) 11]
Test Case: 262 | Input/Output: [(21 57 73 45) 21]
Test Case: 263 | Input/Output: [(68 61 71 65) 61]
Test Case: 264 | Input/Output: [(47 99 15 13) 13]
Test Case: 265 | Input/Output: [(81 94 31 29) 29]
Test Case: 266 | Input/Output: [(52 4 15 45) 4]
Test Case: 267 | Input/Output: [(55 88 93 81) 55]
Test Case: 268 | Input/Output: [(3 52 29 40) 3]
Test Case: 269 | Input/Output: [(87 80 13 25) 13]
Test Case: 270 | Input/Output: [(93 93 10 78) 10]
Test Case: 271 | Input/Output: [(13 32 73 59) 13]
Test Case: 272 | Input/Output: [(77 30 29 74) 29]
Test Case: 273 | Input/Output: [(46 5 50 50) 5]
Test Case: 274 | Input/Output: [(49 59 44 95) 44]
Test Case: 275 | Input/Output: [(81 67 100 27) 27]
Test Case: 276 | Input/Output: [(41 100 69 50) 41]
Test Case: 277 | Input/Output: [(34 35 68 13) 13]
Test Case: 278 | Input/Output: [(89 7 15 80) 7]
Test Case: 279 | Input/Output: [(57 60 21 65) 21]
Test Case: 280 | Input/Output: [(55 65 13 27) 13]
Test Case: 281 | Input/Output: [(53 15 43 51) 15]
Test Case: 282 | Input/Output: [(54 2 95 81) 2]
Test Case: 283 | Input/Output: [(39 33 77 47) 33]
Test Case: 284 | Input/Output: [(19 35 31 39) 19]
Test Case: 285 | Input/Output: [(85 51 32 79) 32]
Test Case: 286 | Input/Output: [(2 60 63 46) 2]
Test Case: 287 | Input/Output: [(68 59 18 24) 18]
Test Case: 288 | Input/Output: [(20 77 21 59) 20]
Test Case: 289 | Input/Output: [(25 83 65 6) 6]
Test Case: 290 | Input/Output: [(3 2 67 52) 2]
Test Case: 291 | Input/Output: [(79 10 4 91) 4]
Test Case: 292 | Input/Output: [(69 78 9 64) 9]
Test Case: 293 | Input/Output: [(95 36 18 69) 18]
Test Case: 294 | Input/Output: [(47 10 38 50) 10]
Test Case: 295 | Input/Output: [(100 33 74 4) 4]
Test Case: 296 | Input/Output: [(26 40 34 51) 26]
Test Case: 297 | Input/Output: [(75 47 54 93) 47]
Test Case: 298 | Input/Output: [(33 78 1 44) 1]
Test Case: 299 | Input/Output: [(5 36 23 2) 2]
Test Case: 300 | Input/Output: [(85 20 66 49) 20]
Test Case: 301 | Input/Output: [(64 26 14 59) 14]
Test Case: 302 | Input/Output: [(73 55 3 82) 3]
Test Case: 303 | Input/Output: [(63 9 96 92) 9]
Test Case: 304 | Input/Output: [(4 11 48 41) 4]
Test Case: 305 | Input/Output: [(38 11 91 83) 11]
Test Case: 306 | Input/Output: [(40 94 98 32) 32]
Test Case: 307 | Input/Output: [(52 37 88 69) 37]
Test Case: 308 | Input/Output: [(76 44 5 89) 5]
Test Case: 309 | Input/Output: [(43 83 16 13) 13]
Test Case: 310 | Input/Output: [(74 77 30 8) 8]
Test Case: 311 | Input/Output: [(7 12 62 2) 2]
Test Case: 312 | Input/Output: [(72 97 97 94) 72]
Test Case: 313 | Input/Output: [(99 68 50 52) 50]
Test Case: 314 | Input/Output: [(68 63 12 72) 12]
Test Case: 315 | Input/Output: [(27 82 18 36) 18]
Test Case: 316 | Input/Output: [(41 25 48 25) 25]
Test Case: 317 | Input/Output: [(42 5 7 6) 5]
Test Case: 318 | Input/Output: [(9 75 82 2) 2]
Test Case: 319 | Input/Output: [(97 80 16 86) 16]
Test Case: 320 | Input/Output: [(57 34 5 33) 5]
Test Case: 321 | Input/Output: [(45 70 54 12) 12]
Test Case: 322 | Input/Output: [(55 63 4 76) 4]
Test Case: 323 | Input/Output: [(75 85 23 96) 23]
Test Case: 324 | Input/Output: [(11 16 40 77) 11]
Test Case: 325 | Input/Output: [(98 5 89 77) 5]
Test Case: 326 | Input/Output: [(14 4 66 37) 4]
Test Case: 327 | Input/Output: [(72 64 76 49) 49]
Test Case: 328 | Input/Output: [(71 84 78 49) 49]
Test Case: 329 | Input/Output: [(3 81 98 97) 3]
Test Case: 330 | Input/Output: [(54 87 15 3) 3]
Test Case: 331 | Input/Output: [(60 25 82 46) 25]
Test Case: 332 | Input/Output: [(47 64 2 85) 2]
Test Case: 333 | Input/Output: [(10 63 13 96) 10]
Test Case: 334 | Input/Output: [(92 50 100 88) 50]
Test Case: 335 | Input/Output: [(66 30 92 68) 30]
Test Case: 336 | Input/Output: [(51 1 58 4) 1]
Test Case: 337 | Input/Output: [(58 53 55 42) 42]
Test Case: 338 | Input/Output: [(25 52 68 43) 25]
Test Case: 339 | Input/Output: [(58 28 21 53) 21]
Test Case: 340 | Input/Output: [(1 45 0 0) 0]
Test Case: 341 | Input/Output: [(26 84 15 57) 15]
Test Case: 342 | Input/Output: [(48 93 81 5) 5]
Test Case: 343 | Input/Output: [(13 32 14 37) 13]
Test Case: 344 | Input/Output: [(58 70 54 96) 54]
Test Case: 345 | Input/Output: [(68 48 25 8) 8]
Test Case: 346 | Input/Output: [(89 82 6 3) 3]
Test Case: 347 | Input/Output: [(10 84 25 59) 10]
Test Case: 348 | Input/Output: [(85 26 21 87) 21]
Test Case: 349 | Input/Output: [(69 42 33 43) 33]
Test Case: 350 | Input/Output: [(3 0 63 10) 0]
Test Case: 351 | Input/Output: [(87 13 39 56) 13]
Test Case: 352 | Input/Output: [(20 22 28 31) 20]
Test Case: 353 | Input/Output: [(97 88 96 5) 5]
Test Case: 354 | Input/Output: [(22 22 3 38) 3]
Test Case: 355 | Input/Output: [(62 2 43 22) 2]
Test Case: 356 | Input/Output: [(7 54 50 84) 7]
Test Case: 357 | Input/Output: [(6 32 19 99) 6]
Test Case: 358 | Input/Output: [(14 74 57 89) 14]
Test Case: 359 | Input/Output: [(27 2 53 6) 2]
Test Case: 360 | Input/Output: [(50 96 27 95) 27]
Test Case: 361 | Input/Output: [(7 48 79 52) 7]
Test Case: 362 | Input/Output: [(97 65 4 34) 4]
Test Case: 363 | Input/Output: [(53 69 66 5) 5]
Test Case: 364 | Input/Output: [(95 79 80 89) 79]
Test Case: 365 | Input/Output: [(18 59 46 74) 18]
Test Case: 366 | Input/Output: [(93 46 17 67) 17]
Test Case: 367 | Input/Output: [(87 60 10 13) 10]
Test Case: 368 | Input/Output: [(18 26 22 72) 18]
Test Case: 369 | Input/Output: [(21 56 63 66) 21]
Test Case: 370 | Input/Output: [(35 47 31 32) 31]
Test Case: 371 | Input/Output: [(2 99 25 66) 2]
Test Case: 372 | Input/Output: [(62 21 34 62) 21]
Test Case: 373 | Input/Output: [(65 46 82 12) 12]
Test Case: 374 | Input/Output: [(77 79 94 92) 77]
Test Case: 375 | Input/Output: [(29 9 16 83) 9]
Test Case: 376 | Input/Output: [(19 87 48 84) 19]
Test Case: 377 | Input/Output: [(77 29 94 18) 18]
Test Case: 378 | Input/Output: [(62 13 95 46) 13]
Test Case: 379 | Input/Output: [(49 63 87 79) 49]
Test Case: 380 | Input/Output: [(20 56 43 43) 20]
Test Case: 381 | Input/Output: [(65 62 88 49) 49]
Test Case: 382 | Input/Output: [(1 52 47 81) 1]
Test Case: 383 | Input/Output: [(71 70 9 5) 5]
Test Case: 384 | Input/Output: [(18 85 23 59) 18]
Test Case: 385 | Input/Output: [(6 58 39 58) 6]
Test Case: 386 | Input/Output: [(74 92 72 17) 17]
Test Case: 387 | Input/Output: [(54 68 35 68) 35]
Test Case: 388 | Input/Output: [(73 23 71 28) 23]
Test Case: 389 | Input/Output: [(74 9 55 92) 9]
Test Case: 390 | Input/Output: [(58 67 16 8) 8]
Test Case: 391 | Input/Output: [(69 89 71 49) 49]
Test Case: 392 | Input/Output: [(79 71 19 12) 12]
Test Case: 393 | Input/Output: [(16 81 51 46) 16]
Test Case: 394 | Input/Output: [(47 85 89 0) 0]
Test Case: 395 | Input/Output: [(38 63 7 14) 7]
Test Case: 396 | Input/Output: [(93 11 68 34) 11]
Test Case: 397 | Input/Output: [(4 67 38 75) 4]
Test Case: 398 | Input/Output: [(18 53 18 20) 18]
Test Case: 399 | Input/Output: [(20 83 20 87) 20]
Test Case: 400 | Input/Output: [(-77 73 27 -86) -86]
Test Case: 401 | Input/Output: [(-83 75 -57 -98) -98]
Test Case: 402 | Input/Output: [(80 -5 -44 -9) -44]
Test Case: 403 | Input/Output: [(-4 -88 11 13) -88]
Test Case: 404 | Input/Output: [(51 -89 -49 83) -89]
Test Case: 405 | Input/Output: [(-71 72 -97 20) -97]
Test Case: 406 | Input/Output: [(-1 6 36 13) -1]
Test Case: 407 | Input/Output: [(-19 -78 78 75) -78]
Test Case: 408 | Input/Output: [(18 58 21 -49) -49]
Test Case: 409 | Input/Output: [(-48 22 -74 94) -74]
Test Case: 410 | Input/Output: [(40 -63 14 -11) -63]
Test Case: 411 | Input/Output: [(49 -24 83 73) -24]
Test Case: 412 | Input/Output: [(-25 -96 96 61) -96]
Test Case: 413 | Input/Output: [(98 82 -64 -68) -68]
Test Case: 414 | Input/Output: [(-90 -5 64 17) -90]
Test Case: 415 | Input/Output: [(-41 -20 -49 -75) -75]
Test Case: 416 | Input/Output: [(54 95 53 -41) -41]
Test Case: 417 | Input/Output: [(35 3 -58 -58) -58]
Test Case: 418 | Input/Output: [(-41 -32 -10 -82) -82]
Test Case: 419 | Input/Output: [(6 15 -89 -99) -99]
Test Case: 420 | Input/Output: [(-62 -5 -96 -32) -96]
Test Case: 421 | Input/Output: [(37 37 74 -35) -35]
Test Case: 422 | Input/Output: [(36 31 63 42) 31]
Test Case: 423 | Input/Output: [(14 -79 -32 -8) -79]
Test Case: 424 | Input/Output: [(-38 0 17 -97) -97]
Test Case: 425 | Input/Output: [(90 78 29 31) 29]
Test Case: 426 | Input/Output: [(-62 92 -27 52) -62]
Test Case: 427 | Input/Output: [(17 -7 25 80) -7]
Test Case: 428 | Input/Output: [(49 -87 -66 -79) -87]
Test Case: 429 | Input/Output: [(-90 84 79 -44) -90]
Test Case: 430 | Input/Output: [(-68 -43 95 -74) -74]
Test Case: 431 | Input/Output: [(-88 72 -5 30) -88]
Test Case: 432 | Input/Output: [(24 -52 57 -95) -95]
Test Case: 433 | Input/Output: [(83 51 -37 -9) -37]
Test Case: 434 | Input/Output: [(-56 -6 -46 -11) -56]
Test Case: 435 | Input/Output: [(-80 -100 -79 33) -100]
Test Case: 436 | Input/Output: [(52 16 1 -48) -48]
Test Case: 437 | Input/Output: [(45 68 69 -58) -58]
Test Case: 438 | Input/Output: [(9 30 95 90) 9]
Test Case: 439 | Input/Output: [(47 13 16 -46) -46]
Test Case: 440 | Input/Output: [(56 -45 -20 -68) -68]
Test Case: 441 | Input/Output: [(-90 -94 -57 -62) -94]
Test Case: 442 | Input/Output: [(68 25 6 -41) -41]
Test Case: 443 | Input/Output: [(-88 -9 -2 -29) -88]
Test Case: 444 | Input/Output: [(77 -22 -58 100) -58]
Test Case: 445 | Input/Output: [(36 89 60 54) 36]
Test Case: 446 | Input/Output: [(96 -25 51 18) -25]
Test Case: 447 | Input/Output: [(-64 60 35 -21) -64]
Test Case: 448 | Input/Output: [(66 -94 11 -69) -94]
Test Case: 449 | Input/Output: [(35 63 -51 5) -51]
Test Case: 450 | Input/Output: [(-13 -4 16 -91) -91]
Test Case: 451 | Input/Output: [(21 71 70 54) 21]
Test Case: 452 | Input/Output: [(38 -7 -99 28) -99]
Test Case: 453 | Input/Output: [(70 31 5 53) 5]
Test Case: 454 | Input/Output: [(-4 -11 -15 10) -15]
Test Case: 455 | Input/Output: [(1 91 -56 -83) -83]
Test Case: 456 | Input/Output: [(12 -76 79 55) -76]
Test Case: 457 | Input/Output: [(-79 32 -72 -3) -79]
Test Case: 458 | Input/Output: [(-11 53 23 36) -11]
Test Case: 459 | Input/Output: [(67 -57 56 -58) -58]
Test Case: 460 | Input/Output: [(98 -27 -29 -27) -29]
Test Case: 461 | Input/Output: [(84 59 -4 98) -4]
Test Case: 462 | Input/Output: [(-2 -78 -22 -83) -83]
Test Case: 463 | Input/Output: [(13 76 -53 -60) -60]
Test Case: 464 | Input/Output: [(-76 41 21 96) -76]
Test Case: 465 | Input/Output: [(37 -51 -37 -5) -51]
Test Case: 466 | Input/Output: [(95 -66 -49 -76) -76]
Test Case: 467 | Input/Output: [(28 -6 5 3) -6]
Test Case: 468 | Input/Output: [(17 -33 -47 -84) -84]
Test Case: 469 | Input/Output: [(29 84 -23 31) -23]
Test Case: 470 | Input/Output: [(-42 75 33 -14) -42]
Test Case: 471 | Input/Output: [(67 62 84 53) 53]
Test Case: 472 | Input/Output: [(42 -55 -39 -89) -89]
Test Case: 473 | Input/Output: [(-17 -74 -22 -37) -74]
Test Case: 474 | Input/Output: [(-12 -87 -93 40) -93]
Test Case: 475 | Input/Output: [(82 78 -87 -13) -87]
Test Case: 476 | Input/Output: [(2 38 -1 -4) -4]
Test Case: 477 | Input/Output: [(76 -70 72 -18) -70]
Test Case: 478 | Input/Output: [(9 -47 -21 17) -47]
Test Case: 479 | Input/Output: [(-100 -22 -50 100) -100]
Test Case: 480 | Input/Output: [(85 93 -24 -4) -24]
Test Case: 481 | Input/Output: [(-36 92 51 -26) -36]
Test Case: 482 | Input/Output: [(34 -88 -66 -64) -88]
Test Case: 483 | Input/Output: [(82 50 73 -21) -21]
Test Case: 484 | Input/Output: [(51 37 -5 -32) -32]
Test Case: 485 | Input/Output: [(-88 28 32 18) -88]
Test Case: 486 | Input/Output: [(-12 -4 2 88) -12]
Test Case: 487 | Input/Output: [(-20 94 -31 -60) -60]
Test Case: 488 | Input/Output: [(62 20 76 65) 20]
Test Case: 489 | Input/Output: [(-32 3 -11 -74) -74]
Test Case: 490 | Input/Output: [(47 97 -84 -17) -84]
Test Case: 491 | Input/Output: [(63 41 -78 21) -78]
Test Case: 492 | Input/Output: [(-23 -39 -24 -38) -39]
Test Case: 493 | Input/Output: [(13 24 -3 -20) -20]
Test Case: 494 | Input/Output: [(-50 81 -23 58) -50]
Test Case: 495 | Input/Output: [(5 -40 93 -90) -90]
Test Case: 496 | Input/Output: [(-6 -78 91 31) -78]
Test Case: 497 | Input/Output: [(43 80 27 11) 11]
Test Case: 498 | Input/Output: [(-61 -56 66 87) -61]
Test Case: 499 | Input/Output: [(2 -32 -92 10) -92]
Test Case: 500 | Input/Output: [(26 6 99 -69) -69]
Test Case: 501 | Input/Output: [(88 14 36 -60) -60]
Test Case: 502 | Input/Output: [(91 -61 36 -62) -62]
Test Case: 503 | Input/Output: [(6 17 -92 17) -92]
Test Case: 504 | Input/Output: [(71 -32 -17 87) -32]
Test Case: 505 | Input/Output: [(-22 52 63 78) -22]
Test Case: 506 | Input/Output: [(58 -98 -81 99) -98]
Test Case: 507 | Input/Output: [(-96 -21 -40 12) -96]
Test Case: 508 | Input/Output: [(-87 37 23 92) -87]
Test Case: 509 | Input/Output: [(-46 34 37 55) -46]
Test Case: 510 | Input/Output: [(83 -41 29 27) -41]
Test Case: 511 | Input/Output: [(-45 83 42 90) -45]
Test Case: 512 | Input/Output: [(-40 -66 33 50) -66]
Test Case: 513 | Input/Output: [(42 -15 -53 3) -53]
Test Case: 514 | Input/Output: [(78 16 -43 -24) -43]
Test Case: 515 | Input/Output: [(11 -58 -47 22) -58]
Test Case: 516 | Input/Output: [(27 92 35 39) 27]
Test Case: 517 | Input/Output: [(87 28 68 -86) -86]
Test Case: 518 | Input/Output: [(33 86 -40 76) -40]
Test Case: 519 | Input/Output: [(82 -45 58 -22) -45]
Test Case: 520 | Input/Output: [(-57 -5 -23 98) -57]
Test Case: 521 | Input/Output: [(-59 -56 65 83) -59]
Test Case: 522 | Input/Output: [(43 18 -42 47) -42]
Test Case: 523 | Input/Output: [(17 88 10 -10) -10]
Test Case: 524 | Input/Output: [(-19 9 84 77) -19]
Test Case: 525 | Input/Output: [(-31 24 45 -5) -31]
Test Case: 526 | Input/Output: [(-80 -95 50 53) -95]
Test Case: 527 | Input/Output: [(-65 -6 2 -14) -65]
Test Case: 528 | Input/Output: [(18 -94 1 12) -94]
Test Case: 529 | Input/Output: [(-13 4 83 6) -13]
Test Case: 530 | Input/Output: [(70 -26 44 -11) -26]
Test Case: 531 | Input/Output: [(85 -78 77 -56) -78]
Test Case: 532 | Input/Output: [(-30 -82 92 -36) -82]
Test Case: 533 | Input/Output: [(33 -46 -100 76) -100]
Test Case: 534 | Input/Output: [(9 -8 -59 -68) -68]
Test Case: 535 | Input/Output: [(84 29 10 52) 10]
Test Case: 536 | Input/Output: [(-7 -16 14 68) -16]
Test Case: 537 | Input/Output: [(2 2 -61 -13) -61]
Test Case: 538 | Input/Output: [(-50 8 -65 0) -65]
Test Case: 539 | Input/Output: [(18 4 59 -2) -2]
Test Case: 540 | Input/Output: [(-4 18 19 -55) -55]
Test Case: 541 | Input/Output: [(50 38 -16 76) -16]
Test Case: 542 | Input/Output: [(74 -88 -64 67) -88]
Test Case: 543 | Input/Output: [(-44 -1 66 21) -44]
Test Case: 544 | Input/Output: [(38 40 -70 -53) -70]
Test Case: 545 | Input/Output: [(-29 -45 19 -100) -100]
Test Case: 546 | Input/Output: [(-82 91 -8 -7) -82]
Test Case: 547 | Input/Output: [(-39 -95 15 -72) -95]
Test Case: 548 | Input/Output: [(100 19 75 -100) -100]
Test Case: 549 | Input/Output: [(-62 15 -89 -5) -89]
Test Case: 550 | Input/Output: [(95 70 66 -87) -87]
Test Case: 551 | Input/Output: [(11 -16 75 77) -16]
Test Case: 552 | Input/Output: [(-91 -42 -22 30) -91]
Test Case: 553 | Input/Output: [(76 -5 -80 -56) -80]
Test Case: 554 | Input/Output: [(-11 -24 -53 -34) -53]
Test Case: 555 | Input/Output: [(33 73 -17 -16) -17]
Test Case: 556 | Input/Output: [(-94 -75 46 -99) -99]
Test Case: 557 | Input/Output: [(-21 33 -21 -14) -21]
Test Case: 558 | Input/Output: [(-52 3 -98 61) -98]
Test Case: 559 | Input/Output: [(-24 34 -37 45) -37]
Test Case: 560 | Input/Output: [(88 -54 31 72) -54]
Test Case: 561 | Input/Output: [(73 98 38 11) 11]
Test Case: 562 | Input/Output: [(45 63 -17 -32) -32]
Test Case: 563 | Input/Output: [(47 52 -43 30) -43]
Test Case: 564 | Input/Output: [(-83 49 -94 -61) -94]
Test Case: 565 | Input/Output: [(-22 -91 54 52) -91]
Test Case: 566 | Input/Output: [(-79 88 20 -62) -79]
Test Case: 567 | Input/Output: [(-33 -37 -39 -36) -39]
Test Case: 568 | Input/Output: [(8 -85 15 -19) -85]
Test Case: 569 | Input/Output: [(30 -45 71 -43) -45]
Test Case: 570 | Input/Output: [(74 32 64 75) 32]
Test Case: 571 | Input/Output: [(-21 -31 -23 30) -31]
Test Case: 572 | Input/Output: [(-25 42 74 22) -25]
Test Case: 573 | Input/Output: [(59 81 -7 33) -7]
Test Case: 574 | Input/Output: [(55 94 -97 9) -97]
Test Case: 575 | Input/Output: [(97 86 -43 -30) -43]
Test Case: 576 | Input/Output: [(-39 -8 50 -14) -39]
Test Case: 577 | Input/Output: [(-19 30 4 -46) -46]
Test Case: 578 | Input/Output: [(45 80 -28 91) -28]
Test Case: 579 | Input/Output: [(66 -89 23 -97) -97]
Test Case: 580 | Input/Output: [(-86 10 48 20) -86]
Test Case: 581 | Input/Output: [(5 -98 90 99) -98]
Test Case: 582 | Input/Output: [(18 94 10 22) 10]
Test Case: 583 | Input/Output: [(-31 11 -17 -52) -52]
Test Case: 584 | Input/Output: [(-44 -91 -100 -9) -100]
Test Case: 585 | Input/Output: [(-52 24 54 -18) -52]
Test Case: 586 | Input/Output: [(100 91 82 -3) -3]
Test Case: 587 | Input/Output: [(-95 7 50 -84) -95]
Test Case: 588 | Input/Output: [(21 -54 -56 -62) -62]
Test Case: 589 | Input/Output: [(5 -88 37 12) -88]
Test Case: 590 | Input/Output: [(-86 0 44 -63) -86]
Test Case: 591 | Input/Output: [(-28 8 -72 65) -72]
Test Case: 592 | Input/Output: [(100 33 -60 -30) -60]
Test Case: 593 | Input/Output: [(77 74 50 50) 50]
Test Case: 594 | Input/Output: [(6 91 -75 -69) -75]
Test Case: 595 | Input/Output: [(31 -37 24 70) -37]
Test Case: 596 | Input/Output: [(-49 -84 30 31) -84]
Test Case: 597 | Input/Output: [(-70 -16 -60 -51) -70]
Test Case: 598 | Input/Output: [(83 95 40 -74) -74]
Test Case: 599 | Input/Output: [(-59 41 63 -47) -59]
Test Case: 600 | Input/Output: [(94 -2 -54 61) -54]
Test Case: 601 | Input/Output: [(-13 11 9 36) -13]
Test Case: 602 | Input/Output: [(-63 -83 16 -78) -83]
Test Case: 603 | Input/Output: [(-14 -38 -64 87) -64]
Test Case: 604 | Input/Output: [(46 -41 -13 63) -41]
Test Case: 605 | Input/Output: [(0 -64 -51 46) -64]
Test Case: 606 | Input/Output: [(92 70 -37 92) -37]
Test Case: 607 | Input/Output: [(30 -98 28 93) -98]
Test Case: 608 | Input/Output: [(-60 85 3 -10) -60]
Test Case: 609 | Input/Output: [(59 52 -90 79) -90]
Test Case: 610 | Input/Output: [(-74 -12 -26 -7) -74]
Test Case: 611 | Input/Output: [(62 81 -75 14) -75]
Test Case: 612 | Input/Output: [(-21 -18 -51 -11) -51]
Test Case: 613 | Input/Output: [(-20 -81 28 -22) -81]
Test Case: 614 | Input/Output: [(11 -52 -25 20) -52]
Test Case: 615 | Input/Output: [(44 44 37 25) 25]
Test Case: 616 | Input/Output: [(96 9 -91 -82) -91]
Test Case: 617 | Input/Output: [(16 -46 85 1) -46]
Test Case: 618 | Input/Output: [(-31 17 56 56) -31]
Test Case: 619 | Input/Output: [(22 49 87 -75) -75]
Test Case: 620 | Input/Output: [(-47 63 -18 1) -47]
Test Case: 621 | Input/Output: [(20 35 76 88) 20]
Test Case: 622 | Input/Output: [(-12 66 -83 -6) -83]
Test Case: 623 | Input/Output: [(-5 60 48 99) -5]
Test Case: 624 | Input/Output: [(21 -51 69 90) -51]
Test Case: 625 | Input/Output: [(-94 -55 87 88) -94]
Test Case: 626 | Input/Output: [(34 -84 89 12) -84]
Test Case: 627 | Input/Output: [(89 -16 92 17) -16]
Test Case: 628 | Input/Output: [(-80 17 66 99) -80]
Test Case: 629 | Input/Output: [(68 17 -62 -40) -62]
Test Case: 630 | Input/Output: [(99 -25 73 -97) -97]
Test Case: 631 | Input/Output: [(-4 5 -70 -50) -70]
Test Case: 632 | Input/Output: [(70 46 41 23) 23]
Test Case: 633 | Input/Output: [(5 -36 30 58) -36]
Test Case: 634 | Input/Output: [(-100 -74 -28 35) -100]
Test Case: 635 | Input/Output: [(-62 55 -19 58) -62]
Test Case: 636 | Input/Output: [(-66 3 16 47) -66]
Test Case: 637 | Input/Output: [(-87 -100 -9 52) -100]
Test Case: 638 | Input/Output: [(-69 5 74 62) -69]
Test Case: 639 | Input/Output: [(-6 -56 79 99) -56]
Test Case: 640 | Input/Output: [(-8 -37 -35 38) -37]
Test Case: 641 | Input/Output: [(75 69 93 -82) -82]
Test Case: 642 | Input/Output: [(-24 -12 -65 -42) -65]
Test Case: 643 | Input/Output: [(-51 -71 94 -77) -77]
Test Case: 644 | Input/Output: [(59 -13 -71 75) -71]
Test Case: 645 | Input/Output: [(-56 -82 22 -69) -82]
Test Case: 646 | Input/Output: [(50 30 -69 72) -69]
Test Case: 647 | Input/Output: [(74 87 -30 -10) -30]
Test Case: 648 | Input/Output: [(98 -57 52 -30) -57]
Test Case: 649 | Input/Output: [(61 68 44 -21) -21]
Test Case: 650 | Input/Output: [(-79 -6 -34 -96) -96]
Test Case: 651 | Input/Output: [(-7 -70 34 -34) -70]
Test Case: 652 | Input/Output: [(12 -42 -57 -21) -57]
Test Case: 653 | Input/Output: [(98 -58 48 -30) -58]
Test Case: 654 | Input/Output: [(-90 -44 54 -4) -90]
Test Case: 655 | Input/Output: [(-31 40 23 -74) -74]
Test Case: 656 | Input/Output: [(-85 -15 61 -30) -85]
Test Case: 657 | Input/Output: [(33 13 -65 81) -65]
Test Case: 658 | Input/Output: [(97 -53 -67 89) -67]
Test Case: 659 | Input/Output: [(-67 -36 -55 -29) -67]
Test Case: 660 | Input/Output: [(-42 -63 5 -42) -63]
Test Case: 661 | Input/Output: [(-73 -56 27 -12) -73]
Test Case: 662 | Input/Output: [(-45 -25 96 -70) -70]
Test Case: 663 | Input/Output: [(67 -49 7 21) -49]
Test Case: 664 | Input/Output: [(-59 -13 84 -98) -98]
Test Case: 665 | Input/Output: [(31 -92 99 77) -92]
Test Case: 666 | Input/Output: [(79 -64 47 -6) -64]
Test Case: 667 | Input/Output: [(6 -88 -27 23) -88]
Test Case: 668 | Input/Output: [(-88 59 -96 -43) -96]
Test Case: 669 | Input/Output: [(56 28 74 45) 28]
Test Case: 670 | Input/Output: [(-72 -75 -66 -73) -75]
Test Case: 671 | Input/Output: [(-81 87 65 80) -81]
Test Case: 672 | Input/Output: [(11 71 -38 -36) -38]
Test Case: 673 | Input/Output: [(-8 92 -4 17) -8]
Test Case: 674 | Input/Output: [(89 -9 -88 -79) -88]
Test Case: 675 | Input/Output: [(-32 -11 -75 -36) -75]
Test Case: 676 | Input/Output: [(60 58 -81 -17) -81]
Test Case: 677 | Input/Output: [(-71 48 12 -100) -100]
Test Case: 678 | Input/Output: [(90 -38 -55 -82) -82]
Test Case: 679 | Input/Output: [(76 0 1 45) 0]
Test Case: 680 | Input/Output: [(94 -22 -8 -94) -94]
Test Case: 681 | Input/Output: [(-19 -43 -50 -54) -54]
Test Case: 682 | Input/Output: [(-81 12 -9 -11) -81]
Test Case: 683 | Input/Output: [(-29 41 54 -43) -43]
Test Case: 684 | Input/Output: [(65 -49 51 98) -49]
Test Case: 685 | Input/Output: [(98 75 80 67) 67]
Test Case: 686 | Input/Output: [(-74 -2 3 59) -74]
Test Case: 687 | Input/Output: [(-84 21 -99 37) -99]
Test Case: 688 | Input/Output: [(9 1 -34 -8) -34]
Test Case: 689 | Input/Output: [(-76 -94 21 -49) -94]
Test Case: 690 | Input/Output: [(-50 3 96 -59) -59]
Test Case: 691 | Input/Output: [(88 3 88 38) 3]
Test Case: 692 | Input/Output: [(34 -71 15 -20) -71]
Test Case: 693 | Input/Output: [(60 -9 -68 -32) -68]
Test Case: 694 | Input/Output: [(88 14 -18 -10) -18]
Test Case: 695 | Input/Output: [(7 76 35 -79) -79]
Test Case: 696 | Input/Output: [(-73 -26 -51 -18) -73]
Test Case: 697 | Input/Output: [(-47 12 21 39) -47]
Test Case: 698 | Input/Output: [(26 -57 -18 -79) -79]
Test Case: 699 | Input/Output: [(2 -26 56 -13) -26]
Test Case: 700 | Input/Output: [(98 -68 -98 -100) -100]
Test Case: 701 | Input/Output: [(58 39 99 -68) -68]
Test Case: 702 | Input/Output: [(-25 -26 -96 23) -96]
Test Case: 703 | Input/Output: [(31 -24 43 -4) -24]
Test Case: 704 | Input/Output: [(58 15 67 -59) -59]
Test Case: 705 | Input/Output: [(71 -9 49 -15) -15]
Test Case: 706 | Input/Output: [(-54 73 9 -12) -54]
Test Case: 707 | Input/Output: [(-7 24 -21 -12) -21]
Test Case: 708 | Input/Output: [(92 -28 -24 -56) -56]
Test Case: 709 | Input/Output: [(40 -32 50 -34) -34]
Test Case: 710 | Input/Output: [(-10 70 -43 -6) -43]
Test Case: 711 | Input/Output: [(8 -21 3 60) -21]
Test Case: 712 | Input/Output: [(93 -93 -76 -10) -93]
Test Case: 713 | Input/Output: [(-96 57 2 -6) -96]
Test Case: 714 | Input/Output: [(32 100 -87 90) -87]
Test Case: 715 | Input/Output: [(84 -8 79 -35) -35]
Test Case: 716 | Input/Output: [(-30 21 41 -63) -63]
Test Case: 717 | Input/Output: [(83 -81 -27 64) -81]
Test Case: 718 | Input/Output: [(1 43 6 71) 1]
Test Case: 719 | Input/Output: [(-53 -45 -89 -94) -94]
Test Case: 720 | Input/Output: [(10 -61 -49 14) -61]
Test Case: 721 | Input/Output: [(71 -32 60 89) -32]
Test Case: 722 | Input/Output: [(44 59 -50 74) -50]
Test Case: 723 | Input/Output: [(-18 -83 30 22) -83]
Test Case: 724 | Input/Output: [(-9 -33 -52 1) -52]
Test Case: 725 | Input/Output: [(-31 51 27 -49) -49]
Test Case: 726 | Input/Output: [(15 -5 -18 49) -18]
Test Case: 727 | Input/Output: [(7 10 99 75) 7]
Test Case: 728 | Input/Output: [(29 -29 4 -100) -100]
Test Case: 729 | Input/Output: [(-13 -28 -28 22) -28]
Test Case: 730 | Input/Output: [(94 -53 27 78) -53]
Test Case: 731 | Input/Output: [(45 33 21 -85) -85]
Test Case: 732 | Input/Output: [(-99 -20 -98 75) -99]
Test Case: 733 | Input/Output: [(-76 12 71 -22) -76]
Test Case: 734 | Input/Output: [(-30 -87 -38 80) -87]
Test Case: 735 | Input/Output: [(10 -67 68 12) -67]
Test Case: 736 | Input/Output: [(-97 41 83 -21) -97]
Test Case: 737 | Input/Output: [(57 -78 -81 -53) -81]
Test Case: 738 | Input/Output: [(-92 60 -32 -19) -92]
Test Case: 739 | Input/Output: [(-93 -46 71 40) -93]
Test Case: 740 | Input/Output: [(87 -13 -68 29) -68]
Test Case: 741 | Input/Output: [(22 15 60 -71) -71]
Test Case: 742 | Input/Output: [(-70 50 56 96) -70]
Test Case: 743 | Input/Output: [(-3 -23 -48 -10) -48]
Test Case: 744 | Input/Output: [(27 -89 0 74) -89]
Test Case: 745 | Input/Output: [(8 -81 -18 15) -81]
Test Case: 746 | Input/Output: [(69 -20 -58 82) -58]
Test Case: 747 | Input/Output: [(-28 -51 4 8) -51]
Test Case: 748 | Input/Output: [(5 -54 -15 -24) -54]
Test Case: 749 | Input/Output: [(87 68 -80 -3) -80]
Test Case: 750 | Input/Output: [(-67 -1 91 73) -67]
Test Case: 751 | Input/Output: [(8 21 89 -20) -20]
Test Case: 752 | Input/Output: [(-64 83 55 88) -64]
Test Case: 753 | Input/Output: [(-96 -29 -38 -54) -96]
Test Case: 754 | Input/Output: [(43 -30 10 77) -30]
Test Case: 755 | Input/Output: [(46 -45 57 -42) -45]
Test Case: 756 | Input/Output: [(-99 -40 -51 77) -99]
Test Case: 757 | Input/Output: [(37 2 62 -55) -55]
Test Case: 758 | Input/Output: [(86 49 -21 5) -21]
Test Case: 759 | Input/Output: [(65 56 96 -2) -2]
Test Case: 760 | Input/Output: [(27 -13 -23 87) -23]
Test Case: 761 | Input/Output: [(-77 -16 18 79) -77]
Test Case: 762 | Input/Output: [(47 89 81 -30) -30]
Test Case: 763 | Input/Output: [(91 -11 35 -15) -15]
Test Case: 764 | Input/Output: [(64 77 4 21) 4]
Test Case: 765 | Input/Output: [(81 8 9 -85) -85]
Test Case: 766 | Input/Output: [(5 91 69 -32) -32]
Test Case: 767 | Input/Output: [(-56 -97 -49 -4) -97]
Test Case: 768 | Input/Output: [(9 56 -32 80) -32]
Test Case: 769 | Input/Output: [(-21 -35 12 1) -35]
Test Case: 770 | Input/Output: [(-94 81 -9 -25) -94]
Test Case: 771 | Input/Output: [(-80 32 5 -9) -80]
Test Case: 772 | Input/Output: [(-12 -56 99 -93) -93]
Test Case: 773 | Input/Output: [(64 57 56 41) 41]
Test Case: 774 | Input/Output: [(97 38 -72 17) -72]
Test Case: 775 | Input/Output: [(-75 -89 -62 -69) -89]
Test Case: 776 | Input/Output: [(-89 -24 87 -85) -89]
Test Case: 777 | Input/Output: [(64 -11 80 97) -11]
Test Case: 778 | Input/Output: [(30 -65 -74 -42) -74]
Test Case: 779 | Input/Output: [(-35 -57 -33 -71) -71]
Test Case: 780 | Input/Output: [(-23 -33 -40 -72) -72]
Test Case: 781 | Input/Output: [(8 43 75 38) 8]
Test Case: 782 | Input/Output: [(17 -64 -87 71) -87]
Test Case: 783 | Input/Output: [(94 54 19 -1) -1]
Test Case: 784 | Input/Output: [(-41 84 19 5) -41]
Test Case: 785 | Input/Output: [(23 -34 62 -24) -34]
Test Case: 786 | Input/Output: [(93 -14 53 -22) -22]
Test Case: 787 | Input/Output: [(-82 -84 93 81) -84]
Test Case: 788 | Input/Output: [(-4 26 100 -80) -80]
Test Case: 789 | Input/Output: [(-17 -92 96 -38) -92]
Test Case: 790 | Input/Output: [(-49 34 -27 -78) -78]
Test Case: 791 | Input/Output: [(41 66 20 -27) -27]
Test Case: 792 | Input/Output: [(44 69 91 -11) -11]
Test Case: 793 | Input/Output: [(89 -88 -80 81) -88]
Test Case: 794 | Input/Output: [(-17 58 40 54) -17]
Test Case: 795 | Input/Output: [(-30 -21 70 22) -30]
Test Case: 796 | Input/Output: [(94 -73 -53 -59) -73]
Test Case: 797 | Input/Output: [(87 47 78 -67) -67]
Test Case: 798 | Input/Output: [(47 13 -2 -73) -73]
Test Case: 799 | Input/Output: [(95 -79 -18 -20) -79]
Test Case: 800 | Input/Output: [(35 44 -38 -65) -65]
Test Case: 801 | Input/Output: [(-85 28 -91 10) -91]
Test Case: 802 | Input/Output: [(-47 57 -53 -29) -53]
Test Case: 803 | Input/Output: [(65 88 34 50) 34]
Test Case: 804 | Input/Output: [(17 -81 -56 18) -81]
Test Case: 805 | Input/Output: [(64 52 77 45) 45]
Test Case: 806 | Input/Output: [(83 67 38 24) 24]
Test Case: 807 | Input/Output: [(-89 86 -17 -61) -89]
Test Case: 808 | Input/Output: [(-14 -40 -87 25) -87]
Test Case: 809 | Input/Output: [(45 -19 23 55) -19]
Test Case: 810 | Input/Output: [(-98 -37 -68 -27) -98]
Test Case: 811 | Input/Output: [(66 -26 16 -95) -95]
Test Case: 812 | Input/Output: [(24 -24 29 39) -24]
Test Case: 813 | Input/Output: [(-2 -46 40 -3) -46]
Test Case: 814 | Input/Output: [(-27 -68 52 -29) -68]
Test Case: 815 | Input/Output: [(17 -12 -14 33) -14]
Test Case: 816 | Input/Output: [(24 63 42 -96) -96]
Test Case: 817 | Input/Output: [(19 -42 4 -63) -63]
Test Case: 818 | Input/Output: [(-9 -85 -12 14) -85]
Test Case: 819 | Input/Output: [(58 -83 -98 8) -98]
Test Case: 820 | Input/Output: [(-79 -43 65 -66) -79]
Test Case: 821 | Input/Output: [(-94 99 17 15) -94]
Test Case: 822 | Input/Output: [(-23 -96 -11 18) -96]
Test Case: 823 | Input/Output: [(-32 24 -59 67) -59]
Test Case: 824 | Input/Output: [(49 69 20 -50) -50]
Test Case: 825 | Input/Output: [(60 52 22 -8) -8]
Test Case: 826 | Input/Output: [(-14 -56 -3 -63) -63]
Test Case: 827 | Input/Output: [(9 13 78 85) 9]
Test Case: 828 | Input/Output: [(29 71 -7 -96) -96]
Test Case: 829 | Input/Output: [(-58 21 12 90) -58]
Test Case: 830 | Input/Output: [(7 95 9 87) 7]
Test Case: 831 | Input/Output: [(-24 81 -66 98) -66]
Test Case: 832 | Input/Output: [(-76 63 -35 -23) -76]
Test Case: 833 | Input/Output: [(94 -41 -30 -16) -41]
Test Case: 834 | Input/Output: [(-1 19 -82 -43) -82]
Test Case: 835 | Input/Output: [(6 15 -54 32) -54]
Test Case: 836 | Input/Output: [(11 -80 13 -36) -80]
Test Case: 837 | Input/Output: [(-34 9 -19 -65) -65]
Test Case: 838 | Input/Output: [(-15 -75 40 82) -75]
Test Case: 839 | Input/Output: [(31 3 -47 -49) -49]
Test Case: 840 | Input/Output: [(-20 31 67 23) -20]
Test Case: 841 | Input/Output: [(88 100 -20 -76) -76]
Test Case: 842 | Input/Output: [(70 -97 19 -8) -97]
Test Case: 843 | Input/Output: [(-69 -70 93 -46) -70]
Test Case: 844 | Input/Output: [(-26 7 -37 94) -37]
Test Case: 845 | Input/Output: [(33 43 15 -5) -5]
Test Case: 846 | Input/Output: [(94 83 46 0) 0]
Test Case: 847 | Input/Output: [(-26 38 -22 11) -26]
Test Case: 848 | Input/Output: [(27 13 -3 69) -3]
Test Case: 849 | Input/Output: [(-59 -11 28 -43) -59]
Test Case: 850 | Input/Output: [(-65 1 48 -35) -65]
Test Case: 851 | Input/Output: [(50 35 -59 -41) -59]
Test Case: 852 | Input/Output: [(-11 -33 -55 -46) -55]
Test Case: 853 | Input/Output: [(86 -52 -55 44) -55]
Test Case: 854 | Input/Output: [(71 61 -83 -2) -83]
Test Case: 855 | Input/Output: [(-38 85 9 -72) -72]
Test Case: 856 | Input/Output: [(-89 85 -47 -22) -89]
Test Case: 857 | Input/Output: [(56 6 93 -35) -35]
Test Case: 858 | Input/Output: [(-93 -84 -26 12) -93]
Test Case: 859 | Input/Output: [(53 65 51 -19) -19]
Test Case: 860 | Input/Output: [(43 -56 -37 -36) -56]
Test Case: 861 | Input/Output: [(60 -44 -38 50) -44]
Test Case: 862 | Input/Output: [(-31 -96 -7 -88) -96]
Test Case: 863 | Input/Output: [(-90 -36 82 93) -90]
Test Case: 864 | Input/Output: [(-89 37 -8 64) -89]
Test Case: 865 | Input/Output: [(48 -44 -39 -19) -44]
Test Case: 866 | Input/Output: [(-28 11 -6 -14) -28]
Test Case: 867 | Input/Output: [(-99 -83 92 40) -99]
Test Case: 868 | Input/Output: [(-87 71 -16 -2) -87]
Test Case: 869 | Input/Output: [(48 97 -7 -10) -10]
Test Case: 870 | Input/Output: [(-86 87 73 65) -86]
Test Case: 871 | Input/Output: [(67 -49 -8 32) -49]
Test Case: 872 | Input/Output: [(-23 -6 -100 46) -100]
Test Case: 873 | Input/Output: [(26 -38 -75 78) -75]
Test Case: 874 | Input/Output: [(-67 67 52 -27) -67]
Test Case: 875 | Input/Output: [(98 -41 80 26) -41]
Test Case: 876 | Input/Output: [(28 -9 -41 -91) -91]
Test Case: 877 | Input/Output: [(-47 81 43 54) -47]
Test Case: 878 | Input/Output: [(67 21 -25 64) -25]
Test Case: 879 | Input/Output: [(-9 -19 -30 100) -30]
Test Case: 880 | Input/Output: [(-19 40 49 -49) -49]
Test Case: 881 | Input/Output: [(85 87 -97 47) -97]
Test Case: 882 | Input/Output: [(-34 -67 96 66) -67]
Test Case: 883 | Input/Output: [(85 -36 -93 26) -93]
Test Case: 884 | Input/Output: [(80 -91 100 35) -91]
Test Case: 885 | Input/Output: [(17 -25 7 29) -25]
Test Case: 886 | Input/Output: [(89 -10 4 -52) -52]
Test Case: 887 | Input/Output: [(23 26 56 9) 9]
Test Case: 888 | Input/Output: [(-32 85 -35 95) -35]
Test Case: 889 | Input/Output: [(70 94 -84 -75) -84]
Test Case: 890 | Input/Output: [(-19 80 -95 -40) -95]
Test Case: 891 | Input/Output: [(-29 81 55 9) -29]
Test Case: 892 | Input/Output: [(37 -51 54 17) -51]
Test Case: 893 | Input/Output: [(-57 -69 -33 10) -69]
Test Case: 894 | Input/Output: [(-96 32 98 61) -96]
Test Case: 895 | Input/Output: [(69 89 88 58) 58]
Test Case: 896 | Input/Output: [(-77 -58 12 -90) -90]
Test Case: 897 | Input/Output: [(-58 6 90 -2) -58]
Test Case: 898 | Input/Output: [(-6 40 -57 -96) -96]
Test Case: 899 | Input/Output: [(-16 -48 87 -49) -49]
Test Case: 900 | Input/Output: [(65 -33 80 -93) -93]
Test Case: 901 | Input/Output: [(-98 -78 -46 -77) -98]
Test Case: 902 | Input/Output: [(-10 88 -13 97) -13]
Test Case: 903 | Input/Output: [(-28 -77 -68 99) -77]
Test Case: 904 | Input/Output: [(-29 87 -100 55) -100]
Test Case: 905 | Input/Output: [(-85 -90 63 -46) -90]
Test Case: 906 | Input/Output: [(28 2 -56 -33) -56]
Test Case: 907 | Input/Output: [(27 1 8 29) 1]
Test Case: 908 | Input/Output: [(2 21 6 -38) -38]
Test Case: 909 | Input/Output: [(99 78 -5 -83) -83]
Test Case: 910 | Input/Output: [(8 95 80 -62) -62]
Test Case: 911 | Input/Output: [(80 11 13 -57) -57]
Test Case: 912 | Input/Output: [(93 -23 52 -21) -23]
Test Case: 913 | Input/Output: [(28 31 43 -46) -46]
Test Case: 914 | Input/Output: [(-84 -60 -12 -17) -84]
Test Case: 915 | Input/Output: [(99 47 75 -4) -4]
Test Case: 916 | Input/Output: [(-56 67 -77 35) -77]
Test Case: 917 | Input/Output: [(44 22 74 13) 13]
Test Case: 918 | Input/Output: [(-3 75 -17 -43) -43]
Test Case: 919 | Input/Output: [(-80 -88 -83 64) -88]
Test Case: 920 | Input/Output: [(-72 -80 -41 -94) -94]
Test Case: 921 | Input/Output: [(40 -31 -93 -70) -93]
Test Case: 922 | Input/Output: [(54 -14 -80 2) -80]
Test Case: 923 | Input/Output: [(-18 -4 98 -77) -77]
Test Case: 924 | Input/Output: [(65 13 39 47) 13]
Test Case: 925 | Input/Output: [(-97 7 94 90) -97]
Test Case: 926 | Input/Output: [(80 84 81 24) 24]
Test Case: 927 | Input/Output: [(28 50 87 71) 28]
Test Case: 928 | Input/Output: [(-65 60 -88 83) -88]
Test Case: 929 | Input/Output: [(-50 -9 -23 58) -50]
Test Case: 930 | Input/Output: [(-12 -60 8 -62) -62]
Test Case: 931 | Input/Output: [(-61 -58 -10 -4) -61]
Test Case: 932 | Input/Output: [(-62 11 -21 -73) -73]
Test Case: 933 | Input/Output: [(-18 -100 -55 37) -100]
Test Case: 934 | Input/Output: [(12 17 19 -49) -49]
Test Case: 935 | Input/Output: [(40 18 -90 69) -90]
Test Case: 936 | Input/Output: [(-86 -89 96 14) -89]
Test Case: 937 | Input/Output: [(28 1 18 63) 1]
Test Case: 938 | Input/Output: [(-24 80 6 42) -24]
Test Case: 939 | Input/Output: [(-14 64 -15 89) -15]
Test Case: 940 | Input/Output: [(37 -56 59 -79) -79]
Test Case: 941 | Input/Output: [(38 -87 60 21) -87]
Test Case: 942 | Input/Output: [(-83 -91 28 27) -91]
Test Case: 943 | Input/Output: [(97 -40 -98 -22) -98]
Test Case: 944 | Input/Output: [(84 100 24 90) 24]
Test Case: 945 | Input/Output: [(-91 1 -20 -81) -91]
Test Case: 946 | Input/Output: [(-93 -19 -85 -83) -93]
Test Case: 947 | Input/Output: [(73 42 -72 71) -72]
Test Case: 948 | Input/Output: [(-51 11 62 95) -51]
Test Case: 949 | Input/Output: [(-81 -12 -39 -9) -81]
Test Case: 950 | Input/Output: [(26 45 -52 -91) -91]
Test Case: 951 | Input/Output: [(27 80 -88 -45) -88]
Test Case: 952 | Input/Output: [(77 21 16 -14) -14]
Test Case: 953 | Input/Output: [(-55 30 19 -86) -86]
Test Case: 954 | Input/Output: [(45 10 60 -35) -35]
Test Case: 955 | Input/Output: [(12 -55 -32 42) -55]
Test Case: 956 | Input/Output: [(-75 46 -31 -64) -75]
Test Case: 957 | Input/Output: [(-26 -20 -84 23) -84]
Test Case: 958 | Input/Output: [(77 -24 -40 37) -40]
Test Case: 959 | Input/Output: [(10 -88 35 80) -88]
Test Case: 960 | Input/Output: [(-7 -16 36 22) -16]
Test Case: 961 | Input/Output: [(-54 -68 -38 -8) -68]
Test Case: 962 | Input/Output: [(-11 64 -76 -49) -76]
Test Case: 963 | Input/Output: [(-35 66 -27 -76) -76]
Test Case: 964 | Input/Output: [(30 80 86 -94) -94]
Test Case: 965 | Input/Output: [(21 -67 -43 -95) -95]
Test Case: 966 | Input/Output: [(13 -40 -2 1) -40]
Test Case: 967 | Input/Output: [(-23 -29 53 -30) -30]
Test Case: 968 | Input/Output: [(-89 -34 12 -21) -89]
Test Case: 969 | Input/Output: [(68 -38 44 45) -38]
Test Case: 970 | Input/Output: [(28 -70 43 62) -70]
Test Case: 971 | Input/Output: [(-30 -27 79 31) -30]
Test Case: 972 | Input/Output: [(35 -44 -66 20) -66]
Test Case: 973 | Input/Output: [(33 2 63 -15) -15]
Test Case: 974 | Input/Output: [(-10 71 22 -54) -54]
Test Case: 975 | Input/Output: [(-33 37 11 -13) -33]
Test Case: 976 | Input/Output: [(5 0 11 52) 0]
Test Case: 977 | Input/Output: [(-38 48 100 -42) -42]
Test Case: 978 | Input/Output: [(22 -75 -9 -60) -75]
Test Case: 979 | Input/Output: [(-5 -72 66 -100) -100]
Test Case: 980 | Input/Output: [(77 -44 42 67) -44]
Test Case: 981 | Input/Output: [(99 8 87 -40) -40]
Test Case: 982 | Input/Output: [(-39 40 -12 60) -39]
Test Case: 983 | Input/Output: [(-60 91 96 64) -60]
Test Case: 984 | Input/Output: [(91 -79 -1 98) -79]
Test Case: 985 | Input/Output: [(32 96 46 26) 26]
Test Case: 986 | Input/Output: [(-42 53 -43 -84) -84]
Test Case: 987 | Input/Output: [(-40 95 10 59) -40]
Test Case: 988 | Input/Output: [(-71 -48 63 -88) -88]
Test Case: 989 | Input/Output: [(38 -39 88 -42) -42]
Test Case: 990 | Input/Output: [(80 -43 -55 -17) -55]
Test Case: 991 | Input/Output: [(-50 38 -3 21) -50]
Test Case: 992 | Input/Output: [(15 8 -88 90) -88]
Test Case: 993 | Input/Output: [(91 34 -70 36) -70]
Test Case: 994 | Input/Output: [(-31 68 10 37) -31]
Test Case: 995 | Input/Output: [(-14 0 43 -21) -21]
Test Case: 996 | Input/Output: [(-26 20 -69 0) -69]
Test Case: 997 | Input/Output: [(-79 30 77 69) -79]
Test Case: 998 | Input/Output: [(93 23 35 -87) -87]
Test Case: 999 | Input/Output: [(-90 -17 -69 74) -90]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -60 -51 111 -128 -60 -41 -8 69 38 110 5 6 46 -94 31 16
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[75 81 75 75] 75] [[-3 -3 -3 -24] -24] [[13 -80 -80 -80] -80] [[14 14 14 -3] -3] [[83 83 40 83] 40] [[-80 -80 -90 -80] -90] [[85 85 -62 85] -62] [[-34 73 -34 -34] -34] [[90 90 90 -84] -84] [[75 75 38 75] 38] [(-9 -9 -9 -9) -9] [(-97 -97 -97 -97) -97] [(93 93 93 93) 93] [(-78 -78 -78 -78) -78] [(73 73 73 73) 73] [(43 76 94 87) 43] [(69 60 45 65) 45] [(54 4 47 62) 4] [(37 100 83 95) 37] [(98 32 65 8) 8] [(96 91 41 37) 37] [(62 48 94 92) 48] [(73 19 26 13) 13] [(71 20 77 88) 20] [(47 69 87 25) 25] [(25 66 95 98) 25] [(41 44 19 72) 19] [(45 31 81 59) 31] [(35 74 72 56) 35] [(74 12 24 0) 0] [(51 18 7 11) 7] [(18 50 20 33) 18] [(15 12 92 33) 12] [(91 91 36 94) 36] [(52 45 32 9) 9] [(-49 -29 -13 -32) -49] [(5 60 -76 -56) -76] [(-91 63 -2 -41) -91] [(-60 -76 -76 26) -76] [(-74 22 22 -95) -95] [(95 84 -64 68) -64] [(77 1 -89 -1) -89] [(19 34 -90 99) -90] [(88 -19 -91 21) -91] [(-11 79 75 -56) -56] [(-21 26 67 52) -21] [(-82 2 -67 -38) -82] [(71 -96 42 74) -96] [(9 -13 59 -89) -89] [(-34 56 -7 -89) -89] [(67 8 60 90) 8] [(-95 62 -30 35) -95] [(30 -48 -17 5) -48] [(8 -51 -49 38) -51] [(9 -72 64 23) -72] [(47 -71 5 32) -71] [(86 -54 -94 61) -94] [(-57 16 65 -80) -80] [(-38 55 40 -63) -63] [(-3 8 -67 -17) -67] [(-95 92 43 30) -95] [(47 71 47 3) 3] [(-51 45 -16 -3) -51] [(1 44 74 -23) -23] [(2 94 -89 12) -89] [(-17 -72 23 -2) -72] [(-32 -67 20 23) -67] [(-97 98 -2 25) -97] [(87 -57 -29 45) -57] [(-86 22 4 93) -86] [(-40 -43 -13 48) -43] [(-41 56 59 -48) -48] [(-89 -15 -84 15) -89] [(-56 -81 95 -28) -81] [(-61 10 -24 100) -61] [(-62 2 33 9) -62] [(-57 -85 75 70) -85] [(49 95 -100 31) -100] [(-70 -18 -27 -11) -70] [(75 31 -60 -82) -82] [(-74 53 78 9) -74] [(-100 88 13 -32) -100] [(15 51 -84 35) -84] [(-35 -19 -27 26) -35] [(-17 4 -41 20) -41] [(53 -89 -4 61) -89] [(-61 87 53 1) -61] [(65 -100 22 50) -100] [(35 4 -75 -48) -75] [(-73 49 87 46) -73] [(19 69 8 -96) -96] [(-48 100 -43 2) -48] [(88 75 27 73) 27] [(-4 63 -46 -78) -78] [(-33 54 -35 -34) -35])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_982} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while})
Lexicase best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if (boolean_or exec_dup_items integer_shove tagged_982 exec_do*while (integer_mult) boolean_invert_first_then_and) (exec_do*range (boolean_shove) exec_dup (integer_stackdepth boolean_stackdepth exec_pop (boolean_pop boolean_dup) exec_while (boolean_eq boolean_dup_times integer_max exec_shove (integer_empty in1) exec_eq exec_do*range (integer_div integer_pop) exec_do*while () integer_yank exec_pop (exec_y (exec_do*while ())))))) () ()) ()) () ()))) ()))))
Lexicase best errors: [1 0 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 128
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_982} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while})
Zero cases best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if (boolean_or exec_dup_items integer_shove tagged_982 exec_do*while (integer_mult) boolean_invert_first_then_and) (exec_do*range (boolean_shove) exec_dup (integer_stackdepth boolean_stackdepth exec_pop (boolean_pop boolean_dup) exec_while (boolean_eq boolean_dup_times integer_max exec_shove (integer_empty in1) exec_eq exec_do*range (integer_div integer_pop) exec_do*while () integer_yank exec_pop (exec_y (exec_do*while ())))))) () ()) ()) () ()))) ()))))
Zero cases best errors: [1 0 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 128
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 2 6 7 5 3 6 6 4 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (5 2 6 7 5 3 6 6 4 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 1, :instruction in2})
Best program: (boolean_eq exec_pop (integer_dup_times print_integer integer_stackdepth exec_empty exec_pop () integer_lte integer_empty integer_mod) in4 boolean_dup_times integer_div boolean_and print_integer integer_fromboolean exec_while (integer_lt integer_div exec_pop (exec_dup_items)) integer_eq exec_do*range () in2)
Errors: [0 1 1 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 24
Size: 30
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.995 0.998 0.994 0.993 0.995 0.997 0.994 0.994 0.996 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.688
Average program size in population (points): 73.499
Average percent parens in population: 0.273
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.003
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 510349
--- Timings ---
Current time: 1559314497809 milliseconds
Total Time:           2.1 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 39.1%
Fitness Testing:      1.2 seconds, 56.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if})
Lexicase best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if () ()) () ()) ()) () ()))) ()))))
Lexicase best errors: [0 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if})
Zero cases best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if () ()) () ()) ()) () ()))) ()))))
Zero cases best errors: [0 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 244 294 244 294 240 294 80 244 239)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (290 244 294 244 294 240 294 80 244 239)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_982} {:close 0, :instruction exec_do*while})
Best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if (boolean_or exec_dup_items integer_shove tagged_982 exec_do*while ()) ()) () ()) ()) () ()))) ()))))
Errors: [0 1 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 92
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 7.537
Median total errors in population: 7
Error averages by case: (0.71 0.756 0.706 0.756 0.706 0.76 0.706 0.92 0.756 0.761)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.25
Average program size in population (points): 86.536
Average percent parens in population: 0.253
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.502
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1121113
--- Timings ---
Current time: 1559314501014 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 51.3%
Fitness Testing:      2.0 seconds, 40.5%
Report:               0.3 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_982} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while})
Lexicase best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (print_boolean) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if (boolean_or exec_dup_items integer_shove tagged_982 exec_do*while (integer_mult) boolean_invert_first_then_and) (exec_do*range (boolean_shove) exec_dup (boolean_xor boolean_stackdepth exec_pop (boolean_pop boolean_pop boolean_dup) exec_while (boolean_eq boolean_dup_times integer_max exec_shove (integer_empty in1) exec_eq exec_do*range (integer_div integer_pop) exec_do*while () integer_yank exec_pop (exec_y (exec_do*while ())))))) () ()) ()) () ()))) ()))))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 129
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_982} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while})
Zero cases best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (print_boolean) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if (boolean_or exec_dup_items integer_shove tagged_982 exec_do*while (integer_mult) boolean_invert_first_then_and) (exec_do*range (boolean_shove) exec_dup (boolean_xor boolean_stackdepth exec_pop (boolean_pop boolean_pop boolean_dup) exec_while (boolean_eq boolean_dup_times integer_max exec_shove (integer_empty in1) exec_eq exec_do*range (integer_div integer_pop) exec_do*while () integer_yank exec_pop (exec_y (exec_do*while ())))))) () ()) ()) () ()))) ()))))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 129
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (347 262 260 170 440 169 94 348 348 169)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (347 262 260 170 440 169 94 348 348 169)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_929} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_982} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove})
Best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) boolean_shove boolean_xor integer_max integer_stackdepth print_exec (integer_fromboolean) integer_inc) (boolean_frominteger boolean_stackdepth boolean_flush exec_noop boolean_dup_items boolean_invert_second_then_and boolean_swap exec_stackdepth tagged_929 exec_s (exec_if (boolean_or exec_dup_items integer_shove tagged_982 exec_do*while (integer_mult) boolean_invert_first_then_and) (exec_do*range (boolean_shove) exec_dup (integer_stackdepth boolean_stackdepth exec_pop (boolean_pop boolean_dup) exec_while (boolean_eq boolean_dup_times integer_max exec_shove (integer_empty in1) exec_eq exec_do*range (integer_div integer_pop) exec_do*while () integer_yank exec_pop (exec_y (boolean_invert_first_then_and exec_yank integer_max exec_swap (integer_empty exec_dup (integer_dec exec_y (boolean_rot exec_dup (boolean_shove)))) ())))))) () ()) ()) () ()))) ()))))
Errors: [0 1 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 99
Size: 142
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.393
Median total errors in population: 7
Error averages by case: (0.653 0.738 0.74 0.83 0.56 0.831 0.906 0.652 0.652 0.831)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.7
Average program size in population (points): 86.126
Average percent parens in population: 0.255
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9635
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1728214
--- Timings ---
Current time: 1559314504838 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.9 seconds, 56.0%
Fitness Testing:      2.7 seconds, 31.2%
Report:               1.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 69                 
Correct output: 4                   | Program output: 54                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 98                 
Correct output: 37                  | Program output: 96                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 74                 
Correct output: 7                   | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 52                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: 77                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 71                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 67                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 47                 
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 65                 
Correct output: -75                 | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 19                 
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 88                 
Correct output: -78                 | Program output: -4                 
Correct output: -35                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction tag_exec_70} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in2})
Lexicase best program: (integer_dup_times in3 tag_exec_70 () boolean_invert_first_then_and in1 boolean_invert_second_then_and print_integer exec_k (exec_rot (exec_yank exec_yankdup exec_if (exec_yank integer_div exec_do*times (exec_y () exec_rot () (integer_lte boolean_yank) (integer_fromboolean exec_do*count () exec_y (boolean_swap integer_lt print_exec () boolean_invert_second_then_and boolean_dup_items boolean_dup_items exec_do*times (in2 integer_div integer_min boolean_not exec_y_when_autoconstructing (integer_swap integer_div in2)))))) ()) () ()) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction tag_exec_70} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in2})
Zero cases best program: (integer_dup_times in3 tag_exec_70 () boolean_invert_first_then_and in1 boolean_invert_second_then_and print_integer exec_k (exec_rot (exec_yank exec_yankdup exec_if (exec_yank integer_div exec_do*times (exec_y () exec_rot () (integer_lte boolean_yank) (integer_fromboolean exec_do*count () exec_y (boolean_swap integer_lt print_exec () boolean_invert_second_then_and boolean_dup_items boolean_dup_items exec_do*times (in2 integer_div integer_min boolean_not exec_y_when_autoconstructing (integer_swap integer_div in2)))))) ()) () ()) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 286 151 287 875 152 348 151 287 348)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (287 286 151 287 875 152 348 151 287 348)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 2, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction tag_boolean_558} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction tagged_486} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -22} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Best program: (in1 exec_rot () (integer_yank print_integer) () in2 integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_if (integer_dup_times integer_dup boolean_yankdup integer_yank integer_min) (exec_if (tag_boolean_558 exec_shove (integer_flush tagged_486) exec_when (boolean_dup integer_dup_items -22 boolean_empty exec_k_when_autoconstructing (exec_do*while (integer_min integer_flush exec_when (boolean_pop boolean_empty boolean_and in2 boolean_flush exec_dup (exec_noop) boolean_eq print_newline integer_stackdepth exec_stackdepth) exec_do*times (exec_empty boolean_eq) print_boolean)) ())) ()))
Errors: [0 0 1 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 54
Size: 70
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.828
Median total errors in population: 7
Error averages by case: (0.713 0.714 0.849 0.713 0.125 0.848 0.652 0.849 0.713 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.41
Average program size in population (points): 80.102
Average percent parens in population: 0.254
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.46625
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2357852
--- Timings ---
Current time: 1559314508132 milliseconds
Total Time:          12.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.1 seconds, 57.2%
Fitness Testing:      3.5 seconds, 28.4%
Report:               1.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 4747               
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction -22} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add})
Lexicase best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) integer_flush boolean_xor exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush) (print_integer boolean_shove exec_s_when_autoconstructing (boolean_dup_times -22) (exec_swap () (boolean_and integer_dec exec_do*count () exec_dup () boolean_pop integer_empty integer_dup) integer_max boolean_xor boolean_flush) (print_exec (integer_lte integer_add))) ()) () ()))) ()))))
Lexicase best errors: [1 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 97
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction tagged_111} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction -22} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add})
Zero cases best program: (in4 exec_dup_items in3 exec_k_when_autoconstructing (in3) (print_integer exec_do*count (exec_y (integer_rot) integer_pop integer_lt exec_dup_items integer_rot exec_pop (exec_empty integer_min boolean_not boolean_not exec_rot (integer_gte integer_flush) (boolean_dup_items) (tagged_111) integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte integer_stackdepth exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_s_when_autoconstructing (exec_y (exec_empty) integer_flush boolean_xor exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush) (print_integer boolean_shove exec_s_when_autoconstructing (boolean_dup_times -22) (exec_swap () (boolean_and integer_dec exec_do*count () exec_dup () boolean_pop integer_empty integer_dup) integer_max boolean_xor boolean_flush) (print_exec (integer_lte integer_add))) ()) () ()))) ()))))
Zero cases best errors: [1 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 97
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 239 242 241 240 768 1 240 396 1)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (1 239 242 241 240 768 1 240 396 1)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_div} {:close 0, :instruction in2})
Best program: (in4 exec_dup_items in3 boolean_invert_second_then_and print_integer integer_div exec_rot (exec_yank exec_yankdup exec_if (exec_yank integer_div exec_do*times (exec_y () exec_rot () (integer_lte boolean_yank integer_fromboolean exec_do*count () in1 boolean_swap integer_lt print_exec () boolean_invert_second_then_and boolean_dup_items boolean_dup_items exec_do*times (in2 integer_div integer_min boolean_not exec_y_when_autoconstructing (integer_swap integer_div) in2)) ())) ()) () ())
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 50
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.631
Median total errors in population: 8
Error averages by case: (0.999 0.761 0.758 0.759 0.76 0.232 0.999 0.76 0.604 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.63
Average program size in population (points): 74.159
Average percent parens in population: 0.246
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.83875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2925345
--- Timings ---
Current time: 1559314511639 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.3 seconds, 59.9%
Fitness Testing:      4.1 seconds, 26.5%
Report:               2.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_378} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Lexicase best program: (in1 exec_rot () (exec_do*while (print_integer)) (in2) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub tagged_378 exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush boolean_eq print_newline integer_stackdepth exec_stackdepth exec_do*times (exec_empty boolean_eq) print_boolean)
Lexicase best errors: [1 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_378} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Zero cases best program: (in1 exec_rot () (exec_do*while (print_integer)) (in2) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub tagged_378 exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush boolean_eq print_newline integer_stackdepth exec_stackdepth exec_do*times (exec_empty boolean_eq) print_boolean)
Zero cases best errors: [1 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 87 283 87 283 200 607 199 283 898)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (329 87 283 87 283 200 607 199 283 898)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Best program: (in1 exec_rot () (exec_do*while (print_integer)) (in2) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub integer_shove exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush boolean_eq print_newline integer_stackdepth exec_stackdepth exec_do*times (exec_empty boolean_eq) print_boolean)
Errors: [1 1 0 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 61
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 6.744
Median total errors in population: 7
Error averages by case: (0.671 0.913 0.717 0.913 0.717 0.8 0.393 0.801 0.717 0.102)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.296
Average program size in population (points): 67.854
Average percent parens in population: 0.223
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.493625
Median age in population: 7.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3377992
--- Timings ---
Current time: 1559314514416 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 60.2%
Fitness Testing:      4.7 seconds, 24.9%
Report:               2.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_507} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction -9} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop})
Lexicase best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_do*range (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items) (exec_empty exec_shove () boolean_frominteger) (boolean_stackdepth boolean_empty exec_flush) integer_lt integer_div integer_flush boolean_yank exec_stackdepth print_boolean exec_dup_times (integer_min integer_div boolean_dup_items boolean_flush in1 exec_rot () (integer_fromboolean integer_dup_times tagged_507 exec_do*range (integer_max exec_y () boolean_swap) integer_mod integer_div exec_y (integer_lte boolean_dup_items exec_when (exec_k (boolean_dup) (exec_while (integer_yankdup -9) boolean_swap integer_max in4 boolean_dup boolean_invert_first_then_and integer_swap exec_noop)))) ()))
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_507} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction -9} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop})
Zero cases best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_do*range (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items) (exec_empty exec_shove () boolean_frominteger) (boolean_stackdepth boolean_empty exec_flush) integer_lt integer_div integer_flush boolean_yank exec_stackdepth print_boolean exec_dup_times (integer_min integer_div boolean_dup_items boolean_flush in1 exec_rot () (integer_fromboolean integer_dup_times tagged_507 exec_do*range (integer_max exec_y () boolean_swap) integer_mod integer_div exec_y (integer_lte boolean_dup_items exec_when (exec_k (boolean_dup) (exec_while (integer_yankdup -9) boolean_swap integer_max in4 boolean_dup boolean_invert_first_then_and integer_swap exec_noop)))) ()))
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 184 905 377 139 184 184 377 376 139)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (184 184 905 377 139 184 184 377 376 139)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_326} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 2, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_empty})
Best program: (exec_do*while () integer_lt boolean_xor tag_integer_326 boolean_flush exec_do*range () in1 exec_eq exec_do*range () integer_swap integer_swap in4 print_integer integer_gte integer_dup_items boolean_empty boolean_yankdup boolean_yankdup integer_empty exec_stackdepth integer_gt boolean_not exec_empty)
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 27
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 6.951
Median total errors in population: 6
Error averages by case: (0.816 0.816 0.095 0.623 0.861 0.816 0.816 0.623 0.624 0.861)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.676
Average program size in population (points): 60.572
Average percent parens in population: 0.212
Minimum age in population: 6.0
Maximum age in population: 10.59375
Average age in population: 8.95975
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3735135
--- Timings ---
Current time: 1559314517121 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 62.2%
Fitness Testing:      5.1 seconds, 23.6%
Report:               3.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Lexicase best program: (in1 exec_rot () (exec_do*while (print_integer)) (in2) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub integer_shove exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush boolean_eq print_boolean boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush integer_lt tag_exec_283 () boolean_and boolean_flush boolean_eq print_newline integer_stackdepth exec_stackdepth exec_do*times (exec_empty boolean_eq) print_boolean)
Lexicase best errors: [0 0 1 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 73
Percent parens: 0.151
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Zero cases best program: (in1 exec_rot () (exec_do*while (print_integer)) (in2) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub integer_shove exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush boolean_eq print_boolean boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush integer_lt tag_exec_283 () boolean_and boolean_flush boolean_eq print_newline integer_stackdepth exec_stackdepth exec_do*times (exec_empty boolean_eq) print_boolean)
Zero cases best errors: [0 0 1 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 73
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 296 11 298 11 201 396 296 11 397)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (297 296 11 298 11 201 396 296 11 397)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Best program: (in1 exec_rot () (exec_do*while (print_integer)) (in2) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub integer_shove exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and tag_exec_283 () boolean_and boolean_dup_items boolean_eq print_newline integer_stackdepth exec_stackdepth exec_do*times (exec_empty boolean_eq) print_boolean)
Errors: [0 0 1 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 61
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 7.786
Median total errors in population: 8
Error averages by case: (0.703 0.704 0.989 0.702 0.989 0.799 0.604 0.704 0.989 0.603)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.341
Average program size in population (points): 55.494
Average percent parens in population: 0.219
Minimum age in population: 7.0
Maximum age in population: 12.21875
Average age in population: 10.463890625
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4083505
--- Timings ---
Current time: 1559314520416 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 64.6%
Fitness Testing:      5.5 seconds, 22.1%
Report:               3.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 exec_rot () (exec_do*while (print_integer)) (boolean_invert_first_then_and) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub integer_shove exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and)
Lexicase best errors: [0 0 1 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 52
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 exec_rot () (exec_do*while (print_integer)) (boolean_invert_first_then_and) integer_gte integer_rot integer_dec boolean_yank boolean_stackdepth boolean_dup_times exec_eq exec_dup_items boolean_eq boolean_swap boolean_or boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub integer_shove exec_when (exec_dup_times () boolean_stackdepth boolean_rot print_boolean) boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and)
Zero cases best errors: [0 0 1 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 254 95 390 171 172 253 95 95 169)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (253 254 95 390 171 172 253 95 95 169)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_while (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items) (exec_empty exec_shove () boolean_frominteger) (boolean_dup_times) exec_eq exec_dup_items boolean_eq boolean_swap boolean_or in4 boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush integer_sub integer_shove exec_when () boolean_or) boolean_stackdepth boolean_rot print_boolean boolean_invert_first_then_and boolean_empty exec_yankdup integer_max exec_flush boolean_and tag_exec_283 () boolean_and boolean_flush boolean_eq print_newline integer_stackdepth exec_stackdepth exec_do*times (exec_empty boolean_eq) print_boolean)
Errors: [1 1 1 1 0 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 57
Size: 67
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 8.053
Median total errors in population: 7
Error averages by case: (0.747 0.746 0.905 0.61 0.829 0.828 0.747 0.905 0.905 0.831)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.453
Average program size in population (points): 54.766
Average percent parens in population: 0.212
Minimum age in population: 8.0
Maximum age in population: 13.8125
Average age in population: 11.88171875
Median age in population: 11.9921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4371226
--- Timings ---
Current time: 1559314523162 milliseconds
Total Time:          27.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.2 seconds, 66.0%
Fitness Testing:      5.8 seconds, 21.3%
Report:               3.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_do*range (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items exec_empty exec_shove () boolean_frominteger) (boolean_stackdepth boolean_empty exec_flush) () integer_lt integer_gte integer_flush boolean_yank exec_stackdepth boolean_rot print_boolean boolean_invert_first_then_and boolean_empty exec_yankdup integer_max print_exec () integer_dup_items boolean_stackdepth exec_while (exec_y (exec_empty) boolean_shove boolean_xor))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_do*range (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items exec_empty exec_shove () boolean_frominteger) (boolean_stackdepth boolean_empty exec_flush) () integer_lt integer_gte integer_flush boolean_yank exec_stackdepth boolean_rot print_boolean boolean_invert_first_then_and boolean_empty exec_yankdup integer_max print_exec () integer_dup_items boolean_stackdepth exec_while (exec_y (exec_empty) boolean_shove boolean_xor))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 279 631 254 270 269 269 269 279 279)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (269 279 631 254 270 269 269 269 279 279)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_and} {:close 1, :instruction tag_exec_283} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean})
Best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_do*range (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items) (exec_empty exec_shove () boolean_frominteger) (boolean_stackdepth boolean_empty exec_flush) integer_lt integer_div boolean_stackdepth boolean_frominteger exec_flush integer_dup_times integer_dup boolean_yankdup integer_yank in1 boolean_eq exec_do*times (boolean_flush) integer_sub integer_shove exec_when (exec_dup_times () exec_k_when_autoconstructing (exec_s (integer_gte in2) (boolean_and tag_exec_283 () boolean_and boolean_flush) (boolean_eq print_newline integer_stackdepth exec_stackdepth) exec_do*times (exec_empty boolean_eq) print_boolean) ()))
Errors: [0 1 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 52
Size: 68
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.932
Median total errors in population: 7
Error averages by case: (0.731 0.721 0.369 0.746 0.73 0.731 0.731 0.731 0.721 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.365
Average program size in population (points): 52.082
Average percent parens in population: 0.230
Minimum age in population: 9.0
Maximum age in population: 15.38671875
Average age in population: 13.434140625
Median age in population: 13.525390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4736972
--- Timings ---
Current time: 1559314526104 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.4 seconds, 67.0%
Fitness Testing:      6.3 seconds, 20.7%
Report:               3.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_do*range (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items exec_empty exec_shove () boolean_frominteger) (boolean_stackdepth boolean_empty exec_flush) () integer_lt integer_gte integer_flush boolean_yank exec_stackdepth print_boolean exec_dup_times (integer_min integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte boolean_dup_items exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_while (exec_y (exec_empty) boolean_shove boolean_xor)) () ()))) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_empty boolean_or boolean_or integer_div in4 exec_noop print_integer exec_do*range (boolean_dup_items boolean_empty) exec_s (integer_sub boolean_dup_items exec_empty exec_shove () boolean_frominteger) (boolean_stackdepth boolean_empty exec_flush) () integer_lt integer_gte integer_flush boolean_yank exec_stackdepth print_boolean exec_dup_times (integer_min integer_rot exec_if (in3 exec_dup (print_exec () exec_do*times (in2 exec_noop integer_gte boolean_dup_items exec_s_when_autoconstructing (print_exec () integer_dup_items boolean_stackdepth exec_while (exec_y (exec_empty) boolean_shove boolean_xor)) () ()))) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 2 545 548 103 256 258 547 906 2)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (907 2 545 548 103 256 258 547 906 2)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty})
Best program: (boolean_eq exec_pop (integer_dup_times print_integer integer_stackdepth exec_empty exec_pop () integer_lte exec_yank integer_mod) in4 boolean_dup_times integer_div boolean_and print_integer integer_fromboolean print_boolean integer_lt integer_div boolean_empty print_integer integer_gte integer_dup_items boolean_empty)
Errors: [0 1 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 27
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.926
Median total errors in population: 5
Error averages by case: (0.093 0.998 0.455 0.452 0.897 0.744 0.742 0.453 0.094 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.403
Average program size in population (points): 45.709
Average percent parens in population: 0.227
Minimum age in population: 11.375
Maximum age in population: 16.859375
Average age in population: 14.959134765625
Median age in population: 15.017578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5031642
--- Timings ---
Current time: 1559314528968 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 68.3%
Fitness Testing:      6.6 seconds, 19.9%
Report:               3.9 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min})
Lexicase best program: (in1 exec_rot () (exec_do*while (integer_shove in3 integer_min) boolean_rot) () integer_add print_integer integer_empty exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min})
Zero cases best program: (in1 exec_rot () (exec_do*while (integer_shove in3 integer_min) boolean_rot) () integer_add print_integer integer_empty exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (678 393 363 271 215 364 878 271 306 496)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (678 393 363 271 215 364 878 271 306 496)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min})
Best program: (in1 exec_rot () (exec_do*while (integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Errors: [0 1 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.765
Median total errors in population: 6
Error averages by case: (0.322 0.607 0.637 0.729 0.785 0.636 0.122 0.729 0.694 0.504)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.095
Average program size in population (points): 44.917
Average percent parens in population: 0.227
Minimum age in population: 12.375
Maximum age in population: 18.361328125
Average age in population: 16.6160576171875
Median age in population: 16.71435546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5346742
--- Timings ---
Current time: 1559314531365 milliseconds
Total Time:          35.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.6 seconds, 68.9%
Fitness Testing:      7.0 seconds, 19.5%
Report:               4.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min})
Lexicase best program: (in1 exec_rot () (exec_do*while (integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min})
Zero cases best program: (in1 exec_rot () (exec_do*while (integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (870 106 685 106 106 330 404 542 510 859)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (870 106 685 106 106 330 404 542 510 859)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min})
Best program: (in1 exec_rot () (exec_do*while (integer_shove in3 integer_min boolean_rot) exec_eq print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.482
Median total errors in population: 5
Error averages by case: (0.13 0.894 0.315 0.894 0.894 0.67 0.596 0.458 0.49 0.141)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.013
Average program size in population (points): 46.62
Average percent parens in population: 0.239
Minimum age in population: 14.890625
Maximum age in population: 20.220703125
Average age in population: 18.2117548828125
Median age in population: 18.220703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5722176
--- Timings ---
Current time: 1559314533882 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.6 seconds, 69.5%
Fitness Testing:      7.3 seconds, 19.2%
Report:               4.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 496
Test mean error for best: 0.49600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Lexicase best program: (exec_yank exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_while (exec_do*times (integer_shove in3 integer_min boolean_rot) integer_add print_integer) integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop) (boolean_rot integer_min))
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Zero cases best program: (exec_yank exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_while (exec_do*times (integer_shove in3 integer_min boolean_rot) integer_add print_integer) integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop) (boolean_rot integer_min))
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 166 865 165 353 493 280 352 819 353)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (352 166 865 165 353 493 280 352 819 353)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Best program: (exec_yank exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_while (exec_do*times (integer_shove in3 integer_min boolean_rot) integer_add print_integer) integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop) (boolean_rot integer_min))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 5.802
Median total errors in population: 5
Error averages by case: (0.648 0.834 0.135 0.835 0.647 0.507 0.72 0.648 0.181 0.647)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.617
Average program size in population (points): 47.642
Average percent parens in population: 0.221
Minimum age in population: 17.19921875
Maximum age in population: 21.720703125
Average age in population: 19.61301586914062
Median age in population: 19.710205078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6097501
--- Timings ---
Current time: 1559314536349 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.5 seconds, 69.9%
Fitness Testing:      7.7 seconds, 18.9%
Report:               4.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min})
Lexicase best program: (in1 exec_rot () (exec_do*while () integer_shove in3 integer_min boolean_rot) () integer_add print_integer integer_empty exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min})
Zero cases best program: (in1 exec_rot () (exec_do*while () integer_shove in3 integer_min boolean_rot) () integer_add print_integer integer_empty exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 106 383 796 827 785 106 812 106 453)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (453 106 383 796 827 785 106 812 106 453)
Population mean number of perfect (error zero) cases: 4.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min})
Best program: (in1 exec_rot () (exec_do*while (integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop integer_dec integer_min)
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.173
Median total errors in population: 4
Error averages by case: (0.547 0.894 0.617 0.204 0.173 0.215 0.894 0.188 0.894 0.547)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.737
Average program size in population (points): 46.842
Average percent parens in population: 0.246
Minimum age in population: 18.79833984375
Maximum age in population: 22.96826171875
Average age in population: 21.23749255371094
Median age in population: 21.216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 336
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 336
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6527022
--- Timings ---
Current time: 1559314538867 milliseconds
Total Time:          43.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.4 seconds, 70.2%
Fitness Testing:      8.1 seconds, 18.7%
Report:               4.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 399
Test mean error for best: 0.39900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Lexicase best program: (exec_yank exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_while (exec_do*times (integer_shove in3 integer_min boolean_rot) integer_add print_integer) integer_empty) exec_swap (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush integer_dup integer_pop) (boolean_rot integer_min)) ())
Lexicase best errors: [0 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Zero cases best program: (exec_yank exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_while (exec_do*times (integer_shove in3 integer_min boolean_rot) integer_add print_integer) integer_empty) exec_swap (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush integer_dup integer_pop) (boolean_rot integer_min)) ())
Zero cases best errors: [0 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 251 857 888 575 336 6 250 6 544)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (4 251 857 888 575 336 6 250 6 544)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Best program: (exec_yank exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_while (exec_do*times (integer_shove in3 integer_min boolean_rot) integer_add print_integer) integer_empty) exec_swap (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush integer_dup integer_pop) (boolean_rot integer_min)) ())
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.283
Median total errors in population: 6
Error averages by case: (0.996 0.749 0.143 0.112 0.425 0.664 0.994 0.75 0.994 0.456)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.076
Average program size in population (points): 32.916
Average percent parens in population: 0.269
Minimum age in population: 20.908203125
Maximum age in population: 24.5640869140625
Average age in population: 22.70975732421875
Median age in population: 22.8466796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.417
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.401
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6837034
--- Timings ---
Current time: 1559314541279 milliseconds
Total Time:          45.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.2 seconds, 70.6%
Fitness Testing:      8.4 seconds, 18.4%
Report:               4.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 299
Test mean error for best: 0.29900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 94                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Lexicase best program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Zero cases best program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (480 406 764 764 766 409 406 762 103 479)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (480 406 764 764 766 409 406 762 103 479)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Best program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_dup_times integer_shove in3 integer_min boolean_rot) integer_add print_integer integer_empty) (exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop) boolean_rot integer_min)
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.661
Median total errors in population: 4
Error averages by case: (0.52 0.594 0.236 0.236 0.234 0.591 0.594 0.238 0.897 0.521)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.471
Average program size in population (points): 35.974
Average percent parens in population: 0.263
Minimum age in population: 23.3466796875
Maximum age in population: 25.59576416015625
Average age in population: 24.68020001220703
Median age in population: 24.59405517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 311
Genome diversity (% unique genomes):	 0.345
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 312
Syntactic diversity (% unique Push programs):	 0.337
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7084216
--- Timings ---
Current time: 1559314543671 milliseconds
Total Time:          48.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 71.1%
Fitness Testing:      8.7 seconds, 18.1%
Report:               5.1 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 111
Test mean error for best: 0.11100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 1
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 1913               
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Lexicase best program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Zero cases best program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 633 582 360 362 532 532 362 632 531)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (359 633 582 360 362 532 532 362 632 531)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_min})
Best program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 52
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.115
Median total errors in population: 4
Error averages by case: (0.641 0.367 0.418 0.64 0.638 0.468 0.468 0.638 0.368 0.469)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.514
Average program size in population (points): 36.55
Average percent parens in population: 0.245
Minimum age in population: 24.4488525390625
Maximum age in population: 27.51507568359375
Average age in population: 26.23170869445801
Median age in population: 26.2659912109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7355824
--- Timings ---
Current time: 1559314546288 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.1 seconds, 71.4%
Fitness Testing:      9.0 seconds, 17.9%
Report:               5.4 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 52


Auto-simplifying with starting size: 52
step: 0
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 500
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 1000
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 1500
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 2000
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 2500
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 3000
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 3500
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 4000
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 4500
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

step: 5000
program: (boolean_rot exec_s_when_autoconstructing (in1 boolean_flush in4 integer_min boolean_dup in2) (exec_do*while (boolean_flush in4 exec_yank boolean_rot integer_shove in3 integer_min boolean_rot) integer_add print_integer) (integer_empty) exec_shove (exec_swap () (boolean_rot) integer_add boolean_rot) exec_swap (print_integer) (integer_empty) exec_shove (exec_swap () (print_integer integer_mod boolean_stackdepth) integer_mult boolean_flush) integer_dup integer_pop boolean_rot integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 52

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 111
Test mean error for best: 0.11100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 1
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 1913               
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -35                
;;******************************
