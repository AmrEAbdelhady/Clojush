Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-18 -59 -59 -59] -59] [[32 -58 32 32] -58] [[-24 -24 43 -24] -24] [[-27 16 -27 -27] -27] [[84 84 84 -37] -37] [[-68 -68 -8 -68] -68] [[-22 -22 -22 -55] -55] [[72 20 72 72] 20] [[29 29 29 41] 29] [[-67 0 -67 -67] -67] [(76 76 76 76) 76] [(80 80 80 80) 80] [(76 76 76 76) 76] [(11 11 11 11) 11] [(-68 -68 -68 -68) -68] [(79 51 47 60) 47] [(28 76 60 2) 2] [(49 11 53 12) 11] [(1 41 90 50) 1] [(76 52 47 73) 47] [(93 61 76 0) 0] [(42 24 71 48) 24] [(83 42 32 18) 18] [(36 71 26 15) 15] [(22 26 74 30) 22] [(58 44 0 32) 0] [(60 32 71 74) 32] [(8 16 4 57) 4] [(21 63 68 6) 6] [(75 34 60 82) 34] [(56 99 93 12) 12] [(10 23 42 83) 10] [(22 54 96 23) 22] [(56 69 74 70) 56] [(77 94 64 69) 64] [(-1 4 -32 -47) -47] [(38 51 -27 99) -27] [(44 51 -83 -36) -83] [(-4 -42 90 49) -42] [(-100 -60 43 -62) -100] [(-7 27 -72 44) -72] [(90 65 -74 38) -74] [(28 29 -1 -23) -23] [(-89 48 71 -38) -89] [(-36 -82 95 -57) -82] [(-6 81 31 3) -6] [(77 47 54 -23) -23] [(-4 -58 -43 37) -58] [(-56 -21 5 78) -56] [(27 78 30 -14) -14] [(35 -32 -92 -23) -92] [(-86 15 -37 83) -86] [(23 16 70 55) 16] [(34 -9 4 54) -9] [(-1 95 -26 -88) -88] [(27 -88 12 65) -88] [(13 53 30 -61) -61] [(-78 -18 10 60) -78] [(-40 -80 -49 42) -80] [(-87 -7 74 -60) -87] [(-5 -8 -15 63) -15] [(15 7 64 -65) -65] [(50 -26 -13 -77) -77] [(-18 99 23 81) -18] [(72 -89 -36 67) -89] [(-42 7 68 19) -42] [(-84 59 78 -1) -84] [(72 52 -30 70) -30] [(-55 21 -39 2) -55] [(-8 95 -51 66) -51] [(31 49 87 78) 31] [(-15 91 -53 -86) -86] [(-21 34 56 5) -21] [(-64 -54 20 -9) -64] [(-93 20 86 -62) -93] [(97 -27 -30 38) -30] [(-9 93 -3 -10) -10] [(67 14 65 -80) -80] [(-24 -42 -1 3) -42] [(-60 44 77 76) -60] [(-85 46 74 79) -85] [(-72 19 -56 -29) -72] [(61 -56 -99 36) -99] [(-13 -36 -5 -75) -75] [(-8 32 -70 2) -70] [(-77 65 40 -31) -77] [(-24 -22 -42 -44) -44] [(12 -19 -77 30) -77] [(-89 -60 -16 34) -89] [(-12 -63 -1 -100) -100] [(-24 22 -13 76) -24] [(-82 -88 -73 -77) -88] [(-59 -17 -91 -23) -91] [(-8 74 -60 17) -60] [(83 0 -82 80) -82])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-18 -59 -59 -59] -59]
Train Case:   6 | Input/Output: [[32 -58 32 32] -58]
Train Case:   7 | Input/Output: [[-24 -24 43 -24] -24]
Train Case:   8 | Input/Output: [[-27 16 -27 -27] -27]
Train Case:   9 | Input/Output: [[84 84 84 -37] -37]
Train Case:  10 | Input/Output: [[-68 -68 -8 -68] -68]
Train Case:  11 | Input/Output: [[-22 -22 -22 -55] -55]
Train Case:  12 | Input/Output: [[72 20 72 72] 20]
Train Case:  13 | Input/Output: [[29 29 29 41] 29]
Train Case:  14 | Input/Output: [[-67 0 -67 -67] -67]
Train Case:  15 | Input/Output: [(76 76 76 76) 76]
Train Case:  16 | Input/Output: [(80 80 80 80) 80]
Train Case:  17 | Input/Output: [(76 76 76 76) 76]
Train Case:  18 | Input/Output: [(11 11 11 11) 11]
Train Case:  19 | Input/Output: [(-68 -68 -68 -68) -68]
Train Case:  20 | Input/Output: [(79 51 47 60) 47]
Train Case:  21 | Input/Output: [(28 76 60 2) 2]
Train Case:  22 | Input/Output: [(49 11 53 12) 11]
Train Case:  23 | Input/Output: [(1 41 90 50) 1]
Train Case:  24 | Input/Output: [(76 52 47 73) 47]
Train Case:  25 | Input/Output: [(93 61 76 0) 0]
Train Case:  26 | Input/Output: [(42 24 71 48) 24]
Train Case:  27 | Input/Output: [(83 42 32 18) 18]
Train Case:  28 | Input/Output: [(36 71 26 15) 15]
Train Case:  29 | Input/Output: [(22 26 74 30) 22]
Train Case:  30 | Input/Output: [(58 44 0 32) 0]
Train Case:  31 | Input/Output: [(60 32 71 74) 32]
Train Case:  32 | Input/Output: [(8 16 4 57) 4]
Train Case:  33 | Input/Output: [(21 63 68 6) 6]
Train Case:  34 | Input/Output: [(75 34 60 82) 34]
Train Case:  35 | Input/Output: [(56 99 93 12) 12]
Train Case:  36 | Input/Output: [(10 23 42 83) 10]
Train Case:  37 | Input/Output: [(22 54 96 23) 22]
Train Case:  38 | Input/Output: [(56 69 74 70) 56]
Train Case:  39 | Input/Output: [(77 94 64 69) 64]
Train Case:  40 | Input/Output: [(-1 4 -32 -47) -47]
Train Case:  41 | Input/Output: [(38 51 -27 99) -27]
Train Case:  42 | Input/Output: [(44 51 -83 -36) -83]
Train Case:  43 | Input/Output: [(-4 -42 90 49) -42]
Train Case:  44 | Input/Output: [(-100 -60 43 -62) -100]
Train Case:  45 | Input/Output: [(-7 27 -72 44) -72]
Train Case:  46 | Input/Output: [(90 65 -74 38) -74]
Train Case:  47 | Input/Output: [(28 29 -1 -23) -23]
Train Case:  48 | Input/Output: [(-89 48 71 -38) -89]
Train Case:  49 | Input/Output: [(-36 -82 95 -57) -82]
Train Case:  50 | Input/Output: [(-6 81 31 3) -6]
Train Case:  51 | Input/Output: [(77 47 54 -23) -23]
Train Case:  52 | Input/Output: [(-4 -58 -43 37) -58]
Train Case:  53 | Input/Output: [(-56 -21 5 78) -56]
Train Case:  54 | Input/Output: [(27 78 30 -14) -14]
Train Case:  55 | Input/Output: [(35 -32 -92 -23) -92]
Train Case:  56 | Input/Output: [(-86 15 -37 83) -86]
Train Case:  57 | Input/Output: [(23 16 70 55) 16]
Train Case:  58 | Input/Output: [(34 -9 4 54) -9]
Train Case:  59 | Input/Output: [(-1 95 -26 -88) -88]
Train Case:  60 | Input/Output: [(27 -88 12 65) -88]
Train Case:  61 | Input/Output: [(13 53 30 -61) -61]
Train Case:  62 | Input/Output: [(-78 -18 10 60) -78]
Train Case:  63 | Input/Output: [(-40 -80 -49 42) -80]
Train Case:  64 | Input/Output: [(-87 -7 74 -60) -87]
Train Case:  65 | Input/Output: [(-5 -8 -15 63) -15]
Train Case:  66 | Input/Output: [(15 7 64 -65) -65]
Train Case:  67 | Input/Output: [(50 -26 -13 -77) -77]
Train Case:  68 | Input/Output: [(-18 99 23 81) -18]
Train Case:  69 | Input/Output: [(72 -89 -36 67) -89]
Train Case:  70 | Input/Output: [(-42 7 68 19) -42]
Train Case:  71 | Input/Output: [(-84 59 78 -1) -84]
Train Case:  72 | Input/Output: [(72 52 -30 70) -30]
Train Case:  73 | Input/Output: [(-55 21 -39 2) -55]
Train Case:  74 | Input/Output: [(-8 95 -51 66) -51]
Train Case:  75 | Input/Output: [(31 49 87 78) 31]
Train Case:  76 | Input/Output: [(-15 91 -53 -86) -86]
Train Case:  77 | Input/Output: [(-21 34 56 5) -21]
Train Case:  78 | Input/Output: [(-64 -54 20 -9) -64]
Train Case:  79 | Input/Output: [(-93 20 86 -62) -93]
Train Case:  80 | Input/Output: [(97 -27 -30 38) -30]
Train Case:  81 | Input/Output: [(-9 93 -3 -10) -10]
Train Case:  82 | Input/Output: [(67 14 65 -80) -80]
Train Case:  83 | Input/Output: [(-24 -42 -1 3) -42]
Train Case:  84 | Input/Output: [(-60 44 77 76) -60]
Train Case:  85 | Input/Output: [(-85 46 74 79) -85]
Train Case:  86 | Input/Output: [(-72 19 -56 -29) -72]
Train Case:  87 | Input/Output: [(61 -56 -99 36) -99]
Train Case:  88 | Input/Output: [(-13 -36 -5 -75) -75]
Train Case:  89 | Input/Output: [(-8 32 -70 2) -70]
Train Case:  90 | Input/Output: [(-77 65 40 -31) -77]
Train Case:  91 | Input/Output: [(-24 -22 -42 -44) -44]
Train Case:  92 | Input/Output: [(12 -19 -77 30) -77]
Train Case:  93 | Input/Output: [(-89 -60 -16 34) -89]
Train Case:  94 | Input/Output: [(-12 -63 -1 -100) -100]
Train Case:  95 | Input/Output: [(-24 22 -13 76) -24]
Train Case:  96 | Input/Output: [(-82 -88 -73 -77) -88]
Train Case:  97 | Input/Output: [(-59 -17 -91 -23) -91]
Train Case:  98 | Input/Output: [(-8 74 -60 17) -60]
Train Case:  99 | Input/Output: [(83 0 -82 80) -82]
Test Case:   0 | Input/Output: [[-55 -80 -55 -55] -80]
Test Case:   1 | Input/Output: [[-44 -67 -67 -67] -67]
Test Case:   2 | Input/Output: [[-63 97 -63 -63] -63]
Test Case:   3 | Input/Output: [[-1 -1 19 -1] -1]
Test Case:   4 | Input/Output: [[-19 -19 78 -19] -19]
Test Case:   5 | Input/Output: [[-42 -99 -42 -42] -99]
Test Case:   6 | Input/Output: [[20 20 -47 20] -47]
Test Case:   7 | Input/Output: [[-12 -12 -12 19] -12]
Test Case:   8 | Input/Output: [[8 8 61 8] 8]
Test Case:   9 | Input/Output: [[84 32 84 84] 32]
Test Case:  10 | Input/Output: [[0 -29 0 0] -29]
Test Case:  11 | Input/Output: [[-68 12 -68 -68] -68]
Test Case:  12 | Input/Output: [[-29 -29 11 -29] -29]
Test Case:  13 | Input/Output: [[-34 -34 -88 -34] -88]
Test Case:  14 | Input/Output: [[-45 -2 -45 -45] -45]
Test Case:  15 | Input/Output: [[59 59 -39 59] -39]
Test Case:  16 | Input/Output: [[-77 -77 -77 -79] -79]
Test Case:  17 | Input/Output: [[-45 -42 -45 -45] -45]
Test Case:  18 | Input/Output: [[91 -50 91 91] -50]
Test Case:  19 | Input/Output: [[-85 -42 -42 -42] -85]
Test Case:  20 | Input/Output: [[93 -27 93 93] -27]
Test Case:  21 | Input/Output: [[43 84 43 43] 43]
Test Case:  22 | Input/Output: [[99 99 99 53] 53]
Test Case:  23 | Input/Output: [[40 40 -2 40] -2]
Test Case:  24 | Input/Output: [[51 78 51 51] 51]
Test Case:  25 | Input/Output: [[40 40 40 -45] -45]
Test Case:  26 | Input/Output: [[79 79 -7 79] -7]
Test Case:  27 | Input/Output: [[-41 46 -41 -41] -41]
Test Case:  28 | Input/Output: [[-4 -4 27 -4] -4]
Test Case:  29 | Input/Output: [[-14 6 -14 -14] -14]
Test Case:  30 | Input/Output: [[13 -67 -67 -67] -67]
Test Case:  31 | Input/Output: [[11 -12 -12 -12] -12]
Test Case:  32 | Input/Output: [[16 -69 16 16] -69]
Test Case:  33 | Input/Output: [[76 76 96 76] 76]
Test Case:  34 | Input/Output: [[75 54 75 75] 54]
Test Case:  35 | Input/Output: [[-62 -5 -62 -62] -62]
Test Case:  36 | Input/Output: [[69 69 69 -98] -98]
Test Case:  37 | Input/Output: [[-81 -8 -81 -81] -81]
Test Case:  38 | Input/Output: [[-94 11 -94 -94] -94]
Test Case:  39 | Input/Output: [[-54 -13 -13 -13] -54]
Test Case:  40 | Input/Output: [[64 -84 -84 -84] -84]
Test Case:  41 | Input/Output: [[50 50 50 -20] -20]
Test Case:  42 | Input/Output: [[-57 -31 -57 -57] -57]
Test Case:  43 | Input/Output: [[-63 92 92 92] -63]
Test Case:  44 | Input/Output: [[34 34 2 34] 2]
Test Case:  45 | Input/Output: [[43 78 43 43] 43]
Test Case:  46 | Input/Output: [[89 -61 89 89] -61]
Test Case:  47 | Input/Output: [[62 21 62 62] 21]
Test Case:  48 | Input/Output: [[92 99 92 92] 92]
Test Case:  49 | Input/Output: [[-96 -41 -96 -96] -96]
Test Case:  50 | Input/Output: [[-54 -54 -54 -36] -54]
Test Case:  51 | Input/Output: [[-37 -37 -37 97] -37]
Test Case:  52 | Input/Output: [[68 68 -67 68] -67]
Test Case:  53 | Input/Output: [[-66 -66 -74 -66] -74]
Test Case:  54 | Input/Output: [[-83 -83 -83 -11] -83]
Test Case:  55 | Input/Output: [[-64 -64 -72 -64] -72]
Test Case:  56 | Input/Output: [[-70 -70 -77 -70] -77]
Test Case:  57 | Input/Output: [[81 -27 -27 -27] -27]
Test Case:  58 | Input/Output: [[92 -17 -17 -17] -17]
Test Case:  59 | Input/Output: [[-87 -87 -87 -26] -87]
Test Case:  60 | Input/Output: [[84 84 7 84] 7]
Test Case:  61 | Input/Output: [[-27 -27 -27 80] -27]
Test Case:  62 | Input/Output: [[14 -8 14 14] -8]
Test Case:  63 | Input/Output: [[-84 -84 -29 -84] -84]
Test Case:  64 | Input/Output: [[-94 -94 -94 -26] -94]
Test Case:  65 | Input/Output: [[-50 -50 -50 -72] -72]
Test Case:  66 | Input/Output: [[61 61 40 61] 40]
Test Case:  67 | Input/Output: [[24 24 24 -52] -52]
Test Case:  68 | Input/Output: [[16 16 16 -10] -10]
Test Case:  69 | Input/Output: [[81 81 38 81] 38]
Test Case:  70 | Input/Output: [[32 70 32 32] 32]
Test Case:  71 | Input/Output: [[2 2 77 2] 2]
Test Case:  72 | Input/Output: [[40 -9 40 40] -9]
Test Case:  73 | Input/Output: [[-65 94 94 94] -65]
Test Case:  74 | Input/Output: [[-95 61 -95 -95] -95]
Test Case:  75 | Input/Output: [[22 -60 22 22] -60]
Test Case:  76 | Input/Output: [[-93 -93 -93 -72] -93]
Test Case:  77 | Input/Output: [[-77 44 -77 -77] -77]
Test Case:  78 | Input/Output: [[-29 22 -29 -29] -29]
Test Case:  79 | Input/Output: [[-3 75 75 75] -3]
Test Case:  80 | Input/Output: [[25 7 7 7] 7]
Test Case:  81 | Input/Output: [[45 45 45 39] 39]
Test Case:  82 | Input/Output: [[-76 -76 -76 -24] -76]
Test Case:  83 | Input/Output: [[-93 -93 -10 -93] -93]
Test Case:  84 | Input/Output: [[50 50 50 -95] -95]
Test Case:  85 | Input/Output: [[-45 -45 -71 -45] -71]
Test Case:  86 | Input/Output: [[99 -64 99 99] -64]
Test Case:  87 | Input/Output: [[99 99 99 -49] -49]
Test Case:  88 | Input/Output: [[-88 -88 25 -88] -88]
Test Case:  89 | Input/Output: [[-23 45 -23 -23] -23]
Test Case:  90 | Input/Output: [[-52 -52 15 -52] -52]
Test Case:  91 | Input/Output: [[31 -22 31 31] -22]
Test Case:  92 | Input/Output: [[-16 -16 -76 -16] -76]
Test Case:  93 | Input/Output: [[-82 -82 -82 -23] -82]
Test Case:  94 | Input/Output: [[-51 -54 -54 -54] -54]
Test Case:  95 | Input/Output: [[-13 -19 -19 -19] -19]
Test Case:  96 | Input/Output: [[39 39 39 84] 39]
Test Case:  97 | Input/Output: [[77 77 77 -5] -5]
Test Case:  98 | Input/Output: [[-73 -58 -73 -73] -73]
Test Case:  99 | Input/Output: [[80 72 72 72] 72]
Test Case: 100 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 101 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 102 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 103 | Input/Output: [(84 84 84 84) 84]
Test Case: 104 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 105 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 106 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 107 | Input/Output: [(61 61 61 61) 61]
Test Case: 108 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 109 | Input/Output: [(33 33 33 33) 33]
Test Case: 110 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 111 | Input/Output: [(79 79 79 79) 79]
Test Case: 112 | Input/Output: [(55 55 55 55) 55]
Test Case: 113 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 114 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 115 | Input/Output: [(24 24 24 24) 24]
Test Case: 116 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 117 | Input/Output: [(33 33 33 33) 33]
Test Case: 118 | Input/Output: [(64 64 64 64) 64]
Test Case: 119 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 120 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 121 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 122 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 123 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 124 | Input/Output: [(87 87 87 87) 87]
Test Case: 125 | Input/Output: [(53 53 53 53) 53]
Test Case: 126 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 127 | Input/Output: [(100 100 100 100) 100]
Test Case: 128 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 129 | Input/Output: [(48 48 48 48) 48]
Test Case: 130 | Input/Output: [(22 22 22 22) 22]
Test Case: 131 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 132 | Input/Output: [(15 15 15 15) 15]
Test Case: 133 | Input/Output: [(51 51 51 51) 51]
Test Case: 134 | Input/Output: [(73 73 73 73) 73]
Test Case: 135 | Input/Output: [(100 100 100 100) 100]
Test Case: 136 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 137 | Input/Output: [(80 80 80 80) 80]
Test Case: 138 | Input/Output: [(12 12 12 12) 12]
Test Case: 139 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 140 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 141 | Input/Output: [(99 99 99 99) 99]
Test Case: 142 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 143 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 144 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 145 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 146 | Input/Output: [(7 7 7 7) 7]
Test Case: 147 | Input/Output: [(56 56 56 56) 56]
Test Case: 148 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 149 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 150 | Input/Output: [(52 52 52 52) 52]
Test Case: 151 | Input/Output: [(34 34 34 34) 34]
Test Case: 152 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 153 | Input/Output: [(4 4 4 4) 4]
Test Case: 154 | Input/Output: [(82 82 82 82) 82]
Test Case: 155 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 156 | Input/Output: [(57 57 57 57) 57]
Test Case: 157 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 158 | Input/Output: [(100 100 100 100) 100]
Test Case: 159 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 160 | Input/Output: [(83 83 83 83) 83]
Test Case: 161 | Input/Output: [(72 72 72 72) 72]
Test Case: 162 | Input/Output: [(64 64 64 64) 64]
Test Case: 163 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 164 | Input/Output: [(99 99 99 99) 99]
Test Case: 165 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 166 | Input/Output: [(78 78 78 78) 78]
Test Case: 167 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 168 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 169 | Input/Output: [(60 60 60 60) 60]
Test Case: 170 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 171 | Input/Output: [(9 9 9 9) 9]
Test Case: 172 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 173 | Input/Output: [(42 42 42 42) 42]
Test Case: 174 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 175 | Input/Output: [(81 81 81 81) 81]
Test Case: 176 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 177 | Input/Output: [(74 74 74 74) 74]
Test Case: 178 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 179 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 180 | Input/Output: [(6 6 6 6) 6]
Test Case: 181 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 182 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 183 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 184 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 185 | Input/Output: [(4 4 4 4) 4]
Test Case: 186 | Input/Output: [(46 46 46 46) 46]
Test Case: 187 | Input/Output: [(81 81 81 81) 81]
Test Case: 188 | Input/Output: [(95 95 95 95) 95]
Test Case: 189 | Input/Output: [(57 57 57 57) 57]
Test Case: 190 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 191 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 192 | Input/Output: [(56 56 56 56) 56]
Test Case: 193 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 194 | Input/Output: [(69 69 69 69) 69]
Test Case: 195 | Input/Output: [(92 92 92 92) 92]
Test Case: 196 | Input/Output: [(41 41 41 41) 41]
Test Case: 197 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 198 | Input/Output: [(42 42 42 42) 42]
Test Case: 199 | Input/Output: [(88 88 88 88) 88]
Test Case: 200 | Input/Output: [(3 29 56 82) 3]
Test Case: 201 | Input/Output: [(9 55 37 36) 9]
Test Case: 202 | Input/Output: [(74 39 58 40) 39]
Test Case: 203 | Input/Output: [(56 19 79 95) 19]
Test Case: 204 | Input/Output: [(58 93 70 98) 58]
Test Case: 205 | Input/Output: [(5 58 100 45) 5]
Test Case: 206 | Input/Output: [(51 50 64 13) 13]
Test Case: 207 | Input/Output: [(44 70 69 80) 44]
Test Case: 208 | Input/Output: [(70 33 12 43) 12]
Test Case: 209 | Input/Output: [(73 65 95 18) 18]
Test Case: 210 | Input/Output: [(9 67 33 39) 9]
Test Case: 211 | Input/Output: [(69 5 59 11) 5]
Test Case: 212 | Input/Output: [(25 67 47 36) 25]
Test Case: 213 | Input/Output: [(12 77 29 82) 12]
Test Case: 214 | Input/Output: [(21 67 86 10) 10]
Test Case: 215 | Input/Output: [(23 49 25 32) 23]
Test Case: 216 | Input/Output: [(19 94 34 36) 19]
Test Case: 217 | Input/Output: [(74 85 97 84) 74]
Test Case: 218 | Input/Output: [(37 71 92 84) 37]
Test Case: 219 | Input/Output: [(18 98 89 69) 18]
Test Case: 220 | Input/Output: [(76 30 51 49) 30]
Test Case: 221 | Input/Output: [(55 61 5 71) 5]
Test Case: 222 | Input/Output: [(61 81 43 55) 43]
Test Case: 223 | Input/Output: [(69 71 81 86) 69]
Test Case: 224 | Input/Output: [(46 79 60 36) 36]
Test Case: 225 | Input/Output: [(66 24 78 7) 7]
Test Case: 226 | Input/Output: [(99 12 68 76) 12]
Test Case: 227 | Input/Output: [(11 43 77 20) 11]
Test Case: 228 | Input/Output: [(87 43 50 39) 39]
Test Case: 229 | Input/Output: [(89 82 97 100) 82]
Test Case: 230 | Input/Output: [(13 51 67 54) 13]
Test Case: 231 | Input/Output: [(4 78 27 88) 4]
Test Case: 232 | Input/Output: [(8 91 61 16) 8]
Test Case: 233 | Input/Output: [(42 98 85 80) 42]
Test Case: 234 | Input/Output: [(94 18 21 84) 18]
Test Case: 235 | Input/Output: [(28 100 62 1) 1]
Test Case: 236 | Input/Output: [(12 27 54 28) 12]
Test Case: 237 | Input/Output: [(16 50 24 69) 16]
Test Case: 238 | Input/Output: [(10 77 20 19) 10]
Test Case: 239 | Input/Output: [(94 51 1 67) 1]
Test Case: 240 | Input/Output: [(66 64 59 45) 45]
Test Case: 241 | Input/Output: [(19 10 55 21) 10]
Test Case: 242 | Input/Output: [(92 73 4 57) 4]
Test Case: 243 | Input/Output: [(24 76 67 55) 24]
Test Case: 244 | Input/Output: [(37 14 10 17) 10]
Test Case: 245 | Input/Output: [(55 87 83 31) 31]
Test Case: 246 | Input/Output: [(74 14 71 25) 14]
Test Case: 247 | Input/Output: [(58 61 52 63) 52]
Test Case: 248 | Input/Output: [(94 0 20 81) 0]
Test Case: 249 | Input/Output: [(53 22 11 80) 11]
Test Case: 250 | Input/Output: [(50 88 28 39) 28]
Test Case: 251 | Input/Output: [(81 91 20 0) 0]
Test Case: 252 | Input/Output: [(83 37 93 80) 37]
Test Case: 253 | Input/Output: [(51 8 90 5) 5]
Test Case: 254 | Input/Output: [(64 72 31 10) 10]
Test Case: 255 | Input/Output: [(70 54 33 86) 33]
Test Case: 256 | Input/Output: [(56 87 92 8) 8]
Test Case: 257 | Input/Output: [(73 26 49 87) 26]
Test Case: 258 | Input/Output: [(41 36 17 48) 17]
Test Case: 259 | Input/Output: [(30 82 39 12) 12]
Test Case: 260 | Input/Output: [(75 22 31 21) 21]
Test Case: 261 | Input/Output: [(92 68 36 29) 29]
Test Case: 262 | Input/Output: [(55 83 64 68) 55]
Test Case: 263 | Input/Output: [(96 17 5 14) 5]
Test Case: 264 | Input/Output: [(47 7 28 46) 7]
Test Case: 265 | Input/Output: [(8 13 33 0) 0]
Test Case: 266 | Input/Output: [(62 97 77 94) 62]
Test Case: 267 | Input/Output: [(20 99 28 2) 2]
Test Case: 268 | Input/Output: [(0 77 20 31) 0]
Test Case: 269 | Input/Output: [(33 11 29 18) 11]
Test Case: 270 | Input/Output: [(5 81 25 61) 5]
Test Case: 271 | Input/Output: [(18 19 44 27) 18]
Test Case: 272 | Input/Output: [(75 56 76 4) 4]
Test Case: 273 | Input/Output: [(4 37 17 81) 4]
Test Case: 274 | Input/Output: [(25 67 43 57) 25]
Test Case: 275 | Input/Output: [(20 71 32 12) 12]
Test Case: 276 | Input/Output: [(23 92 16 49) 16]
Test Case: 277 | Input/Output: [(35 30 15 22) 15]
Test Case: 278 | Input/Output: [(52 97 82 54) 52]
Test Case: 279 | Input/Output: [(72 61 40 90) 40]
Test Case: 280 | Input/Output: [(23 82 23 31) 23]
Test Case: 281 | Input/Output: [(50 45 11 0) 0]
Test Case: 282 | Input/Output: [(92 1 76 24) 1]
Test Case: 283 | Input/Output: [(14 75 43 79) 14]
Test Case: 284 | Input/Output: [(39 77 24 51) 24]
Test Case: 285 | Input/Output: [(86 66 97 44) 44]
Test Case: 286 | Input/Output: [(91 98 33 95) 33]
Test Case: 287 | Input/Output: [(46 16 62 35) 16]
Test Case: 288 | Input/Output: [(52 12 91 11) 11]
Test Case: 289 | Input/Output: [(71 45 35 28) 28]
Test Case: 290 | Input/Output: [(62 19 43 31) 19]
Test Case: 291 | Input/Output: [(0 17 0 65) 0]
Test Case: 292 | Input/Output: [(84 60 67 43) 43]
Test Case: 293 | Input/Output: [(76 52 83 30) 30]
Test Case: 294 | Input/Output: [(76 63 49 73) 49]
Test Case: 295 | Input/Output: [(51 78 30 92) 30]
Test Case: 296 | Input/Output: [(27 0 36 35) 0]
Test Case: 297 | Input/Output: [(60 78 30 81) 30]
Test Case: 298 | Input/Output: [(94 37 86 48) 37]
Test Case: 299 | Input/Output: [(89 25 44 96) 25]
Test Case: 300 | Input/Output: [(80 5 66 17) 5]
Test Case: 301 | Input/Output: [(72 68 1 44) 1]
Test Case: 302 | Input/Output: [(51 61 27 20) 20]
Test Case: 303 | Input/Output: [(58 0 25 66) 0]
Test Case: 304 | Input/Output: [(80 80 19 7) 7]
Test Case: 305 | Input/Output: [(5 63 17 0) 0]
Test Case: 306 | Input/Output: [(16 43 80 5) 5]
Test Case: 307 | Input/Output: [(96 91 18 52) 18]
Test Case: 308 | Input/Output: [(8 32 4 98) 4]
Test Case: 309 | Input/Output: [(10 46 9 65) 9]
Test Case: 310 | Input/Output: [(47 25 91 41) 25]
Test Case: 311 | Input/Output: [(80 37 12 93) 12]
Test Case: 312 | Input/Output: [(51 77 59 24) 24]
Test Case: 313 | Input/Output: [(84 70 10 86) 10]
Test Case: 314 | Input/Output: [(86 59 94 54) 54]
Test Case: 315 | Input/Output: [(79 21 77 11) 11]
Test Case: 316 | Input/Output: [(1 81 57 47) 1]
Test Case: 317 | Input/Output: [(35 57 66 77) 35]
Test Case: 318 | Input/Output: [(22 11 18 83) 11]
Test Case: 319 | Input/Output: [(20 88 22 73) 20]
Test Case: 320 | Input/Output: [(92 87 29 29) 29]
Test Case: 321 | Input/Output: [(93 54 20 64) 20]
Test Case: 322 | Input/Output: [(13 37 52 80) 13]
Test Case: 323 | Input/Output: [(43 67 8 46) 8]
Test Case: 324 | Input/Output: [(92 71 61 69) 61]
Test Case: 325 | Input/Output: [(75 38 52 6) 6]
Test Case: 326 | Input/Output: [(99 60 100 92) 60]
Test Case: 327 | Input/Output: [(23 62 7 20) 7]
Test Case: 328 | Input/Output: [(36 55 62 49) 36]
Test Case: 329 | Input/Output: [(44 56 100 78) 44]
Test Case: 330 | Input/Output: [(65 48 62 14) 14]
Test Case: 331 | Input/Output: [(83 54 7 52) 7]
Test Case: 332 | Input/Output: [(57 39 87 60) 39]
Test Case: 333 | Input/Output: [(32 45 25 39) 25]
Test Case: 334 | Input/Output: [(20 29 2 66) 2]
Test Case: 335 | Input/Output: [(71 40 20 47) 20]
Test Case: 336 | Input/Output: [(61 73 34 35) 34]
Test Case: 337 | Input/Output: [(3 43 1 57) 1]
Test Case: 338 | Input/Output: [(35 65 69 74) 35]
Test Case: 339 | Input/Output: [(12 23 21 51) 12]
Test Case: 340 | Input/Output: [(11 11 49 99) 11]
Test Case: 341 | Input/Output: [(11 72 47 25) 11]
Test Case: 342 | Input/Output: [(16 4 0 78) 0]
Test Case: 343 | Input/Output: [(50 21 40 99) 21]
Test Case: 344 | Input/Output: [(49 84 1 86) 1]
Test Case: 345 | Input/Output: [(3 70 95 88) 3]
Test Case: 346 | Input/Output: [(35 80 88 70) 35]
Test Case: 347 | Input/Output: [(78 51 20 94) 20]
Test Case: 348 | Input/Output: [(14 33 79 31) 14]
Test Case: 349 | Input/Output: [(45 36 25 53) 25]
Test Case: 350 | Input/Output: [(72 92 38 81) 38]
Test Case: 351 | Input/Output: [(56 99 86 55) 55]
Test Case: 352 | Input/Output: [(2 25 24 72) 2]
Test Case: 353 | Input/Output: [(9 30 95 21) 9]
Test Case: 354 | Input/Output: [(89 7 46 15) 7]
Test Case: 355 | Input/Output: [(30 4 42 19) 4]
Test Case: 356 | Input/Output: [(37 50 7 32) 7]
Test Case: 357 | Input/Output: [(34 96 99 95) 34]
Test Case: 358 | Input/Output: [(41 38 37 7) 7]
Test Case: 359 | Input/Output: [(32 100 34 96) 32]
Test Case: 360 | Input/Output: [(40 32 12 82) 12]
Test Case: 361 | Input/Output: [(21 70 1 99) 1]
Test Case: 362 | Input/Output: [(49 94 36 21) 21]
Test Case: 363 | Input/Output: [(81 95 8 11) 8]
Test Case: 364 | Input/Output: [(71 86 58 57) 57]
Test Case: 365 | Input/Output: [(32 18 100 65) 18]
Test Case: 366 | Input/Output: [(26 62 79 36) 26]
Test Case: 367 | Input/Output: [(27 88 21 85) 21]
Test Case: 368 | Input/Output: [(61 27 50 7) 7]
Test Case: 369 | Input/Output: [(58 21 83 50) 21]
Test Case: 370 | Input/Output: [(32 66 14 62) 14]
Test Case: 371 | Input/Output: [(55 39 94 82) 39]
Test Case: 372 | Input/Output: [(29 83 54 53) 29]
Test Case: 373 | Input/Output: [(14 17 17 86) 14]
Test Case: 374 | Input/Output: [(75 5 58 12) 5]
Test Case: 375 | Input/Output: [(30 70 55 41) 30]
Test Case: 376 | Input/Output: [(54 33 0 1) 0]
Test Case: 377 | Input/Output: [(48 15 91 49) 15]
Test Case: 378 | Input/Output: [(57 42 79 98) 42]
Test Case: 379 | Input/Output: [(55 59 67 8) 8]
Test Case: 380 | Input/Output: [(72 18 45 23) 18]
Test Case: 381 | Input/Output: [(75 35 31 69) 31]
Test Case: 382 | Input/Output: [(36 63 62 43) 36]
Test Case: 383 | Input/Output: [(84 72 49 10) 10]
Test Case: 384 | Input/Output: [(14 8 45 52) 8]
Test Case: 385 | Input/Output: [(91 23 77 33) 23]
Test Case: 386 | Input/Output: [(31 95 93 5) 5]
Test Case: 387 | Input/Output: [(55 61 50 1) 1]
Test Case: 388 | Input/Output: [(1 34 37 92) 1]
Test Case: 389 | Input/Output: [(89 67 18 4) 4]
Test Case: 390 | Input/Output: [(26 61 33 77) 26]
Test Case: 391 | Input/Output: [(42 13 1 59) 1]
Test Case: 392 | Input/Output: [(75 72 34 12) 12]
Test Case: 393 | Input/Output: [(49 41 17 94) 17]
Test Case: 394 | Input/Output: [(35 91 72 11) 11]
Test Case: 395 | Input/Output: [(83 32 83 84) 32]
Test Case: 396 | Input/Output: [(71 21 29 77) 21]
Test Case: 397 | Input/Output: [(72 58 19 10) 10]
Test Case: 398 | Input/Output: [(13 2 6 42) 2]
Test Case: 399 | Input/Output: [(92 42 18 75) 18]
Test Case: 400 | Input/Output: [(0 -60 84 -32) -60]
Test Case: 401 | Input/Output: [(-36 -81 -64 -87) -87]
Test Case: 402 | Input/Output: [(43 -76 -37 -28) -76]
Test Case: 403 | Input/Output: [(-63 47 -72 19) -72]
Test Case: 404 | Input/Output: [(-59 -29 93 95) -59]
Test Case: 405 | Input/Output: [(18 58 -88 -16) -88]
Test Case: 406 | Input/Output: [(24 -58 -12 75) -58]
Test Case: 407 | Input/Output: [(1 43 43 -14) -14]
Test Case: 408 | Input/Output: [(-43 90 95 92) -43]
Test Case: 409 | Input/Output: [(-9 78 -44 67) -44]
Test Case: 410 | Input/Output: [(-3 -38 -98 40) -98]
Test Case: 411 | Input/Output: [(-33 71 2 17) -33]
Test Case: 412 | Input/Output: [(-76 98 34 -5) -76]
Test Case: 413 | Input/Output: [(-58 -8 67 -74) -74]
Test Case: 414 | Input/Output: [(-41 62 79 2) -41]
Test Case: 415 | Input/Output: [(49 -14 -48 0) -48]
Test Case: 416 | Input/Output: [(-62 87 -23 -79) -79]
Test Case: 417 | Input/Output: [(56 86 -50 -70) -70]
Test Case: 418 | Input/Output: [(-69 -30 -18 -30) -69]
Test Case: 419 | Input/Output: [(24 24 -40 54) -40]
Test Case: 420 | Input/Output: [(32 -65 -11 92) -65]
Test Case: 421 | Input/Output: [(11 75 -35 -55) -55]
Test Case: 422 | Input/Output: [(48 -43 95 -1) -43]
Test Case: 423 | Input/Output: [(38 59 96 -75) -75]
Test Case: 424 | Input/Output: [(49 -60 -64 -22) -64]
Test Case: 425 | Input/Output: [(38 -25 13 99) -25]
Test Case: 426 | Input/Output: [(-10 14 58 -28) -28]
Test Case: 427 | Input/Output: [(65 68 -18 31) -18]
Test Case: 428 | Input/Output: [(59 93 62 -7) -7]
Test Case: 429 | Input/Output: [(-13 -61 -68 97) -68]
Test Case: 430 | Input/Output: [(-36 -22 85 69) -36]
Test Case: 431 | Input/Output: [(-93 36 -39 -33) -93]
Test Case: 432 | Input/Output: [(86 46 35 99) 35]
Test Case: 433 | Input/Output: [(-55 2 26 75) -55]
Test Case: 434 | Input/Output: [(94 -74 52 -55) -74]
Test Case: 435 | Input/Output: [(-5 27 24 71) -5]
Test Case: 436 | Input/Output: [(-35 -8 99 -75) -75]
Test Case: 437 | Input/Output: [(20 19 37 -72) -72]
Test Case: 438 | Input/Output: [(-98 -75 -97 20) -98]
Test Case: 439 | Input/Output: [(-20 17 77 54) -20]
Test Case: 440 | Input/Output: [(98 -51 -36 87) -51]
Test Case: 441 | Input/Output: [(84 -65 -80 -22) -80]
Test Case: 442 | Input/Output: [(2 62 -20 61) -20]
Test Case: 443 | Input/Output: [(28 -73 49 -5) -73]
Test Case: 444 | Input/Output: [(-54 -69 4 -32) -69]
Test Case: 445 | Input/Output: [(65 -79 -52 -85) -85]
Test Case: 446 | Input/Output: [(19 83 44 12) 12]
Test Case: 447 | Input/Output: [(-93 56 98 -75) -93]
Test Case: 448 | Input/Output: [(-1 -49 53 88) -49]
Test Case: 449 | Input/Output: [(10 84 15 48) 10]
Test Case: 450 | Input/Output: [(13 -74 -97 61) -97]
Test Case: 451 | Input/Output: [(-34 -28 -67 -39) -67]
Test Case: 452 | Input/Output: [(-32 -61 -63 37) -63]
Test Case: 453 | Input/Output: [(57 89 -51 -62) -62]
Test Case: 454 | Input/Output: [(51 34 19 -7) -7]
Test Case: 455 | Input/Output: [(-25 -4 -32 86) -32]
Test Case: 456 | Input/Output: [(-54 87 34 -61) -61]
Test Case: 457 | Input/Output: [(93 -10 -31 -59) -59]
Test Case: 458 | Input/Output: [(44 51 5 -95) -95]
Test Case: 459 | Input/Output: [(-82 -66 -86 96) -86]
Test Case: 460 | Input/Output: [(57 11 -54 -96) -96]
Test Case: 461 | Input/Output: [(11 77 15 -39) -39]
Test Case: 462 | Input/Output: [(-89 15 -22 -18) -89]
Test Case: 463 | Input/Output: [(62 27 -21 -83) -83]
Test Case: 464 | Input/Output: [(-42 -26 -62 -4) -62]
Test Case: 465 | Input/Output: [(2 26 35 -80) -80]
Test Case: 466 | Input/Output: [(18 78 47 42) 18]
Test Case: 467 | Input/Output: [(-30 -13 -48 75) -48]
Test Case: 468 | Input/Output: [(39 -35 23 -1) -35]
Test Case: 469 | Input/Output: [(-31 -69 83 -40) -69]
Test Case: 470 | Input/Output: [(27 5 20 -95) -95]
Test Case: 471 | Input/Output: [(38 5 51 12) 5]
Test Case: 472 | Input/Output: [(80 -49 -55 -38) -55]
Test Case: 473 | Input/Output: [(28 88 21 -56) -56]
Test Case: 474 | Input/Output: [(-84 -75 -26 -84) -84]
Test Case: 475 | Input/Output: [(80 -28 -44 -60) -60]
Test Case: 476 | Input/Output: [(-31 30 -41 29) -41]
Test Case: 477 | Input/Output: [(69 -71 93 -97) -97]
Test Case: 478 | Input/Output: [(-82 100 60 -56) -82]
Test Case: 479 | Input/Output: [(19 33 23 88) 19]
Test Case: 480 | Input/Output: [(58 46 -96 68) -96]
Test Case: 481 | Input/Output: [(-49 -62 73 -7) -62]
Test Case: 482 | Input/Output: [(39 -37 -23 98) -37]
Test Case: 483 | Input/Output: [(-78 -16 34 84) -78]
Test Case: 484 | Input/Output: [(-36 63 68 -8) -36]
Test Case: 485 | Input/Output: [(75 60 54 -82) -82]
Test Case: 486 | Input/Output: [(43 -7 -7 -43) -43]
Test Case: 487 | Input/Output: [(-90 -13 -52 -100) -100]
Test Case: 488 | Input/Output: [(84 -19 86 -67) -67]
Test Case: 489 | Input/Output: [(1 -72 -31 -21) -72]
Test Case: 490 | Input/Output: [(67 -96 -84 45) -96]
Test Case: 491 | Input/Output: [(-10 53 -72 35) -72]
Test Case: 492 | Input/Output: [(-16 -15 86 46) -16]
Test Case: 493 | Input/Output: [(17 -1 98 99) -1]
Test Case: 494 | Input/Output: [(-27 68 56 -67) -67]
Test Case: 495 | Input/Output: [(73 -22 82 -91) -91]
Test Case: 496 | Input/Output: [(-19 -8 14 -63) -63]
Test Case: 497 | Input/Output: [(-13 41 5 99) -13]
Test Case: 498 | Input/Output: [(-7 23 58 62) -7]
Test Case: 499 | Input/Output: [(-79 -7 27 -42) -79]
Test Case: 500 | Input/Output: [(-78 -59 -85 85) -85]
Test Case: 501 | Input/Output: [(12 -68 97 -13) -68]
Test Case: 502 | Input/Output: [(68 -33 -79 -71) -79]
Test Case: 503 | Input/Output: [(77 -73 86 13) -73]
Test Case: 504 | Input/Output: [(-87 -22 -88 78) -88]
Test Case: 505 | Input/Output: [(-13 -84 -86 92) -86]
Test Case: 506 | Input/Output: [(-78 -2 -19 61) -78]
Test Case: 507 | Input/Output: [(28 -91 30 27) -91]
Test Case: 508 | Input/Output: [(80 2 26 -25) -25]
Test Case: 509 | Input/Output: [(-8 -59 21 12) -59]
Test Case: 510 | Input/Output: [(-74 -45 -56 -24) -74]
Test Case: 511 | Input/Output: [(-57 99 73 -52) -57]
Test Case: 512 | Input/Output: [(24 83 21 -69) -69]
Test Case: 513 | Input/Output: [(67 -4 -90 -69) -90]
Test Case: 514 | Input/Output: [(-75 -12 43 -20) -75]
Test Case: 515 | Input/Output: [(-37 -69 73 65) -69]
Test Case: 516 | Input/Output: [(-4 -40 62 52) -40]
Test Case: 517 | Input/Output: [(-94 -81 61 -61) -94]
Test Case: 518 | Input/Output: [(36 42 -88 -48) -88]
Test Case: 519 | Input/Output: [(69 -13 -35 -83) -83]
Test Case: 520 | Input/Output: [(67 -95 32 -50) -95]
Test Case: 521 | Input/Output: [(-87 29 37 -16) -87]
Test Case: 522 | Input/Output: [(12 0 -92 -44) -92]
Test Case: 523 | Input/Output: [(15 91 53 -84) -84]
Test Case: 524 | Input/Output: [(-69 93 -69 -20) -69]
Test Case: 525 | Input/Output: [(60 94 11 64) 11]
Test Case: 526 | Input/Output: [(-54 28 45 92) -54]
Test Case: 527 | Input/Output: [(-72 -6 -91 -100) -100]
Test Case: 528 | Input/Output: [(93 66 -10 -86) -86]
Test Case: 529 | Input/Output: [(-87 -35 -2 21) -87]
Test Case: 530 | Input/Output: [(3 63 89 -4) -4]
Test Case: 531 | Input/Output: [(10 -24 78 -16) -24]
Test Case: 532 | Input/Output: [(-10 -76 -32 -74) -76]
Test Case: 533 | Input/Output: [(10 76 -58 86) -58]
Test Case: 534 | Input/Output: [(91 -79 17 -50) -79]
Test Case: 535 | Input/Output: [(24 22 -80 -79) -80]
Test Case: 536 | Input/Output: [(88 19 -100 87) -100]
Test Case: 537 | Input/Output: [(-54 -41 -15 5) -54]
Test Case: 538 | Input/Output: [(59 -98 73 -86) -98]
Test Case: 539 | Input/Output: [(-60 22 -27 -90) -90]
Test Case: 540 | Input/Output: [(97 11 54 -16) -16]
Test Case: 541 | Input/Output: [(56 77 88 45) 45]
Test Case: 542 | Input/Output: [(9 83 19 98) 9]
Test Case: 543 | Input/Output: [(-12 40 -72 81) -72]
Test Case: 544 | Input/Output: [(-67 -71 -36 58) -71]
Test Case: 545 | Input/Output: [(-31 -84 -17 -13) -84]
Test Case: 546 | Input/Output: [(17 100 -46 32) -46]
Test Case: 547 | Input/Output: [(87 13 -97 -23) -97]
Test Case: 548 | Input/Output: [(-14 -61 -71 60) -71]
Test Case: 549 | Input/Output: [(-9 38 -58 65) -58]
Test Case: 550 | Input/Output: [(-7 -11 -61 -87) -87]
Test Case: 551 | Input/Output: [(-2 -58 47 74) -58]
Test Case: 552 | Input/Output: [(42 -34 -36 81) -36]
Test Case: 553 | Input/Output: [(46 81 -49 -71) -71]
Test Case: 554 | Input/Output: [(82 -24 91 25) -24]
Test Case: 555 | Input/Output: [(-38 94 -87 78) -87]
Test Case: 556 | Input/Output: [(-75 -13 96 -99) -99]
Test Case: 557 | Input/Output: [(82 47 -23 -82) -82]
Test Case: 558 | Input/Output: [(-74 89 59 76) -74]
Test Case: 559 | Input/Output: [(77 -76 -44 -52) -76]
Test Case: 560 | Input/Output: [(16 -26 -82 -52) -82]
Test Case: 561 | Input/Output: [(0 73 -8 73) -8]
Test Case: 562 | Input/Output: [(4 7 90 57) 4]
Test Case: 563 | Input/Output: [(52 48 89 -91) -91]
Test Case: 564 | Input/Output: [(30 12 -74 -7) -74]
Test Case: 565 | Input/Output: [(-29 -93 56 25) -93]
Test Case: 566 | Input/Output: [(-18 49 24 -46) -46]
Test Case: 567 | Input/Output: [(-37 -38 -79 -36) -79]
Test Case: 568 | Input/Output: [(0 34 45 -20) -20]
Test Case: 569 | Input/Output: [(-9 14 -54 -42) -54]
Test Case: 570 | Input/Output: [(22 4 -100 1) -100]
Test Case: 571 | Input/Output: [(97 -26 20 -35) -35]
Test Case: 572 | Input/Output: [(25 51 -19 18) -19]
Test Case: 573 | Input/Output: [(-92 -46 31 -6) -92]
Test Case: 574 | Input/Output: [(91 5 -82 -100) -100]
Test Case: 575 | Input/Output: [(47 57 -5 31) -5]
Test Case: 576 | Input/Output: [(-29 -52 54 78) -52]
Test Case: 577 | Input/Output: [(53 -30 -72 -45) -72]
Test Case: 578 | Input/Output: [(-93 -32 64 14) -93]
Test Case: 579 | Input/Output: [(-67 37 55 -8) -67]
Test Case: 580 | Input/Output: [(78 -72 -4 52) -72]
Test Case: 581 | Input/Output: [(-55 -84 17 -82) -84]
Test Case: 582 | Input/Output: [(70 -13 72 -44) -44]
Test Case: 583 | Input/Output: [(-96 -94 -52 -19) -96]
Test Case: 584 | Input/Output: [(1 -37 75 65) -37]
Test Case: 585 | Input/Output: [(57 16 -94 13) -94]
Test Case: 586 | Input/Output: [(71 -79 44 -17) -79]
Test Case: 587 | Input/Output: [(-56 -7 34 6) -56]
Test Case: 588 | Input/Output: [(-29 96 -63 20) -63]
Test Case: 589 | Input/Output: [(87 88 -86 -74) -86]
Test Case: 590 | Input/Output: [(65 -34 -12 59) -34]
Test Case: 591 | Input/Output: [(-97 8 39 6) -97]
Test Case: 592 | Input/Output: [(78 -21 6 22) -21]
Test Case: 593 | Input/Output: [(-43 -19 53 55) -43]
Test Case: 594 | Input/Output: [(-58 25 29 -30) -58]
Test Case: 595 | Input/Output: [(8 -94 49 -73) -94]
Test Case: 596 | Input/Output: [(65 78 -5 100) -5]
Test Case: 597 | Input/Output: [(25 41 -55 50) -55]
Test Case: 598 | Input/Output: [(55 61 -58 76) -58]
Test Case: 599 | Input/Output: [(-90 64 -68 64) -90]
Test Case: 600 | Input/Output: [(87 -39 -18 32) -39]
Test Case: 601 | Input/Output: [(-54 19 6 53) -54]
Test Case: 602 | Input/Output: [(-10 -35 19 -25) -35]
Test Case: 603 | Input/Output: [(-61 30 -59 36) -61]
Test Case: 604 | Input/Output: [(-52 -63 -89 45) -89]
Test Case: 605 | Input/Output: [(-52 -21 66 6) -52]
Test Case: 606 | Input/Output: [(-90 -35 -92 -11) -92]
Test Case: 607 | Input/Output: [(-52 87 30 5) -52]
Test Case: 608 | Input/Output: [(-39 -10 96 11) -39]
Test Case: 609 | Input/Output: [(-70 -83 23 -18) -83]
Test Case: 610 | Input/Output: [(-77 -3 89 -57) -77]
Test Case: 611 | Input/Output: [(-95 45 -98 79) -98]
Test Case: 612 | Input/Output: [(-92 80 -53 61) -92]
Test Case: 613 | Input/Output: [(88 -20 -50 -82) -82]
Test Case: 614 | Input/Output: [(-59 -97 -56 93) -97]
Test Case: 615 | Input/Output: [(-42 -72 -6 -67) -72]
Test Case: 616 | Input/Output: [(68 -2 73 -73) -73]
Test Case: 617 | Input/Output: [(79 13 -40 -1) -40]
Test Case: 618 | Input/Output: [(-42 99 97 -47) -47]
Test Case: 619 | Input/Output: [(56 56 3 -77) -77]
Test Case: 620 | Input/Output: [(-97 -54 -29 99) -97]
Test Case: 621 | Input/Output: [(-73 -93 11 -86) -93]
Test Case: 622 | Input/Output: [(70 -7 -65 14) -65]
Test Case: 623 | Input/Output: [(-82 0 53 -52) -82]
Test Case: 624 | Input/Output: [(56 -81 -9 -20) -81]
Test Case: 625 | Input/Output: [(30 52 -91 31) -91]
Test Case: 626 | Input/Output: [(-33 -75 -27 77) -75]
Test Case: 627 | Input/Output: [(-56 -79 8 27) -79]
Test Case: 628 | Input/Output: [(100 79 28 -56) -56]
Test Case: 629 | Input/Output: [(43 80 16 79) 16]
Test Case: 630 | Input/Output: [(-48 -51 42 -37) -51]
Test Case: 631 | Input/Output: [(95 -16 78 75) -16]
Test Case: 632 | Input/Output: [(87 -45 -44 -58) -58]
Test Case: 633 | Input/Output: [(24 -66 -72 92) -72]
Test Case: 634 | Input/Output: [(53 22 27 -58) -58]
Test Case: 635 | Input/Output: [(49 67 -38 -82) -82]
Test Case: 636 | Input/Output: [(70 -41 0 -64) -64]
Test Case: 637 | Input/Output: [(78 -87 -39 -80) -87]
Test Case: 638 | Input/Output: [(-71 -79 -98 -100) -100]
Test Case: 639 | Input/Output: [(-63 43 -78 -97) -97]
Test Case: 640 | Input/Output: [(-16 -44 2 46) -44]
Test Case: 641 | Input/Output: [(-84 55 -96 -13) -96]
Test Case: 642 | Input/Output: [(-38 56 -45 28) -45]
Test Case: 643 | Input/Output: [(68 -22 31 87) -22]
Test Case: 644 | Input/Output: [(52 25 -81 64) -81]
Test Case: 645 | Input/Output: [(59 -9 -31 32) -31]
Test Case: 646 | Input/Output: [(-93 -58 -89 -83) -93]
Test Case: 647 | Input/Output: [(-42 -97 49 -27) -97]
Test Case: 648 | Input/Output: [(6 44 87 13) 6]
Test Case: 649 | Input/Output: [(43 20 38 -18) -18]
Test Case: 650 | Input/Output: [(3 62 46 -85) -85]
Test Case: 651 | Input/Output: [(75 -54 -9 -35) -54]
Test Case: 652 | Input/Output: [(-98 -60 1 -6) -98]
Test Case: 653 | Input/Output: [(-94 29 -84 31) -94]
Test Case: 654 | Input/Output: [(-46 -52 17 -20) -52]
Test Case: 655 | Input/Output: [(-73 -89 63 10) -89]
Test Case: 656 | Input/Output: [(-11 23 54 13) -11]
Test Case: 657 | Input/Output: [(21 23 34 87) 21]
Test Case: 658 | Input/Output: [(-74 61 -33 -87) -87]
Test Case: 659 | Input/Output: [(-12 -50 49 25) -50]
Test Case: 660 | Input/Output: [(80 -81 -62 81) -81]
Test Case: 661 | Input/Output: [(15 -64 9 88) -64]
Test Case: 662 | Input/Output: [(-50 21 40 66) -50]
Test Case: 663 | Input/Output: [(2 -72 -55 22) -72]
Test Case: 664 | Input/Output: [(-14 -27 5 -60) -60]
Test Case: 665 | Input/Output: [(14 -58 -52 22) -58]
Test Case: 666 | Input/Output: [(-98 -95 26 -67) -98]
Test Case: 667 | Input/Output: [(85 -55 -15 -43) -55]
Test Case: 668 | Input/Output: [(86 -35 -12 -82) -82]
Test Case: 669 | Input/Output: [(72 71 73 9) 9]
Test Case: 670 | Input/Output: [(-40 72 42 -65) -65]
Test Case: 671 | Input/Output: [(19 -42 -50 -90) -90]
Test Case: 672 | Input/Output: [(-19 -2 79 54) -19]
Test Case: 673 | Input/Output: [(37 -18 -86 -28) -86]
Test Case: 674 | Input/Output: [(92 -18 38 81) -18]
Test Case: 675 | Input/Output: [(62 -11 55 74) -11]
Test Case: 676 | Input/Output: [(-51 -97 16 34) -97]
Test Case: 677 | Input/Output: [(-27 -30 86 -47) -47]
Test Case: 678 | Input/Output: [(-29 -93 -76 -43) -93]
Test Case: 679 | Input/Output: [(-51 79 6 98) -51]
Test Case: 680 | Input/Output: [(77 -50 -4 -73) -73]
Test Case: 681 | Input/Output: [(58 75 71 75) 58]
Test Case: 682 | Input/Output: [(-59 29 -57 -17) -59]
Test Case: 683 | Input/Output: [(-88 -73 -95 -98) -98]
Test Case: 684 | Input/Output: [(37 -65 68 -44) -65]
Test Case: 685 | Input/Output: [(-15 -16 -33 -56) -56]
Test Case: 686 | Input/Output: [(-85 -7 23 -95) -95]
Test Case: 687 | Input/Output: [(-69 71 -48 43) -69]
Test Case: 688 | Input/Output: [(-94 -57 -70 26) -94]
Test Case: 689 | Input/Output: [(-96 -53 -80 14) -96]
Test Case: 690 | Input/Output: [(-30 55 -86 85) -86]
Test Case: 691 | Input/Output: [(78 64 90 -15) -15]
Test Case: 692 | Input/Output: [(-81 19 31 -66) -81]
Test Case: 693 | Input/Output: [(25 -3 35 -78) -78]
Test Case: 694 | Input/Output: [(-14 -96 -72 -100) -100]
Test Case: 695 | Input/Output: [(71 -54 -19 59) -54]
Test Case: 696 | Input/Output: [(72 49 32 23) 23]
Test Case: 697 | Input/Output: [(64 -69 -4 89) -69]
Test Case: 698 | Input/Output: [(31 -99 -40 -35) -99]
Test Case: 699 | Input/Output: [(-91 -36 11 97) -91]
Test Case: 700 | Input/Output: [(-52 -54 -47 77) -54]
Test Case: 701 | Input/Output: [(64 71 93 84) 64]
Test Case: 702 | Input/Output: [(84 79 -82 -9) -82]
Test Case: 703 | Input/Output: [(97 -43 7 93) -43]
Test Case: 704 | Input/Output: [(-29 64 42 19) -29]
Test Case: 705 | Input/Output: [(-33 -51 16 59) -51]
Test Case: 706 | Input/Output: [(-38 28 64 26) -38]
Test Case: 707 | Input/Output: [(-20 39 34 -89) -89]
Test Case: 708 | Input/Output: [(26 -60 -100 -58) -100]
Test Case: 709 | Input/Output: [(97 1 14 57) 1]
Test Case: 710 | Input/Output: [(18 68 -40 -41) -41]
Test Case: 711 | Input/Output: [(33 -43 60 -66) -66]
Test Case: 712 | Input/Output: [(21 38 -66 -50) -66]
Test Case: 713 | Input/Output: [(14 -19 -22 73) -22]
Test Case: 714 | Input/Output: [(11 -17 -26 78) -26]
Test Case: 715 | Input/Output: [(37 92 37 29) 29]
Test Case: 716 | Input/Output: [(-44 98 -17 92) -44]
Test Case: 717 | Input/Output: [(-31 -32 -91 52) -91]
Test Case: 718 | Input/Output: [(-4 2 -66 -34) -66]
Test Case: 719 | Input/Output: [(-28 -3 54 -6) -28]
Test Case: 720 | Input/Output: [(11 12 -65 41) -65]
Test Case: 721 | Input/Output: [(-39 97 -98 -23) -98]
Test Case: 722 | Input/Output: [(17 -82 54 17) -82]
Test Case: 723 | Input/Output: [(23 -1 -79 14) -79]
Test Case: 724 | Input/Output: [(-2 48 -39 -71) -71]
Test Case: 725 | Input/Output: [(38 -52 -78 -26) -78]
Test Case: 726 | Input/Output: [(13 91 -20 70) -20]
Test Case: 727 | Input/Output: [(8 88 80 31) 8]
Test Case: 728 | Input/Output: [(16 -88 -8 16) -88]
Test Case: 729 | Input/Output: [(16 -84 -62 -100) -100]
Test Case: 730 | Input/Output: [(-54 0 18 4) -54]
Test Case: 731 | Input/Output: [(-14 -74 -82 -43) -82]
Test Case: 732 | Input/Output: [(77 75 -94 67) -94]
Test Case: 733 | Input/Output: [(24 53 -83 46) -83]
Test Case: 734 | Input/Output: [(23 -74 -10 -8) -74]
Test Case: 735 | Input/Output: [(-80 -97 -24 83) -97]
Test Case: 736 | Input/Output: [(-23 95 -28 -48) -48]
Test Case: 737 | Input/Output: [(7 53 72 79) 7]
Test Case: 738 | Input/Output: [(25 4 22 -28) -28]
Test Case: 739 | Input/Output: [(41 -50 -48 10) -50]
Test Case: 740 | Input/Output: [(45 -17 -42 54) -42]
Test Case: 741 | Input/Output: [(2 73 10 22) 2]
Test Case: 742 | Input/Output: [(-37 2 53 -51) -51]
Test Case: 743 | Input/Output: [(-8 21 37 -8) -8]
Test Case: 744 | Input/Output: [(-44 96 100 65) -44]
Test Case: 745 | Input/Output: [(81 -40 85 76) -40]
Test Case: 746 | Input/Output: [(75 99 43 100) 43]
Test Case: 747 | Input/Output: [(-37 -97 11 -70) -97]
Test Case: 748 | Input/Output: [(45 32 -63 50) -63]
Test Case: 749 | Input/Output: [(-42 68 -93 -59) -93]
Test Case: 750 | Input/Output: [(-55 -93 -55 -60) -93]
Test Case: 751 | Input/Output: [(-36 26 93 47) -36]
Test Case: 752 | Input/Output: [(8 26 -37 -82) -82]
Test Case: 753 | Input/Output: [(1 86 -57 97) -57]
Test Case: 754 | Input/Output: [(37 -41 97 -4) -41]
Test Case: 755 | Input/Output: [(-71 -37 17 0) -71]
Test Case: 756 | Input/Output: [(-43 52 -14 30) -43]
Test Case: 757 | Input/Output: [(41 55 -89 84) -89]
Test Case: 758 | Input/Output: [(-95 80 -12 14) -95]
Test Case: 759 | Input/Output: [(85 -68 59 13) -68]
Test Case: 760 | Input/Output: [(91 18 15 36) 15]
Test Case: 761 | Input/Output: [(22 71 61 -15) -15]
Test Case: 762 | Input/Output: [(13 -68 -46 -38) -68]
Test Case: 763 | Input/Output: [(-27 50 72 -39) -39]
Test Case: 764 | Input/Output: [(67 64 -49 -88) -88]
Test Case: 765 | Input/Output: [(-67 88 92 13) -67]
Test Case: 766 | Input/Output: [(20 -33 -65 27) -65]
Test Case: 767 | Input/Output: [(13 85 9 -81) -81]
Test Case: 768 | Input/Output: [(89 -99 36 28) -99]
Test Case: 769 | Input/Output: [(100 -91 -28 -18) -91]
Test Case: 770 | Input/Output: [(79 -11 82 -95) -95]
Test Case: 771 | Input/Output: [(35 55 -48 -73) -73]
Test Case: 772 | Input/Output: [(-82 -22 73 48) -82]
Test Case: 773 | Input/Output: [(72 -22 -20 53) -22]
Test Case: 774 | Input/Output: [(58 -11 23 -37) -37]
Test Case: 775 | Input/Output: [(-87 32 -53 -85) -87]
Test Case: 776 | Input/Output: [(-52 -25 4 -21) -52]
Test Case: 777 | Input/Output: [(-37 48 59 39) -37]
Test Case: 778 | Input/Output: [(-39 33 7 41) -39]
Test Case: 779 | Input/Output: [(-16 -93 8 12) -93]
Test Case: 780 | Input/Output: [(-13 -53 -2 -50) -53]
Test Case: 781 | Input/Output: [(-1 46 -93 20) -93]
Test Case: 782 | Input/Output: [(-9 -5 54 -33) -33]
Test Case: 783 | Input/Output: [(-59 5 31 -16) -59]
Test Case: 784 | Input/Output: [(85 46 67 -96) -96]
Test Case: 785 | Input/Output: [(-71 16 64 -90) -90]
Test Case: 786 | Input/Output: [(-12 -27 89 84) -27]
Test Case: 787 | Input/Output: [(30 -85 93 95) -85]
Test Case: 788 | Input/Output: [(-77 98 -41 54) -77]
Test Case: 789 | Input/Output: [(-94 -54 8 -8) -94]
Test Case: 790 | Input/Output: [(-59 -46 -75 60) -75]
Test Case: 791 | Input/Output: [(79 -86 -63 68) -86]
Test Case: 792 | Input/Output: [(-39 -19 61 14) -39]
Test Case: 793 | Input/Output: [(31 94 57 -11) -11]
Test Case: 794 | Input/Output: [(-57 13 -96 57) -96]
Test Case: 795 | Input/Output: [(27 -7 -21 27) -21]
Test Case: 796 | Input/Output: [(27 88 -39 54) -39]
Test Case: 797 | Input/Output: [(66 47 85 69) 47]
Test Case: 798 | Input/Output: [(49 71 6 69) 6]
Test Case: 799 | Input/Output: [(31 -89 74 -36) -89]
Test Case: 800 | Input/Output: [(-8 50 -66 -64) -66]
Test Case: 801 | Input/Output: [(6 18 -93 -59) -93]
Test Case: 802 | Input/Output: [(30 81 15 16) 15]
Test Case: 803 | Input/Output: [(-40 98 -19 12) -40]
Test Case: 804 | Input/Output: [(96 -11 -89 96) -89]
Test Case: 805 | Input/Output: [(91 79 -64 63) -64]
Test Case: 806 | Input/Output: [(-48 66 76 -43) -48]
Test Case: 807 | Input/Output: [(44 5 53 -85) -85]
Test Case: 808 | Input/Output: [(9 7 55 80) 7]
Test Case: 809 | Input/Output: [(-54 45 -50 -67) -67]
Test Case: 810 | Input/Output: [(46 -22 36 -35) -35]
Test Case: 811 | Input/Output: [(-7 -54 -46 91) -54]
Test Case: 812 | Input/Output: [(-57 -32 -15 -92) -92]
Test Case: 813 | Input/Output: [(12 0 -23 -92) -92]
Test Case: 814 | Input/Output: [(13 32 86 5) 5]
Test Case: 815 | Input/Output: [(-54 84 55 -26) -54]
Test Case: 816 | Input/Output: [(24 -95 -64 -66) -95]
Test Case: 817 | Input/Output: [(88 43 79 51) 43]
Test Case: 818 | Input/Output: [(-82 -8 -92 27) -92]
Test Case: 819 | Input/Output: [(-80 45 -87 98) -87]
Test Case: 820 | Input/Output: [(85 -3 -91 -6) -91]
Test Case: 821 | Input/Output: [(48 -51 -80 -56) -80]
Test Case: 822 | Input/Output: [(25 -31 62 31) -31]
Test Case: 823 | Input/Output: [(32 -37 33 -2) -37]
Test Case: 824 | Input/Output: [(78 35 -29 -97) -97]
Test Case: 825 | Input/Output: [(18 95 -93 63) -93]
Test Case: 826 | Input/Output: [(-69 52 53 -6) -69]
Test Case: 827 | Input/Output: [(18 39 -54 9) -54]
Test Case: 828 | Input/Output: [(-19 91 -39 16) -39]
Test Case: 829 | Input/Output: [(-64 76 -10 -83) -83]
Test Case: 830 | Input/Output: [(-82 -99 10 -29) -99]
Test Case: 831 | Input/Output: [(77 -91 -19 5) -91]
Test Case: 832 | Input/Output: [(64 -45 100 -35) -45]
Test Case: 833 | Input/Output: [(-3 92 86 -81) -81]
Test Case: 834 | Input/Output: [(-54 -89 5 6) -89]
Test Case: 835 | Input/Output: [(100 66 -98 -64) -98]
Test Case: 836 | Input/Output: [(-70 -68 7 -8) -70]
Test Case: 837 | Input/Output: [(-92 53 -2 62) -92]
Test Case: 838 | Input/Output: [(-35 -93 -79 53) -93]
Test Case: 839 | Input/Output: [(62 78 84 90) 62]
Test Case: 840 | Input/Output: [(67 36 12 2) 2]
Test Case: 841 | Input/Output: [(-56 12 -6 -64) -64]
Test Case: 842 | Input/Output: [(-94 95 66 59) -94]
Test Case: 843 | Input/Output: [(51 19 -35 -44) -44]
Test Case: 844 | Input/Output: [(30 49 -54 51) -54]
Test Case: 845 | Input/Output: [(-68 94 89 -3) -68]
Test Case: 846 | Input/Output: [(35 89 -8 -10) -10]
Test Case: 847 | Input/Output: [(16 38 22 -67) -67]
Test Case: 848 | Input/Output: [(39 91 -84 41) -84]
Test Case: 849 | Input/Output: [(97 -99 94 21) -99]
Test Case: 850 | Input/Output: [(-54 -80 23 -48) -80]
Test Case: 851 | Input/Output: [(-88 51 29 33) -88]
Test Case: 852 | Input/Output: [(12 81 -78 -55) -78]
Test Case: 853 | Input/Output: [(53 -36 27 -55) -55]
Test Case: 854 | Input/Output: [(-91 -23 -90 -2) -91]
Test Case: 855 | Input/Output: [(16 -40 -77 57) -77]
Test Case: 856 | Input/Output: [(-86 -63 90 -47) -86]
Test Case: 857 | Input/Output: [(-24 94 -18 65) -24]
Test Case: 858 | Input/Output: [(-15 -26 47 -6) -26]
Test Case: 859 | Input/Output: [(93 85 -29 -50) -50]
Test Case: 860 | Input/Output: [(-31 -66 -52 -12) -66]
Test Case: 861 | Input/Output: [(-14 -42 89 -52) -52]
Test Case: 862 | Input/Output: [(60 6 34 96) 6]
Test Case: 863 | Input/Output: [(-95 -32 10 -22) -95]
Test Case: 864 | Input/Output: [(-39 85 -21 56) -39]
Test Case: 865 | Input/Output: [(26 29 -60 7) -60]
Test Case: 866 | Input/Output: [(-5 -44 86 5) -44]
Test Case: 867 | Input/Output: [(86 96 63 -70) -70]
Test Case: 868 | Input/Output: [(27 -73 41 -50) -73]
Test Case: 869 | Input/Output: [(-20 -95 -53 -74) -95]
Test Case: 870 | Input/Output: [(66 -9 -65 74) -65]
Test Case: 871 | Input/Output: [(34 95 -68 -32) -68]
Test Case: 872 | Input/Output: [(31 -52 -51 58) -52]
Test Case: 873 | Input/Output: [(-50 -69 -35 -13) -69]
Test Case: 874 | Input/Output: [(-73 10 -87 -80) -87]
Test Case: 875 | Input/Output: [(52 61 -81 -14) -81]
Test Case: 876 | Input/Output: [(99 -59 -41 -44) -59]
Test Case: 877 | Input/Output: [(54 -20 -75 67) -75]
Test Case: 878 | Input/Output: [(64 72 -76 -94) -94]
Test Case: 879 | Input/Output: [(-85 -99 0 -65) -99]
Test Case: 880 | Input/Output: [(-75 -27 100 99) -75]
Test Case: 881 | Input/Output: [(100 -83 68 -19) -83]
Test Case: 882 | Input/Output: [(-22 87 -81 -22) -81]
Test Case: 883 | Input/Output: [(81 24 -68 44) -68]
Test Case: 884 | Input/Output: [(2 -38 96 -23) -38]
Test Case: 885 | Input/Output: [(-55 -69 -60 -44) -69]
Test Case: 886 | Input/Output: [(12 50 -46 84) -46]
Test Case: 887 | Input/Output: [(83 -40 87 64) -40]
Test Case: 888 | Input/Output: [(-74 -21 -53 -49) -74]
Test Case: 889 | Input/Output: [(-84 29 67 82) -84]
Test Case: 890 | Input/Output: [(-3 48 -92 72) -92]
Test Case: 891 | Input/Output: [(-51 -12 -30 -99) -99]
Test Case: 892 | Input/Output: [(59 -88 -21 85) -88]
Test Case: 893 | Input/Output: [(-21 -6 -28 -40) -40]
Test Case: 894 | Input/Output: [(8 52 88 -39) -39]
Test Case: 895 | Input/Output: [(72 -25 -21 10) -25]
Test Case: 896 | Input/Output: [(34 9 73 -7) -7]
Test Case: 897 | Input/Output: [(61 38 20 60) 20]
Test Case: 898 | Input/Output: [(29 -49 84 68) -49]
Test Case: 899 | Input/Output: [(52 -57 19 -11) -57]
Test Case: 900 | Input/Output: [(-73 85 35 88) -73]
Test Case: 901 | Input/Output: [(72 55 -37 -19) -37]
Test Case: 902 | Input/Output: [(59 89 11 78) 11]
Test Case: 903 | Input/Output: [(-71 -73 -83 93) -83]
Test Case: 904 | Input/Output: [(-30 86 68 66) -30]
Test Case: 905 | Input/Output: [(70 17 83 -11) -11]
Test Case: 906 | Input/Output: [(-72 -27 9 -20) -72]
Test Case: 907 | Input/Output: [(54 48 -21 92) -21]
Test Case: 908 | Input/Output: [(27 75 34 85) 27]
Test Case: 909 | Input/Output: [(10 69 -42 -97) -97]
Test Case: 910 | Input/Output: [(1 -83 -31 78) -83]
Test Case: 911 | Input/Output: [(-52 11 -69 45) -69]
Test Case: 912 | Input/Output: [(-28 87 -30 -67) -67]
Test Case: 913 | Input/Output: [(57 38 -15 -37) -37]
Test Case: 914 | Input/Output: [(8 55 14 -15) -15]
Test Case: 915 | Input/Output: [(-67 -64 18 -15) -67]
Test Case: 916 | Input/Output: [(-74 -7 61 -87) -87]
Test Case: 917 | Input/Output: [(-33 63 -17 -85) -85]
Test Case: 918 | Input/Output: [(81 88 20 -7) -7]
Test Case: 919 | Input/Output: [(-89 -77 16 95) -89]
Test Case: 920 | Input/Output: [(93 85 55 -14) -14]
Test Case: 921 | Input/Output: [(91 -56 81 32) -56]
Test Case: 922 | Input/Output: [(-16 56 -56 -50) -56]
Test Case: 923 | Input/Output: [(-74 -53 -85 15) -85]
Test Case: 924 | Input/Output: [(99 -11 25 -77) -77]
Test Case: 925 | Input/Output: [(-33 -6 87 2) -33]
Test Case: 926 | Input/Output: [(26 -8 -42 -93) -93]
Test Case: 927 | Input/Output: [(-25 -13 28 40) -25]
Test Case: 928 | Input/Output: [(59 -60 60 31) -60]
Test Case: 929 | Input/Output: [(30 -3 36 54) -3]
Test Case: 930 | Input/Output: [(-38 62 -95 -69) -95]
Test Case: 931 | Input/Output: [(0 72 -87 81) -87]
Test Case: 932 | Input/Output: [(-3 34 41 1) -3]
Test Case: 933 | Input/Output: [(-42 20 -26 84) -42]
Test Case: 934 | Input/Output: [(-31 -87 -57 -47) -87]
Test Case: 935 | Input/Output: [(68 -52 -9 88) -52]
Test Case: 936 | Input/Output: [(90 -64 83 -23) -64]
Test Case: 937 | Input/Output: [(50 -86 89 -4) -86]
Test Case: 938 | Input/Output: [(-59 36 -16 -30) -59]
Test Case: 939 | Input/Output: [(-26 11 5 -5) -26]
Test Case: 940 | Input/Output: [(-31 75 39 -3) -31]
Test Case: 941 | Input/Output: [(87 35 74 -40) -40]
Test Case: 942 | Input/Output: [(-3 36 -29 68) -29]
Test Case: 943 | Input/Output: [(50 -45 95 87) -45]
Test Case: 944 | Input/Output: [(-78 -78 56 -82) -82]
Test Case: 945 | Input/Output: [(-21 -90 -61 25) -90]
Test Case: 946 | Input/Output: [(71 57 59 -47) -47]
Test Case: 947 | Input/Output: [(34 -23 -98 -24) -98]
Test Case: 948 | Input/Output: [(-53 -48 -67 12) -67]
Test Case: 949 | Input/Output: [(89 -68 89 35) -68]
Test Case: 950 | Input/Output: [(1 5 60 83) 1]
Test Case: 951 | Input/Output: [(-39 -16 29 44) -39]
Test Case: 952 | Input/Output: [(-26 -30 72 -68) -68]
Test Case: 953 | Input/Output: [(-77 -17 -54 46) -77]
Test Case: 954 | Input/Output: [(-41 -71 0 18) -71]
Test Case: 955 | Input/Output: [(70 -13 -100 -3) -100]
Test Case: 956 | Input/Output: [(48 -77 -53 -20) -77]
Test Case: 957 | Input/Output: [(1 3 21 -11) -11]
Test Case: 958 | Input/Output: [(69 98 76 -96) -96]
Test Case: 959 | Input/Output: [(48 -33 23 69) -33]
Test Case: 960 | Input/Output: [(22 76 83 -65) -65]
Test Case: 961 | Input/Output: [(-79 -60 9 17) -79]
Test Case: 962 | Input/Output: [(63 73 4 -10) -10]
Test Case: 963 | Input/Output: [(-91 -15 -20 64) -91]
Test Case: 964 | Input/Output: [(-43 79 -39 -48) -48]
Test Case: 965 | Input/Output: [(-75 14 -66 37) -75]
Test Case: 966 | Input/Output: [(95 -30 -1 -77) -77]
Test Case: 967 | Input/Output: [(-72 -12 6 45) -72]
Test Case: 968 | Input/Output: [(93 -84 6 -29) -84]
Test Case: 969 | Input/Output: [(80 -93 -55 -62) -93]
Test Case: 970 | Input/Output: [(63 -45 0 -5) -45]
Test Case: 971 | Input/Output: [(-26 22 48 -96) -96]
Test Case: 972 | Input/Output: [(97 -57 38 98) -57]
Test Case: 973 | Input/Output: [(-24 57 -65 -71) -71]
Test Case: 974 | Input/Output: [(-64 90 30 -35) -64]
Test Case: 975 | Input/Output: [(36 -75 28 -78) -78]
Test Case: 976 | Input/Output: [(-89 34 -90 -89) -90]
Test Case: 977 | Input/Output: [(82 -74 -91 94) -91]
Test Case: 978 | Input/Output: [(32 47 72 11) 11]
Test Case: 979 | Input/Output: [(45 55 3 -89) -89]
Test Case: 980 | Input/Output: [(-2 -31 11 -24) -31]
Test Case: 981 | Input/Output: [(36 25 9 -16) -16]
Test Case: 982 | Input/Output: [(83 -22 -97 -66) -97]
Test Case: 983 | Input/Output: [(91 91 -79 19) -79]
Test Case: 984 | Input/Output: [(-61 62 -64 18) -64]
Test Case: 985 | Input/Output: [(5 41 24 -78) -78]
Test Case: 986 | Input/Output: [(-91 -67 -74 63) -91]
Test Case: 987 | Input/Output: [(51 -40 82 -85) -85]
Test Case: 988 | Input/Output: [(62 60 38 -23) -23]
Test Case: 989 | Input/Output: [(-83 -39 -36 -74) -83]
Test Case: 990 | Input/Output: [(69 85 -50 -100) -100]
Test Case: 991 | Input/Output: [(79 -24 -16 -25) -25]
Test Case: 992 | Input/Output: [(22 41 -79 66) -79]
Test Case: 993 | Input/Output: [(76 -39 94 -53) -53]
Test Case: 994 | Input/Output: [(33 3 -1 -51) -51]
Test Case: 995 | Input/Output: [(69 22 -21 75) -21]
Test Case: 996 | Input/Output: [(14 19 -51 -61) -61]
Test Case: 997 | Input/Output: [(-36 86 69 21) -36]
Test Case: 998 | Input/Output: [(-38 43 56 -81) -81]
Test Case: 999 | Input/Output: [(18 7 42 77) 7]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -26 -45 -47 -55 1 -69 126 122 -46 -58 -115 -80 -112 54 -54 -37
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-18 -59 -59 -59] -59] [[32 -58 32 32] -58] [[-24 -24 43 -24] -24] [[-27 16 -27 -27] -27] [[84 84 84 -37] -37] [[-68 -68 -8 -68] -68] [[-22 -22 -22 -55] -55] [[72 20 72 72] 20] [[29 29 29 41] 29] [[-67 0 -67 -67] -67] [(76 76 76 76) 76] [(80 80 80 80) 80] [(76 76 76 76) 76] [(11 11 11 11) 11] [(-68 -68 -68 -68) -68] [(79 51 47 60) 47] [(28 76 60 2) 2] [(49 11 53 12) 11] [(1 41 90 50) 1] [(76 52 47 73) 47] [(93 61 76 0) 0] [(42 24 71 48) 24] [(83 42 32 18) 18] [(36 71 26 15) 15] [(22 26 74 30) 22] [(58 44 0 32) 0] [(60 32 71 74) 32] [(8 16 4 57) 4] [(21 63 68 6) 6] [(75 34 60 82) 34] [(56 99 93 12) 12] [(10 23 42 83) 10] [(22 54 96 23) 22] [(56 69 74 70) 56] [(77 94 64 69) 64] [(-1 4 -32 -47) -47] [(38 51 -27 99) -27] [(44 51 -83 -36) -83] [(-4 -42 90 49) -42] [(-100 -60 43 -62) -100] [(-7 27 -72 44) -72] [(90 65 -74 38) -74] [(28 29 -1 -23) -23] [(-89 48 71 -38) -89] [(-36 -82 95 -57) -82] [(-6 81 31 3) -6] [(77 47 54 -23) -23] [(-4 -58 -43 37) -58] [(-56 -21 5 78) -56] [(27 78 30 -14) -14] [(35 -32 -92 -23) -92] [(-86 15 -37 83) -86] [(23 16 70 55) 16] [(34 -9 4 54) -9] [(-1 95 -26 -88) -88] [(27 -88 12 65) -88] [(13 53 30 -61) -61] [(-78 -18 10 60) -78] [(-40 -80 -49 42) -80] [(-87 -7 74 -60) -87] [(-5 -8 -15 63) -15] [(15 7 64 -65) -65] [(50 -26 -13 -77) -77] [(-18 99 23 81) -18] [(72 -89 -36 67) -89] [(-42 7 68 19) -42] [(-84 59 78 -1) -84] [(72 52 -30 70) -30] [(-55 21 -39 2) -55] [(-8 95 -51 66) -51] [(31 49 87 78) 31] [(-15 91 -53 -86) -86] [(-21 34 56 5) -21] [(-64 -54 20 -9) -64] [(-93 20 86 -62) -93] [(97 -27 -30 38) -30] [(-9 93 -3 -10) -10] [(67 14 65 -80) -80] [(-24 -42 -1 3) -42] [(-60 44 77 76) -60] [(-85 46 74 79) -85] [(-72 19 -56 -29) -72] [(61 -56 -99 36) -99] [(-13 -36 -5 -75) -75] [(-8 32 -70 2) -70] [(-77 65 40 -31) -77] [(-24 -22 -42 -44) -44] [(12 -19 -77 30) -77] [(-89 -60 -16 34) -89] [(-12 -63 -1 -100) -100] [(-24 22 -13 76) -24] [(-82 -88 -73 -77) -88] [(-59 -17 -91 -23) -91] [(-8 74 -60 17) -60] [(83 0 -82 80) -82])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 60                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 50                 
Correct output: 47                  | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 30                 
Correct output: 0                   | Program output: 32                 
Correct output: 32                  | Program output: 74                 
Correct output: 4                   | Program output: 57                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 82                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 83                 
Correct output: 22                  | Program output: 23                 
Correct output: 56                  | Program output: 70                 
Correct output: 64                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 99                 
Correct output: -83                 | Program output: -36                
Correct output: -42                 | Program output: 49                 
Correct output: -100                | Program output: -62                
Correct output: -72                 | Program output: 44                 
Correct output: -74                 | Program output: 38                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -38                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: 37                 
Correct output: -56                 | Program output: 78                 
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -23                
Correct output: -86                 | Program output: 83                 
Correct output: 16                  | Program output: 55                 
Correct output: -9                  | Program output: 54                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 60                 
Correct output: -80                 | Program output: 42                 
Correct output: -87                 | Program output: -60                
Correct output: -15                 | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: 81                 
Correct output: -89                 | Program output: 67                 
Correct output: -42                 | Program output: 19                 
Correct output: -84                 | Program output: -1                 
Correct output: -30                 | Program output: 70                 
Correct output: -55                 | Program output: 2                  
Correct output: -51                 | Program output: 66                 
Correct output: 31                  | Program output: 78                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: 5                  
Correct output: -64                 | Program output: -9                 
Correct output: -93                 | Program output: -62                
Correct output: -30                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: 3                  
Correct output: -60                 | Program output: 76                 
Correct output: -85                 | Program output: 79                 
Correct output: -72                 | Program output: -29                
Correct output: -99                 | Program output: 36                 
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 2                  
Correct output: -77                 | Program output: -31                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: 30                 
Correct output: -89                 | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: 76                 
Correct output: -88                 | Program output: -77                
Correct output: -91                 | Program output: -23                
Correct output: -60                 | Program output: 17                 
Correct output: -82                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_20} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_min exec_stackdepth boolean_rot integer_lt boolean_dup_times boolean_dup integer_fromboolean in1 integer_gt integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt integer_add print_integer boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_fromboolean integer_empty integer_max tag_boolean_20 integer_shove exec_do*count () integer_dup_times exec_while (integer_empty boolean_invert_second_then_and boolean_invert_first_then_and) boolean_shove exec_dup_times (exec_empty exec_y (exec_if () (boolean_dup_items integer_dup_times integer_shove) boolean_and exec_swap (exec_shove (print_newline in4 integer_mult) integer_stackdepth exec_y_when_autoconstructing (exec_yank) integer_yank boolean_pop exec_pop (exec_noop) exec_do*while (boolean_empty) integer_dup_items exec_do*range (integer_inc boolean_yank) exec_y (boolean_or)) ())))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_20} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_min exec_stackdepth boolean_rot integer_lt boolean_dup_times boolean_dup integer_fromboolean in1 integer_gt integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt integer_add print_integer boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_fromboolean integer_empty integer_max tag_boolean_20 integer_shove exec_do*count () integer_dup_times exec_while (integer_empty boolean_invert_second_then_and boolean_invert_first_then_and) boolean_shove exec_dup_times (exec_empty exec_y (exec_if () (boolean_dup_items integer_dup_times integer_shove) boolean_and exec_swap (exec_shove (print_newline in4 integer_mult) integer_stackdepth exec_y_when_autoconstructing (exec_yank) integer_yank boolean_pop exec_pop (exec_noop) exec_do*while (boolean_empty) integer_dup_items exec_do*range (integer_inc boolean_yank) exec_y (boolean_or)) ())))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 6 17 3 2 1 3 3 2 1)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 6 17 3 2 1 3 3 2 1)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction tagged_944} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_exec_14} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq})
Best program: (in4 tagged_944 print_integer exec_stackdepth exec_shove (integer_stackdepth print_boolean boolean_dup exec_pop () boolean_frominteger) exec_s () (boolean_frominteger exec_y_when_autoconstructing (boolean_eq exec_do*times (integer_mod exec_when () boolean_not) boolean_flush boolean_yankdup exec_k () (boolean_yankdup boolean_swap exec_do*while (integer_max) integer_min exec_rot (integer_lte exec_dup (boolean_empty) exec_dup_items boolean_frominteger exec_stackdepth) (integer_dup_items boolean_rot) (exec_empty integer_empty exec_if (integer_lt integer_inc) (tag_exec_14 (integer_yank) exec_y (exec_y (boolean_eq integer_inc integer_shove) exec_dup (exec_y_when_autoconstructing (integer_stackdepth boolean_swap) boolean_xor print_integer) in1 boolean_dup_items) exec_dup_items integer_swap exec_rot () (exec_flush integer_gte boolean_dup_items boolean_shove integer_dec exec_y_when_autoconstructing () exec_swap (integer_rot integer_add integer_shove print_integer) (print_integer integer_dec exec_do*times ()) boolean_or boolean_eq) ()))))) ())
Errors: [0 0 0 0 1 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 74
Size: 104
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 9.96
Median total errors in population: 10
Error averages by case: (0.998 0.994 0.983 0.997 0.998 0.999 0.997 0.997 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.843
Average program size in population (points): 69.783
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475231
--- Timings ---
Current time: 1559314488230 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 29.7%
Fitness Testing:      1.7 seconds, 66.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -18                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 79                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 76                 
Correct output: 0                   | Program output: 93                 
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 83                 
Correct output: 15                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 58                 
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 77                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: 44                 
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 90                 
Correct output: -23                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 77                 
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 34                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: 27                 
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: 15                 
Correct output: -77                 | Program output: 50                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: 72                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 72                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 97                 
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 67                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 61                 
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction tag_exec_566} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap exec_empty integer_dup_items boolean_invert_second_then_and boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_shove exec_pop (exec_s_when_autoconstructing (integer_mult) (integer_mult) () integer_mod) print_integer boolean_yankdup integer_gte integer_add) (boolean_swap integer_yank in2 in1 print_integer integer_min integer_flush integer_div boolean_shove exec_swap (boolean_invert_first_then_and boolean_dup_times exec_stackdepth) (in4) boolean_stackdepth integer_dup_items integer_gt) () integer_sub) tag_exec_566 (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_add integer_dup_items integer_dup_items) (boolean_yankdup boolean_yank boolean_dup exec_s_when_autoconstructing (exec_yank integer_yank boolean_invert_first_then_and boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger)) integer_dup exec_pop (integer_gte boolean_shove boolean_dup_items) boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (exec_empty exec_k (exec_empty exec_shove ()) ())) () ()) ()) ()) () ()) () ()) ())) ()) () ())))
Lexicase best errors: [1 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 134
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction tag_exec_566} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap exec_empty integer_dup_items boolean_invert_second_then_and boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_shove exec_pop (exec_s_when_autoconstructing (integer_mult) (integer_mult) () integer_mod) print_integer boolean_yankdup integer_gte integer_add) (boolean_swap integer_yank in2 in1 print_integer integer_min integer_flush integer_div boolean_shove exec_swap (boolean_invert_first_then_and boolean_dup_times exec_stackdepth) (in4) boolean_stackdepth integer_dup_items integer_gt) () integer_sub) tag_exec_566 (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_add integer_dup_items integer_dup_items) (boolean_yankdup boolean_yank boolean_dup exec_s_when_autoconstructing (exec_yank integer_yank boolean_invert_first_then_and boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger)) integer_dup exec_pop (integer_gte boolean_shove boolean_dup_items) boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (exec_empty exec_k (exec_empty exec_shove ()) ())) () ()) ()) ()) () ()) () ()) ())) ()) () ())))
Zero cases best errors: [1 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 134
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 202 200 212 441 201 443 442 213 200)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (212 202 200 212 441 201 443 442 213 200)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (boolean_invert_second_then_and exec_eq boolean_pop print_newline integer_pop integer_rot boolean_pop exec_k_when_autoconstructing (integer_flush exec_dup_items boolean_empty boolean_and in1 integer_dup_times) (integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_flush)
Errors: [1 0 0 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 7.234
Median total errors in population: 7
Error averages by case: (0.788 0.798 0.8 0.788 0.559 0.799 0.557 0.558 0.787 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.813
Average program size in population (points): 92.199
Average percent parens in population: 0.247
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.509
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1008741
--- Timings ---
Current time: 1559314491161 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.6 seconds, 46.1%
Fitness Testing:      2.5 seconds, 44.6%
Report:               0.4 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 60                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 50                 
Correct output: 47                  | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 30                 
Correct output: 0                   | Program output: 32                 
Correct output: 32                  | Program output: 74                 
Correct output: 4                   | Program output: 57                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 82                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 83                 
Correct output: 22                  | Program output: 23                 
Correct output: 56                  | Program output: 70                 
Correct output: 64                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 99                 
Correct output: -83                 | Program output: -36                
Correct output: -42                 | Program output: 49                 
Correct output: -100                | Program output: -62                
Correct output: -72                 | Program output: 44                 
Correct output: -74                 | Program output: 38                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -38                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: 37                 
Correct output: -56                 | Program output: 78                 
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -23                
Correct output: -86                 | Program output: 83                 
Correct output: 16                  | Program output: 55                 
Correct output: -9                  | Program output: 54                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 60                 
Correct output: -80                 | Program output: 42                 
Correct output: -87                 | Program output: -60                
Correct output: -15                 | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: 81                 
Correct output: -89                 | Program output: 67                 
Correct output: -42                 | Program output: 19                 
Correct output: -84                 | Program output: -1                 
Correct output: -30                 | Program output: 70                 
Correct output: -55                 | Program output: 2                  
Correct output: -51                 | Program output: 66                 
Correct output: 31                  | Program output: 78                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: 5                  
Correct output: -64                 | Program output: -9                 
Correct output: -93                 | Program output: -62                
Correct output: -30                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: 3                  
Correct output: -60                 | Program output: 76                 
Correct output: -85                 | Program output: 79                 
Correct output: -72                 | Program output: -29                
Correct output: -99                 | Program output: 36                 
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 2                  
Correct output: -77                 | Program output: -31                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: 30                 
Correct output: -89                 | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: 76                 
Correct output: -88                 | Program output: -77                
Correct output: -91                 | Program output: -23                
Correct output: -60                 | Program output: 17                 
Correct output: -82                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_20} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_min exec_stackdepth boolean_rot integer_lt boolean_dup_times boolean_dup integer_fromboolean in1 integer_gt integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt integer_add print_integer boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_fromboolean integer_empty integer_max tag_boolean_20 integer_shove exec_do*count () integer_dup_times exec_while (integer_empty boolean_invert_second_then_and boolean_invert_first_then_and) boolean_shove exec_dup_times (exec_empty exec_y (exec_if () (boolean_dup_items integer_dup_times integer_shove) boolean_and exec_swap (exec_shove (print_newline in4 integer_mult) integer_stackdepth exec_y_when_autoconstructing (exec_yank) integer_yank boolean_pop exec_pop (exec_noop) exec_do*while (boolean_empty) integer_dup_items exec_do*range (integer_inc boolean_yank) exec_y (boolean_or)) ())))
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_20} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_min exec_stackdepth boolean_rot integer_lt boolean_dup_times boolean_dup integer_fromboolean in1 integer_gt integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt integer_add print_integer boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_fromboolean integer_empty integer_max tag_boolean_20 integer_shove exec_do*count () integer_dup_times exec_while (integer_empty boolean_invert_second_then_and boolean_invert_first_then_and) boolean_shove exec_dup_times (exec_empty exec_y (exec_if () (boolean_dup_items integer_dup_times integer_shove) boolean_and exec_swap (exec_shove (print_newline in4 integer_mult) integer_stackdepth exec_y_when_autoconstructing (exec_yank) integer_yank boolean_pop exec_pop (exec_noop) exec_do*while (boolean_empty) integer_dup_items exec_do*range (integer_inc boolean_yank) exec_y (boolean_or)) ())))
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (862 240 282 624 580 240 340 240 283 243)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (862 240 282 624 580 240 340 240 283 243)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 1, :instruction tagged_944} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_inc} {:close 0, :instruction tag_exec_14} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq})
Best program: (in4 tagged_944 print_integer exec_stackdepth exec_shove (integer_stackdepth print_boolean boolean_dup exec_pop () boolean_frominteger) exec_s () (boolean_frominteger exec_y_when_autoconstructing (boolean_eq exec_do*times (integer_mod exec_when () boolean_not) boolean_flush boolean_yankdup exec_k () (boolean_yankdup boolean_swap exec_do*while (integer_max) integer_min exec_rot (integer_lte exec_dup (boolean_empty) exec_dup_items boolean_frominteger exec_stackdepth) (print_integer boolean_rot) (exec_empty integer_empty exec_if (integer_lt integer_inc) (tag_exec_14 (integer_yank) exec_y (exec_y (boolean_eq integer_inc integer_shove) exec_dup (exec_y_when_autoconstructing (integer_stackdepth boolean_swap) boolean_xor print_integer) in1 boolean_dup_items) exec_dup_items integer_swap exec_rot () (exec_flush integer_gte boolean_dup_items boolean_shove integer_dec exec_y_when_autoconstructing () exec_swap (integer_rot exec_yank integer_shove print_integer) (print_integer integer_dec exec_do*times ()) boolean_or boolean_eq) ()))))) ())
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 74
Size: 104
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.066
Median total errors in population: 6
Error averages by case: (0.138 0.76 0.718 0.376 0.42 0.76 0.66 0.76 0.717 0.757)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.708
Average program size in population (points): 87.979
Average percent parens in population: 0.240
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9595
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1568532
--- Timings ---
Current time: 1559314494724 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.1 seconds, 55.6%
Fitness Testing:      3.2 seconds, 35.4%
Report:               0.7 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -18                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 79                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 76                 
Correct output: 0                   | Program output: 93                 
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 83                 
Correct output: 15                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 58                 
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 77                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: 44                 
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 90                 
Correct output: -23                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 77                 
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 34                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: 27                 
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: 15                 
Correct output: -77                 | Program output: 50                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: 72                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 72                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 97                 
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 67                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 61                 
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction tagged_944} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq})
Lexicase best program: (in4 tagged_944 exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap exec_empty integer_dup_items boolean_invert_second_then_and boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_shove exec_pop (exec_s_when_autoconstructing (integer_mult) (integer_mult) () integer_mod) print_integer boolean_yankdup integer_gte integer_add) (boolean_swap integer_yank in2 in1 print_integer integer_min integer_flush integer_div exec_y (exec_y (boolean_eq integer_inc integer_shove) exec_dup (exec_y_when_autoconstructing (integer_stackdepth boolean_swap) boolean_xor exec_yank) in1 boolean_dup_items) exec_dup_items integer_swap exec_rot () (exec_flush integer_gte boolean_dup_items boolean_shove integer_dec exec_y_when_autoconstructing () exec_swap (integer_rot integer_add integer_shove print_integer) (print_integer integer_dec exec_do*times ()) boolean_or boolean_eq) ()) ()))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction tagged_944} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq})
Zero cases best program: (in4 tagged_944 exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap exec_empty integer_dup_items boolean_invert_second_then_and boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_shove exec_pop (exec_s_when_autoconstructing (integer_mult) (integer_mult) () integer_mod) print_integer boolean_yankdup integer_gte integer_add) (boolean_swap integer_yank in2 in1 print_integer integer_min integer_flush integer_div exec_y (exec_y (boolean_eq integer_inc integer_shove) exec_dup (exec_y_when_autoconstructing (integer_stackdepth boolean_swap) boolean_xor exec_yank) in1 boolean_dup_items) exec_dup_items integer_swap exec_rot () (exec_flush integer_gte boolean_dup_items boolean_shove integer_dec exec_y_when_autoconstructing () exec_swap (integer_rot integer_add integer_shove print_integer) (print_integer integer_dec exec_do*times ()) boolean_or boolean_eq) ()) ()))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 247 1000 245 154 154 154 867 154 1000)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (399 247 0 245 154 154 154 867 154 0)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction tag_exec_566} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_yank})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap exec_empty integer_dup_items boolean_invert_second_then_and boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_shove exec_pop (exec_s_when_autoconstructing (integer_mult) (integer_mult) () integer_mod) print_integer boolean_yankdup integer_gte integer_add) (boolean_swap integer_yank in2 in1 print_integer integer_min integer_flush integer_div boolean_shove exec_swap (boolean_invert_first_then_and boolean_dup_times exec_stackdepth) (in4) boolean_stackdepth integer_dup_items integer_gt) () integer_sub) tag_exec_566 (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_add integer_dup_items integer_dup_items) (boolean_yankdup boolean_yank boolean_dup exec_s_when_autoconstructing (exec_yank integer_yank boolean_invert_first_then_and exec_shove (in3 integer_dup_items in1 exec_empty print_integer integer_lt integer_mult exec_noop exec_dup_times (exec_stackdepth exec_pop (integer_empty exec_k (boolean_yankdup tag_exec_223 (boolean_yank)) ())))) () ()) ())) ()) () ())))
Errors: [0 1 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 79
Size: 113
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 7.626
Median total errors in population: 9
Error averages by case: (0.601 0.753 1.0 0.755 0.846 0.846 0.846 0.133 0.846 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 67.541
Average program size in population (points): 91.648
Average percent parens in population: 0.248
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.41525
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2096491
--- Timings ---
Current time: 1559314498196 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.5 seconds, 60.3%
Fitness Testing:      3.8 seconds, 30.6%
Report:               1.0 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 571
Test mean error for best: 0.57100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 51                 
Correct output: 2                   | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 41                 
Correct output: 47                  | Program output: 52                 
Correct output: 0                   | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 42                 
Correct output: 15                  | Program output: 71                 
Correct output: 22                  | Program output: 26                 
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 16                 
Correct output: 6                   | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 99                 
Correct output: 10                  | Program output: 23                 
Correct output: 22                  | Program output: 54                 
Correct output: 56                  | Program output: 69                 
Correct output: 64                  | Program output: 94                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 51                 
Correct output: -83                 | Program output: 51                 
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 65                 
Correct output: -23                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 47                 
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 78                 
Correct output: -92                 | Program output: -32                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: 7                  
Correct output: -77                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 49                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -27                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 14                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -56                
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_and in1 integer_dup_times) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_flush) ()) () ())))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_and in1 integer_dup_times) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_flush) ()) () ())))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (557 555 5 5 557 5 318 880 318 1000)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (557 555 5 5 557 5 318 880 318 0)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_and in1 integer_dup_times) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_flush) ()) () ())))
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 6.8
Median total errors in population: 6
Error averages by case: (0.443 0.445 0.995 0.995 0.443 0.995 0.682 0.12 0.682 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 56.945
Average program size in population (points): 76.535
Average percent parens in population: 0.224
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.8755
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2626965
--- Timings ---
Current time: 1559314501295 milliseconds
Total Time:          15.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.8 seconds, 62.1%
Fitness Testing:      4.4 seconds, 28.0%
Report:               1.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -18                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 79                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 76                 
Correct output: 0                   | Program output: 93                 
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 83                 
Correct output: 15                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 58                 
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 77                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: 44                 
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 90                 
Correct output: -23                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 77                 
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: 35                 
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 34                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: 27                 
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: 15                 
Correct output: -77                 | Program output: 50                 
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: 72                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 72                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 97                 
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 67                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 61                 
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 83                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_invert_second_then_and exec_eq boolean_pop print_newline integer_pop integer_rot boolean_pop exec_noop integer_flush exec_dup_items boolean_empty boolean_and in1 integer_dup_times integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush integer_add exec_flush)
Lexicase best errors: [0 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.069
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_invert_second_then_and exec_eq boolean_pop print_newline integer_pop integer_rot boolean_pop exec_noop integer_flush exec_dup_items boolean_empty boolean_and in1 integer_dup_times integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush integer_add exec_flush)
Zero cases best errors: [0 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.069
--- Lexicase Population Statistics ---
Count of elite individuals by case: (656 177 209 1000 648 209 648 861 209 648)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (656 177 209 0 648 209 648 861 209 648)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_gt} {:close 1, :instruction integer_flush} {:close 0, :instruction tag_exec_566} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_stackdepth})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (integer_max) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap exec_empty integer_dup_items boolean_invert_second_then_and boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_shove exec_pop (exec_s_when_autoconstructing (integer_mult) (integer_mult) () integer_mod) print_integer boolean_yankdup integer_gte integer_dup_times) (boolean_swap integer_yank in2 in1 print_integer boolean_shove integer_flush integer_div boolean_shove exec_swap (boolean_invert_first_then_and boolean_dup_times exec_stackdepth) (in4) boolean_stackdepth integer_dup_items integer_gt) () integer_flush) tag_exec_566 (boolean_invert_second_then_and exec_s_when_autoconstructing (integer_add integer_dup_items integer_dup_items) (boolean_yankdup boolean_yank boolean_dup boolean_yankdup in3 integer_yankdup integer_lte boolean_dup_times integer_dup_times boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger)) integer_dup exec_pop (integer_gte exec_s (boolean_dup_items) (boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (exec_empty exec_k (exec_empty exec_stackdepth) ())) () ()) ()) ())) ()) () ()) ())) ()) () ())))
Errors: [0 0 1 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 90
Size: 135
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.735
Median total errors in population: 5
Error averages by case: (0.344 0.823 0.791 1.0 0.352 0.791 0.352 0.139 0.791 0.352)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 42.893
Average program size in population (points): 59.194
Average percent parens in population: 0.271
Minimum age in population: 5.0
Maximum age in population: 8.8125
Average age in population: 7.0019375
Median age in population: 7.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 331
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 331
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3046799
--- Timings ---
Current time: 1559314504041 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.7 seconds, 63.5%
Fitness Testing:      4.8 seconds, 26.4%
Report:               1.8 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 571
Test mean error for best: 0.57100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 51                 
Correct output: 2                   | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 41                 
Correct output: 47                  | Program output: 52                 
Correct output: 0                   | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 42                 
Correct output: 15                  | Program output: 71                 
Correct output: 22                  | Program output: 26                 
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 16                 
Correct output: 6                   | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 99                 
Correct output: 10                  | Program output: 23                 
Correct output: 22                  | Program output: 54                 
Correct output: 56                  | Program output: 69                 
Correct output: 64                  | Program output: 94                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 51                 
Correct output: -83                 | Program output: 51                 
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 65                 
Correct output: -23                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 47                 
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 78                 
Correct output: -92                 | Program output: -32                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: 7                  
Correct output: -77                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 49                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -27                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 14                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -56                
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_dup_times) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_dup_times) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (872 873 344 535 4 880 344 2 529 531)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (872 873 344 535 4 880 344 2 529 531)
Population mean number of perfect (error zero) cases: 4.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_dup_times) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.086
Median total errors in population: 4
Error averages by case: (0.128 0.127 0.656 0.465 0.996 0.12 0.656 0.998 0.471 0.469)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.527
Average program size in population (points): 70.188
Average percent parens in population: 0.224
Minimum age in population: 6.0
Maximum age in population: 10.59375
Average age in population: 8.64828125
Median age in population: 8.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3548696
--- Timings ---
Current time: 1559314506952 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 64.5%
Fitness Testing:      5.4 seconds, 25.1%
Report:               2.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 571
Test mean error for best: 0.57100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 51                 
Correct output: 2                   | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 41                 
Correct output: 47                  | Program output: 52                 
Correct output: 0                   | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 42                 
Correct output: 15                  | Program output: 71                 
Correct output: 22                  | Program output: 26                 
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 16                 
Correct output: 6                   | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 99                 
Correct output: 10                  | Program output: 23                 
Correct output: 22                  | Program output: 54                 
Correct output: 56                  | Program output: 69                 
Correct output: 64                  | Program output: 94                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 51                 
Correct output: -83                 | Program output: 51                 
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 65                 
Correct output: -23                 | Program output: 29                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 47                 
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 78                 
Correct output: -92                 | Program output: -32                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: 7                  
Correct output: -77                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 49                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -27                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 14                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -56                
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction tagged_430} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_or boolean_dup_items boolean_or exec_dup_items exec_eq boolean_yankdup integer_fromboolean integer_eq integer_gte boolean_dup boolean_not exec_k () (boolean_swap) in3 exec_noop tagged_430 print_integer boolean_dup boolean_shove exec_s () (integer_yank integer_pop in1 integer_div) (boolean_frominteger integer_stackdepth exec_dup_items boolean_yankdup integer_lte) exec_dup_items boolean_and integer_fromboolean exec_eq integer_stackdepth exec_dup_times (boolean_shove integer_sub integer_add integer_pop) exec_yankdup integer_yank boolean_dup_times boolean_dup integer_shove integer_pop boolean_stackdepth integer_pop exec_do*while (exec_swap (boolean_empty integer_dec exec_swap (boolean_eq integer_mod) (exec_rot (boolean_xor boolean_flush) (exec_y_when_autoconstructing () boolean_yankdup boolean_flush) (exec_y_when_autoconstructing () boolean_yankdup in3 integer_yankdup integer_lte boolean_dup_times integer_dup_times boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger) integer_dup exec_pop (integer_gte boolean_shove boolean_dup_items) boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (exec_empty exec_k (exec_empty exec_shove ()) ())) () ()) ())) ()) () ()))) ()))
Lexicase best errors: [0 0 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 128
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction tagged_430} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_or boolean_dup_items boolean_or exec_dup_items exec_eq boolean_yankdup integer_fromboolean integer_eq integer_gte boolean_dup boolean_not exec_k () (boolean_swap) in3 exec_noop tagged_430 print_integer boolean_dup boolean_shove exec_s () (integer_yank integer_pop in1 integer_div) (boolean_frominteger integer_stackdepth exec_dup_items boolean_yankdup integer_lte) exec_dup_items boolean_and integer_fromboolean exec_eq integer_stackdepth exec_dup_times (boolean_shove integer_sub integer_add integer_pop) exec_yankdup integer_yank boolean_dup_times boolean_dup integer_shove integer_pop boolean_stackdepth integer_pop exec_do*while (exec_swap (boolean_empty integer_dec exec_swap (boolean_eq integer_mod) (exec_rot (boolean_xor boolean_flush) (exec_y_when_autoconstructing () boolean_yankdup boolean_flush) (exec_y_when_autoconstructing () boolean_yankdup in3 integer_yankdup integer_lte boolean_dup_times integer_dup_times boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger) integer_dup exec_pop (integer_gte boolean_shove boolean_dup_items) boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (exec_empty exec_k (exec_empty exec_shove ()) ())) () ()) ())) ()) () ()))) ()))
Zero cases best errors: [0 0 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 128
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 884 258 424 13 258 424 180 180 426)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (257 884 258 424 13 258 424 180 180 426)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_dup_times) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div exec_noop) integer_add exec_stackdepth) ()) () ())))
Errors: [1 0 1 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.696
Median total errors in population: 6
Error averages by case: (0.743 0.116 0.742 0.576 0.987 0.742 0.576 0.82 0.82 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.07
Average program size in population (points): 62.662
Average percent parens in population: 0.256
Minimum age in population: 8.125
Maximum age in population: 11.6875
Average age in population: 10.28071875
Median age in population: 10.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 281
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3993836
--- Timings ---
Current time: 1559314509801 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 65.3%
Fitness Testing:      5.8 seconds, 24.1%
Report:               2.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 41                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 60                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 50                 
Correct output: 47                  | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 30                 
Correct output: 0                   | Program output: 32                 
Correct output: 32                  | Program output: 74                 
Correct output: 4                   | Program output: 57                 
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 82                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 83                 
Correct output: 22                  | Program output: 23                 
Correct output: 56                  | Program output: 70                 
Correct output: 64                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 99                 
Correct output: -83                 | Program output: -36                
Correct output: -42                 | Program output: 49                 
Correct output: -100                | Program output: -62                
Correct output: -72                 | Program output: 44                 
Correct output: -74                 | Program output: 38                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -38                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: 3                  
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: 37                 
Correct output: -56                 | Program output: 78                 
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -23                
Correct output: -86                 | Program output: 83                 
Correct output: 16                  | Program output: 55                 
Correct output: -9                  | Program output: 54                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: 60                 
Correct output: -80                 | Program output: 42                 
Correct output: -87                 | Program output: -60                
Correct output: -15                 | Program output: 63                 
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: 81                 
Correct output: -89                 | Program output: 67                 
Correct output: -42                 | Program output: 19                 
Correct output: -84                 | Program output: -1                 
Correct output: -30                 | Program output: 70                 
Correct output: -55                 | Program output: 2                  
Correct output: -51                 | Program output: 66                 
Correct output: 31                  | Program output: 78                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: 5                  
Correct output: -64                 | Program output: -9                 
Correct output: -93                 | Program output: -62                
Correct output: -30                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: 3                  
Correct output: -60                 | Program output: 76                 
Correct output: -85                 | Program output: 79                 
Correct output: -72                 | Program output: -29                
Correct output: -99                 | Program output: 36                 
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 2                  
Correct output: -77                 | Program output: -31                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: 30                 
Correct output: -89                 | Program output: 34                 
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: 76                 
Correct output: -88                 | Program output: -77                
Correct output: -91                 | Program output: -23                
Correct output: -60                 | Program output: 17                 
Correct output: -82                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_boolean_479} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction 60} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_or boolean_dup_items boolean_or exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_y_when_autoconstructing (integer_pop integer_swap) in4 integer_swap) integer_yankdup integer_lt integer_add print_integer boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_fromboolean) integer_empty tag_boolean_479 boolean_shove integer_sub integer_add integer_pop exec_yankdup integer_yank boolean_dup_times boolean_dup integer_shove integer_pop boolean_stackdepth integer_pop exec_do*while (exec_swap (boolean_yankdup integer_dec exec_swap (boolean_eq integer_mod) (exec_rot (boolean_xor boolean_flush) (exec_y_when_autoconstructing () boolean_yankdup in3 integer_yankdup integer_lte boolean_dup_times integer_dup_times boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger)) integer_dup exec_pop (integer_gte boolean_shove boolean_dup_items) boolean_dup integer_gte integer_fromboolean exec_s () (integer_dup exec_pop (integer_gte 60 exec_empty exec_stackdepth integer_lt integer_empty exec_noop exec_dup_times (exec_stackdepth exec_pop (integer_empty exec_k (boolean_yankdup boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (integer_div exec_k (exec_empty exec_shove ()) ())) () ()) ()) ())))) ()) ()) () ()) ())) ()))
Lexicase best errors: [0 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 137
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_boolean_479} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction 60} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_or boolean_dup_items boolean_or exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_y_when_autoconstructing (integer_pop integer_swap) in4 integer_swap) integer_yankdup integer_lt integer_add print_integer boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_fromboolean) integer_empty tag_boolean_479 boolean_shove integer_sub integer_add integer_pop exec_yankdup integer_yank boolean_dup_times boolean_dup integer_shove integer_pop boolean_stackdepth integer_pop exec_do*while (exec_swap (boolean_yankdup integer_dec exec_swap (boolean_eq integer_mod) (exec_rot (boolean_xor boolean_flush) (exec_y_when_autoconstructing () boolean_yankdup in3 integer_yankdup integer_lte boolean_dup_times integer_dup_times boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger)) integer_dup exec_pop (integer_gte boolean_shove boolean_dup_items) boolean_dup integer_gte integer_fromboolean exec_s () (integer_dup exec_pop (integer_gte 60 exec_empty exec_stackdepth integer_lt integer_empty exec_noop exec_dup_times (exec_stackdepth exec_pop (integer_empty exec_k (boolean_yankdup boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (integer_div exec_k (exec_empty exec_shove ()) ())) () ()) ()) ())))) ()) ()) () ()) ())) ()))
Zero cases best errors: [0 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 137
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (668 254 191 192 192 192 860 192 343 476)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (668 254 191 192 192 192 860 192 343 476)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction tag_boolean_479} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction 60} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_shove})
Best program: (boolean_or boolean_dup_items boolean_or exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_y_when_autoconstructing (integer_pop integer_swap) in4 integer_swap) integer_yankdup integer_lt integer_add print_integer boolean_frominteger boolean_invert_second_then_and boolean_dup_items integer_fromboolean) integer_empty tag_boolean_479 boolean_shove integer_sub integer_add integer_pop exec_yankdup integer_yank boolean_dup_times boolean_dup integer_shove integer_pop boolean_stackdepth integer_pop exec_do*while (exec_swap (boolean_yankdup integer_dec exec_swap (boolean_eq integer_mod) (exec_rot (boolean_xor boolean_flush) (exec_y_when_autoconstructing () boolean_yankdup in3 integer_yankdup integer_lte boolean_dup_times integer_dup_times boolean_dup_times exec_stackdepth exec_rot (exec_swap (boolean_eq tag_exec_132 (exec_do*times (exec_dup_items boolean_frominteger)) integer_dup exec_pop (integer_gte boolean_shove boolean_dup_items) boolean_dup integer_gte integer_fromboolean exec_s () (integer_dup exec_pop (integer_gte 60 exec_empty exec_stackdepth integer_lt integer_mult exec_noop exec_dup_times (exec_stackdepth exec_pop (integer_empty exec_k (boolean_yankdup boolean_dup integer_gte integer_fromboolean exec_s () (integer_min exec_s (integer_shove exec_when (integer_div exec_k (exec_empty exec_shove ()) ())) () ()) ()) ())))) ()) ()) () ()) ())) ()))
Errors: [0 1 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 97
Size: 137
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.44
Median total errors in population: 6
Error averages by case: (0.332 0.746 0.809 0.808 0.808 0.808 0.14 0.808 0.657 0.524)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.827
Average program size in population (points): 59.698
Average percent parens in population: 0.257
Minimum age in population: 9.5625
Maximum age in population: 13.265625
Average age in population: 11.9311328125
Median age in population: 11.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4416962
--- Timings ---
Current time: 1559314512720 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 66.1%
Fitness Testing:      6.3 seconds, 23.3%
Report:               2.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 51                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 52                 
Correct output: 0                   | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 42                 
Correct output: 15                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 77                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: 44                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 65                 
Correct output: -23                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 47                 
Correct output: -58                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: -32                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -8                 
Correct output: -65                 | Program output: 7                  
Correct output: -77                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -27                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -56                
Correct output: -75                 | Program output: -36                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -63                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_min) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Lexicase best errors: [1 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_min) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Zero cases best errors: [1 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 13 180 169 180 454 454 253 13 169)
Population mean number of elite cases: 2.14
Count of perfect (error zero) individuals by case: (253 13 180 169 180 454 454 253 13 169)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_min) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Errors: [1 0 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.862
Median total errors in population: 8
Error averages by case: (0.747 0.987 0.82 0.831 0.82 0.546 0.546 0.747 0.987 0.831)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.953
Average program size in population (points): 61.439
Average percent parens in population: 0.235
Minimum age in population: 10.71875
Maximum age in population: 15.09375
Average age in population: 13.380296875
Median age in population: 13.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4856292
--- Timings ---
Current time: 1559314516110 milliseconds
Total Time:          30.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.5 seconds, 67.1%
Fitness Testing:      6.7 seconds, 22.1%
Report:               3.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 51                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 52                 
Correct output: 0                   | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 42                 
Correct output: 15                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 44                 
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 77                 
Correct output: -47                 | Program output: -1                 
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: 44                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 65                 
Correct output: -23                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 47                 
Correct output: -58                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: -32                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -1                 
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -8                 
Correct output: -65                 | Program output: 7                  
Correct output: -77                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -15                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -27                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -56                
Correct output: -75                 | Program output: -36                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -24                
Correct output: -77                 | Program output: -19                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -63                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 0                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_min) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Lexicase best errors: [0 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_min) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Zero cases best errors: [0 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (532 532 618 159 617 532 160 95 185 617)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (532 532 618 159 617 532 160 95 185 617)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tag_boolean_125} {:close 0, :instruction tag_boolean_125} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_min) integer_gte integer_rot exec_pop (exec_stackdepth tag_boolean_125 tag_boolean_125 integer_yankdup) print_integer integer_yankdup exec_yank integer_div integer_flush) integer_add exec_stackdepth) ()) () ())))
Errors: [0 0 0 1 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.953
Median total errors in population: 4
Error averages by case: (0.468 0.468 0.382 0.841 0.383 0.468 0.84 0.905 0.815 0.383)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.372
Average program size in population (points): 51.08
Average percent parens in population: 0.264
Minimum age in population: 12.0
Maximum age in population: 16.71484375
Average age in population: 15.426578125
Median age in population: 15.4560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 356
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 357
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5225372
--- Timings ---
Current time: 1559314519028 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 68.0%
Fitness Testing:      7.1 seconds, 21.3%
Report:               3.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 76                 
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 32                 
Correct output: 15                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 54                 
Correct output: -58                 | Program output: -43                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 4                  
Correct output: -88                 | Program output: -26                
Correct output: -88                 | Program output: 12                 
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: 15                 
Correct output: -77                 | Program output: -13                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -53                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 65                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline integer_pop in3 boolean_pop boolean_yankdup in1 integer_min integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_flush integer_add exec_flush)
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 19
Percent parens: 0.053
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline integer_pop in3 boolean_pop boolean_yankdup in1 integer_min integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_flush integer_add exec_flush)
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 19
Percent parens: 0.053
--- Lexicase Population Statistics ---
Count of elite individuals by case: (681 262 368 161 879 586 584 262 161 584)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (681 262 368 161 879 586 584 262 161 584)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline integer_pop in3 boolean_pop boolean_yankdup in1 integer_min integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_flush integer_add exec_flush)
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 5.472
Median total errors in population: 4
Error averages by case: (0.319 0.738 0.632 0.839 0.121 0.414 0.416 0.738 0.839 0.416)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.962
Average program size in population (points): 40.77
Average percent parens in population: 0.207
Minimum age in population: 13.984375
Maximum age in population: 18.5517578125
Average age in population: 17.005474609375
Median age in population: 16.9755859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 215
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5517129
--- Timings ---
Current time: 1559314521551 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.8 seconds, 68.8%
Fitness Testing:      7.4 seconds, 20.6%
Report:               3.7 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 76                 
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 32                 
Correct output: 15                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 54                 
Correct output: -58                 | Program output: -43                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 4                  
Correct output: -88                 | Program output: -26                
Correct output: -88                 | Program output: 12                 
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: 15                 
Correct output: -77                 | Program output: -13                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -53                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 65                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline integer_pop in3 boolean_pop boolean_yankdup in1 integer_min integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_flush integer_add exec_flush)
Lexicase best errors: [0 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.053
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline integer_pop in3 boolean_pop boolean_yankdup in1 integer_min integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_flush integer_add exec_flush)
Zero cases best errors: [0 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.053
--- Lexicase Population Statistics ---
Count of elite individuals by case: (486 621 896 198 486 621 198 254 198 486)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (486 621 896 198 486 621 198 254 198 486)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline integer_pop in3 boolean_pop boolean_yankdup in1 integer_min integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_flush integer_add exec_flush)
Errors: [0 0 0 1 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 5.556
Median total errors in population: 6
Error averages by case: (0.514 0.379 0.104 0.802 0.514 0.379 0.802 0.746 0.802 0.514)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.627
Average program size in population (points): 34.673
Average percent parens in population: 0.158
Minimum age in population: 14.984375
Maximum age in population: 20.07958984375
Average age in population: 18.49445947265625
Median age in population: 18.57763671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 299
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 345
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5778158
--- Timings ---
Current time: 1559314524041 milliseconds
Total Time:          38.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.9 seconds, 69.6%
Fitness Testing:      7.7 seconds, 20.0%
Report:               3.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 456
Test mean error for best: 0.45600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 51                 
Correct output: 2                   | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 41                 
Correct output: 47                  | Program output: 52                 
Correct output: 0                   | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 42                 
Correct output: 15                  | Program output: 71                 
Correct output: 22                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 16                 
Correct output: 6                   | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 99                 
Correct output: 10                  | Program output: 23                 
Correct output: 22                  | Program output: 54                 
Correct output: 56                  | Program output: 69                 
Correct output: 64                  | Program output: 94                 
Correct output: -47                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 47                 
Correct output: -58                 | Program output: -43                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 78                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -26                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: 7                  
Correct output: -77                 | Program output: -13                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 49                 
Correct output: -86                 | Program output: -53                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 14                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_pop in3 boolean_pop boolean_yankdup in1 integer_min) integer_yankdup) print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush)) () ())))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_pop in3 boolean_pop boolean_yankdup in1 integer_min) integer_yankdup) print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush)) () ())))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 307 447 237 307 448 487 447 237 488)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (307 307 447 237 307 448 487 447 237 488)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 integer_pop in3 boolean_pop boolean_yankdup in1 integer_min) integer_yankdup) print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush)) () ())))
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.288
Median total errors in population: 6
Error averages by case: (0.693 0.693 0.553 0.763 0.693 0.552 0.513 0.553 0.763 0.512)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.783
Average program size in population (points): 36.029
Average percent parens in population: 0.165
Minimum age in population: 15.984375
Maximum age in population: 21.770263671875
Average age in population: 19.90863623046875
Median age in population: 20.0286865234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6050714
--- Timings ---
Current time: 1559314526935 milliseconds
Total Time:          41.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 70.6%
Fitness Testing:      8.0 seconds, 19.3%
Report:               4.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 60                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 32                 
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: -36                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 38                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 27                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: 67                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 36                 
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 26
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 26
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (898 862 367 485 368 862 422 367 862 916)
Population mean number of elite cases: 6.41
Count of perfect (error zero) individuals by case: (898 862 367 485 368 862 422 367 862 916)
Population mean number of perfect (error zero) cases: 6.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 26
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 3.591
Median total errors in population: 4
Error averages by case: (0.102 0.138 0.633 0.515 0.632 0.138 0.578 0.633 0.138 0.084)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.039
Average program size in population (points): 35.897
Average percent parens in population: 0.197
Minimum age in population: 20.356689453125
Maximum age in population: 22.20849609375
Average age in population: 21.22859643554688
Median age in population: 21.356689453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 339
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 339
Syntactic diversity (% unique Push programs):	 0.357
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6357932
--- Timings ---
Current time: 1559314529549 milliseconds
Total Time:          44.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.3 seconds, 71.1%
Fitness Testing:      8.3 seconds, 18.9%
Report:               4.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 76                 
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 32                 
Correct output: 15                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 60                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -36                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 54                 
Correct output: -58                 | Program output: -43                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 4                  
Correct output: -88                 | Program output: -26                
Correct output: -88                 | Program output: 12                 
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: 15                 
Correct output: -77                 | Program output: -13                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -53                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 65                 
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -12                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 boolean_empty in3 boolean_pop boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush))) ()) () ())))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 boolean_empty in3 boolean_pop boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush))) ()) () ())))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 160 1 1 906 676 676 851 1 1)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (907 160 1 1 906 676 676 851 1 1)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 boolean_empty in3 boolean_pop boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush))) ()) () ())))
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 5.82
Median total errors in population: 5
Error averages by case: (0.093 0.84 0.999 0.999 0.094 0.324 0.324 0.149 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.536
Average program size in population (points): 30.11
Average percent parens in population: 0.133
Minimum age in population: 21.7825927734375
Maximum age in population: 24.20849609375
Average age in population: 23.04189117431641
Median age in population: 23.20849609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 391
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 437
Syntactic diversity (% unique Push programs):	 0.346
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6612426
--- Timings ---
Current time: 1559314532076 milliseconds
Total Time:          46.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 71.6%
Fitness Testing:      8.6 seconds, 18.4%
Report:               4.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 60                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 32                 
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: -36                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 38                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 27                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: 67                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 36                 
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 boolean_empty in3 boolean_pop boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush))) ()) () ())))
Lexicase best errors: [0 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop integer_dup_items in2) (exec_dup (boolean_swap boolean_yankdup in1 boolean_empty in3 boolean_pop boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (print_integer integer_yankdup integer_yank integer_div integer_flush) (integer_add exec_flush))) ()) () ())))
Zero cases best errors: [0 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (889 258 888 258 474 137 139 258 473 472)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (889 258 888 258 474 137 139 258 473 472)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Errors: [0 0 0 0 1 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 26
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 5.754
Median total errors in population: 5
Error averages by case: (0.111 0.742 0.112 0.742 0.526 0.863 0.861 0.742 0.527 0.528)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.671
Average program size in population (points): 39.462
Average percent parens in population: 0.252
Minimum age in population: 22.7825927734375
Maximum age in population: 25.88906860351562
Average age in population: 24.71134848022461
Median age in population: 24.63906860351562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 350
Genome diversity (% unique genomes):	 0.428
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 352
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6939640
--- Timings ---
Current time: 1559314534998 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.7 seconds, 72.1%
Fitness Testing:      8.9 seconds, 18.0%
Report:               4.8 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 60                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 32                 
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: -36                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 38                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 27                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: 67                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 36                 
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 26
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 26
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (876 280 339 339 893 339 877 863 880 807)
Population mean number of elite cases: 6.49
Count of perfect (error zero) individuals by case: (876 280 339 339 893 339 877 863 880 807)
Population mean number of perfect (error zero) cases: 6.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 26
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 3.507
Median total errors in population: 3
Error averages by case: (0.124 0.72 0.661 0.661 0.107 0.661 0.123 0.137 0.12 0.193)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.801
Average program size in population (points): 37.186
Average percent parens in population: 0.229
Minimum age in population: 23.7825927734375
Maximum age in population: 27.6575927734375
Average age in population: 26.17205046081543
Median age in population: 26.2825927734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.01
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7273183
--- Timings ---
Current time: 1559314537650 milliseconds
Total Time:          52.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 72.5%
Fitness Testing:      9.3 seconds, 17.8%
Report:               5.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 60                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 73                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 32                 
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 75                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 38                 
Correct output: -83                 | Program output: -36                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -7                 
Correct output: -74                 | Program output: 38                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -4                 
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -23                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 27                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -5                 
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: 67                 
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: 70                 
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -8                 
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: 38                 
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: 36                 
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -8                 
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: 12                 
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -59                
Correct output: -60                 | Program output: -8                 
Correct output: -82                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 26
Percent parens: 0.077
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 26
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 908 923 655 907 907 656 656 4 3)
Population mean number of elite cases: 6.53
Count of perfect (error zero) individuals by case: (908 908 923 655 907 907 656 656 4 3)
Population mean number of perfect (error zero) cases: 6.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4) integer_swap integer_yankdup integer_lt boolean_pop boolean_yankdup in1 integer_min integer_yankdup print_integer integer_yankdup integer_yank integer_div integer_add boolean_and)
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 24
Size: 26
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 3.473
Median total errors in population: 2
Error averages by case: (0.092 0.092 0.077 0.345 0.093 0.093 0.344 0.344 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.018
Average program size in population (points): 31.806
Average percent parens in population: 0.156
Minimum age in population: 25.13906860351562
Maximum age in population: 29.40876007080078
Average age in population: 27.64025825500488
Median age in population: 27.64949798583984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7539521
--- Timings ---
Current time: 1559314540113 milliseconds
Total Time:          54.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.9 seconds, 72.9%
Fitness Testing:      9.6 seconds, 17.5%
Report:               5.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -43                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 12                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap in3 exec_while (boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup print_integer boolean_eq integer_yank integer_div integer_yankdup) print_integer integer_yankdup integer_inc integer_div integer_flush) integer_add exec_flush)
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap in3 exec_while (boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup print_integer boolean_eq integer_yank integer_div integer_yankdup) print_integer integer_yankdup integer_inc integer_div integer_flush) integer_add exec_flush)
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 325 325 908 551 3 551 551 909 551)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (325 325 325 908 551 3 551 551 909 551)
Population mean number of perfect (error zero) cases: 5.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap in3 exec_while (boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup print_integer boolean_eq integer_yank integer_div integer_yankdup) print_integer integer_yankdup integer_inc integer_div integer_flush) integer_add exec_flush)
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 5.001
Median total errors in population: 4
Error averages by case: (0.675 0.675 0.675 0.092 0.449 0.997 0.449 0.449 0.091 0.449)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.44
Average program size in population (points): 34.485
Average percent parens in population: 0.203
Minimum age in population: 26.49554443359375
Maximum age in population: 31.07310485839844
Average age in population: 29.29041798400879
Median age in population: 29.32890319824219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7776881
--- Timings ---
Current time: 1559314542494 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.8 seconds, 73.3%
Fitness Testing:      9.8 seconds, 17.2%
Report:               5.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 32                 
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -57                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -43                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 23                 
Correct output: -9                  | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 12                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -36                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap in3 exec_while (boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup print_integer boolean_eq integer_yank integer_div integer_yankdup) print_integer integer_yankdup integer_inc integer_div integer_flush) integer_add exec_flush)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap in3 exec_while (boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup print_integer boolean_eq integer_yank integer_div integer_yankdup) print_integer integer_yankdup integer_inc integer_div integer_flush) integer_add exec_flush)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (520 521 349 866 850 863 851 850 521 852)
Population mean number of elite cases: 7.04
Count of perfect (error zero) individuals by case: (520 521 349 866 850 863 851 850 521 852)
Population mean number of perfect (error zero) cases: 7.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop integer_swap in4 integer_swap in3 exec_while (boolean_yankdup in1 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup print_integer boolean_eq integer_yank integer_div integer_yankdup) print_integer integer_yankdup integer_inc integer_div integer_flush) integer_add exec_flush)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 2.957
Median total errors in population: 3
Error averages by case: (0.48 0.479 0.651 0.134 0.15 0.137 0.149 0.15 0.479 0.148)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.969
Average program size in population (points): 43.532
Average percent parens in population: 0.229
Minimum age in population: 29.96199798583984
Maximum age in population: 32.26581954956055
Average age in population: 31.19026481246948
Median age in population: 31.26581954956055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 362
Genome diversity (% unique genomes):	 0.382
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 376
Syntactic diversity (% unique Push programs):	 0.37
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8077461
--- Timings ---
Current time: 1559314545093 milliseconds
Total Time:          59.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 73.6%
Fitness Testing:     10.1 seconds, 17.0%
Report:               5.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 221
Test mean error for best: 0.22100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -22                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 61                 
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 32                 
Correct output: 15                  | Program output: 26                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 21                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -32                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -1                 
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: 47                 
Correct output: -58                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -26                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: 13                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: 7                  
Correct output: -77                 | Program output: -26                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -53                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -9                 
Correct output: -80                 | Program output: 14                 
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -63                
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop exec_k (in2) (exec_dup (boolean_swap) boolean_yankdup in1 boolean_empty) in3 boolean_pop integer_min) (in1 integer_min) exec_s_when_autoconstructing () (integer_lt boolean_pop boolean_yankdup in1 integer_min) (integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and) ()) () ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s (exec_k (integer_gte exec_if (boolean_pop exec_k (in2) (exec_dup (boolean_swap) boolean_yankdup in1 boolean_empty) in3 boolean_pop integer_min) (in1 integer_min) exec_s_when_autoconstructing () (integer_lt boolean_pop boolean_yankdup in1 integer_min) (integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and) ()) () ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 229 870 643 854 229 853 869 908 902)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (905 229 870 643 854 229 853 869 908 902)
Population mean number of perfect (error zero) cases: 7.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Best program: (integer_flush exec_shove (exec_do*range (exec_while (boolean_not) integer_gt exec_s_when_autoconstructing (exec_k (integer_gte exec_if (boolean_pop exec_k (in2) (exec_dup (boolean_swap) boolean_yankdup in1 boolean_empty) in3 boolean_pop integer_min) (in1 integer_min) exec_s_when_autoconstructing () (integer_lt boolean_pop boolean_yankdup in1 integer_min) (integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and) ()) () ())))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 53
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 2.738
Median total errors in population: 2
Error averages by case: (0.095 0.771 0.13 0.357 0.146 0.771 0.147 0.131 0.092 0.098)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.335
Average program size in population (points): 41.334
Average percent parens in population: 0.206
Minimum age in population: 30.96199798583984
Maximum age in population: 34.26581954956055
Average age in population: 32.86235317707062
Median age in population: 32.93986415863037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 336
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 356
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8388997
--- Timings ---
Current time: 1559314547724 milliseconds
Total Time:          62.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.9 seconds, 73.8%
Fitness Testing:     10.4 seconds, 16.8%
Report:               5.8 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (819 681 895 819 682 651 682 384 681 651)
Population mean number of elite cases: 6.95
Count of perfect (error zero) individuals by case: (819 681 895 819 682 651 682 384 681 651)
Population mean number of perfect (error zero) cases: 6.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and})
Best program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 3.055
Median total errors in population: 2
Error averages by case: (0.181 0.319 0.105 0.181 0.318 0.349 0.318 0.616 0.319 0.349)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.776
Average program size in population (points): 46.062
Average percent parens in population: 0.254
Minimum age in population: 31.96199798583984
Maximum age in population: 35.85284185409546
Average age in population: 34.33247754859924
Median age in population: 34.43986415863037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.011
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8683924
--- Timings ---
Current time: 1559314550280 milliseconds
Total Time:          64.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.9 seconds, 74.0%
Fitness Testing:     10.7 seconds, 16.6%
Report:               6.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 22
Successful program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 35


Auto-simplifying with starting size: 35
step: 0
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 500
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 1000
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 1500
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 2000
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 2500
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 3000
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 3500
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 4000
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 4500
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

step: 5000
program: (boolean_invert_second_then_and exec_eq integer_empty print_newline boolean_not integer_gt exec_y_when_autoconstructing (integer_pop boolean_xor in4 integer_swap in3 exec_while (boolean_yankdup in2 integer_min) exec_s_when_autoconstructing () (integer_min) (integer_yankdup boolean_yankdup in1 integer_min) integer_yankdup print_integer integer_yankdup integer_yank integer_div) integer_add boolean_and)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 35

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -55                 | Program output: -55                
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: -67                 | Program output: -67                
Correct output: 76                  | Program output: 76                 
Correct output: 80                  | Program output: 80                 
Correct output: 76                  | Program output: 76                 
Correct output: 11                  | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: 47                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 32                  | Program output: 32                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 22                 
Correct output: 56                  | Program output: 56                 
Correct output: 64                  | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: -6                 
Correct output: -23                 | Program output: -23                
Correct output: -58                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -14                 | Program output: -14                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: 16                  | Program output: 16                 
Correct output: -9                  | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -87                 | Program output: -87                
Correct output: -15                 | Program output: -15                
Correct output: -65                 | Program output: -65                
Correct output: -77                 | Program output: -77                
Correct output: -18                 | Program output: -18                
Correct output: -89                 | Program output: -89                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: 31                  | Program output: 31                 
Correct output: -86                 | Program output: -86                
Correct output: -21                 | Program output: -21                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -10                 | Program output: -10                
Correct output: -80                 | Program output: -80                
Correct output: -42                 | Program output: -42                
Correct output: -60                 | Program output: -60                
Correct output: -85                 | Program output: -85                
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -100                | Program output: -100               
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -91                 | Program output: -91                
Correct output: -60                 | Program output: -60                
Correct output: -82                 | Program output: -82                
;;******************************
