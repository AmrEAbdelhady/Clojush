Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-92 -92 12 -92] -92] [[79 79 79 73] 73] [[1 -24 1 1] -24] [[-88 -88 -53 -88] -88] [[-69 -69 80 -69] -69] [[-15 -15 -18 -15] -18] [[58 58 45 58] 45] [[66 59 66 66] 59] [[-34 -34 41 -34] -34] [[29 29 29 -91] -91] [(16 16 16 16) 16] [(2 2 2 2) 2] [(9 9 9 9) 9] [(14 14 14 14) 14] [(-2 -2 -2 -2) -2] [(22 39 99 57) 22] [(99 14 35 30) 14] [(72 67 71 90) 67] [(45 97 35 78) 35] [(96 41 97 85) 41] [(51 78 73 70) 51] [(99 94 95 81) 81] [(54 16 28 100) 16] [(89 22 1 13) 1] [(40 93 22 15) 15] [(89 28 67 19) 19] [(50 94 30 47) 30] [(89 27 3 92) 3] [(37 57 68 59) 37] [(81 50 29 35) 29] [(74 58 21 42) 21] [(78 30 73 68) 30] [(98 8 68 98) 8] [(46 39 91 70) 39] [(76 38 27 0) 0] [(-8 -66 94 -67) -67] [(-27 -80 -63 91) -80] [(-82 -33 -93 -10) -93] [(-54 -42 -30 -92) -92] [(-67 43 78 -77) -77] [(-82 -33 -34 -91) -91] [(-65 63 -13 0) -65] [(53 -35 31 -71) -71] [(9 -80 -46 73) -80] [(-21 86 37 85) -21] [(-61 56 -3 -90) -90] [(-59 77 -73 71) -73] [(44 -1 -53 36) -53] [(52 -28 -63 -38) -63] [(-5 -23 -6 -41) -41] [(-38 -90 -93 -6) -93] [(78 -25 77 62) -25] [(-45 -68 -74 75) -74] [(-91 26 72 14) -91] [(100 80 -3 -82) -82] [(-94 15 -96 19) -96] [(100 59 63 -67) -67] [(-44 -43 45 -52) -52] [(91 -89 -100 -46) -100] [(98 5 -1 32) -1] [(-75 -8 48 -28) -75] [(-65 30 -5 55) -65] [(-63 40 97 35) -63] [(-5 43 -89 -77) -89] [(21 42 7 -53) -53] [(92 -28 97 80) -28] [(-8 -63 74 7) -63] [(37 58 25 13) 13] [(29 6 -19 -91) -91] [(12 -43 -12 25) -43] [(-29 94 -71 40) -71] [(-28 86 -73 -35) -73] [(28 -46 -66 -51) -66] [(-77 -86 89 -45) -86] [(-44 -90 -59 13) -90] [(46 15 22 45) 15] [(89 -39 28 -60) -60] [(22 -36 -63 94) -63] [(-92 -96 20 -21) -96] [(97 11 59 54) 11] [(-58 40 -12 2) -58] [(-25 23 -64 24) -64] [(31 63 73 11) 11] [(59 44 -28 -64) -64] [(96 98 -67 53) -67] [(69 20 -51 41) -51] [(82 -87 63 6) -87] [(-47 12 37 38) -47] [(-76 -14 -69 -19) -76] [(57 -80 -89 -94) -94] [(-5 87 71 -36) -36] [(-30 65 47 -53) -53] [(18 -37 -34 -70) -70] [(55 18 86 24) 18] [(96 98 -35 61) -35])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-92 -92 12 -92] -92]
Train Case:   6 | Input/Output: [[79 79 79 73] 73]
Train Case:   7 | Input/Output: [[1 -24 1 1] -24]
Train Case:   8 | Input/Output: [[-88 -88 -53 -88] -88]
Train Case:   9 | Input/Output: [[-69 -69 80 -69] -69]
Train Case:  10 | Input/Output: [[-15 -15 -18 -15] -18]
Train Case:  11 | Input/Output: [[58 58 45 58] 45]
Train Case:  12 | Input/Output: [[66 59 66 66] 59]
Train Case:  13 | Input/Output: [[-34 -34 41 -34] -34]
Train Case:  14 | Input/Output: [[29 29 29 -91] -91]
Train Case:  15 | Input/Output: [(16 16 16 16) 16]
Train Case:  16 | Input/Output: [(2 2 2 2) 2]
Train Case:  17 | Input/Output: [(9 9 9 9) 9]
Train Case:  18 | Input/Output: [(14 14 14 14) 14]
Train Case:  19 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  20 | Input/Output: [(22 39 99 57) 22]
Train Case:  21 | Input/Output: [(99 14 35 30) 14]
Train Case:  22 | Input/Output: [(72 67 71 90) 67]
Train Case:  23 | Input/Output: [(45 97 35 78) 35]
Train Case:  24 | Input/Output: [(96 41 97 85) 41]
Train Case:  25 | Input/Output: [(51 78 73 70) 51]
Train Case:  26 | Input/Output: [(99 94 95 81) 81]
Train Case:  27 | Input/Output: [(54 16 28 100) 16]
Train Case:  28 | Input/Output: [(89 22 1 13) 1]
Train Case:  29 | Input/Output: [(40 93 22 15) 15]
Train Case:  30 | Input/Output: [(89 28 67 19) 19]
Train Case:  31 | Input/Output: [(50 94 30 47) 30]
Train Case:  32 | Input/Output: [(89 27 3 92) 3]
Train Case:  33 | Input/Output: [(37 57 68 59) 37]
Train Case:  34 | Input/Output: [(81 50 29 35) 29]
Train Case:  35 | Input/Output: [(74 58 21 42) 21]
Train Case:  36 | Input/Output: [(78 30 73 68) 30]
Train Case:  37 | Input/Output: [(98 8 68 98) 8]
Train Case:  38 | Input/Output: [(46 39 91 70) 39]
Train Case:  39 | Input/Output: [(76 38 27 0) 0]
Train Case:  40 | Input/Output: [(-8 -66 94 -67) -67]
Train Case:  41 | Input/Output: [(-27 -80 -63 91) -80]
Train Case:  42 | Input/Output: [(-82 -33 -93 -10) -93]
Train Case:  43 | Input/Output: [(-54 -42 -30 -92) -92]
Train Case:  44 | Input/Output: [(-67 43 78 -77) -77]
Train Case:  45 | Input/Output: [(-82 -33 -34 -91) -91]
Train Case:  46 | Input/Output: [(-65 63 -13 0) -65]
Train Case:  47 | Input/Output: [(53 -35 31 -71) -71]
Train Case:  48 | Input/Output: [(9 -80 -46 73) -80]
Train Case:  49 | Input/Output: [(-21 86 37 85) -21]
Train Case:  50 | Input/Output: [(-61 56 -3 -90) -90]
Train Case:  51 | Input/Output: [(-59 77 -73 71) -73]
Train Case:  52 | Input/Output: [(44 -1 -53 36) -53]
Train Case:  53 | Input/Output: [(52 -28 -63 -38) -63]
Train Case:  54 | Input/Output: [(-5 -23 -6 -41) -41]
Train Case:  55 | Input/Output: [(-38 -90 -93 -6) -93]
Train Case:  56 | Input/Output: [(78 -25 77 62) -25]
Train Case:  57 | Input/Output: [(-45 -68 -74 75) -74]
Train Case:  58 | Input/Output: [(-91 26 72 14) -91]
Train Case:  59 | Input/Output: [(100 80 -3 -82) -82]
Train Case:  60 | Input/Output: [(-94 15 -96 19) -96]
Train Case:  61 | Input/Output: [(100 59 63 -67) -67]
Train Case:  62 | Input/Output: [(-44 -43 45 -52) -52]
Train Case:  63 | Input/Output: [(91 -89 -100 -46) -100]
Train Case:  64 | Input/Output: [(98 5 -1 32) -1]
Train Case:  65 | Input/Output: [(-75 -8 48 -28) -75]
Train Case:  66 | Input/Output: [(-65 30 -5 55) -65]
Train Case:  67 | Input/Output: [(-63 40 97 35) -63]
Train Case:  68 | Input/Output: [(-5 43 -89 -77) -89]
Train Case:  69 | Input/Output: [(21 42 7 -53) -53]
Train Case:  70 | Input/Output: [(92 -28 97 80) -28]
Train Case:  71 | Input/Output: [(-8 -63 74 7) -63]
Train Case:  72 | Input/Output: [(37 58 25 13) 13]
Train Case:  73 | Input/Output: [(29 6 -19 -91) -91]
Train Case:  74 | Input/Output: [(12 -43 -12 25) -43]
Train Case:  75 | Input/Output: [(-29 94 -71 40) -71]
Train Case:  76 | Input/Output: [(-28 86 -73 -35) -73]
Train Case:  77 | Input/Output: [(28 -46 -66 -51) -66]
Train Case:  78 | Input/Output: [(-77 -86 89 -45) -86]
Train Case:  79 | Input/Output: [(-44 -90 -59 13) -90]
Train Case:  80 | Input/Output: [(46 15 22 45) 15]
Train Case:  81 | Input/Output: [(89 -39 28 -60) -60]
Train Case:  82 | Input/Output: [(22 -36 -63 94) -63]
Train Case:  83 | Input/Output: [(-92 -96 20 -21) -96]
Train Case:  84 | Input/Output: [(97 11 59 54) 11]
Train Case:  85 | Input/Output: [(-58 40 -12 2) -58]
Train Case:  86 | Input/Output: [(-25 23 -64 24) -64]
Train Case:  87 | Input/Output: [(31 63 73 11) 11]
Train Case:  88 | Input/Output: [(59 44 -28 -64) -64]
Train Case:  89 | Input/Output: [(96 98 -67 53) -67]
Train Case:  90 | Input/Output: [(69 20 -51 41) -51]
Train Case:  91 | Input/Output: [(82 -87 63 6) -87]
Train Case:  92 | Input/Output: [(-47 12 37 38) -47]
Train Case:  93 | Input/Output: [(-76 -14 -69 -19) -76]
Train Case:  94 | Input/Output: [(57 -80 -89 -94) -94]
Train Case:  95 | Input/Output: [(-5 87 71 -36) -36]
Train Case:  96 | Input/Output: [(-30 65 47 -53) -53]
Train Case:  97 | Input/Output: [(18 -37 -34 -70) -70]
Train Case:  98 | Input/Output: [(55 18 86 24) 18]
Train Case:  99 | Input/Output: [(96 98 -35 61) -35]
Test Case:   0 | Input/Output: [[-53 85 -53 -53] -53]
Test Case:   1 | Input/Output: [[-98 -98 48 -98] -98]
Test Case:   2 | Input/Output: [[21 21 55 21] 21]
Test Case:   3 | Input/Output: [[-26 -26 -26 -26] -26]
Test Case:   4 | Input/Output: [[19 -70 -70 -70] -70]
Test Case:   5 | Input/Output: [[4 -48 -48 -48] -48]
Test Case:   6 | Input/Output: [[-8 -8 -8 100] -8]
Test Case:   7 | Input/Output: [[95 -29 -29 -29] -29]
Test Case:   8 | Input/Output: [[45 45 45 -14] -14]
Test Case:   9 | Input/Output: [[17 17 17 69] 17]
Test Case:  10 | Input/Output: [[-1 -1 -1 16] -1]
Test Case:  11 | Input/Output: [[-86 -86 -86 80] -86]
Test Case:  12 | Input/Output: [[18 34 34 34] 18]
Test Case:  13 | Input/Output: [[-88 -42 -88 -88] -88]
Test Case:  14 | Input/Output: [[-89 19 -89 -89] -89]
Test Case:  15 | Input/Output: [[96 53 96 96] 53]
Test Case:  16 | Input/Output: [[29 29 29 34] 29]
Test Case:  17 | Input/Output: [[-27 -46 -27 -27] -46]
Test Case:  18 | Input/Output: [[-44 14 14 14] -44]
Test Case:  19 | Input/Output: [[89 25 89 89] 25]
Test Case:  20 | Input/Output: [[16 16 61 16] 16]
Test Case:  21 | Input/Output: [[42 8 42 42] 8]
Test Case:  22 | Input/Output: [[6 64 64 64] 6]
Test Case:  23 | Input/Output: [[6 -11 -11 -11] -11]
Test Case:  24 | Input/Output: [[64 -2 -2 -2] -2]
Test Case:  25 | Input/Output: [[85 19 85 85] 19]
Test Case:  26 | Input/Output: [[-30 17 17 17] -30]
Test Case:  27 | Input/Output: [[-92 -92 68 -92] -92]
Test Case:  28 | Input/Output: [[-29 77 77 77] -29]
Test Case:  29 | Input/Output: [[-57 46 -57 -57] -57]
Test Case:  30 | Input/Output: [[-74 -74 -38 -74] -74]
Test Case:  31 | Input/Output: [[45 9 45 45] 9]
Test Case:  32 | Input/Output: [[-100 -99 -99 -99] -100]
Test Case:  33 | Input/Output: [[-89 -89 -10 -89] -89]
Test Case:  34 | Input/Output: [[-26 -95 -26 -26] -95]
Test Case:  35 | Input/Output: [[26 26 -60 26] -60]
Test Case:  36 | Input/Output: [[63 63 21 63] 21]
Test Case:  37 | Input/Output: [[20 5 20 20] 5]
Test Case:  38 | Input/Output: [[-68 -68 27 -68] -68]
Test Case:  39 | Input/Output: [[49 49 99 49] 49]
Test Case:  40 | Input/Output: [[44 44 -70 44] -70]
Test Case:  41 | Input/Output: [[-52 -52 -52 -25] -52]
Test Case:  42 | Input/Output: [[73 73 73 -67] -67]
Test Case:  43 | Input/Output: [[-65 -65 -65 -41] -65]
Test Case:  44 | Input/Output: [[55 55 -61 55] -61]
Test Case:  45 | Input/Output: [[68 68 -28 68] -28]
Test Case:  46 | Input/Output: [[-44 24 24 24] -44]
Test Case:  47 | Input/Output: [[-59 81 81 81] -59]
Test Case:  48 | Input/Output: [[39 -56 -56 -56] -56]
Test Case:  49 | Input/Output: [[70 57 70 70] 57]
Test Case:  50 | Input/Output: [[-22 -22 -22 -85] -85]
Test Case:  51 | Input/Output: [[-71 -35 -71 -71] -71]
Test Case:  52 | Input/Output: [[-76 -76 77 -76] -76]
Test Case:  53 | Input/Output: [[-3 -3 -79 -3] -79]
Test Case:  54 | Input/Output: [[52 52 86 52] 52]
Test Case:  55 | Input/Output: [[39 39 39 68] 39]
Test Case:  56 | Input/Output: [[34 41 34 34] 34]
Test Case:  57 | Input/Output: [[57 96 96 96] 57]
Test Case:  58 | Input/Output: [[-55 -55 -55 -74] -74]
Test Case:  59 | Input/Output: [[-25 -25 94 -25] -25]
Test Case:  60 | Input/Output: [[20 20 79 20] 20]
Test Case:  61 | Input/Output: [[29 29 29 -45] -45]
Test Case:  62 | Input/Output: [[35 35 -16 35] -16]
Test Case:  63 | Input/Output: [[-79 -3 -79 -79] -79]
Test Case:  64 | Input/Output: [[29 93 93 93] 29]
Test Case:  65 | Input/Output: [[-62 -62 -62 -69] -69]
Test Case:  66 | Input/Output: [[-91 -91 -28 -91] -91]
Test Case:  67 | Input/Output: [[30 30 -50 30] -50]
Test Case:  68 | Input/Output: [[-12 -51 -12 -12] -51]
Test Case:  69 | Input/Output: [[-54 49 49 49] -54]
Test Case:  70 | Input/Output: [[-53 -53 -38 -53] -53]
Test Case:  71 | Input/Output: [[97 97 97 60] 60]
Test Case:  72 | Input/Output: [[-76 72 72 72] -76]
Test Case:  73 | Input/Output: [[95 95 55 95] 55]
Test Case:  74 | Input/Output: [[-27 22 22 22] -27]
Test Case:  75 | Input/Output: [[-13 92 -13 -13] -13]
Test Case:  76 | Input/Output: [[16 16 16 -35] -35]
Test Case:  77 | Input/Output: [[94 94 94 -24] -24]
Test Case:  78 | Input/Output: [[67 -33 67 67] -33]
Test Case:  79 | Input/Output: [[-28 -28 84 -28] -28]
Test Case:  80 | Input/Output: [[-17 -23 -17 -17] -23]
Test Case:  81 | Input/Output: [[32 22 22 22] 22]
Test Case:  82 | Input/Output: [[-48 -19 -19 -19] -48]
Test Case:  83 | Input/Output: [[34 70 34 34] 34]
Test Case:  84 | Input/Output: [[3 56 56 56] 3]
Test Case:  85 | Input/Output: [[43 43 43 82] 43]
Test Case:  86 | Input/Output: [[16 -63 16 16] -63]
Test Case:  87 | Input/Output: [[-86 -86 -86 87] -86]
Test Case:  88 | Input/Output: [[14 14 14 14] 14]
Test Case:  89 | Input/Output: [[-71 -71 -58 -71] -71]
Test Case:  90 | Input/Output: [[74 10 74 74] 10]
Test Case:  91 | Input/Output: [[-4 36 36 36] -4]
Test Case:  92 | Input/Output: [[28 43 28 28] 28]
Test Case:  93 | Input/Output: [[-66 -66 -48 -66] -66]
Test Case:  94 | Input/Output: [[37 37 37 -23] -23]
Test Case:  95 | Input/Output: [[-22 -22 -22 99] -22]
Test Case:  96 | Input/Output: [[91 6 6 6] 6]
Test Case:  97 | Input/Output: [[82 82 82 72] 72]
Test Case:  98 | Input/Output: [[-72 -72 -46 -72] -72]
Test Case:  99 | Input/Output: [[73 -71 -71 -71] -71]
Test Case: 100 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 101 | Input/Output: [(77 77 77 77) 77]
Test Case: 102 | Input/Output: [(16 16 16 16) 16]
Test Case: 103 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 104 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 105 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 106 | Input/Output: [(16 16 16 16) 16]
Test Case: 107 | Input/Output: [(49 49 49 49) 49]
Test Case: 108 | Input/Output: [(57 57 57 57) 57]
Test Case: 109 | Input/Output: [(30 30 30 30) 30]
Test Case: 110 | Input/Output: [(89 89 89 89) 89]
Test Case: 111 | Input/Output: [(100 100 100 100) 100]
Test Case: 112 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 113 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 114 | Input/Output: [(100 100 100 100) 100]
Test Case: 115 | Input/Output: [(53 53 53 53) 53]
Test Case: 116 | Input/Output: [(9 9 9 9) 9]
Test Case: 117 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 118 | Input/Output: [(81 81 81 81) 81]
Test Case: 119 | Input/Output: [(52 52 52 52) 52]
Test Case: 120 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 121 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 122 | Input/Output: [(65 65 65 65) 65]
Test Case: 123 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 124 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 125 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 126 | Input/Output: [(56 56 56 56) 56]
Test Case: 127 | Input/Output: [(35 35 35 35) 35]
Test Case: 128 | Input/Output: [(17 17 17 17) 17]
Test Case: 129 | Input/Output: [(52 52 52 52) 52]
Test Case: 130 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 131 | Input/Output: [(26 26 26 26) 26]
Test Case: 132 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 133 | Input/Output: [(43 43 43 43) 43]
Test Case: 134 | Input/Output: [(9 9 9 9) 9]
Test Case: 135 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 136 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 137 | Input/Output: [(25 25 25 25) 25]
Test Case: 138 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 139 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 140 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 141 | Input/Output: [(11 11 11 11) 11]
Test Case: 142 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 143 | Input/Output: [(22 22 22 22) 22]
Test Case: 144 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 145 | Input/Output: [(77 77 77 77) 77]
Test Case: 146 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 147 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 148 | Input/Output: [(94 94 94 94) 94]
Test Case: 149 | Input/Output: [(11 11 11 11) 11]
Test Case: 150 | Input/Output: [(71 71 71 71) 71]
Test Case: 151 | Input/Output: [(89 89 89 89) 89]
Test Case: 152 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 153 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 154 | Input/Output: [(68 68 68 68) 68]
Test Case: 155 | Input/Output: [(61 61 61 61) 61]
Test Case: 156 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 157 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 158 | Input/Output: [(25 25 25 25) 25]
Test Case: 159 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 160 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 161 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 162 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 163 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 164 | Input/Output: [(84 84 84 84) 84]
Test Case: 165 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 166 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 167 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 168 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 169 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 170 | Input/Output: [(4 4 4 4) 4]
Test Case: 171 | Input/Output: [(15 15 15 15) 15]
Test Case: 172 | Input/Output: [(75 75 75 75) 75]
Test Case: 173 | Input/Output: [(64 64 64 64) 64]
Test Case: 174 | Input/Output: [(10 10 10 10) 10]
Test Case: 175 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 176 | Input/Output: [(14 14 14 14) 14]
Test Case: 177 | Input/Output: [(81 81 81 81) 81]
Test Case: 178 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 179 | Input/Output: [(53 53 53 53) 53]
Test Case: 180 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 181 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 182 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 183 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 184 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 185 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 186 | Input/Output: [(23 23 23 23) 23]
Test Case: 187 | Input/Output: [(96 96 96 96) 96]
Test Case: 188 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 189 | Input/Output: [(83 83 83 83) 83]
Test Case: 190 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 191 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 192 | Input/Output: [(86 86 86 86) 86]
Test Case: 193 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 194 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 195 | Input/Output: [(27 27 27 27) 27]
Test Case: 196 | Input/Output: [(96 96 96 96) 96]
Test Case: 197 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 198 | Input/Output: [(71 71 71 71) 71]
Test Case: 199 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 200 | Input/Output: [(29 80 17 11) 11]
Test Case: 201 | Input/Output: [(73 69 35 98) 35]
Test Case: 202 | Input/Output: [(51 17 90 14) 14]
Test Case: 203 | Input/Output: [(4 78 79 43) 4]
Test Case: 204 | Input/Output: [(67 2 13 20) 2]
Test Case: 205 | Input/Output: [(89 18 48 75) 18]
Test Case: 206 | Input/Output: [(59 97 60 89) 59]
Test Case: 207 | Input/Output: [(73 48 100 98) 48]
Test Case: 208 | Input/Output: [(45 54 5 66) 5]
Test Case: 209 | Input/Output: [(85 34 91 77) 34]
Test Case: 210 | Input/Output: [(76 7 47 17) 7]
Test Case: 211 | Input/Output: [(5 81 78 20) 5]
Test Case: 212 | Input/Output: [(2 58 85 34) 2]
Test Case: 213 | Input/Output: [(87 32 13 50) 13]
Test Case: 214 | Input/Output: [(0 64 2 81) 0]
Test Case: 215 | Input/Output: [(82 20 76 89) 20]
Test Case: 216 | Input/Output: [(61 71 49 76) 49]
Test Case: 217 | Input/Output: [(25 15 100 15) 15]
Test Case: 218 | Input/Output: [(5 80 7 62) 5]
Test Case: 219 | Input/Output: [(73 91 14 75) 14]
Test Case: 220 | Input/Output: [(88 13 44 9) 9]
Test Case: 221 | Input/Output: [(43 88 58 94) 43]
Test Case: 222 | Input/Output: [(78 55 84 18) 18]
Test Case: 223 | Input/Output: [(46 45 12 56) 12]
Test Case: 224 | Input/Output: [(19 5 58 66) 5]
Test Case: 225 | Input/Output: [(42 69 7 62) 7]
Test Case: 226 | Input/Output: [(51 48 2 48) 2]
Test Case: 227 | Input/Output: [(37 78 53 18) 18]
Test Case: 228 | Input/Output: [(47 25 57 30) 25]
Test Case: 229 | Input/Output: [(87 22 69 26) 22]
Test Case: 230 | Input/Output: [(71 39 56 28) 28]
Test Case: 231 | Input/Output: [(94 12 66 87) 12]
Test Case: 232 | Input/Output: [(92 45 33 75) 33]
Test Case: 233 | Input/Output: [(69 81 38 47) 38]
Test Case: 234 | Input/Output: [(11 89 39 62) 11]
Test Case: 235 | Input/Output: [(71 88 24 95) 24]
Test Case: 236 | Input/Output: [(77 39 47 89) 39]
Test Case: 237 | Input/Output: [(67 59 78 75) 59]
Test Case: 238 | Input/Output: [(88 51 37 27) 27]
Test Case: 239 | Input/Output: [(17 33 47 56) 17]
Test Case: 240 | Input/Output: [(45 38 34 79) 34]
Test Case: 241 | Input/Output: [(48 38 47 77) 38]
Test Case: 242 | Input/Output: [(62 32 14 52) 14]
Test Case: 243 | Input/Output: [(30 90 67 60) 30]
Test Case: 244 | Input/Output: [(0 6 20 51) 0]
Test Case: 245 | Input/Output: [(85 37 44 16) 16]
Test Case: 246 | Input/Output: [(65 60 62 66) 60]
Test Case: 247 | Input/Output: [(60 34 93 82) 34]
Test Case: 248 | Input/Output: [(42 32 28 87) 28]
Test Case: 249 | Input/Output: [(90 35 76 49) 35]
Test Case: 250 | Input/Output: [(70 24 73 53) 24]
Test Case: 251 | Input/Output: [(44 2 96 91) 2]
Test Case: 252 | Input/Output: [(40 25 14 40) 14]
Test Case: 253 | Input/Output: [(95 88 55 23) 23]
Test Case: 254 | Input/Output: [(30 42 0 10) 0]
Test Case: 255 | Input/Output: [(29 37 29 93) 29]
Test Case: 256 | Input/Output: [(6 28 89 20) 6]
Test Case: 257 | Input/Output: [(74 16 41 57) 16]
Test Case: 258 | Input/Output: [(78 100 81 2) 2]
Test Case: 259 | Input/Output: [(33 89 9 68) 9]
Test Case: 260 | Input/Output: [(89 89 24 24) 24]
Test Case: 261 | Input/Output: [(54 35 54 83) 35]
Test Case: 262 | Input/Output: [(76 53 0 59) 0]
Test Case: 263 | Input/Output: [(70 61 54 96) 54]
Test Case: 264 | Input/Output: [(32 70 98 0) 0]
Test Case: 265 | Input/Output: [(25 35 29 93) 25]
Test Case: 266 | Input/Output: [(76 1 66 89) 1]
Test Case: 267 | Input/Output: [(82 38 33 65) 33]
Test Case: 268 | Input/Output: [(41 92 50 70) 41]
Test Case: 269 | Input/Output: [(72 87 33 49) 33]
Test Case: 270 | Input/Output: [(5 61 80 4) 4]
Test Case: 271 | Input/Output: [(53 3 43 100) 3]
Test Case: 272 | Input/Output: [(93 24 29 4) 4]
Test Case: 273 | Input/Output: [(69 60 88 23) 23]
Test Case: 274 | Input/Output: [(53 68 95 61) 53]
Test Case: 275 | Input/Output: [(12 24 90 11) 11]
Test Case: 276 | Input/Output: [(27 83 50 79) 27]
Test Case: 277 | Input/Output: [(0 29 80 35) 0]
Test Case: 278 | Input/Output: [(82 61 17 86) 17]
Test Case: 279 | Input/Output: [(87 9 5 60) 5]
Test Case: 280 | Input/Output: [(100 71 26 93) 26]
Test Case: 281 | Input/Output: [(43 93 39 11) 11]
Test Case: 282 | Input/Output: [(64 11 80 94) 11]
Test Case: 283 | Input/Output: [(83 47 88 29) 29]
Test Case: 284 | Input/Output: [(75 36 60 68) 36]
Test Case: 285 | Input/Output: [(10 43 0 100) 0]
Test Case: 286 | Input/Output: [(66 95 87 68) 66]
Test Case: 287 | Input/Output: [(16 84 99 91) 16]
Test Case: 288 | Input/Output: [(60 98 91 51) 51]
Test Case: 289 | Input/Output: [(63 57 25 85) 25]
Test Case: 290 | Input/Output: [(50 67 1 29) 1]
Test Case: 291 | Input/Output: [(36 0 40 77) 0]
Test Case: 292 | Input/Output: [(8 60 30 32) 8]
Test Case: 293 | Input/Output: [(69 21 5 59) 5]
Test Case: 294 | Input/Output: [(87 83 100 20) 20]
Test Case: 295 | Input/Output: [(18 16 5 23) 5]
Test Case: 296 | Input/Output: [(93 81 48 82) 48]
Test Case: 297 | Input/Output: [(23 1 64 96) 1]
Test Case: 298 | Input/Output: [(39 10 48 36) 10]
Test Case: 299 | Input/Output: [(12 78 20 56) 12]
Test Case: 300 | Input/Output: [(20 92 37 90) 20]
Test Case: 301 | Input/Output: [(93 84 9 58) 9]
Test Case: 302 | Input/Output: [(63 73 36 32) 32]
Test Case: 303 | Input/Output: [(98 96 57 84) 57]
Test Case: 304 | Input/Output: [(30 77 90 26) 26]
Test Case: 305 | Input/Output: [(6 58 47 31) 6]
Test Case: 306 | Input/Output: [(97 20 41 9) 9]
Test Case: 307 | Input/Output: [(76 10 27 85) 10]
Test Case: 308 | Input/Output: [(39 12 27 86) 12]
Test Case: 309 | Input/Output: [(19 76 25 79) 19]
Test Case: 310 | Input/Output: [(32 49 99 41) 32]
Test Case: 311 | Input/Output: [(54 38 16 54) 16]
Test Case: 312 | Input/Output: [(95 39 86 62) 39]
Test Case: 313 | Input/Output: [(11 39 49 50) 11]
Test Case: 314 | Input/Output: [(59 93 96 93) 59]
Test Case: 315 | Input/Output: [(68 20 4 12) 4]
Test Case: 316 | Input/Output: [(66 63 80 33) 33]
Test Case: 317 | Input/Output: [(58 35 56 71) 35]
Test Case: 318 | Input/Output: [(88 38 5 7) 5]
Test Case: 319 | Input/Output: [(40 13 42 100) 13]
Test Case: 320 | Input/Output: [(28 92 0 10) 0]
Test Case: 321 | Input/Output: [(84 44 50 69) 44]
Test Case: 322 | Input/Output: [(62 60 65 11) 11]
Test Case: 323 | Input/Output: [(23 7 3 82) 3]
Test Case: 324 | Input/Output: [(32 75 89 25) 25]
Test Case: 325 | Input/Output: [(76 90 42 95) 42]
Test Case: 326 | Input/Output: [(11 19 37 30) 11]
Test Case: 327 | Input/Output: [(46 51 35 40) 35]
Test Case: 328 | Input/Output: [(70 12 26 0) 0]
Test Case: 329 | Input/Output: [(15 25 69 33) 15]
Test Case: 330 | Input/Output: [(71 74 45 54) 45]
Test Case: 331 | Input/Output: [(52 93 93 79) 52]
Test Case: 332 | Input/Output: [(78 7 27 51) 7]
Test Case: 333 | Input/Output: [(98 17 9 42) 9]
Test Case: 334 | Input/Output: [(36 31 41 87) 31]
Test Case: 335 | Input/Output: [(20 39 49 79) 20]
Test Case: 336 | Input/Output: [(0 51 18 87) 0]
Test Case: 337 | Input/Output: [(94 64 36 54) 36]
Test Case: 338 | Input/Output: [(65 65 39 90) 39]
Test Case: 339 | Input/Output: [(20 59 98 45) 20]
Test Case: 340 | Input/Output: [(61 79 74 73) 61]
Test Case: 341 | Input/Output: [(83 30 61 40) 30]
Test Case: 342 | Input/Output: [(7 94 1 91) 1]
Test Case: 343 | Input/Output: [(77 29 57 70) 29]
Test Case: 344 | Input/Output: [(80 49 84 7) 7]
Test Case: 345 | Input/Output: [(81 66 0 40) 0]
Test Case: 346 | Input/Output: [(38 77 5 10) 5]
Test Case: 347 | Input/Output: [(16 79 87 82) 16]
Test Case: 348 | Input/Output: [(74 36 59 23) 23]
Test Case: 349 | Input/Output: [(82 17 5 6) 5]
Test Case: 350 | Input/Output: [(27 18 9 50) 9]
Test Case: 351 | Input/Output: [(39 69 35 78) 35]
Test Case: 352 | Input/Output: [(72 43 7 14) 7]
Test Case: 353 | Input/Output: [(40 34 75 67) 34]
Test Case: 354 | Input/Output: [(5 44 74 44) 5]
Test Case: 355 | Input/Output: [(95 96 64 74) 64]
Test Case: 356 | Input/Output: [(84 62 89 17) 17]
Test Case: 357 | Input/Output: [(52 15 76 69) 15]
Test Case: 358 | Input/Output: [(68 75 70 53) 53]
Test Case: 359 | Input/Output: [(20 93 34 68) 20]
Test Case: 360 | Input/Output: [(93 48 88 37) 37]
Test Case: 361 | Input/Output: [(2 29 13 38) 2]
Test Case: 362 | Input/Output: [(81 32 54 9) 9]
Test Case: 363 | Input/Output: [(90 51 54 53) 51]
Test Case: 364 | Input/Output: [(59 48 75 42) 42]
Test Case: 365 | Input/Output: [(33 34 98 52) 33]
Test Case: 366 | Input/Output: [(56 3 73 57) 3]
Test Case: 367 | Input/Output: [(19 27 41 60) 19]
Test Case: 368 | Input/Output: [(44 8 0 19) 0]
Test Case: 369 | Input/Output: [(70 47 71 43) 43]
Test Case: 370 | Input/Output: [(17 8 71 91) 8]
Test Case: 371 | Input/Output: [(85 9 10 87) 9]
Test Case: 372 | Input/Output: [(23 2 12 49) 2]
Test Case: 373 | Input/Output: [(98 46 84 7) 7]
Test Case: 374 | Input/Output: [(91 40 10 9) 9]
Test Case: 375 | Input/Output: [(67 66 5 6) 5]
Test Case: 376 | Input/Output: [(1 92 72 9) 1]
Test Case: 377 | Input/Output: [(14 77 73 45) 14]
Test Case: 378 | Input/Output: [(34 33 29 60) 29]
Test Case: 379 | Input/Output: [(29 26 87 52) 26]
Test Case: 380 | Input/Output: [(87 37 30 78) 30]
Test Case: 381 | Input/Output: [(41 33 48 54) 33]
Test Case: 382 | Input/Output: [(81 1 46 39) 1]
Test Case: 383 | Input/Output: [(65 2 38 1) 1]
Test Case: 384 | Input/Output: [(63 55 76 74) 55]
Test Case: 385 | Input/Output: [(28 15 41 81) 15]
Test Case: 386 | Input/Output: [(53 64 45 2) 2]
Test Case: 387 | Input/Output: [(7 20 5 49) 5]
Test Case: 388 | Input/Output: [(59 35 6 72) 6]
Test Case: 389 | Input/Output: [(69 27 95 96) 27]
Test Case: 390 | Input/Output: [(66 19 57 12) 12]
Test Case: 391 | Input/Output: [(2 20 54 63) 2]
Test Case: 392 | Input/Output: [(19 69 60 99) 19]
Test Case: 393 | Input/Output: [(72 31 51 84) 31]
Test Case: 394 | Input/Output: [(17 15 24 88) 15]
Test Case: 395 | Input/Output: [(71 35 96 77) 35]
Test Case: 396 | Input/Output: [(14 16 15 48) 14]
Test Case: 397 | Input/Output: [(77 12 63 85) 12]
Test Case: 398 | Input/Output: [(96 6 47 72) 6]
Test Case: 399 | Input/Output: [(32 32 51 39) 32]
Test Case: 400 | Input/Output: [(99 17 100 18) 17]
Test Case: 401 | Input/Output: [(77 52 51 -4) -4]
Test Case: 402 | Input/Output: [(-47 -33 27 -4) -47]
Test Case: 403 | Input/Output: [(-31 9 32 -10) -31]
Test Case: 404 | Input/Output: [(49 14 -11 16) -11]
Test Case: 405 | Input/Output: [(-59 90 66 84) -59]
Test Case: 406 | Input/Output: [(-66 -53 -82 -38) -82]
Test Case: 407 | Input/Output: [(-75 22 40 48) -75]
Test Case: 408 | Input/Output: [(81 -31 79 -43) -43]
Test Case: 409 | Input/Output: [(36 49 -35 -67) -67]
Test Case: 410 | Input/Output: [(-35 18 -49 -7) -49]
Test Case: 411 | Input/Output: [(-31 -26 20 -92) -92]
Test Case: 412 | Input/Output: [(17 -82 70 34) -82]
Test Case: 413 | Input/Output: [(71 12 23 -5) -5]
Test Case: 414 | Input/Output: [(-67 -53 -56 56) -67]
Test Case: 415 | Input/Output: [(39 -99 62 -6) -99]
Test Case: 416 | Input/Output: [(-80 -45 95 100) -80]
Test Case: 417 | Input/Output: [(-79 93 -63 -53) -79]
Test Case: 418 | Input/Output: [(83 -98 99 -92) -98]
Test Case: 419 | Input/Output: [(-24 2 -51 95) -51]
Test Case: 420 | Input/Output: [(-80 16 -48 -44) -80]
Test Case: 421 | Input/Output: [(34 -21 -62 -47) -62]
Test Case: 422 | Input/Output: [(42 99 -98 67) -98]
Test Case: 423 | Input/Output: [(44 -87 -95 84) -95]
Test Case: 424 | Input/Output: [(28 6 81 -85) -85]
Test Case: 425 | Input/Output: [(25 77 -61 -55) -61]
Test Case: 426 | Input/Output: [(32 -11 29 -58) -58]
Test Case: 427 | Input/Output: [(52 -62 3 -61) -62]
Test Case: 428 | Input/Output: [(67 -29 -24 35) -29]
Test Case: 429 | Input/Output: [(90 -99 14 -54) -99]
Test Case: 430 | Input/Output: [(0 -36 -71 -21) -71]
Test Case: 431 | Input/Output: [(11 69 -33 79) -33]
Test Case: 432 | Input/Output: [(-81 -88 36 98) -88]
Test Case: 433 | Input/Output: [(-34 -88 -78 -32) -88]
Test Case: 434 | Input/Output: [(-52 90 -98 16) -98]
Test Case: 435 | Input/Output: [(95 16 -67 89) -67]
Test Case: 436 | Input/Output: [(-74 99 -35 62) -74]
Test Case: 437 | Input/Output: [(100 -66 -43 59) -66]
Test Case: 438 | Input/Output: [(-57 -86 42 10) -86]
Test Case: 439 | Input/Output: [(-80 -23 -78 21) -80]
Test Case: 440 | Input/Output: [(-37 -82 -21 -70) -82]
Test Case: 441 | Input/Output: [(82 -5 -99 -62) -99]
Test Case: 442 | Input/Output: [(88 5 81 22) 5]
Test Case: 443 | Input/Output: [(23 34 -23 -15) -23]
Test Case: 444 | Input/Output: [(15 92 -16 -92) -92]
Test Case: 445 | Input/Output: [(33 -99 -79 -44) -99]
Test Case: 446 | Input/Output: [(53 -31 45 70) -31]
Test Case: 447 | Input/Output: [(15 45 -12 -44) -44]
Test Case: 448 | Input/Output: [(-8 -33 -89 25) -89]
Test Case: 449 | Input/Output: [(28 89 -71 -24) -71]
Test Case: 450 | Input/Output: [(-34 -22 -75 -74) -75]
Test Case: 451 | Input/Output: [(-5 -54 49 -72) -72]
Test Case: 452 | Input/Output: [(48 -45 21 70) -45]
Test Case: 453 | Input/Output: [(63 96 -65 -62) -65]
Test Case: 454 | Input/Output: [(-7 11 -99 -97) -99]
Test Case: 455 | Input/Output: [(-1 -70 85 62) -70]
Test Case: 456 | Input/Output: [(-29 -48 -85 66) -85]
Test Case: 457 | Input/Output: [(78 -35 -28 -56) -56]
Test Case: 458 | Input/Output: [(-30 -76 -62 26) -76]
Test Case: 459 | Input/Output: [(61 78 -16 38) -16]
Test Case: 460 | Input/Output: [(-83 -61 -10 4) -83]
Test Case: 461 | Input/Output: [(-96 61 -85 -54) -96]
Test Case: 462 | Input/Output: [(-26 -90 52 -67) -90]
Test Case: 463 | Input/Output: [(28 90 39 -32) -32]
Test Case: 464 | Input/Output: [(-61 -16 13 72) -61]
Test Case: 465 | Input/Output: [(-97 -33 35 -20) -97]
Test Case: 466 | Input/Output: [(-3 74 17 -21) -21]
Test Case: 467 | Input/Output: [(-36 81 -3 49) -36]
Test Case: 468 | Input/Output: [(-62 -68 61 94) -68]
Test Case: 469 | Input/Output: [(-26 41 71 -93) -93]
Test Case: 470 | Input/Output: [(-20 -83 89 54) -83]
Test Case: 471 | Input/Output: [(-91 -59 -10 31) -91]
Test Case: 472 | Input/Output: [(50 -5 -21 -97) -97]
Test Case: 473 | Input/Output: [(32 99 -11 78) -11]
Test Case: 474 | Input/Output: [(-84 83 -71 96) -84]
Test Case: 475 | Input/Output: [(-69 46 -50 -52) -69]
Test Case: 476 | Input/Output: [(-51 70 18 39) -51]
Test Case: 477 | Input/Output: [(93 79 -37 81) -37]
Test Case: 478 | Input/Output: [(-84 -76 65 64) -84]
Test Case: 479 | Input/Output: [(23 80 -57 40) -57]
Test Case: 480 | Input/Output: [(-72 -87 -64 -84) -87]
Test Case: 481 | Input/Output: [(38 97 81 21) 21]
Test Case: 482 | Input/Output: [(79 92 14 -16) -16]
Test Case: 483 | Input/Output: [(39 -57 23 87) -57]
Test Case: 484 | Input/Output: [(-100 28 28 -72) -100]
Test Case: 485 | Input/Output: [(35 -100 42 -76) -100]
Test Case: 486 | Input/Output: [(3 82 13 44) 3]
Test Case: 487 | Input/Output: [(-9 20 25 -82) -82]
Test Case: 488 | Input/Output: [(41 5 21 76) 5]
Test Case: 489 | Input/Output: [(33 5 77 -22) -22]
Test Case: 490 | Input/Output: [(-33 -60 -8 41) -60]
Test Case: 491 | Input/Output: [(90 -28 3 -50) -50]
Test Case: 492 | Input/Output: [(47 44 16 -36) -36]
Test Case: 493 | Input/Output: [(-10 -76 -87 17) -87]
Test Case: 494 | Input/Output: [(28 11 -71 -10) -71]
Test Case: 495 | Input/Output: [(-94 82 59 45) -94]
Test Case: 496 | Input/Output: [(25 -80 -99 39) -99]
Test Case: 497 | Input/Output: [(79 77 -3 67) -3]
Test Case: 498 | Input/Output: [(-20 -38 57 22) -38]
Test Case: 499 | Input/Output: [(-26 9 -99 22) -99]
Test Case: 500 | Input/Output: [(-90 84 31 -3) -90]
Test Case: 501 | Input/Output: [(-43 -49 93 26) -49]
Test Case: 502 | Input/Output: [(42 44 -1 41) -1]
Test Case: 503 | Input/Output: [(11 16 -95 -85) -95]
Test Case: 504 | Input/Output: [(83 22 16 -59) -59]
Test Case: 505 | Input/Output: [(49 61 60 -45) -45]
Test Case: 506 | Input/Output: [(-73 42 -21 74) -73]
Test Case: 507 | Input/Output: [(-1 48 75 65) -1]
Test Case: 508 | Input/Output: [(71 -57 21 -70) -70]
Test Case: 509 | Input/Output: [(-15 18 43 64) -15]
Test Case: 510 | Input/Output: [(1 69 -19 87) -19]
Test Case: 511 | Input/Output: [(14 61 17 -38) -38]
Test Case: 512 | Input/Output: [(100 92 -75 7) -75]
Test Case: 513 | Input/Output: [(-76 -75 -23 -94) -94]
Test Case: 514 | Input/Output: [(-87 86 22 -3) -87]
Test Case: 515 | Input/Output: [(-4 -48 20 -72) -72]
Test Case: 516 | Input/Output: [(97 -91 63 33) -91]
Test Case: 517 | Input/Output: [(-11 -1 42 -43) -43]
Test Case: 518 | Input/Output: [(49 77 0 -60) -60]
Test Case: 519 | Input/Output: [(-37 -15 -3 -7) -37]
Test Case: 520 | Input/Output: [(-55 -65 -65 7) -65]
Test Case: 521 | Input/Output: [(8 29 70 47) 8]
Test Case: 522 | Input/Output: [(-80 -52 83 80) -80]
Test Case: 523 | Input/Output: [(74 89 73 41) 41]
Test Case: 524 | Input/Output: [(44 33 54 -38) -38]
Test Case: 525 | Input/Output: [(-70 17 18 49) -70]
Test Case: 526 | Input/Output: [(28 -69 -58 24) -69]
Test Case: 527 | Input/Output: [(-74 -55 -76 -92) -92]
Test Case: 528 | Input/Output: [(-61 -88 55 78) -88]
Test Case: 529 | Input/Output: [(10 -50 18 -62) -62]
Test Case: 530 | Input/Output: [(6 69 -86 89) -86]
Test Case: 531 | Input/Output: [(-78 -30 42 64) -78]
Test Case: 532 | Input/Output: [(-62 95 -25 -51) -62]
Test Case: 533 | Input/Output: [(85 -9 -85 31) -85]
Test Case: 534 | Input/Output: [(57 -25 37 -28) -28]
Test Case: 535 | Input/Output: [(10 -13 -56 36) -56]
Test Case: 536 | Input/Output: [(-88 31 -53 77) -88]
Test Case: 537 | Input/Output: [(15 13 -84 49) -84]
Test Case: 538 | Input/Output: [(-100 50 25 -34) -100]
Test Case: 539 | Input/Output: [(-53 70 97 -5) -53]
Test Case: 540 | Input/Output: [(59 -64 -72 61) -72]
Test Case: 541 | Input/Output: [(-49 -9 -35 -99) -99]
Test Case: 542 | Input/Output: [(-58 -78 61 -55) -78]
Test Case: 543 | Input/Output: [(-17 -64 4 1) -64]
Test Case: 544 | Input/Output: [(70 -92 13 27) -92]
Test Case: 545 | Input/Output: [(-55 -98 -32 28) -98]
Test Case: 546 | Input/Output: [(-24 18 -34 69) -34]
Test Case: 547 | Input/Output: [(53 -61 -89 12) -89]
Test Case: 548 | Input/Output: [(52 20 39 34) 20]
Test Case: 549 | Input/Output: [(-91 89 30 -58) -91]
Test Case: 550 | Input/Output: [(56 -11 35 -82) -82]
Test Case: 551 | Input/Output: [(51 80 -69 2) -69]
Test Case: 552 | Input/Output: [(-7 -54 -1 -25) -54]
Test Case: 553 | Input/Output: [(-82 -21 -49 2) -82]
Test Case: 554 | Input/Output: [(33 -36 -14 47) -36]
Test Case: 555 | Input/Output: [(-10 -51 65 15) -51]
Test Case: 556 | Input/Output: [(9 57 -92 37) -92]
Test Case: 557 | Input/Output: [(57 -63 -68 -84) -84]
Test Case: 558 | Input/Output: [(99 -68 -26 30) -68]
Test Case: 559 | Input/Output: [(95 95 50 -33) -33]
Test Case: 560 | Input/Output: [(-30 66 2 -57) -57]
Test Case: 561 | Input/Output: [(44 -30 -52 -93) -93]
Test Case: 562 | Input/Output: [(10 67 -90 -22) -90]
Test Case: 563 | Input/Output: [(80 -100 62 93) -100]
Test Case: 564 | Input/Output: [(-19 69 57 -43) -43]
Test Case: 565 | Input/Output: [(39 43 -79 25) -79]
Test Case: 566 | Input/Output: [(-16 -95 26 -99) -99]
Test Case: 567 | Input/Output: [(22 27 31 -18) -18]
Test Case: 568 | Input/Output: [(-70 34 59 -21) -70]
Test Case: 569 | Input/Output: [(72 -31 -94 59) -94]
Test Case: 570 | Input/Output: [(-96 -60 -76 -99) -99]
Test Case: 571 | Input/Output: [(-83 34 82 67) -83]
Test Case: 572 | Input/Output: [(17 -88 15 -93) -93]
Test Case: 573 | Input/Output: [(55 7 -35 -59) -59]
Test Case: 574 | Input/Output: [(93 31 51 -75) -75]
Test Case: 575 | Input/Output: [(-23 -69 43 13) -69]
Test Case: 576 | Input/Output: [(-15 -56 13 -64) -64]
Test Case: 577 | Input/Output: [(-19 84 24 -2) -19]
Test Case: 578 | Input/Output: [(-87 7 -34 9) -87]
Test Case: 579 | Input/Output: [(61 51 -97 -74) -97]
Test Case: 580 | Input/Output: [(-41 -13 93 -55) -55]
Test Case: 581 | Input/Output: [(-85 -51 -80 -91) -91]
Test Case: 582 | Input/Output: [(-69 96 96 -32) -69]
Test Case: 583 | Input/Output: [(-18 -7 97 -31) -31]
Test Case: 584 | Input/Output: [(-88 47 -33 49) -88]
Test Case: 585 | Input/Output: [(-70 -92 -93 20) -93]
Test Case: 586 | Input/Output: [(-7 75 67 -54) -54]
Test Case: 587 | Input/Output: [(64 -45 -53 12) -53]
Test Case: 588 | Input/Output: [(11 -24 12 17) -24]
Test Case: 589 | Input/Output: [(2 83 -94 8) -94]
Test Case: 590 | Input/Output: [(-11 -10 51 -57) -57]
Test Case: 591 | Input/Output: [(11 53 17 -35) -35]
Test Case: 592 | Input/Output: [(11 82 19 3) 3]
Test Case: 593 | Input/Output: [(-92 -29 68 65) -92]
Test Case: 594 | Input/Output: [(-59 -86 16 6) -86]
Test Case: 595 | Input/Output: [(-4 8 -34 -37) -37]
Test Case: 596 | Input/Output: [(-72 -42 -66 37) -72]
Test Case: 597 | Input/Output: [(-63 -69 -22 -2) -69]
Test Case: 598 | Input/Output: [(-40 -62 39 -100) -100]
Test Case: 599 | Input/Output: [(62 -83 -38 70) -83]
Test Case: 600 | Input/Output: [(-47 77 54 -79) -79]
Test Case: 601 | Input/Output: [(38 -62 4 85) -62]
Test Case: 602 | Input/Output: [(-97 55 40 93) -97]
Test Case: 603 | Input/Output: [(85 8 -64 81) -64]
Test Case: 604 | Input/Output: [(80 -25 83 -94) -94]
Test Case: 605 | Input/Output: [(-7 94 -11 -56) -56]
Test Case: 606 | Input/Output: [(91 100 -84 -84) -84]
Test Case: 607 | Input/Output: [(45 -27 -93 86) -93]
Test Case: 608 | Input/Output: [(44 43 -50 -36) -50]
Test Case: 609 | Input/Output: [(-26 -31 -56 69) -56]
Test Case: 610 | Input/Output: [(42 -93 -90 -3) -93]
Test Case: 611 | Input/Output: [(-86 -58 -19 -31) -86]
Test Case: 612 | Input/Output: [(-23 28 -89 -60) -89]
Test Case: 613 | Input/Output: [(95 52 -6 42) -6]
Test Case: 614 | Input/Output: [(82 -46 -48 86) -48]
Test Case: 615 | Input/Output: [(10 17 -73 34) -73]
Test Case: 616 | Input/Output: [(40 -75 -9 -98) -98]
Test Case: 617 | Input/Output: [(60 -22 -4 97) -22]
Test Case: 618 | Input/Output: [(17 57 -100 -45) -100]
Test Case: 619 | Input/Output: [(-90 5 12 10) -90]
Test Case: 620 | Input/Output: [(-57 85 -42 25) -57]
Test Case: 621 | Input/Output: [(-4 95 76 37) -4]
Test Case: 622 | Input/Output: [(75 -24 88 -23) -24]
Test Case: 623 | Input/Output: [(25 95 96 57) 25]
Test Case: 624 | Input/Output: [(-20 8 4 20) -20]
Test Case: 625 | Input/Output: [(-27 78 -2 65) -27]
Test Case: 626 | Input/Output: [(-57 75 -14 69) -57]
Test Case: 627 | Input/Output: [(-40 55 -18 16) -40]
Test Case: 628 | Input/Output: [(30 -84 93 55) -84]
Test Case: 629 | Input/Output: [(-81 -36 63 -2) -81]
Test Case: 630 | Input/Output: [(63 27 87 98) 27]
Test Case: 631 | Input/Output: [(-7 41 -21 92) -21]
Test Case: 632 | Input/Output: [(14 -72 44 56) -72]
Test Case: 633 | Input/Output: [(-71 75 -49 -22) -71]
Test Case: 634 | Input/Output: [(76 4 -71 39) -71]
Test Case: 635 | Input/Output: [(4 73 68 -31) -31]
Test Case: 636 | Input/Output: [(64 19 64 20) 19]
Test Case: 637 | Input/Output: [(15 -57 7 -87) -87]
Test Case: 638 | Input/Output: [(41 -45 73 -66) -66]
Test Case: 639 | Input/Output: [(-10 -22 -81 -22) -81]
Test Case: 640 | Input/Output: [(-45 59 91 91) -45]
Test Case: 641 | Input/Output: [(-92 40 40 100) -92]
Test Case: 642 | Input/Output: [(-68 -86 69 -89) -89]
Test Case: 643 | Input/Output: [(85 35 -70 -45) -70]
Test Case: 644 | Input/Output: [(94 -98 -94 65) -98]
Test Case: 645 | Input/Output: [(-100 77 -78 -79) -100]
Test Case: 646 | Input/Output: [(36 26 16 -32) -32]
Test Case: 647 | Input/Output: [(14 10 -19 53) -19]
Test Case: 648 | Input/Output: [(-41 -25 89 -100) -100]
Test Case: 649 | Input/Output: [(-30 -70 -99 -23) -99]
Test Case: 650 | Input/Output: [(61 -22 26 -73) -73]
Test Case: 651 | Input/Output: [(-26 59 -17 -65) -65]
Test Case: 652 | Input/Output: [(-81 89 -67 19) -81]
Test Case: 653 | Input/Output: [(-67 -33 -15 -42) -67]
Test Case: 654 | Input/Output: [(9 77 71 -31) -31]
Test Case: 655 | Input/Output: [(48 1 -35 -81) -81]
Test Case: 656 | Input/Output: [(-100 62 85 14) -100]
Test Case: 657 | Input/Output: [(10 31 -71 64) -71]
Test Case: 658 | Input/Output: [(72 -20 25 33) -20]
Test Case: 659 | Input/Output: [(-30 -56 -40 39) -56]
Test Case: 660 | Input/Output: [(-28 9 -89 65) -89]
Test Case: 661 | Input/Output: [(-5 67 73 77) -5]
Test Case: 662 | Input/Output: [(-32 -53 -8 -51) -53]
Test Case: 663 | Input/Output: [(-57 53 -25 -99) -99]
Test Case: 664 | Input/Output: [(-85 21 -22 -6) -85]
Test Case: 665 | Input/Output: [(80 -76 -74 54) -76]
Test Case: 666 | Input/Output: [(-86 70 41 84) -86]
Test Case: 667 | Input/Output: [(91 15 -11 -94) -94]
Test Case: 668 | Input/Output: [(-47 29 -50 -9) -50]
Test Case: 669 | Input/Output: [(39 45 -43 -86) -86]
Test Case: 670 | Input/Output: [(32 96 48 -37) -37]
Test Case: 671 | Input/Output: [(-94 -80 72 -56) -94]
Test Case: 672 | Input/Output: [(-56 -93 -26 -47) -93]
Test Case: 673 | Input/Output: [(3 32 -22 21) -22]
Test Case: 674 | Input/Output: [(28 90 78 -6) -6]
Test Case: 675 | Input/Output: [(48 -87 -63 73) -87]
Test Case: 676 | Input/Output: [(6 -31 -79 -18) -79]
Test Case: 677 | Input/Output: [(-16 33 -77 58) -77]
Test Case: 678 | Input/Output: [(-94 -37 -59 88) -94]
Test Case: 679 | Input/Output: [(68 -84 100 6) -84]
Test Case: 680 | Input/Output: [(82 58 -52 7) -52]
Test Case: 681 | Input/Output: [(43 93 -59 93) -59]
Test Case: 682 | Input/Output: [(46 -72 47 -58) -72]
Test Case: 683 | Input/Output: [(-15 -1 0 42) -15]
Test Case: 684 | Input/Output: [(-69 68 -3 11) -69]
Test Case: 685 | Input/Output: [(-59 80 43 2) -59]
Test Case: 686 | Input/Output: [(-54 51 81 20) -54]
Test Case: 687 | Input/Output: [(-87 18 -7 63) -87]
Test Case: 688 | Input/Output: [(19 89 -92 -8) -92]
Test Case: 689 | Input/Output: [(-91 -31 -1 29) -91]
Test Case: 690 | Input/Output: [(7 -12 -39 9) -39]
Test Case: 691 | Input/Output: [(80 -95 -97 -43) -97]
Test Case: 692 | Input/Output: [(-8 92 63 -100) -100]
Test Case: 693 | Input/Output: [(-17 -40 -22 2) -40]
Test Case: 694 | Input/Output: [(-42 57 48 -4) -42]
Test Case: 695 | Input/Output: [(91 -6 -59 44) -59]
Test Case: 696 | Input/Output: [(-70 -68 35 38) -70]
Test Case: 697 | Input/Output: [(-50 -10 -45 16) -50]
Test Case: 698 | Input/Output: [(-50 62 -93 38) -93]
Test Case: 699 | Input/Output: [(53 -9 -34 -46) -46]
Test Case: 700 | Input/Output: [(45 -77 -13 -40) -77]
Test Case: 701 | Input/Output: [(-12 39 46 0) -12]
Test Case: 702 | Input/Output: [(29 -65 60 -57) -65]
Test Case: 703 | Input/Output: [(84 -59 -14 10) -59]
Test Case: 704 | Input/Output: [(-43 69 38 96) -43]
Test Case: 705 | Input/Output: [(55 39 47 55) 39]
Test Case: 706 | Input/Output: [(-74 -49 81 48) -74]
Test Case: 707 | Input/Output: [(-100 43 -70 100) -100]
Test Case: 708 | Input/Output: [(-9 91 -20 8) -20]
Test Case: 709 | Input/Output: [(38 -98 48 -25) -98]
Test Case: 710 | Input/Output: [(52 10 5 64) 5]
Test Case: 711 | Input/Output: [(56 -83 -74 47) -83]
Test Case: 712 | Input/Output: [(-48 -95 -84 22) -95]
Test Case: 713 | Input/Output: [(75 -70 40 53) -70]
Test Case: 714 | Input/Output: [(-23 -78 -91 -92) -92]
Test Case: 715 | Input/Output: [(39 2 91 41) 2]
Test Case: 716 | Input/Output: [(-8 -77 47 84) -77]
Test Case: 717 | Input/Output: [(100 -22 -19 -67) -67]
Test Case: 718 | Input/Output: [(76 29 -69 39) -69]
Test Case: 719 | Input/Output: [(5 77 5 98) 5]
Test Case: 720 | Input/Output: [(-30 -10 88 23) -30]
Test Case: 721 | Input/Output: [(-66 -43 -74 40) -74]
Test Case: 722 | Input/Output: [(-51 -99 -49 82) -99]
Test Case: 723 | Input/Output: [(-76 -72 -82 -16) -82]
Test Case: 724 | Input/Output: [(-35 48 -67 -3) -67]
Test Case: 725 | Input/Output: [(-68 56 70 20) -68]
Test Case: 726 | Input/Output: [(-57 73 60 -71) -71]
Test Case: 727 | Input/Output: [(62 -19 40 70) -19]
Test Case: 728 | Input/Output: [(90 50 -10 15) -10]
Test Case: 729 | Input/Output: [(-59 9 -71 -1) -71]
Test Case: 730 | Input/Output: [(-12 -4 -87 -91) -91]
Test Case: 731 | Input/Output: [(4 76 30 39) 4]
Test Case: 732 | Input/Output: [(17 35 1 11) 1]
Test Case: 733 | Input/Output: [(-3 -76 93 -79) -79]
Test Case: 734 | Input/Output: [(37 -12 33 -26) -26]
Test Case: 735 | Input/Output: [(-58 -21 21 -47) -58]
Test Case: 736 | Input/Output: [(-21 36 -94 7) -94]
Test Case: 737 | Input/Output: [(33 -90 42 58) -90]
Test Case: 738 | Input/Output: [(16 91 89 -95) -95]
Test Case: 739 | Input/Output: [(-30 -62 -58 -38) -62]
Test Case: 740 | Input/Output: [(22 80 99 -34) -34]
Test Case: 741 | Input/Output: [(-14 3 -56 98) -56]
Test Case: 742 | Input/Output: [(62 95 -76 76) -76]
Test Case: 743 | Input/Output: [(-14 46 66 -82) -82]
Test Case: 744 | Input/Output: [(5 -7 -53 81) -53]
Test Case: 745 | Input/Output: [(-18 -6 -77 14) -77]
Test Case: 746 | Input/Output: [(-97 3 50 84) -97]
Test Case: 747 | Input/Output: [(-57 16 45 -24) -57]
Test Case: 748 | Input/Output: [(-37 52 59 -78) -78]
Test Case: 749 | Input/Output: [(31 -77 -94 -61) -94]
Test Case: 750 | Input/Output: [(2 -66 -27 54) -66]
Test Case: 751 | Input/Output: [(-29 81 -32 -5) -32]
Test Case: 752 | Input/Output: [(5 47 37 -84) -84]
Test Case: 753 | Input/Output: [(-44 -29 -14 -33) -44]
Test Case: 754 | Input/Output: [(41 -87 85 -23) -87]
Test Case: 755 | Input/Output: [(-26 3 20 -77) -77]
Test Case: 756 | Input/Output: [(92 -16 25 -60) -60]
Test Case: 757 | Input/Output: [(47 -69 -81 75) -81]
Test Case: 758 | Input/Output: [(-47 53 92 76) -47]
Test Case: 759 | Input/Output: [(-6 -72 48 18) -72]
Test Case: 760 | Input/Output: [(-34 37 -56 94) -56]
Test Case: 761 | Input/Output: [(-51 55 42 -5) -51]
Test Case: 762 | Input/Output: [(10 -6 -72 3) -72]
Test Case: 763 | Input/Output: [(40 24 -21 73) -21]
Test Case: 764 | Input/Output: [(-96 98 -82 45) -96]
Test Case: 765 | Input/Output: [(-97 -15 46 55) -97]
Test Case: 766 | Input/Output: [(48 -66 -8 19) -66]
Test Case: 767 | Input/Output: [(-48 92 -63 14) -63]
Test Case: 768 | Input/Output: [(-37 -54 -84 4) -84]
Test Case: 769 | Input/Output: [(-25 44 13 -68) -68]
Test Case: 770 | Input/Output: [(95 -63 54 -83) -83]
Test Case: 771 | Input/Output: [(-90 93 -69 -51) -90]
Test Case: 772 | Input/Output: [(49 -5 57 48) -5]
Test Case: 773 | Input/Output: [(-23 -100 37 -28) -100]
Test Case: 774 | Input/Output: [(-61 77 28 -62) -62]
Test Case: 775 | Input/Output: [(-36 99 -40 -7) -40]
Test Case: 776 | Input/Output: [(-77 -73 -41 13) -77]
Test Case: 777 | Input/Output: [(52 14 87 86) 14]
Test Case: 778 | Input/Output: [(93 -100 -9 -11) -100]
Test Case: 779 | Input/Output: [(59 -3 -11 73) -11]
Test Case: 780 | Input/Output: [(-69 54 12 67) -69]
Test Case: 781 | Input/Output: [(2 64 20 -8) -8]
Test Case: 782 | Input/Output: [(56 -27 -6 -9) -27]
Test Case: 783 | Input/Output: [(-85 36 -60 -48) -85]
Test Case: 784 | Input/Output: [(-85 -89 -41 59) -89]
Test Case: 785 | Input/Output: [(77 -68 -46 -65) -68]
Test Case: 786 | Input/Output: [(9 83 89 57) 9]
Test Case: 787 | Input/Output: [(94 45 44 -8) -8]
Test Case: 788 | Input/Output: [(69 -27 -14 100) -27]
Test Case: 789 | Input/Output: [(36 52 -10 -23) -23]
Test Case: 790 | Input/Output: [(-80 -82 -15 97) -82]
Test Case: 791 | Input/Output: [(-43 -77 -73 67) -77]
Test Case: 792 | Input/Output: [(-95 65 65 50) -95]
Test Case: 793 | Input/Output: [(76 -95 98 47) -95]
Test Case: 794 | Input/Output: [(43 3 13 -3) -3]
Test Case: 795 | Input/Output: [(-10 -18 0 -13) -18]
Test Case: 796 | Input/Output: [(14 -5 12 14) -5]
Test Case: 797 | Input/Output: [(78 -49 -88 93) -88]
Test Case: 798 | Input/Output: [(69 61 41 -2) -2]
Test Case: 799 | Input/Output: [(95 42 -70 81) -70]
Test Case: 800 | Input/Output: [(41 6 -18 23) -18]
Test Case: 801 | Input/Output: [(72 81 -51 64) -51]
Test Case: 802 | Input/Output: [(14 -32 55 4) -32]
Test Case: 803 | Input/Output: [(-27 70 34 -58) -58]
Test Case: 804 | Input/Output: [(43 93 -18 76) -18]
Test Case: 805 | Input/Output: [(34 59 -93 -66) -93]
Test Case: 806 | Input/Output: [(-41 -54 18 48) -54]
Test Case: 807 | Input/Output: [(3 -77 63 42) -77]
Test Case: 808 | Input/Output: [(64 5 82 -37) -37]
Test Case: 809 | Input/Output: [(-27 -26 -69 22) -69]
Test Case: 810 | Input/Output: [(87 -95 69 89) -95]
Test Case: 811 | Input/Output: [(92 -59 5 62) -59]
Test Case: 812 | Input/Output: [(97 3 -87 -23) -87]
Test Case: 813 | Input/Output: [(-64 1 -55 0) -64]
Test Case: 814 | Input/Output: [(62 47 -36 -14) -36]
Test Case: 815 | Input/Output: [(-39 63 -63 -46) -63]
Test Case: 816 | Input/Output: [(-82 -17 -62 40) -82]
Test Case: 817 | Input/Output: [(40 -20 -22 -8) -22]
Test Case: 818 | Input/Output: [(30 -60 -53 -24) -60]
Test Case: 819 | Input/Output: [(-37 27 11 18) -37]
Test Case: 820 | Input/Output: [(76 69 -25 21) -25]
Test Case: 821 | Input/Output: [(46 -38 -5 -8) -38]
Test Case: 822 | Input/Output: [(-70 -54 -77 18) -77]
Test Case: 823 | Input/Output: [(14 -64 36 -46) -64]
Test Case: 824 | Input/Output: [(-11 16 33 80) -11]
Test Case: 825 | Input/Output: [(-66 44 34 49) -66]
Test Case: 826 | Input/Output: [(39 81 80 14) 14]
Test Case: 827 | Input/Output: [(-22 -2 -36 -52) -52]
Test Case: 828 | Input/Output: [(-71 -6 -74 36) -74]
Test Case: 829 | Input/Output: [(42 -66 40 -79) -79]
Test Case: 830 | Input/Output: [(-29 75 22 -13) -29]
Test Case: 831 | Input/Output: [(-63 68 47 94) -63]
Test Case: 832 | Input/Output: [(-95 -18 23 2) -95]
Test Case: 833 | Input/Output: [(46 -28 -68 -68) -68]
Test Case: 834 | Input/Output: [(-61 -12 33 55) -61]
Test Case: 835 | Input/Output: [(5 -68 -74 -58) -74]
Test Case: 836 | Input/Output: [(-94 42 18 -25) -94]
Test Case: 837 | Input/Output: [(27 -94 61 -77) -94]
Test Case: 838 | Input/Output: [(52 52 -36 51) -36]
Test Case: 839 | Input/Output: [(-75 -30 -64 77) -75]
Test Case: 840 | Input/Output: [(-33 67 4 16) -33]
Test Case: 841 | Input/Output: [(-61 -21 -55 -55) -61]
Test Case: 842 | Input/Output: [(14 -73 68 18) -73]
Test Case: 843 | Input/Output: [(7 22 44 69) 7]
Test Case: 844 | Input/Output: [(0 18 35 69) 0]
Test Case: 845 | Input/Output: [(98 91 -28 -17) -28]
Test Case: 846 | Input/Output: [(69 -53 -34 -57) -57]
Test Case: 847 | Input/Output: [(-22 87 -37 -7) -37]
Test Case: 848 | Input/Output: [(96 -53 26 -80) -80]
Test Case: 849 | Input/Output: [(75 43 76 -81) -81]
Test Case: 850 | Input/Output: [(14 -70 36 84) -70]
Test Case: 851 | Input/Output: [(-75 -4 -34 -89) -89]
Test Case: 852 | Input/Output: [(-88 -3 -77 10) -88]
Test Case: 853 | Input/Output: [(27 3 -70 60) -70]
Test Case: 854 | Input/Output: [(-62 34 34 86) -62]
Test Case: 855 | Input/Output: [(-100 -82 26 -52) -100]
Test Case: 856 | Input/Output: [(-85 -85 -37 -39) -85]
Test Case: 857 | Input/Output: [(62 -55 47 16) -55]
Test Case: 858 | Input/Output: [(-96 42 2 -31) -96]
Test Case: 859 | Input/Output: [(-97 82 -18 -25) -97]
Test Case: 860 | Input/Output: [(97 -85 -17 -79) -85]
Test Case: 861 | Input/Output: [(59 7 -74 49) -74]
Test Case: 862 | Input/Output: [(76 85 88 40) 40]
Test Case: 863 | Input/Output: [(85 55 -29 -32) -32]
Test Case: 864 | Input/Output: [(18 69 29 -22) -22]
Test Case: 865 | Input/Output: [(-9 16 18 -13) -13]
Test Case: 866 | Input/Output: [(-51 75 -61 -55) -61]
Test Case: 867 | Input/Output: [(39 21 55 93) 21]
Test Case: 868 | Input/Output: [(-51 66 -93 -33) -93]
Test Case: 869 | Input/Output: [(-28 -75 42 -90) -90]
Test Case: 870 | Input/Output: [(-60 -38 -89 89) -89]
Test Case: 871 | Input/Output: [(38 47 -24 -17) -24]
Test Case: 872 | Input/Output: [(14 -52 52 -65) -65]
Test Case: 873 | Input/Output: [(-3 39 -39 -80) -80]
Test Case: 874 | Input/Output: [(-38 -13 5 -67) -67]
Test Case: 875 | Input/Output: [(9 4 45 39) 4]
Test Case: 876 | Input/Output: [(3 26 -1 6) -1]
Test Case: 877 | Input/Output: [(10 52 22 -14) -14]
Test Case: 878 | Input/Output: [(-78 57 57 47) -78]
Test Case: 879 | Input/Output: [(43 -47 -9 -75) -75]
Test Case: 880 | Input/Output: [(41 4 -78 -59) -78]
Test Case: 881 | Input/Output: [(58 -46 85 56) -46]
Test Case: 882 | Input/Output: [(90 18 86 68) 18]
Test Case: 883 | Input/Output: [(-2 -74 -58 -99) -99]
Test Case: 884 | Input/Output: [(-25 -69 -24 81) -69]
Test Case: 885 | Input/Output: [(-85 -43 14 99) -85]
Test Case: 886 | Input/Output: [(-58 -16 39 59) -58]
Test Case: 887 | Input/Output: [(-48 100 49 -5) -48]
Test Case: 888 | Input/Output: [(-73 6 -27 57) -73]
Test Case: 889 | Input/Output: [(7 -33 30 -14) -33]
Test Case: 890 | Input/Output: [(69 -79 -91 -10) -91]
Test Case: 891 | Input/Output: [(18 11 5 -83) -83]
Test Case: 892 | Input/Output: [(-29 82 -43 60) -43]
Test Case: 893 | Input/Output: [(53 87 68 -87) -87]
Test Case: 894 | Input/Output: [(13 -11 -5 65) -11]
Test Case: 895 | Input/Output: [(10 -56 -29 51) -56]
Test Case: 896 | Input/Output: [(-79 -100 62 -73) -100]
Test Case: 897 | Input/Output: [(-29 -94 -71 -32) -94]
Test Case: 898 | Input/Output: [(-79 78 2 99) -79]
Test Case: 899 | Input/Output: [(-28 -57 85 45) -57]
Test Case: 900 | Input/Output: [(3 -71 21 -46) -71]
Test Case: 901 | Input/Output: [(90 81 64 9) 9]
Test Case: 902 | Input/Output: [(-24 -74 -77 4) -77]
Test Case: 903 | Input/Output: [(-44 85 72 38) -44]
Test Case: 904 | Input/Output: [(-75 14 -2 40) -75]
Test Case: 905 | Input/Output: [(-59 -70 93 32) -70]
Test Case: 906 | Input/Output: [(42 -75 90 -90) -90]
Test Case: 907 | Input/Output: [(50 25 -48 -30) -48]
Test Case: 908 | Input/Output: [(12 66 -24 -81) -81]
Test Case: 909 | Input/Output: [(32 -45 2 -99) -99]
Test Case: 910 | Input/Output: [(35 1 -34 -12) -34]
Test Case: 911 | Input/Output: [(-57 -39 5 -46) -57]
Test Case: 912 | Input/Output: [(-98 -65 -14 89) -98]
Test Case: 913 | Input/Output: [(63 -74 57 97) -74]
Test Case: 914 | Input/Output: [(81 -12 -61 45) -61]
Test Case: 915 | Input/Output: [(-40 36 9 -22) -40]
Test Case: 916 | Input/Output: [(8 -55 -14 -85) -85]
Test Case: 917 | Input/Output: [(43 13 -57 -26) -57]
Test Case: 918 | Input/Output: [(-48 -48 88 53) -48]
Test Case: 919 | Input/Output: [(25 82 45 100) 25]
Test Case: 920 | Input/Output: [(25 -73 24 58) -73]
Test Case: 921 | Input/Output: [(61 83 -26 32) -26]
Test Case: 922 | Input/Output: [(29 58 24 45) 24]
Test Case: 923 | Input/Output: [(91 37 -3 8) -3]
Test Case: 924 | Input/Output: [(14 -42 -97 -81) -97]
Test Case: 925 | Input/Output: [(-68 -21 28 36) -68]
Test Case: 926 | Input/Output: [(-2 99 46 27) -2]
Test Case: 927 | Input/Output: [(-82 64 83 37) -82]
Test Case: 928 | Input/Output: [(-18 -38 81 -68) -68]
Test Case: 929 | Input/Output: [(-29 52 59 -61) -61]
Test Case: 930 | Input/Output: [(-17 41 5 -29) -29]
Test Case: 931 | Input/Output: [(59 73 -46 52) -46]
Test Case: 932 | Input/Output: [(18 13 45 43) 13]
Test Case: 933 | Input/Output: [(-77 49 -68 -75) -77]
Test Case: 934 | Input/Output: [(9 -90 -51 26) -90]
Test Case: 935 | Input/Output: [(7 33 -70 -91) -91]
Test Case: 936 | Input/Output: [(-92 -1 -91 -25) -92]
Test Case: 937 | Input/Output: [(-41 -90 2 -70) -90]
Test Case: 938 | Input/Output: [(-9 58 -96 -27) -96]
Test Case: 939 | Input/Output: [(-45 -71 -86 -86) -86]
Test Case: 940 | Input/Output: [(-64 70 -72 25) -72]
Test Case: 941 | Input/Output: [(-38 -18 51 39) -38]
Test Case: 942 | Input/Output: [(57 11 -61 90) -61]
Test Case: 943 | Input/Output: [(28 -77 -16 -58) -77]
Test Case: 944 | Input/Output: [(-58 -36 -51 -6) -58]
Test Case: 945 | Input/Output: [(63 -83 94 69) -83]
Test Case: 946 | Input/Output: [(-5 -27 -13 -1) -27]
Test Case: 947 | Input/Output: [(5 37 -76 -63) -76]
Test Case: 948 | Input/Output: [(-100 66 -34 73) -100]
Test Case: 949 | Input/Output: [(52 -68 7 -16) -68]
Test Case: 950 | Input/Output: [(0 63 28 -1) -1]
Test Case: 951 | Input/Output: [(39 27 44 74) 27]
Test Case: 952 | Input/Output: [(77 14 -39 72) -39]
Test Case: 953 | Input/Output: [(-88 66 75 -56) -88]
Test Case: 954 | Input/Output: [(-39 74 -51 -56) -56]
Test Case: 955 | Input/Output: [(75 25 19 87) 19]
Test Case: 956 | Input/Output: [(23 68 -38 85) -38]
Test Case: 957 | Input/Output: [(27 77 -20 -53) -53]
Test Case: 958 | Input/Output: [(-97 60 -66 62) -97]
Test Case: 959 | Input/Output: [(-76 -70 89 42) -76]
Test Case: 960 | Input/Output: [(31 -44 -99 61) -99]
Test Case: 961 | Input/Output: [(-22 59 -76 -54) -76]
Test Case: 962 | Input/Output: [(1 83 47 -91) -91]
Test Case: 963 | Input/Output: [(50 -81 69 -11) -81]
Test Case: 964 | Input/Output: [(43 49 11 -55) -55]
Test Case: 965 | Input/Output: [(46 8 14 -51) -51]
Test Case: 966 | Input/Output: [(85 86 -37 -68) -68]
Test Case: 967 | Input/Output: [(-24 23 -23 -18) -24]
Test Case: 968 | Input/Output: [(89 -6 -75 44) -75]
Test Case: 969 | Input/Output: [(12 20 79 45) 12]
Test Case: 970 | Input/Output: [(-84 -27 43 -77) -84]
Test Case: 971 | Input/Output: [(52 89 79 -93) -93]
Test Case: 972 | Input/Output: [(-89 -40 80 3) -89]
Test Case: 973 | Input/Output: [(-47 -27 -8 40) -47]
Test Case: 974 | Input/Output: [(100 -75 -26 -76) -76]
Test Case: 975 | Input/Output: [(77 -23 -98 23) -98]
Test Case: 976 | Input/Output: [(-70 -73 75 -62) -73]
Test Case: 977 | Input/Output: [(-39 81 -5 23) -39]
Test Case: 978 | Input/Output: [(96 37 9 -54) -54]
Test Case: 979 | Input/Output: [(-86 11 55 90) -86]
Test Case: 980 | Input/Output: [(-66 71 80 61) -66]
Test Case: 981 | Input/Output: [(14 40 20 2) 2]
Test Case: 982 | Input/Output: [(-27 92 -81 94) -81]
Test Case: 983 | Input/Output: [(-86 -11 -97 56) -97]
Test Case: 984 | Input/Output: [(-84 51 -29 -19) -84]
Test Case: 985 | Input/Output: [(-75 80 1 -7) -75]
Test Case: 986 | Input/Output: [(11 -55 -49 84) -55]
Test Case: 987 | Input/Output: [(-9 85 -46 -84) -84]
Test Case: 988 | Input/Output: [(4 -94 78 -68) -94]
Test Case: 989 | Input/Output: [(46 -75 -2 -46) -75]
Test Case: 990 | Input/Output: [(76 -83 24 -21) -83]
Test Case: 991 | Input/Output: [(0 -51 -79 -45) -79]
Test Case: 992 | Input/Output: [(53 -88 97 -96) -96]
Test Case: 993 | Input/Output: [(56 86 -3 43) -3]
Test Case: 994 | Input/Output: [(-3 -27 88 -29) -29]
Test Case: 995 | Input/Output: [(62 92 72 -98) -98]
Test Case: 996 | Input/Output: [(-55 31 -38 -16) -55]
Test Case: 997 | Input/Output: [(-30 99 -7 36) -30]
Test Case: 998 | Input/Output: [(-9 47 34 -4) -9]
Test Case: 999 | Input/Output: [(0 -39 -38 48) -39]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 43 -27 -68 101 -122 84 -11 49 -41 50 22 -124 -128 5 69 -122
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-92 -92 12 -92] -92] [[79 79 79 73] 73] [[1 -24 1 1] -24] [[-88 -88 -53 -88] -88] [[-69 -69 80 -69] -69] [[-15 -15 -18 -15] -18] [[58 58 45 58] 45] [[66 59 66 66] 59] [[-34 -34 41 -34] -34] [[29 29 29 -91] -91] [(16 16 16 16) 16] [(2 2 2 2) 2] [(9 9 9 9) 9] [(14 14 14 14) 14] [(-2 -2 -2 -2) -2] [(22 39 99 57) 22] [(99 14 35 30) 14] [(72 67 71 90) 67] [(45 97 35 78) 35] [(96 41 97 85) 41] [(51 78 73 70) 51] [(99 94 95 81) 81] [(54 16 28 100) 16] [(89 22 1 13) 1] [(40 93 22 15) 15] [(89 28 67 19) 19] [(50 94 30 47) 30] [(89 27 3 92) 3] [(37 57 68 59) 37] [(81 50 29 35) 29] [(74 58 21 42) 21] [(78 30 73 68) 30] [(98 8 68 98) 8] [(46 39 91 70) 39] [(76 38 27 0) 0] [(-8 -66 94 -67) -67] [(-27 -80 -63 91) -80] [(-82 -33 -93 -10) -93] [(-54 -42 -30 -92) -92] [(-67 43 78 -77) -77] [(-82 -33 -34 -91) -91] [(-65 63 -13 0) -65] [(53 -35 31 -71) -71] [(9 -80 -46 73) -80] [(-21 86 37 85) -21] [(-61 56 -3 -90) -90] [(-59 77 -73 71) -73] [(44 -1 -53 36) -53] [(52 -28 -63 -38) -63] [(-5 -23 -6 -41) -41] [(-38 -90 -93 -6) -93] [(78 -25 77 62) -25] [(-45 -68 -74 75) -74] [(-91 26 72 14) -91] [(100 80 -3 -82) -82] [(-94 15 -96 19) -96] [(100 59 63 -67) -67] [(-44 -43 45 -52) -52] [(91 -89 -100 -46) -100] [(98 5 -1 32) -1] [(-75 -8 48 -28) -75] [(-65 30 -5 55) -65] [(-63 40 97 35) -63] [(-5 43 -89 -77) -89] [(21 42 7 -53) -53] [(92 -28 97 80) -28] [(-8 -63 74 7) -63] [(37 58 25 13) 13] [(29 6 -19 -91) -91] [(12 -43 -12 25) -43] [(-29 94 -71 40) -71] [(-28 86 -73 -35) -73] [(28 -46 -66 -51) -66] [(-77 -86 89 -45) -86] [(-44 -90 -59 13) -90] [(46 15 22 45) 15] [(89 -39 28 -60) -60] [(22 -36 -63 94) -63] [(-92 -96 20 -21) -96] [(97 11 59 54) 11] [(-58 40 -12 2) -58] [(-25 23 -64 24) -64] [(31 63 73 11) 11] [(59 44 -28 -64) -64] [(96 98 -67 53) -67] [(69 20 -51 41) -51] [(82 -87 63 6) -87] [(-47 12 37 38) -47] [(-76 -14 -69 -19) -76] [(57 -80 -89 -94) -94] [(-5 87 71 -36) -36] [(-30 65 47 -53) -53] [(18 -37 -34 -70) -70] [(55 18 86 24) 18] [(96 98 -35 61) -35])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 78                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 70                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 47                 
Correct output: 3                   | Program output: 27                 
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 35                 
Correct output: 21                  | Program output: 42                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: 85                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: 71                 
Correct output: -53                 | Program output: -1                 
Correct output: -63                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -91                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 15                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -89                
Correct output: -1                  | Program output: 5                  
Correct output: -75                 | Program output: -28                
Correct output: -65                 | Program output: 30                 
Correct output: -63                 | Program output: 35                 
Correct output: -89                 | Program output: -77                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 40                 
Correct output: -73                 | Program output: -35                
Correct output: -66                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -36                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: 2                  
Correct output: -64                 | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: 53                 
Correct output: -51                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 12                 
Correct output: -76                 | Program output: -19                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Lexicase best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not integer_gte exec_empty in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt integer_swap boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()))))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 128
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Zero cases best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not integer_gte exec_empty in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt integer_swap boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()))))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 128
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 12 1000 1000 1000 5 6 1000 6 6)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (0 12 0 0 0 5 6 0 6 6)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not integer_gte exec_empty in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt integer_swap boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()))))
Errors: [1 0 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 99
Size: 128
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (1.0 0.988 1.0 1.0 1.0 0.995 0.994 1.0 0.994 0.994)
Error minima by case: (1 0 1 1 1 0 0 1 0 0)
Average genome size in population (length): 49.945
Average program size in population (points): 68.88
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477574
--- Timings ---
Current time: 1559314308336 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 30.1%
Fitness Testing:      1.7 seconds, 66.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 45                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 57                 
Correct output: 14                  | Program output: 30                 
Correct output: 67                  | Program output: 71                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 85                 
Correct output: 51                  | Program output: 70                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 59                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 68                 
Correct output: 8                   | Program output: 68                 
Correct output: 39                  | Program output: 70                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -46                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: 62                 
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -28                
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 80                 
Correct output: -63                 | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -45                
Correct output: -90                 | Program output: -59                
Correct output: 15                  | Program output: 22                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -21                
Correct output: 11                  | Program output: 54                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: 6                  
Correct output: -47                 | Program output: 37                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 24                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Lexicase best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 128
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Zero cases best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 128
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 1 905 1 904 1 874 17 1 1)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (899 1 905 1 904 1 874 17 1 1)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 99
Size: 128
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.396
Median total errors in population: 6
Error averages by case: (0.101 0.999 0.095 0.999 0.096 0.999 0.126 0.983 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 98.873
Average program size in population (points): 127.877
Average percent parens in population: 0.227
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.508
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 240
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1258636
--- Timings ---
Current time: 1559314311909 milliseconds
Total Time:           6.2 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.6 seconds, 42.1%
Fitness Testing:      2.8 seconds, 45.4%
Report:               0.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 66                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 30                 
Correct output: 67                  | Program output: 72                 
Correct output: 35                  | Program output: 45                 
Correct output: 41                  | Program output: 85                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 54                 
Correct output: 1                   | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 47                 
Correct output: 3                   | Program output: 89                 
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 35                 
Correct output: 21                  | Program output: 42                 
Correct output: 30                  | Program output: 68                 
Correct output: 8                   | Program output: 98                 
Correct output: 39                  | Program output: 46                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -27                
Correct output: -93                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: 9                  
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -59                
Correct output: -53                 | Program output: 36                 
Correct output: -63                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -38                
Correct output: -25                 | Program output: 62                 
Correct output: -74                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -46                
Correct output: -1                  | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -77                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 80                 
Correct output: -63                 | Program output: -8                 
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: 12                 
Correct output: -71                 | Program output: -29                
Correct output: -73                 | Program output: -35                
Correct output: -66                 | Program output: -51                
Correct output: -86                 | Program output: -77                
Correct output: -90                 | Program output: -44                
Correct output: 15                  | Program output: 45                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 22                 
Correct output: -96                 | Program output: -92                
Correct output: 11                  | Program output: 54                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -25                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: 53                 
Correct output: -51                 | Program output: 41                 
Correct output: -87                 | Program output: 6                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 24                 
Correct output: -35                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Lexicase best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_dup_times boolean_shove in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt integer_swap boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_div integer_fromboolean)) (boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()) ()))))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 138
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Zero cases best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_dup_times boolean_shove in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt integer_swap boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_div integer_fromboolean)) (boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()) ()))))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 138
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (744 139 879 136 871 887 734 140 5 907)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (744 139 879 136 871 887 734 140 5 907)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 integer_stackdepth integer_inc) exec_k (in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap exec_empty in4 integer_min print_integer exec_do*count (exec_if (integer_dup_items integer_lt integer_swap boolean_invert_second_then_and integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and boolean_frominteger exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (integer_gte exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () integer_add))))) ()) ()))))
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 93
Size: 122
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 4.558
Median total errors in population: 4
Error averages by case: (0.256 0.861 0.121 0.864 0.129 0.113 0.266 0.86 0.995 0.093)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 98.815
Average program size in population (points): 127.921
Average percent parens in population: 0.227
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.6745
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2082951
--- Timings ---
Current time: 1559314315328 milliseconds
Total Time:           9.7 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.4 seconds, 45.8%
Fitness Testing:      3.8 seconds, 39.4%
Report:               1.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 47                 
Correct output: 3                   | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 35                 
Correct output: 21                  | Program output: 42                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -59                
Correct output: -53                 | Program output: -1                 
Correct output: -63                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -89                
Correct output: -1                  | Program output: 5                  
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -77                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -29                
Correct output: -73                 | Program output: -35                
Correct output: -66                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -36                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -25                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: 53                 
Correct output: -51                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Lexicase best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth exec_k (integer_dec in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 132
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Zero cases best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth exec_k (integer_dec in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 132
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 675 159 383 125 676 159 160 471 382)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (673 675 159 383 125 676 159 160 471 382)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth exec_k (integer_dec in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ())))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 103
Size: 132
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.137
Median total errors in population: 6
Error averages by case: (0.327 0.325 0.841 0.617 0.875 0.324 0.841 0.84 0.529 0.618)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 99.304
Average program size in population (points): 128.633
Average percent parens in population: 0.228
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.3845
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2909170
--- Timings ---
Current time: 1559314318921 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.5 seconds, 48.8%
Fitness Testing:      4.7 seconds, 35.7%
Report:               2.0 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -15                
Correct output: 45                  | Program output: 58                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 13                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 47                 
Correct output: 3                   | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 35                 
Correct output: 21                  | Program output: 42                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -59                
Correct output: -53                 | Program output: -1                 
Correct output: -63                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -89                
Correct output: -1                  | Program output: 5                  
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -77                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -29                
Correct output: -73                 | Program output: -35                
Correct output: -66                 | Program output: -51                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -36                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -25                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: 53                 
Correct output: -51                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: 61                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when})
Lexicase best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth exec_k (integer_dec in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean boolean_frominteger exec_noop) (exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when ())))) ()) ())) ()))))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 142
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when})
Zero cases best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth exec_k (integer_dec in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and integer_mod exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean boolean_frominteger exec_noop) (exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when ())))) ()) ())) ()))))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 142
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 792 897 629 595 896 596 858 662 629)
Population mean number of elite cases: 6.94
Count of perfect (error zero) individuals by case: (382 792 897 629 595 896 596 858 662 629)
Population mean number of perfect (error zero) cases: 6.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth exec_k (integer_dec in1 tagged_825) (integer_max tag_boolean_31 integer_yankdup exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod boolean_or) (exec_dup_times (boolean_and boolean_pop exec_empty boolean_invert_second_then_and exec_dup (in4 tagged_924 in2 integer_pop integer_div integer_fromboolean)) boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ())))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 103
Size: 132
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 3.064
Median total errors in population: 2
Error averages by case: (0.618 0.208 0.103 0.371 0.405 0.104 0.404 0.142 0.338 0.371)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 102.831
Average program size in population (points): 132.261
Average percent parens in population: 0.222
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 6.30625
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3732979
--- Timings ---
Current time: 1559314322540 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.5 seconds, 50.6%
Fitness Testing:      5.6 seconds, 33.3%
Report:               2.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 217
Test mean error for best: 0.21700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 45                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 70                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -28                
Correct output: -65                 | Program output: -5                 
Correct output: -63                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: 12                 
Correct output: -76                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Lexicase best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 128
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Zero cases best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 128
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (351 358 452 354 719 355 351 628 719 627)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (351 358 452 354 719 355 351 628 719 627)
Population mean number of perfect (error zero) cases: 4.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 101
Size: 128
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.086
Median total errors in population: 5
Error averages by case: (0.649 0.642 0.548 0.646 0.281 0.645 0.649 0.372 0.281 0.373)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 102.237
Average program size in population (points): 131.401
Average percent parens in population: 0.222
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.82125
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4586242
--- Timings ---
Current time: 1559314326284 milliseconds
Total Time:          20.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.6 seconds, 51.7%
Fitness Testing:      6.5 seconds, 31.8%
Report:               3.3 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 45                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Lexicase best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_and in3 exec_empty boolean_invert_second_then_and integer_min boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 125
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Zero cases best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_and in3 exec_empty boolean_invert_second_then_and integer_min boolean_not in2 exec_empty in4 integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 125
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (771 287 296 626 833 850 771 639 641 770)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (771 287 296 626 833 850 771 639 641 770)
Population mean number of perfect (error zero) cases: 6.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction tagged_825} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_31} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_120} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_293} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_924} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_924} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_exec_84} {:close 0, :instruction -32} {:close 0, :instruction exec_y} {:close 1, :instruction exec_swap} {:close 0, :instruction 79} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_add})
Best program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 113
Size: 144
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 3.516
Median total errors in population: 2
Error averages by case: (0.229 0.713 0.704 0.374 0.167 0.15 0.229 0.361 0.359 0.23)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 102.146
Average program size in population (points): 130.365
Average percent parens in population: 0.216
Minimum age in population: 7.78125
Maximum age in population: 10.65625
Average age in population: 8.93478125
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5631909
--- Timings ---
Current time: 1559314330057 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.6 seconds, 51.9%
Fitness Testing:      7.5 seconds, 30.9%
Report:               4.1 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 144


Auto-simplifying with starting size: 144
step: 0
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 500
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 1000
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 1500
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 2000
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 2500
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 3000
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 3500
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 4000
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 4500
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

step: 5000
program: (integer_add integer_div integer_mod integer_swap exec_yank exec_when (exec_when (in2 boolean_swap integer_shove integer_stackdepth integer_inc) exec_k (boolean_flush in1 tagged_825) (integer_max tag_boolean_31 boolean_shove exec_do*while (integer_rot boolean_and exec_empty) boolean_dup_items) boolean_xor boolean_shove boolean_swap boolean_not in3 exec_empty in4 integer_min boolean_not in2 exec_empty integer_min tag_boolean_120 integer_min print_integer exec_do*count (integer_shove integer_dup_items integer_lt tagged_293 boolean_invert_second_then_and integer_stackdepth boolean_yankdup) integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 integer_stackdepth boolean_yankdup) (integer_rot boolean_invert_first_then_and exec_when (integer_dup_times) exec_k (exec_y () exec_yank boolean_invert_second_then_and integer_yankdup integer_mod tagged_924 in2 integer_pop integer_div integer_fromboolean) () boolean_frominteger exec_noop) exec_if (exec_if (print_boolean exec_noop exec_y_when_autoconstructing (integer_gte boolean_or integer_empty integer_dec tag_exec_84 (-32 exec_y (exec_swap () (79 exec_when (exec_yank integer_gte boolean_yankdup boolean_empty integer_shove integer_dup_items) exec_dup_times () boolean_pop) integer_stackdepth integer_gte exec_do*range (boolean_pop print_integer boolean_empty) boolean_and exec_when (exec_do*count () boolean_and exec_when (exec_do*count () integer_add)))))) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 144

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -92                 | Program output: -92                
Correct output: 73                  | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: 45                  | Program output: 45                 
Correct output: 59                  | Program output: 59                 
Correct output: -34                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: -2                  | Program output: -2                 
Correct output: 22                  | Program output: 22                 
Correct output: 14                  | Program output: 14                 
Correct output: 67                  | Program output: 67                 
Correct output: 35                  | Program output: 35                 
Correct output: 41                  | Program output: 41                 
Correct output: 51                  | Program output: 51                 
Correct output: 81                  | Program output: 81                 
Correct output: 16                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 30                  | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: 29                  | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 39                  | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: -67                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -80                 | Program output: -80                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -53                 | Program output: -53                
Correct output: -63                 | Program output: -63                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -93                
Correct output: -25                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -1                  | Program output: -1                 
Correct output: -75                 | Program output: -75                
Correct output: -65                 | Program output: -65                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -63                 | Program output: -63                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: 15                  | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: 11                  | Program output: 11                 
Correct output: -58                 | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: 11                  | Program output: 11                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -94                 | Program output: -94                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: 18                  | Program output: 18                 
Correct output: -35                 | Program output: -35                
;;******************************
