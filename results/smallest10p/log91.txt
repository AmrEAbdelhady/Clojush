Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -13 -32 -32] -32] [[-71 -71 -41 -71] -71] [[93 93 93 55] 55] [[38 -25 -25 -25] -25] [[27 78 78 78] 27] [[-5 -70 -70 -70] -70] [[-51 -28 -51 -51] -51] [[-60 -60 95 -60] -60] [[56 56 -52 56] -52] [[91 98 91 91] 91] [(55 55 55 55) 55] [(-58 -58 -58 -58) -58] [(-62 -62 -62 -62) -62] [(-51 -51 -51 -51) -51] [(-35 -35 -35 -35) -35] [(91 96 70 28) 28] [(96 18 59 4) 4] [(7 49 39 31) 7] [(71 87 90 76) 71] [(64 23 42 44) 23] [(39 22 41 57) 22] [(64 35 45 78) 35] [(38 13 50 73) 13] [(77 58 72 20) 20] [(29 56 71 81) 29] [(34 5 36 46) 5] [(36 11 64 30) 11] [(33 51 42 34) 33] [(13 50 73 19) 13] [(78 54 73 71) 54] [(89 39 70 43) 39] [(84 99 77 56) 56] [(89 83 12 57) 12] [(21 12 27 65) 12] [(88 82 14 10) 10] [(-49 70 86 -93) -93] [(-71 18 -87 -77) -87] [(18 -63 76 6) -63] [(83 -6 -97 54) -97] [(58 -38 73 -78) -78] [(20 55 -40 -18) -40] [(-15 0 -75 85) -75] [(4 25 47 -61) -61] [(31 40 -51 26) -51] [(-21 41 -10 -75) -75] [(11 40 -9 -22) -22] [(-80 -50 -78 83) -80] [(51 54 -51 62) -51] [(-66 95 -73 -29) -73] [(-83 -39 -66 11) -83] [(71 14 69 -51) -51] [(85 -36 -16 73) -36] [(-49 -58 62 -56) -58] [(-53 -12 100 69) -53] [(-50 -90 83 73) -90] [(72 73 -37 75) -37] [(92 -65 -5 -76) -76] [(64 73 17 -52) -52] [(-22 83 -93 10) -93] [(-75 19 48 63) -75] [(-72 70 24 -47) -72] [(-53 83 -30 -49) -53] [(-22 -62 70 -43) -62] [(85 27 30 26) 26] [(-67 -2 -54 43) -67] [(-3 -95 50 -42) -95] [(-13 -11 85 86) -13] [(-100 99 -23 -63) -100] [(-46 -37 -41 -20) -46] [(-83 38 26 66) -83] [(-69 -89 17 -85) -89] [(89 -94 -70 54) -94] [(81 0 -89 60) -89] [(24 0 -20 -48) -48] [(46 46 -45 -77) -77] [(92 -9 53 -4) -9] [(82 -46 45 -97) -97] [(32 -1 18 -9) -9] [(17 -70 -6 -59) -70] [(3 -24 62 -26) -26] [(-60 67 14 -76) -76] [(-24 15 -19 -24) -24] [(-15 98 75 -62) -62] [(91 67 47 -39) -39] [(49 -23 -9 -85) -85] [(52 -43 34 29) -43] [(-34 56 51 -24) -34] [(31 88 44 -16) -16] [(-45 -92 -10 -94) -94] [(-46 -13 -16 17) -46] [(60 58 -9 90) -9] [(-84 60 91 94) -84] [(-45 1 9 87) -45] [(-17 82 39 -29) -29] [(-77 11 75 -51) -77])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-32 -13 -32 -32] -32]
Train Case:   6 | Input/Output: [[-71 -71 -41 -71] -71]
Train Case:   7 | Input/Output: [[93 93 93 55] 55]
Train Case:   8 | Input/Output: [[38 -25 -25 -25] -25]
Train Case:   9 | Input/Output: [[27 78 78 78] 27]
Train Case:  10 | Input/Output: [[-5 -70 -70 -70] -70]
Train Case:  11 | Input/Output: [[-51 -28 -51 -51] -51]
Train Case:  12 | Input/Output: [[-60 -60 95 -60] -60]
Train Case:  13 | Input/Output: [[56 56 -52 56] -52]
Train Case:  14 | Input/Output: [[91 98 91 91] 91]
Train Case:  15 | Input/Output: [(55 55 55 55) 55]
Train Case:  16 | Input/Output: [(-58 -58 -58 -58) -58]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(-51 -51 -51 -51) -51]
Train Case:  19 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  20 | Input/Output: [(91 96 70 28) 28]
Train Case:  21 | Input/Output: [(96 18 59 4) 4]
Train Case:  22 | Input/Output: [(7 49 39 31) 7]
Train Case:  23 | Input/Output: [(71 87 90 76) 71]
Train Case:  24 | Input/Output: [(64 23 42 44) 23]
Train Case:  25 | Input/Output: [(39 22 41 57) 22]
Train Case:  26 | Input/Output: [(64 35 45 78) 35]
Train Case:  27 | Input/Output: [(38 13 50 73) 13]
Train Case:  28 | Input/Output: [(77 58 72 20) 20]
Train Case:  29 | Input/Output: [(29 56 71 81) 29]
Train Case:  30 | Input/Output: [(34 5 36 46) 5]
Train Case:  31 | Input/Output: [(36 11 64 30) 11]
Train Case:  32 | Input/Output: [(33 51 42 34) 33]
Train Case:  33 | Input/Output: [(13 50 73 19) 13]
Train Case:  34 | Input/Output: [(78 54 73 71) 54]
Train Case:  35 | Input/Output: [(89 39 70 43) 39]
Train Case:  36 | Input/Output: [(84 99 77 56) 56]
Train Case:  37 | Input/Output: [(89 83 12 57) 12]
Train Case:  38 | Input/Output: [(21 12 27 65) 12]
Train Case:  39 | Input/Output: [(88 82 14 10) 10]
Train Case:  40 | Input/Output: [(-49 70 86 -93) -93]
Train Case:  41 | Input/Output: [(-71 18 -87 -77) -87]
Train Case:  42 | Input/Output: [(18 -63 76 6) -63]
Train Case:  43 | Input/Output: [(83 -6 -97 54) -97]
Train Case:  44 | Input/Output: [(58 -38 73 -78) -78]
Train Case:  45 | Input/Output: [(20 55 -40 -18) -40]
Train Case:  46 | Input/Output: [(-15 0 -75 85) -75]
Train Case:  47 | Input/Output: [(4 25 47 -61) -61]
Train Case:  48 | Input/Output: [(31 40 -51 26) -51]
Train Case:  49 | Input/Output: [(-21 41 -10 -75) -75]
Train Case:  50 | Input/Output: [(11 40 -9 -22) -22]
Train Case:  51 | Input/Output: [(-80 -50 -78 83) -80]
Train Case:  52 | Input/Output: [(51 54 -51 62) -51]
Train Case:  53 | Input/Output: [(-66 95 -73 -29) -73]
Train Case:  54 | Input/Output: [(-83 -39 -66 11) -83]
Train Case:  55 | Input/Output: [(71 14 69 -51) -51]
Train Case:  56 | Input/Output: [(85 -36 -16 73) -36]
Train Case:  57 | Input/Output: [(-49 -58 62 -56) -58]
Train Case:  58 | Input/Output: [(-53 -12 100 69) -53]
Train Case:  59 | Input/Output: [(-50 -90 83 73) -90]
Train Case:  60 | Input/Output: [(72 73 -37 75) -37]
Train Case:  61 | Input/Output: [(92 -65 -5 -76) -76]
Train Case:  62 | Input/Output: [(64 73 17 -52) -52]
Train Case:  63 | Input/Output: [(-22 83 -93 10) -93]
Train Case:  64 | Input/Output: [(-75 19 48 63) -75]
Train Case:  65 | Input/Output: [(-72 70 24 -47) -72]
Train Case:  66 | Input/Output: [(-53 83 -30 -49) -53]
Train Case:  67 | Input/Output: [(-22 -62 70 -43) -62]
Train Case:  68 | Input/Output: [(85 27 30 26) 26]
Train Case:  69 | Input/Output: [(-67 -2 -54 43) -67]
Train Case:  70 | Input/Output: [(-3 -95 50 -42) -95]
Train Case:  71 | Input/Output: [(-13 -11 85 86) -13]
Train Case:  72 | Input/Output: [(-100 99 -23 -63) -100]
Train Case:  73 | Input/Output: [(-46 -37 -41 -20) -46]
Train Case:  74 | Input/Output: [(-83 38 26 66) -83]
Train Case:  75 | Input/Output: [(-69 -89 17 -85) -89]
Train Case:  76 | Input/Output: [(89 -94 -70 54) -94]
Train Case:  77 | Input/Output: [(81 0 -89 60) -89]
Train Case:  78 | Input/Output: [(24 0 -20 -48) -48]
Train Case:  79 | Input/Output: [(46 46 -45 -77) -77]
Train Case:  80 | Input/Output: [(92 -9 53 -4) -9]
Train Case:  81 | Input/Output: [(82 -46 45 -97) -97]
Train Case:  82 | Input/Output: [(32 -1 18 -9) -9]
Train Case:  83 | Input/Output: [(17 -70 -6 -59) -70]
Train Case:  84 | Input/Output: [(3 -24 62 -26) -26]
Train Case:  85 | Input/Output: [(-60 67 14 -76) -76]
Train Case:  86 | Input/Output: [(-24 15 -19 -24) -24]
Train Case:  87 | Input/Output: [(-15 98 75 -62) -62]
Train Case:  88 | Input/Output: [(91 67 47 -39) -39]
Train Case:  89 | Input/Output: [(49 -23 -9 -85) -85]
Train Case:  90 | Input/Output: [(52 -43 34 29) -43]
Train Case:  91 | Input/Output: [(-34 56 51 -24) -34]
Train Case:  92 | Input/Output: [(31 88 44 -16) -16]
Train Case:  93 | Input/Output: [(-45 -92 -10 -94) -94]
Train Case:  94 | Input/Output: [(-46 -13 -16 17) -46]
Train Case:  95 | Input/Output: [(60 58 -9 90) -9]
Train Case:  96 | Input/Output: [(-84 60 91 94) -84]
Train Case:  97 | Input/Output: [(-45 1 9 87) -45]
Train Case:  98 | Input/Output: [(-17 82 39 -29) -29]
Train Case:  99 | Input/Output: [(-77 11 75 -51) -77]
Test Case:   0 | Input/Output: [[33 19 19 19] 19]
Test Case:   1 | Input/Output: [[91 50 91 91] 50]
Test Case:   2 | Input/Output: [[-98 -9 -98 -98] -98]
Test Case:   3 | Input/Output: [[-60 -60 -60 -83] -83]
Test Case:   4 | Input/Output: [[-23 -23 -31 -23] -31]
Test Case:   5 | Input/Output: [[-40 39 39 39] -40]
Test Case:   6 | Input/Output: [[-74 -74 43 -74] -74]
Test Case:   7 | Input/Output: [[55 55 -26 55] -26]
Test Case:   8 | Input/Output: [[46 46 -20 46] -20]
Test Case:   9 | Input/Output: [[-100 -100 85 -100] -100]
Test Case:  10 | Input/Output: [[-94 -94 -40 -94] -94]
Test Case:  11 | Input/Output: [[-48 -24 -24 -24] -48]
Test Case:  12 | Input/Output: [[-34 -16 -16 -16] -34]
Test Case:  13 | Input/Output: [[10 10 -21 10] -21]
Test Case:  14 | Input/Output: [[1 -44 1 1] -44]
Test Case:  15 | Input/Output: [[37 49 49 49] 37]
Test Case:  16 | Input/Output: [[-53 -53 13 -53] -53]
Test Case:  17 | Input/Output: [[-74 -79 -79 -79] -79]
Test Case:  18 | Input/Output: [[52 52 52 2] 2]
Test Case:  19 | Input/Output: [[-40 -65 -40 -40] -65]
Test Case:  20 | Input/Output: [[-32 -58 -32 -32] -58]
Test Case:  21 | Input/Output: [[92 87 87 87] 87]
Test Case:  22 | Input/Output: [[-14 -14 46 -14] -14]
Test Case:  23 | Input/Output: [[76 -97 76 76] -97]
Test Case:  24 | Input/Output: [[-99 17 17 17] -99]
Test Case:  25 | Input/Output: [[59 59 -30 59] -30]
Test Case:  26 | Input/Output: [[28 28 28 -56] -56]
Test Case:  27 | Input/Output: [[42 42 -13 42] -13]
Test Case:  28 | Input/Output: [[-70 -70 53 -70] -70]
Test Case:  29 | Input/Output: [[-14 -22 -22 -22] -22]
Test Case:  30 | Input/Output: [[-34 2 2 2] -34]
Test Case:  31 | Input/Output: [[39 39 5 39] 5]
Test Case:  32 | Input/Output: [[-16 -16 -49 -16] -49]
Test Case:  33 | Input/Output: [[-80 -67 -80 -80] -80]
Test Case:  34 | Input/Output: [[89 89 -70 89] -70]
Test Case:  35 | Input/Output: [[86 -25 -25 -25] -25]
Test Case:  36 | Input/Output: [[-14 -14 -14 -4] -14]
Test Case:  37 | Input/Output: [[-73 27 -73 -73] -73]
Test Case:  38 | Input/Output: [[-20 -20 78 -20] -20]
Test Case:  39 | Input/Output: [[12 12 23 12] 12]
Test Case:  40 | Input/Output: [[98 98 89 98] 89]
Test Case:  41 | Input/Output: [[-46 -46 -46 -9] -46]
Test Case:  42 | Input/Output: [[2 2 2 -11] -11]
Test Case:  43 | Input/Output: [[-38 -86 -38 -38] -86]
Test Case:  44 | Input/Output: [[-62 -62 -62 26] -62]
Test Case:  45 | Input/Output: [[-36 37 37 37] -36]
Test Case:  46 | Input/Output: [[-94 100 100 100] -94]
Test Case:  47 | Input/Output: [[98 98 98 48] 48]
Test Case:  48 | Input/Output: [[-15 -87 -87 -87] -87]
Test Case:  49 | Input/Output: [[-38 -37 -37 -37] -38]
Test Case:  50 | Input/Output: [[-81 -81 -81 -81] -81]
Test Case:  51 | Input/Output: [[53 -21 53 53] -21]
Test Case:  52 | Input/Output: [[27 11 11 11] 11]
Test Case:  53 | Input/Output: [[-69 16 -69 -69] -69]
Test Case:  54 | Input/Output: [[62 -18 -18 -18] -18]
Test Case:  55 | Input/Output: [[76 76 76 90] 76]
Test Case:  56 | Input/Output: [[38 -83 -83 -83] -83]
Test Case:  57 | Input/Output: [[-18 94 94 94] -18]
Test Case:  58 | Input/Output: [[95 95 95 -30] -30]
Test Case:  59 | Input/Output: [[26 55 55 55] 26]
Test Case:  60 | Input/Output: [[-44 -44 -44 22] -44]
Test Case:  61 | Input/Output: [[-7 -7 -7 91] -7]
Test Case:  62 | Input/Output: [[-97 6 -97 -97] -97]
Test Case:  63 | Input/Output: [[99 99 99 -31] -31]
Test Case:  64 | Input/Output: [[-2 -2 -2 -82] -82]
Test Case:  65 | Input/Output: [[-81 84 -81 -81] -81]
Test Case:  66 | Input/Output: [[-6 -6 -6 -54] -54]
Test Case:  67 | Input/Output: [[-90 -90 -90 -45] -90]
Test Case:  68 | Input/Output: [[-1 -1 17 -1] -1]
Test Case:  69 | Input/Output: [[-65 -64 -64 -64] -65]
Test Case:  70 | Input/Output: [[-14 34 34 34] -14]
Test Case:  71 | Input/Output: [[64 64 64 -10] -10]
Test Case:  72 | Input/Output: [[49 -15 49 49] -15]
Test Case:  73 | Input/Output: [[-68 -68 -68 84] -68]
Test Case:  74 | Input/Output: [[-64 77 -64 -64] -64]
Test Case:  75 | Input/Output: [[-85 -85 -85 -6] -85]
Test Case:  76 | Input/Output: [[87 87 -74 87] -74]
Test Case:  77 | Input/Output: [[-66 -66 -29 -66] -66]
Test Case:  78 | Input/Output: [[44 48 48 48] 44]
Test Case:  79 | Input/Output: [[-59 -59 -59 -68] -68]
Test Case:  80 | Input/Output: [[59 59 59 44] 44]
Test Case:  81 | Input/Output: [[11 -33 11 11] -33]
Test Case:  82 | Input/Output: [[70 -8 70 70] -8]
Test Case:  83 | Input/Output: [[-21 -21 63 -21] -21]
Test Case:  84 | Input/Output: [[55 76 76 76] 55]
Test Case:  85 | Input/Output: [[-57 -57 -100 -57] -100]
Test Case:  86 | Input/Output: [[52 -68 -68 -68] -68]
Test Case:  87 | Input/Output: [[-12 -97 -97 -97] -97]
Test Case:  88 | Input/Output: [[41 41 35 41] 35]
Test Case:  89 | Input/Output: [[-16 -16 -16 66] -16]
Test Case:  90 | Input/Output: [[79 79 79 76] 76]
Test Case:  91 | Input/Output: [[-67 -3 -3 -3] -67]
Test Case:  92 | Input/Output: [[-14 -14 -14 -45] -45]
Test Case:  93 | Input/Output: [[18 27 27 27] 18]
Test Case:  94 | Input/Output: [[-95 81 -95 -95] -95]
Test Case:  95 | Input/Output: [[-55 -55 34 -55] -55]
Test Case:  96 | Input/Output: [[-26 -26 -67 -26] -67]
Test Case:  97 | Input/Output: [[-27 -27 83 -27] -27]
Test Case:  98 | Input/Output: [[94 72 72 72] 72]
Test Case:  99 | Input/Output: [[-18 -18 -18 77] -18]
Test Case: 100 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 101 | Input/Output: [(94 94 94 94) 94]
Test Case: 102 | Input/Output: [(81 81 81 81) 81]
Test Case: 103 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 104 | Input/Output: [(35 35 35 35) 35]
Test Case: 105 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 106 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 107 | Input/Output: [(23 23 23 23) 23]
Test Case: 108 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 109 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 110 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 111 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 112 | Input/Output: [(76 76 76 76) 76]
Test Case: 113 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 114 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 115 | Input/Output: [(75 75 75 75) 75]
Test Case: 116 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 117 | Input/Output: [(16 16 16 16) 16]
Test Case: 118 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 119 | Input/Output: [(90 90 90 90) 90]
Test Case: 120 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 121 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 122 | Input/Output: [(10 10 10 10) 10]
Test Case: 123 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 124 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 125 | Input/Output: [(47 47 47 47) 47]
Test Case: 126 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 127 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 128 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 129 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 130 | Input/Output: [(0 0 0 0) 0]
Test Case: 131 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 132 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 133 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 134 | Input/Output: [(94 94 94 94) 94]
Test Case: 135 | Input/Output: [(32 32 32 32) 32]
Test Case: 136 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 137 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 138 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 139 | Input/Output: [(29 29 29 29) 29]
Test Case: 140 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 141 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 142 | Input/Output: [(76 76 76 76) 76]
Test Case: 143 | Input/Output: [(75 75 75 75) 75]
Test Case: 144 | Input/Output: [(83 83 83 83) 83]
Test Case: 145 | Input/Output: [(17 17 17 17) 17]
Test Case: 146 | Input/Output: [(33 33 33 33) 33]
Test Case: 147 | Input/Output: [(22 22 22 22) 22]
Test Case: 148 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 149 | Input/Output: [(21 21 21 21) 21]
Test Case: 150 | Input/Output: [(41 41 41 41) 41]
Test Case: 151 | Input/Output: [(64 64 64 64) 64]
Test Case: 152 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 153 | Input/Output: [(42 42 42 42) 42]
Test Case: 154 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 155 | Input/Output: [(69 69 69 69) 69]
Test Case: 156 | Input/Output: [(45 45 45 45) 45]
Test Case: 157 | Input/Output: [(55 55 55 55) 55]
Test Case: 158 | Input/Output: [(7 7 7 7) 7]
Test Case: 159 | Input/Output: [(35 35 35 35) 35]
Test Case: 160 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 161 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 162 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 163 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 164 | Input/Output: [(0 0 0 0) 0]
Test Case: 165 | Input/Output: [(81 81 81 81) 81]
Test Case: 166 | Input/Output: [(76 76 76 76) 76]
Test Case: 167 | Input/Output: [(19 19 19 19) 19]
Test Case: 168 | Input/Output: [(0 0 0 0) 0]
Test Case: 169 | Input/Output: [(33 33 33 33) 33]
Test Case: 170 | Input/Output: [(94 94 94 94) 94]
Test Case: 171 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 172 | Input/Output: [(79 79 79 79) 79]
Test Case: 173 | Input/Output: [(67 67 67 67) 67]
Test Case: 174 | Input/Output: [(5 5 5 5) 5]
Test Case: 175 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 176 | Input/Output: [(49 49 49 49) 49]
Test Case: 177 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 178 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 179 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 180 | Input/Output: [(90 90 90 90) 90]
Test Case: 181 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 182 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 183 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 184 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 185 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 186 | Input/Output: [(39 39 39 39) 39]
Test Case: 187 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 188 | Input/Output: [(77 77 77 77) 77]
Test Case: 189 | Input/Output: [(8 8 8 8) 8]
Test Case: 190 | Input/Output: [(23 23 23 23) 23]
Test Case: 191 | Input/Output: [(36 36 36 36) 36]
Test Case: 192 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 193 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 194 | Input/Output: [(26 26 26 26) 26]
Test Case: 195 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 196 | Input/Output: [(63 63 63 63) 63]
Test Case: 197 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 198 | Input/Output: [(79 79 79 79) 79]
Test Case: 199 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 200 | Input/Output: [(51 23 39 10) 10]
Test Case: 201 | Input/Output: [(60 83 59 46) 46]
Test Case: 202 | Input/Output: [(97 43 9 80) 9]
Test Case: 203 | Input/Output: [(65 91 9 87) 9]
Test Case: 204 | Input/Output: [(30 87 5 72) 5]
Test Case: 205 | Input/Output: [(13 39 3 12) 3]
Test Case: 206 | Input/Output: [(38 30 100 91) 30]
Test Case: 207 | Input/Output: [(96 87 90 7) 7]
Test Case: 208 | Input/Output: [(55 5 49 51) 5]
Test Case: 209 | Input/Output: [(23 67 42 10) 10]
Test Case: 210 | Input/Output: [(47 46 49 78) 46]
Test Case: 211 | Input/Output: [(33 79 41 32) 32]
Test Case: 212 | Input/Output: [(36 92 71 57) 36]
Test Case: 213 | Input/Output: [(40 46 29 79) 29]
Test Case: 214 | Input/Output: [(98 95 36 98) 36]
Test Case: 215 | Input/Output: [(75 19 2 50) 2]
Test Case: 216 | Input/Output: [(21 2 49 32) 2]
Test Case: 217 | Input/Output: [(66 65 94 63) 63]
Test Case: 218 | Input/Output: [(12 25 89 96) 12]
Test Case: 219 | Input/Output: [(63 11 86 67) 11]
Test Case: 220 | Input/Output: [(100 79 10 91) 10]
Test Case: 221 | Input/Output: [(88 71 30 28) 28]
Test Case: 222 | Input/Output: [(84 45 40 82) 40]
Test Case: 223 | Input/Output: [(17 33 28 17) 17]
Test Case: 224 | Input/Output: [(35 50 40 14) 14]
Test Case: 225 | Input/Output: [(88 71 93 61) 61]
Test Case: 226 | Input/Output: [(73 78 94 87) 73]
Test Case: 227 | Input/Output: [(29 92 69 98) 29]
Test Case: 228 | Input/Output: [(17 41 98 46) 17]
Test Case: 229 | Input/Output: [(10 65 96 27) 10]
Test Case: 230 | Input/Output: [(76 61 26 61) 26]
Test Case: 231 | Input/Output: [(91 34 9 100) 9]
Test Case: 232 | Input/Output: [(85 96 32 20) 20]
Test Case: 233 | Input/Output: [(28 28 83 76) 28]
Test Case: 234 | Input/Output: [(79 14 11 63) 11]
Test Case: 235 | Input/Output: [(81 83 25 96) 25]
Test Case: 236 | Input/Output: [(18 33 22 23) 18]
Test Case: 237 | Input/Output: [(63 44 82 71) 44]
Test Case: 238 | Input/Output: [(17 100 70 90) 17]
Test Case: 239 | Input/Output: [(8 53 14 35) 8]
Test Case: 240 | Input/Output: [(79 53 35 42) 35]
Test Case: 241 | Input/Output: [(44 19 92 61) 19]
Test Case: 242 | Input/Output: [(26 77 58 61) 26]
Test Case: 243 | Input/Output: [(60 46 35 57) 35]
Test Case: 244 | Input/Output: [(5 44 13 44) 5]
Test Case: 245 | Input/Output: [(10 41 27 99) 10]
Test Case: 246 | Input/Output: [(76 8 82 33) 8]
Test Case: 247 | Input/Output: [(33 9 68 67) 9]
Test Case: 248 | Input/Output: [(50 81 52 40) 40]
Test Case: 249 | Input/Output: [(91 38 39 56) 38]
Test Case: 250 | Input/Output: [(91 45 29 2) 2]
Test Case: 251 | Input/Output: [(24 40 8 12) 8]
Test Case: 252 | Input/Output: [(79 0 38 15) 0]
Test Case: 253 | Input/Output: [(26 19 62 2) 2]
Test Case: 254 | Input/Output: [(77 64 68 30) 30]
Test Case: 255 | Input/Output: [(40 37 41 46) 37]
Test Case: 256 | Input/Output: [(96 61 7 22) 7]
Test Case: 257 | Input/Output: [(25 35 58 98) 25]
Test Case: 258 | Input/Output: [(19 42 13 96) 13]
Test Case: 259 | Input/Output: [(46 38 55 69) 38]
Test Case: 260 | Input/Output: [(97 67 1 59) 1]
Test Case: 261 | Input/Output: [(87 48 94 21) 21]
Test Case: 262 | Input/Output: [(73 57 99 55) 55]
Test Case: 263 | Input/Output: [(46 14 96 69) 14]
Test Case: 264 | Input/Output: [(42 15 41 32) 15]
Test Case: 265 | Input/Output: [(93 64 54 24) 24]
Test Case: 266 | Input/Output: [(29 0 18 46) 0]
Test Case: 267 | Input/Output: [(67 26 75 40) 26]
Test Case: 268 | Input/Output: [(56 30 9 23) 9]
Test Case: 269 | Input/Output: [(10 5 86 86) 5]
Test Case: 270 | Input/Output: [(83 16 80 63) 16]
Test Case: 271 | Input/Output: [(64 27 40 49) 27]
Test Case: 272 | Input/Output: [(21 84 43 94) 21]
Test Case: 273 | Input/Output: [(62 33 13 32) 13]
Test Case: 274 | Input/Output: [(21 68 4 55) 4]
Test Case: 275 | Input/Output: [(4 47 50 53) 4]
Test Case: 276 | Input/Output: [(7 21 39 61) 7]
Test Case: 277 | Input/Output: [(14 39 69 88) 14]
Test Case: 278 | Input/Output: [(61 39 45 94) 39]
Test Case: 279 | Input/Output: [(79 7 79 57) 7]
Test Case: 280 | Input/Output: [(64 45 60 46) 45]
Test Case: 281 | Input/Output: [(13 41 43 0) 0]
Test Case: 282 | Input/Output: [(85 9 67 43) 9]
Test Case: 283 | Input/Output: [(50 78 76 87) 50]
Test Case: 284 | Input/Output: [(21 14 44 33) 14]
Test Case: 285 | Input/Output: [(62 25 48 55) 25]
Test Case: 286 | Input/Output: [(43 52 79 33) 33]
Test Case: 287 | Input/Output: [(54 76 33 80) 33]
Test Case: 288 | Input/Output: [(30 46 99 37) 30]
Test Case: 289 | Input/Output: [(49 18 94 57) 18]
Test Case: 290 | Input/Output: [(7 7 55 58) 7]
Test Case: 291 | Input/Output: [(2 12 90 41) 2]
Test Case: 292 | Input/Output: [(58 54 61 28) 28]
Test Case: 293 | Input/Output: [(96 61 93 92) 61]
Test Case: 294 | Input/Output: [(24 94 89 84) 24]
Test Case: 295 | Input/Output: [(81 71 64 75) 64]
Test Case: 296 | Input/Output: [(36 2 97 15) 2]
Test Case: 297 | Input/Output: [(34 46 1 98) 1]
Test Case: 298 | Input/Output: [(17 56 10 84) 10]
Test Case: 299 | Input/Output: [(4 93 60 56) 4]
Test Case: 300 | Input/Output: [(0 17 37 47) 0]
Test Case: 301 | Input/Output: [(68 61 87 23) 23]
Test Case: 302 | Input/Output: [(76 31 11 63) 11]
Test Case: 303 | Input/Output: [(24 89 47 1) 1]
Test Case: 304 | Input/Output: [(9 77 81 84) 9]
Test Case: 305 | Input/Output: [(86 92 67 73) 67]
Test Case: 306 | Input/Output: [(31 22 93 47) 22]
Test Case: 307 | Input/Output: [(9 65 30 44) 9]
Test Case: 308 | Input/Output: [(51 63 96 61) 51]
Test Case: 309 | Input/Output: [(73 69 68 41) 41]
Test Case: 310 | Input/Output: [(93 15 36 34) 15]
Test Case: 311 | Input/Output: [(31 98 91 41) 31]
Test Case: 312 | Input/Output: [(8 94 56 67) 8]
Test Case: 313 | Input/Output: [(60 72 73 48) 48]
Test Case: 314 | Input/Output: [(80 94 62 17) 17]
Test Case: 315 | Input/Output: [(31 100 91 2) 2]
Test Case: 316 | Input/Output: [(1 17 65 15) 1]
Test Case: 317 | Input/Output: [(43 97 77 7) 7]
Test Case: 318 | Input/Output: [(4 18 56 9) 4]
Test Case: 319 | Input/Output: [(86 60 48 24) 24]
Test Case: 320 | Input/Output: [(68 49 72 79) 49]
Test Case: 321 | Input/Output: [(66 62 76 12) 12]
Test Case: 322 | Input/Output: [(11 42 6 87) 6]
Test Case: 323 | Input/Output: [(30 22 59 7) 7]
Test Case: 324 | Input/Output: [(96 66 14 53) 14]
Test Case: 325 | Input/Output: [(44 51 25 54) 25]
Test Case: 326 | Input/Output: [(16 89 26 42) 16]
Test Case: 327 | Input/Output: [(33 55 17 85) 17]
Test Case: 328 | Input/Output: [(4 91 31 33) 4]
Test Case: 329 | Input/Output: [(52 20 30 10) 10]
Test Case: 330 | Input/Output: [(79 72 48 69) 48]
Test Case: 331 | Input/Output: [(11 43 9 33) 9]
Test Case: 332 | Input/Output: [(54 48 75 95) 48]
Test Case: 333 | Input/Output: [(97 53 26 85) 26]
Test Case: 334 | Input/Output: [(100 100 26 7) 7]
Test Case: 335 | Input/Output: [(0 85 94 97) 0]
Test Case: 336 | Input/Output: [(45 16 98 2) 2]
Test Case: 337 | Input/Output: [(66 85 69 86) 66]
Test Case: 338 | Input/Output: [(29 58 71 17) 17]
Test Case: 339 | Input/Output: [(12 39 80 41) 12]
Test Case: 340 | Input/Output: [(68 94 23 55) 23]
Test Case: 341 | Input/Output: [(8 16 46 87) 8]
Test Case: 342 | Input/Output: [(18 100 52 84) 18]
Test Case: 343 | Input/Output: [(7 8 98 60) 7]
Test Case: 344 | Input/Output: [(29 85 57 4) 4]
Test Case: 345 | Input/Output: [(76 28 17 33) 17]
Test Case: 346 | Input/Output: [(26 94 5 16) 5]
Test Case: 347 | Input/Output: [(80 8 45 12) 8]
Test Case: 348 | Input/Output: [(94 82 84 35) 35]
Test Case: 349 | Input/Output: [(85 17 52 62) 17]
Test Case: 350 | Input/Output: [(61 75 1 92) 1]
Test Case: 351 | Input/Output: [(64 57 29 13) 13]
Test Case: 352 | Input/Output: [(35 66 26 80) 26]
Test Case: 353 | Input/Output: [(37 99 14 65) 14]
Test Case: 354 | Input/Output: [(40 3 40 35) 3]
Test Case: 355 | Input/Output: [(83 6 23 7) 6]
Test Case: 356 | Input/Output: [(98 44 17 94) 17]
Test Case: 357 | Input/Output: [(9 15 13 25) 9]
Test Case: 358 | Input/Output: [(95 1 49 48) 1]
Test Case: 359 | Input/Output: [(44 74 52 31) 31]
Test Case: 360 | Input/Output: [(68 65 31 8) 8]
Test Case: 361 | Input/Output: [(42 33 35 42) 33]
Test Case: 362 | Input/Output: [(88 68 41 53) 41]
Test Case: 363 | Input/Output: [(75 34 68 1) 1]
Test Case: 364 | Input/Output: [(33 30 60 52) 30]
Test Case: 365 | Input/Output: [(31 84 75 91) 31]
Test Case: 366 | Input/Output: [(11 13 95 51) 11]
Test Case: 367 | Input/Output: [(16 54 86 26) 16]
Test Case: 368 | Input/Output: [(32 55 38 44) 32]
Test Case: 369 | Input/Output: [(69 83 15 35) 15]
Test Case: 370 | Input/Output: [(23 59 67 62) 23]
Test Case: 371 | Input/Output: [(38 50 26 78) 26]
Test Case: 372 | Input/Output: [(23 31 69 62) 23]
Test Case: 373 | Input/Output: [(57 74 27 44) 27]
Test Case: 374 | Input/Output: [(84 57 31 99) 31]
Test Case: 375 | Input/Output: [(77 66 40 94) 40]
Test Case: 376 | Input/Output: [(0 8 15 38) 0]
Test Case: 377 | Input/Output: [(8 6 20 80) 6]
Test Case: 378 | Input/Output: [(11 83 41 64) 11]
Test Case: 379 | Input/Output: [(37 23 85 62) 23]
Test Case: 380 | Input/Output: [(35 21 29 39) 21]
Test Case: 381 | Input/Output: [(91 18 75 47) 18]
Test Case: 382 | Input/Output: [(57 92 97 2) 2]
Test Case: 383 | Input/Output: [(61 12 72 72) 12]
Test Case: 384 | Input/Output: [(86 37 88 35) 35]
Test Case: 385 | Input/Output: [(72 90 78 32) 32]
Test Case: 386 | Input/Output: [(41 97 70 73) 41]
Test Case: 387 | Input/Output: [(13 29 57 90) 13]
Test Case: 388 | Input/Output: [(45 69 100 86) 45]
Test Case: 389 | Input/Output: [(35 18 1 6) 1]
Test Case: 390 | Input/Output: [(50 33 61 94) 33]
Test Case: 391 | Input/Output: [(4 7 2 73) 2]
Test Case: 392 | Input/Output: [(85 36 74 84) 36]
Test Case: 393 | Input/Output: [(53 86 93 63) 53]
Test Case: 394 | Input/Output: [(16 29 64 30) 16]
Test Case: 395 | Input/Output: [(40 32 5 74) 5]
Test Case: 396 | Input/Output: [(26 3 87 23) 3]
Test Case: 397 | Input/Output: [(100 2 54 5) 2]
Test Case: 398 | Input/Output: [(11 67 76 9) 9]
Test Case: 399 | Input/Output: [(56 59 74 97) 56]
Test Case: 400 | Input/Output: [(100 51 35 -94) -94]
Test Case: 401 | Input/Output: [(-82 -75 -61 12) -82]
Test Case: 402 | Input/Output: [(43 85 -56 66) -56]
Test Case: 403 | Input/Output: [(51 -28 16 39) -28]
Test Case: 404 | Input/Output: [(-95 76 47 55) -95]
Test Case: 405 | Input/Output: [(33 24 99 -35) -35]
Test Case: 406 | Input/Output: [(-20 1 64 -84) -84]
Test Case: 407 | Input/Output: [(4 -63 96 -81) -81]
Test Case: 408 | Input/Output: [(-99 -2 94 -86) -99]
Test Case: 409 | Input/Output: [(-49 68 -90 17) -90]
Test Case: 410 | Input/Output: [(-86 -96 12 53) -96]
Test Case: 411 | Input/Output: [(-72 39 65 -99) -99]
Test Case: 412 | Input/Output: [(100 -1 54 4) -1]
Test Case: 413 | Input/Output: [(60 -31 89 36) -31]
Test Case: 414 | Input/Output: [(-64 62 45 67) -64]
Test Case: 415 | Input/Output: [(-79 59 -74 -45) -79]
Test Case: 416 | Input/Output: [(75 -93 73 69) -93]
Test Case: 417 | Input/Output: [(54 86 -95 67) -95]
Test Case: 418 | Input/Output: [(62 -78 -56 -58) -78]
Test Case: 419 | Input/Output: [(89 29 -38 -6) -38]
Test Case: 420 | Input/Output: [(-27 78 -86 -54) -86]
Test Case: 421 | Input/Output: [(28 -25 35 -6) -25]
Test Case: 422 | Input/Output: [(85 -15 -69 76) -69]
Test Case: 423 | Input/Output: [(35 -12 -67 27) -67]
Test Case: 424 | Input/Output: [(-54 81 83 1) -54]
Test Case: 425 | Input/Output: [(58 -87 60 83) -87]
Test Case: 426 | Input/Output: [(-89 -94 90 41) -94]
Test Case: 427 | Input/Output: [(99 -42 -3 61) -42]
Test Case: 428 | Input/Output: [(3 43 -17 -11) -17]
Test Case: 429 | Input/Output: [(-31 24 -46 2) -46]
Test Case: 430 | Input/Output: [(-73 -21 -9 56) -73]
Test Case: 431 | Input/Output: [(84 31 -59 -97) -97]
Test Case: 432 | Input/Output: [(-56 -65 -89 75) -89]
Test Case: 433 | Input/Output: [(80 6 29 -91) -91]
Test Case: 434 | Input/Output: [(99 -65 43 -19) -65]
Test Case: 435 | Input/Output: [(74 -5 95 -26) -26]
Test Case: 436 | Input/Output: [(63 -72 -10 70) -72]
Test Case: 437 | Input/Output: [(42 66 -26 59) -26]
Test Case: 438 | Input/Output: [(24 -54 39 38) -54]
Test Case: 439 | Input/Output: [(-47 55 -100 32) -100]
Test Case: 440 | Input/Output: [(36 14 61 -47) -47]
Test Case: 441 | Input/Output: [(29 -88 82 -11) -88]
Test Case: 442 | Input/Output: [(-88 35 -21 -64) -88]
Test Case: 443 | Input/Output: [(-76 8 -68 63) -76]
Test Case: 444 | Input/Output: [(16 0 53 -95) -95]
Test Case: 445 | Input/Output: [(-91 43 -39 72) -91]
Test Case: 446 | Input/Output: [(61 81 -59 91) -59]
Test Case: 447 | Input/Output: [(-17 -24 8 13) -24]
Test Case: 448 | Input/Output: [(-29 -12 -71 76) -71]
Test Case: 449 | Input/Output: [(-85 59 2 47) -85]
Test Case: 450 | Input/Output: [(-1 54 -51 -93) -93]
Test Case: 451 | Input/Output: [(-66 18 -31 23) -66]
Test Case: 452 | Input/Output: [(44 65 -6 -7) -7]
Test Case: 453 | Input/Output: [(-3 -36 61 39) -36]
Test Case: 454 | Input/Output: [(36 72 63 43) 36]
Test Case: 455 | Input/Output: [(94 9 -65 -58) -65]
Test Case: 456 | Input/Output: [(43 -79 -61 4) -79]
Test Case: 457 | Input/Output: [(-12 -5 93 -66) -66]
Test Case: 458 | Input/Output: [(-40 0 -21 76) -40]
Test Case: 459 | Input/Output: [(-43 14 -24 69) -43]
Test Case: 460 | Input/Output: [(15 -39 -38 -93) -93]
Test Case: 461 | Input/Output: [(-99 24 -87 13) -99]
Test Case: 462 | Input/Output: [(12 26 -70 38) -70]
Test Case: 463 | Input/Output: [(-19 -71 -6 8) -71]
Test Case: 464 | Input/Output: [(-17 98 -1 -35) -35]
Test Case: 465 | Input/Output: [(-94 81 -15 -63) -94]
Test Case: 466 | Input/Output: [(-49 -83 -99 -38) -99]
Test Case: 467 | Input/Output: [(-89 -32 -36 59) -89]
Test Case: 468 | Input/Output: [(64 -22 -41 14) -41]
Test Case: 469 | Input/Output: [(-82 4 64 -69) -82]
Test Case: 470 | Input/Output: [(-54 -75 18 -87) -87]
Test Case: 471 | Input/Output: [(8 8 48 -71) -71]
Test Case: 472 | Input/Output: [(84 62 3 47) 3]
Test Case: 473 | Input/Output: [(-34 33 -79 32) -79]
Test Case: 474 | Input/Output: [(-74 -96 -45 0) -96]
Test Case: 475 | Input/Output: [(86 16 -72 44) -72]
Test Case: 476 | Input/Output: [(99 -32 96 -56) -56]
Test Case: 477 | Input/Output: [(25 -34 -42 19) -42]
Test Case: 478 | Input/Output: [(26 60 63 54) 26]
Test Case: 479 | Input/Output: [(58 91 6 2) 2]
Test Case: 480 | Input/Output: [(-84 97 6 39) -84]
Test Case: 481 | Input/Output: [(82 -14 10 16) -14]
Test Case: 482 | Input/Output: [(54 81 -19 86) -19]
Test Case: 483 | Input/Output: [(38 -15 65 99) -15]
Test Case: 484 | Input/Output: [(95 -62 -76 -21) -76]
Test Case: 485 | Input/Output: [(-19 73 -71 -91) -91]
Test Case: 486 | Input/Output: [(19 -85 16 -90) -90]
Test Case: 487 | Input/Output: [(5 84 -2 -39) -39]
Test Case: 488 | Input/Output: [(-83 46 95 -62) -83]
Test Case: 489 | Input/Output: [(34 5 7 69) 5]
Test Case: 490 | Input/Output: [(1 -7 -89 48) -89]
Test Case: 491 | Input/Output: [(39 54 -21 -18) -21]
Test Case: 492 | Input/Output: [(50 19 75 -39) -39]
Test Case: 493 | Input/Output: [(-45 24 -1 30) -45]
Test Case: 494 | Input/Output: [(62 -31 -48 -15) -48]
Test Case: 495 | Input/Output: [(54 18 75 76) 18]
Test Case: 496 | Input/Output: [(63 93 70 -37) -37]
Test Case: 497 | Input/Output: [(45 0 -17 35) -17]
Test Case: 498 | Input/Output: [(-43 52 -40 -70) -70]
Test Case: 499 | Input/Output: [(14 53 81 -11) -11]
Test Case: 500 | Input/Output: [(-80 -79 -48 -9) -80]
Test Case: 501 | Input/Output: [(57 -5 -36 14) -36]
Test Case: 502 | Input/Output: [(-26 67 -73 74) -73]
Test Case: 503 | Input/Output: [(1 1 25 80) 1]
Test Case: 504 | Input/Output: [(13 -82 51 -61) -82]
Test Case: 505 | Input/Output: [(-43 -23 95 27) -43]
Test Case: 506 | Input/Output: [(-84 28 47 24) -84]
Test Case: 507 | Input/Output: [(74 99 -26 23) -26]
Test Case: 508 | Input/Output: [(79 -53 -35 87) -53]
Test Case: 509 | Input/Output: [(-12 -21 54 -33) -33]
Test Case: 510 | Input/Output: [(0 -88 56 16) -88]
Test Case: 511 | Input/Output: [(-72 -32 -60 91) -72]
Test Case: 512 | Input/Output: [(3 -98 -82 64) -98]
Test Case: 513 | Input/Output: [(22 -10 -8 96) -10]
Test Case: 514 | Input/Output: [(-55 -72 35 -46) -72]
Test Case: 515 | Input/Output: [(-92 38 -12 -68) -92]
Test Case: 516 | Input/Output: [(43 -79 -26 -11) -79]
Test Case: 517 | Input/Output: [(80 -6 -41 -18) -41]
Test Case: 518 | Input/Output: [(100 11 44 9) 9]
Test Case: 519 | Input/Output: [(85 13 -53 -67) -67]
Test Case: 520 | Input/Output: [(-11 -29 33 -93) -93]
Test Case: 521 | Input/Output: [(28 65 23 97) 23]
Test Case: 522 | Input/Output: [(-23 84 -4 71) -23]
Test Case: 523 | Input/Output: [(-35 -91 -26 96) -91]
Test Case: 524 | Input/Output: [(87 75 -13 -17) -17]
Test Case: 525 | Input/Output: [(-9 82 66 -30) -30]
Test Case: 526 | Input/Output: [(-63 -90 -65 -90) -90]
Test Case: 527 | Input/Output: [(55 -29 -100 66) -100]
Test Case: 528 | Input/Output: [(71 -48 32 65) -48]
Test Case: 529 | Input/Output: [(-46 -9 38 -44) -46]
Test Case: 530 | Input/Output: [(-35 61 -97 81) -97]
Test Case: 531 | Input/Output: [(-29 29 -31 85) -31]
Test Case: 532 | Input/Output: [(-23 78 61 47) -23]
Test Case: 533 | Input/Output: [(-54 -52 -77 -98) -98]
Test Case: 534 | Input/Output: [(-82 -5 -98 97) -98]
Test Case: 535 | Input/Output: [(95 -22 77 56) -22]
Test Case: 536 | Input/Output: [(-30 85 -18 10) -30]
Test Case: 537 | Input/Output: [(-37 -48 31 98) -48]
Test Case: 538 | Input/Output: [(-53 -3 48 19) -53]
Test Case: 539 | Input/Output: [(-19 -29 5 21) -29]
Test Case: 540 | Input/Output: [(-88 -83 17 -92) -92]
Test Case: 541 | Input/Output: [(-59 -62 88 92) -62]
Test Case: 542 | Input/Output: [(17 -29 62 93) -29]
Test Case: 543 | Input/Output: [(3 94 90 0) 0]
Test Case: 544 | Input/Output: [(29 -11 -12 -84) -84]
Test Case: 545 | Input/Output: [(-87 -19 65 -7) -87]
Test Case: 546 | Input/Output: [(54 -83 21 -40) -83]
Test Case: 547 | Input/Output: [(-58 71 -12 -88) -88]
Test Case: 548 | Input/Output: [(-76 -13 -23 -50) -76]
Test Case: 549 | Input/Output: [(-72 -9 62 -17) -72]
Test Case: 550 | Input/Output: [(80 11 -92 -35) -92]
Test Case: 551 | Input/Output: [(71 -34 -63 -35) -63]
Test Case: 552 | Input/Output: [(-70 -73 -63 35) -73]
Test Case: 553 | Input/Output: [(-73 85 50 60) -73]
Test Case: 554 | Input/Output: [(-56 -69 32 -1) -69]
Test Case: 555 | Input/Output: [(19 68 81 -81) -81]
Test Case: 556 | Input/Output: [(-99 95 23 -11) -99]
Test Case: 557 | Input/Output: [(10 -15 -82 27) -82]
Test Case: 558 | Input/Output: [(-97 -67 -43 -22) -97]
Test Case: 559 | Input/Output: [(-80 -38 50 -90) -90]
Test Case: 560 | Input/Output: [(67 9 -6 53) -6]
Test Case: 561 | Input/Output: [(98 -68 67 37) -68]
Test Case: 562 | Input/Output: [(-14 -9 -88 58) -88]
Test Case: 563 | Input/Output: [(9 30 69 -74) -74]
Test Case: 564 | Input/Output: [(-72 -75 7 75) -75]
Test Case: 565 | Input/Output: [(66 9 -66 -52) -66]
Test Case: 566 | Input/Output: [(41 -61 51 -77) -77]
Test Case: 567 | Input/Output: [(62 -10 98 -90) -90]
Test Case: 568 | Input/Output: [(-13 -1 -15 37) -15]
Test Case: 569 | Input/Output: [(-95 -30 -6 -20) -95]
Test Case: 570 | Input/Output: [(-63 9 97 90) -63]
Test Case: 571 | Input/Output: [(-98 -91 -57 -78) -98]
Test Case: 572 | Input/Output: [(61 -24 -76 -15) -76]
Test Case: 573 | Input/Output: [(-33 17 -20 -52) -52]
Test Case: 574 | Input/Output: [(19 43 -51 48) -51]
Test Case: 575 | Input/Output: [(-15 -67 50 89) -67]
Test Case: 576 | Input/Output: [(65 -66 -25 -51) -66]
Test Case: 577 | Input/Output: [(-80 85 56 -19) -80]
Test Case: 578 | Input/Output: [(68 5 1 30) 1]
Test Case: 579 | Input/Output: [(18 -74 -36 -13) -74]
Test Case: 580 | Input/Output: [(-20 -96 31 99) -96]
Test Case: 581 | Input/Output: [(19 -7 0 -35) -35]
Test Case: 582 | Input/Output: [(-21 52 -41 47) -41]
Test Case: 583 | Input/Output: [(-7 -10 95 -99) -99]
Test Case: 584 | Input/Output: [(-64 -71 60 -22) -71]
Test Case: 585 | Input/Output: [(-24 -85 77 -73) -85]
Test Case: 586 | Input/Output: [(21 61 82 96) 21]
Test Case: 587 | Input/Output: [(-15 43 94 -33) -33]
Test Case: 588 | Input/Output: [(71 -83 2 -91) -91]
Test Case: 589 | Input/Output: [(-6 67 -65 -31) -65]
Test Case: 590 | Input/Output: [(-97 47 71 -7) -97]
Test Case: 591 | Input/Output: [(14 -61 76 -24) -61]
Test Case: 592 | Input/Output: [(53 75 87 -34) -34]
Test Case: 593 | Input/Output: [(85 -30 95 -60) -60]
Test Case: 594 | Input/Output: [(-40 -63 -22 64) -63]
Test Case: 595 | Input/Output: [(-85 -43 -1 100) -85]
Test Case: 596 | Input/Output: [(-90 -78 -21 0) -90]
Test Case: 597 | Input/Output: [(16 -60 59 -98) -98]
Test Case: 598 | Input/Output: [(18 51 50 46) 18]
Test Case: 599 | Input/Output: [(-40 85 -68 -62) -68]
Test Case: 600 | Input/Output: [(-39 42 9 -14) -39]
Test Case: 601 | Input/Output: [(33 8 -80 31) -80]
Test Case: 602 | Input/Output: [(-32 14 -2 -85) -85]
Test Case: 603 | Input/Output: [(4 -94 84 -83) -94]
Test Case: 604 | Input/Output: [(53 61 15 24) 15]
Test Case: 605 | Input/Output: [(36 92 -40 -98) -98]
Test Case: 606 | Input/Output: [(-14 85 93 -95) -95]
Test Case: 607 | Input/Output: [(29 96 84 -61) -61]
Test Case: 608 | Input/Output: [(-67 42 -18 68) -67]
Test Case: 609 | Input/Output: [(-94 -17 -39 -46) -94]
Test Case: 610 | Input/Output: [(34 -58 15 28) -58]
Test Case: 611 | Input/Output: [(-54 -87 89 -22) -87]
Test Case: 612 | Input/Output: [(-56 22 40 -85) -85]
Test Case: 613 | Input/Output: [(99 91 -68 -12) -68]
Test Case: 614 | Input/Output: [(-92 -33 75 73) -92]
Test Case: 615 | Input/Output: [(-45 -78 95 -12) -78]
Test Case: 616 | Input/Output: [(-5 -57 -40 -1) -57]
Test Case: 617 | Input/Output: [(14 32 93 54) 14]
Test Case: 618 | Input/Output: [(45 85 -32 70) -32]
Test Case: 619 | Input/Output: [(62 100 -27 28) -27]
Test Case: 620 | Input/Output: [(-79 68 -22 -70) -79]
Test Case: 621 | Input/Output: [(-28 -97 67 69) -97]
Test Case: 622 | Input/Output: [(-36 57 92 -59) -59]
Test Case: 623 | Input/Output: [(-86 -59 23 -90) -90]
Test Case: 624 | Input/Output: [(-7 -90 -25 -57) -90]
Test Case: 625 | Input/Output: [(-25 -66 29 -29) -66]
Test Case: 626 | Input/Output: [(43 -54 -75 59) -75]
Test Case: 627 | Input/Output: [(-25 6 -42 -84) -84]
Test Case: 628 | Input/Output: [(-41 -13 -64 23) -64]
Test Case: 629 | Input/Output: [(-65 -43 -44 -46) -65]
Test Case: 630 | Input/Output: [(-49 -13 -6 -15) -49]
Test Case: 631 | Input/Output: [(24 -99 -78 -40) -99]
Test Case: 632 | Input/Output: [(53 -9 -29 22) -29]
Test Case: 633 | Input/Output: [(-17 -24 69 14) -24]
Test Case: 634 | Input/Output: [(4 15 -13 74) -13]
Test Case: 635 | Input/Output: [(-32 -1 59 -55) -55]
Test Case: 636 | Input/Output: [(5 100 -46 68) -46]
Test Case: 637 | Input/Output: [(-63 -49 84 6) -63]
Test Case: 638 | Input/Output: [(11 28 -87 69) -87]
Test Case: 639 | Input/Output: [(77 35 -24 -79) -79]
Test Case: 640 | Input/Output: [(15 -5 -6 -100) -100]
Test Case: 641 | Input/Output: [(25 90 57 -63) -63]
Test Case: 642 | Input/Output: [(60 13 -48 -14) -48]
Test Case: 643 | Input/Output: [(-66 -32 44 -90) -90]
Test Case: 644 | Input/Output: [(21 -91 92 -11) -91]
Test Case: 645 | Input/Output: [(-8 -9 46 31) -9]
Test Case: 646 | Input/Output: [(-72 31 63 -95) -95]
Test Case: 647 | Input/Output: [(-18 -91 -18 -35) -91]
Test Case: 648 | Input/Output: [(28 -33 -19 100) -33]
Test Case: 649 | Input/Output: [(-86 -81 -68 -16) -86]
Test Case: 650 | Input/Output: [(61 4 52 37) 4]
Test Case: 651 | Input/Output: [(-81 -86 23 54) -86]
Test Case: 652 | Input/Output: [(39 48 -25 -94) -94]
Test Case: 653 | Input/Output: [(29 -94 51 -37) -94]
Test Case: 654 | Input/Output: [(-88 -9 69 96) -88]
Test Case: 655 | Input/Output: [(-32 -55 -58 -15) -58]
Test Case: 656 | Input/Output: [(-69 1 100 -97) -97]
Test Case: 657 | Input/Output: [(96 33 59 98) 33]
Test Case: 658 | Input/Output: [(-78 31 -25 -38) -78]
Test Case: 659 | Input/Output: [(14 20 -58 33) -58]
Test Case: 660 | Input/Output: [(78 -83 -56 43) -83]
Test Case: 661 | Input/Output: [(99 -14 -65 0) -65]
Test Case: 662 | Input/Output: [(-93 53 8 -28) -93]
Test Case: 663 | Input/Output: [(80 67 -22 -21) -22]
Test Case: 664 | Input/Output: [(15 -63 1 -37) -63]
Test Case: 665 | Input/Output: [(44 -84 -77 91) -84]
Test Case: 666 | Input/Output: [(-14 14 67 -19) -19]
Test Case: 667 | Input/Output: [(39 -80 -90 -6) -90]
Test Case: 668 | Input/Output: [(-27 19 97 -70) -70]
Test Case: 669 | Input/Output: [(59 -41 -20 -97) -97]
Test Case: 670 | Input/Output: [(74 13 -24 -94) -94]
Test Case: 671 | Input/Output: [(9 67 81 27) 9]
Test Case: 672 | Input/Output: [(-63 -51 85 -100) -100]
Test Case: 673 | Input/Output: [(-54 96 -82 -74) -82]
Test Case: 674 | Input/Output: [(83 34 -59 4) -59]
Test Case: 675 | Input/Output: [(62 66 -10 -93) -93]
Test Case: 676 | Input/Output: [(-44 52 -26 88) -44]
Test Case: 677 | Input/Output: [(26 -1 -23 76) -23]
Test Case: 678 | Input/Output: [(85 54 -25 79) -25]
Test Case: 679 | Input/Output: [(-76 -73 -19 -12) -76]
Test Case: 680 | Input/Output: [(35 95 -21 -37) -37]
Test Case: 681 | Input/Output: [(79 -69 70 -15) -69]
Test Case: 682 | Input/Output: [(29 9 -100 79) -100]
Test Case: 683 | Input/Output: [(-16 -52 -38 94) -52]
Test Case: 684 | Input/Output: [(-74 65 -27 -42) -74]
Test Case: 685 | Input/Output: [(-80 -48 -80 -38) -80]
Test Case: 686 | Input/Output: [(82 19 7 10) 7]
Test Case: 687 | Input/Output: [(72 -25 -35 83) -35]
Test Case: 688 | Input/Output: [(57 67 -70 -14) -70]
Test Case: 689 | Input/Output: [(28 22 31 -86) -86]
Test Case: 690 | Input/Output: [(32 -42 28 92) -42]
Test Case: 691 | Input/Output: [(-34 74 74 -75) -75]
Test Case: 692 | Input/Output: [(23 1 63 100) 1]
Test Case: 693 | Input/Output: [(-70 -52 -91 59) -91]
Test Case: 694 | Input/Output: [(69 -22 82 -53) -53]
Test Case: 695 | Input/Output: [(69 6 36 -98) -98]
Test Case: 696 | Input/Output: [(-40 -9 -69 17) -69]
Test Case: 697 | Input/Output: [(-43 42 -75 -8) -75]
Test Case: 698 | Input/Output: [(-26 -12 -9 -13) -26]
Test Case: 699 | Input/Output: [(98 99 -13 16) -13]
Test Case: 700 | Input/Output: [(-16 4 -3 -61) -61]
Test Case: 701 | Input/Output: [(92 89 67 15) 15]
Test Case: 702 | Input/Output: [(-9 -43 -54 35) -54]
Test Case: 703 | Input/Output: [(-94 -51 14 -39) -94]
Test Case: 704 | Input/Output: [(-11 -75 13 -69) -75]
Test Case: 705 | Input/Output: [(1 -74 3 -20) -74]
Test Case: 706 | Input/Output: [(-56 62 17 100) -56]
Test Case: 707 | Input/Output: [(-34 57 -47 19) -47]
Test Case: 708 | Input/Output: [(-5 -72 50 64) -72]
Test Case: 709 | Input/Output: [(25 99 -2 4) -2]
Test Case: 710 | Input/Output: [(-73 38 14 57) -73]
Test Case: 711 | Input/Output: [(-64 -30 88 -34) -64]
Test Case: 712 | Input/Output: [(51 71 -53 29) -53]
Test Case: 713 | Input/Output: [(-17 -29 -74 -98) -98]
Test Case: 714 | Input/Output: [(-68 -99 -8 -41) -99]
Test Case: 715 | Input/Output: [(-86 64 45 33) -86]
Test Case: 716 | Input/Output: [(14 -26 -63 64) -63]
Test Case: 717 | Input/Output: [(-81 -87 -68 23) -87]
Test Case: 718 | Input/Output: [(64 -76 5 79) -76]
Test Case: 719 | Input/Output: [(66 -89 11 13) -89]
Test Case: 720 | Input/Output: [(71 26 44 91) 26]
Test Case: 721 | Input/Output: [(-92 -46 -19 -58) -92]
Test Case: 722 | Input/Output: [(95 -53 -65 72) -65]
Test Case: 723 | Input/Output: [(16 37 -88 -89) -89]
Test Case: 724 | Input/Output: [(-35 55 -90 -94) -94]
Test Case: 725 | Input/Output: [(-62 14 12 34) -62]
Test Case: 726 | Input/Output: [(-55 -38 -64 27) -64]
Test Case: 727 | Input/Output: [(51 98 -6 -11) -11]
Test Case: 728 | Input/Output: [(-18 -5 63 -7) -18]
Test Case: 729 | Input/Output: [(32 48 -11 60) -11]
Test Case: 730 | Input/Output: [(-15 -83 76 -60) -83]
Test Case: 731 | Input/Output: [(-76 16 19 -12) -76]
Test Case: 732 | Input/Output: [(-35 24 47 -16) -35]
Test Case: 733 | Input/Output: [(-40 -72 89 -98) -98]
Test Case: 734 | Input/Output: [(-70 -88 -37 -82) -88]
Test Case: 735 | Input/Output: [(-7 -6 -79 -70) -79]
Test Case: 736 | Input/Output: [(-80 59 11 -1) -80]
Test Case: 737 | Input/Output: [(-11 -68 -16 42) -68]
Test Case: 738 | Input/Output: [(62 -1 -85 -49) -85]
Test Case: 739 | Input/Output: [(91 -7 -71 39) -71]
Test Case: 740 | Input/Output: [(51 71 1 68) 1]
Test Case: 741 | Input/Output: [(-38 78 47 93) -38]
Test Case: 742 | Input/Output: [(-32 10 74 67) -32]
Test Case: 743 | Input/Output: [(-58 -13 -94 -99) -99]
Test Case: 744 | Input/Output: [(-100 -84 7 -30) -100]
Test Case: 745 | Input/Output: [(20 71 -60 11) -60]
Test Case: 746 | Input/Output: [(-45 9 94 -60) -60]
Test Case: 747 | Input/Output: [(-11 61 29 -41) -41]
Test Case: 748 | Input/Output: [(95 -13 17 -28) -28]
Test Case: 749 | Input/Output: [(-50 84 -19 -80) -80]
Test Case: 750 | Input/Output: [(-24 35 45 38) -24]
Test Case: 751 | Input/Output: [(66 -80 -38 -91) -91]
Test Case: 752 | Input/Output: [(-46 -88 -75 -82) -88]
Test Case: 753 | Input/Output: [(79 -38 85 81) -38]
Test Case: 754 | Input/Output: [(-57 -21 -19 -83) -83]
Test Case: 755 | Input/Output: [(-32 -54 -11 49) -54]
Test Case: 756 | Input/Output: [(83 -82 -64 -43) -82]
Test Case: 757 | Input/Output: [(43 26 5 -42) -42]
Test Case: 758 | Input/Output: [(47 -17 53 -1) -17]
Test Case: 759 | Input/Output: [(42 58 32 -38) -38]
Test Case: 760 | Input/Output: [(-5 -11 21 -96) -96]
Test Case: 761 | Input/Output: [(-21 -91 -79 28) -91]
Test Case: 762 | Input/Output: [(-64 -14 -20 56) -64]
Test Case: 763 | Input/Output: [(-61 -59 10 27) -61]
Test Case: 764 | Input/Output: [(-30 69 87 -60) -60]
Test Case: 765 | Input/Output: [(4 73 -41 -84) -84]
Test Case: 766 | Input/Output: [(75 -51 -12 5) -51]
Test Case: 767 | Input/Output: [(32 86 -66 -37) -66]
Test Case: 768 | Input/Output: [(-9 88 -12 79) -12]
Test Case: 769 | Input/Output: [(-24 97 64 61) -24]
Test Case: 770 | Input/Output: [(91 47 -52 -14) -52]
Test Case: 771 | Input/Output: [(63 -83 -14 -6) -83]
Test Case: 772 | Input/Output: [(-65 -61 -32 97) -65]
Test Case: 773 | Input/Output: [(17 54 -39 76) -39]
Test Case: 774 | Input/Output: [(-66 23 1 42) -66]
Test Case: 775 | Input/Output: [(-88 -70 34 55) -88]
Test Case: 776 | Input/Output: [(-91 17 93 29) -91]
Test Case: 777 | Input/Output: [(79 -62 70 3) -62]
Test Case: 778 | Input/Output: [(22 70 -98 8) -98]
Test Case: 779 | Input/Output: [(-63 -53 1 -19) -63]
Test Case: 780 | Input/Output: [(-62 -70 -52 41) -70]
Test Case: 781 | Input/Output: [(82 -22 -25 58) -25]
Test Case: 782 | Input/Output: [(-43 -94 24 -11) -94]
Test Case: 783 | Input/Output: [(55 -55 47 9) -55]
Test Case: 784 | Input/Output: [(-67 47 37 -22) -67]
Test Case: 785 | Input/Output: [(28 13 77 -47) -47]
Test Case: 786 | Input/Output: [(-68 92 -47 -17) -68]
Test Case: 787 | Input/Output: [(-93 -17 12 -11) -93]
Test Case: 788 | Input/Output: [(-84 65 -92 41) -92]
Test Case: 789 | Input/Output: [(29 67 29 9) 9]
Test Case: 790 | Input/Output: [(-89 -53 -14 65) -89]
Test Case: 791 | Input/Output: [(-95 9 -44 -47) -95]
Test Case: 792 | Input/Output: [(22 75 41 32) 22]
Test Case: 793 | Input/Output: [(19 -14 -78 8) -78]
Test Case: 794 | Input/Output: [(74 -36 37 -53) -53]
Test Case: 795 | Input/Output: [(86 -72 54 -89) -89]
Test Case: 796 | Input/Output: [(27 80 -13 -41) -41]
Test Case: 797 | Input/Output: [(78 -78 -29 -36) -78]
Test Case: 798 | Input/Output: [(37 -52 9 51) -52]
Test Case: 799 | Input/Output: [(-62 -40 46 -19) -62]
Test Case: 800 | Input/Output: [(60 -2 91 -72) -72]
Test Case: 801 | Input/Output: [(-23 -40 -7 -38) -40]
Test Case: 802 | Input/Output: [(3 89 36 81) 3]
Test Case: 803 | Input/Output: [(-3 -21 -98 -51) -98]
Test Case: 804 | Input/Output: [(-92 84 69 -33) -92]
Test Case: 805 | Input/Output: [(-1 -59 -51 -33) -59]
Test Case: 806 | Input/Output: [(89 -17 96 -13) -17]
Test Case: 807 | Input/Output: [(26 -52 -41 90) -52]
Test Case: 808 | Input/Output: [(90 79 -52 -67) -67]
Test Case: 809 | Input/Output: [(-22 -99 46 -85) -99]
Test Case: 810 | Input/Output: [(65 45 79 -70) -70]
Test Case: 811 | Input/Output: [(52 -15 25 -30) -30]
Test Case: 812 | Input/Output: [(32 0 -12 -23) -23]
Test Case: 813 | Input/Output: [(-35 96 78 36) -35]
Test Case: 814 | Input/Output: [(-52 34 -40 -78) -78]
Test Case: 815 | Input/Output: [(76 -84 -16 -41) -84]
Test Case: 816 | Input/Output: [(88 -97 86 54) -97]
Test Case: 817 | Input/Output: [(-86 -57 -51 -18) -86]
Test Case: 818 | Input/Output: [(100 70 -48 -3) -48]
Test Case: 819 | Input/Output: [(-69 -79 58 11) -79]
Test Case: 820 | Input/Output: [(-92 -23 33 -51) -92]
Test Case: 821 | Input/Output: [(-30 -16 99 -86) -86]
Test Case: 822 | Input/Output: [(70 -1 -5 -13) -13]
Test Case: 823 | Input/Output: [(-81 74 -44 -72) -81]
Test Case: 824 | Input/Output: [(59 -77 -22 -38) -77]
Test Case: 825 | Input/Output: [(88 -72 -29 78) -72]
Test Case: 826 | Input/Output: [(67 46 -69 5) -69]
Test Case: 827 | Input/Output: [(-79 -85 71 -42) -85]
Test Case: 828 | Input/Output: [(-93 28 83 -88) -93]
Test Case: 829 | Input/Output: [(-47 -4 -74 100) -74]
Test Case: 830 | Input/Output: [(96 18 95 -17) -17]
Test Case: 831 | Input/Output: [(34 2 -38 -18) -38]
Test Case: 832 | Input/Output: [(73 46 72 -67) -67]
Test Case: 833 | Input/Output: [(-81 62 -87 -9) -87]
Test Case: 834 | Input/Output: [(34 -23 23 25) -23]
Test Case: 835 | Input/Output: [(-36 19 -29 -93) -93]
Test Case: 836 | Input/Output: [(-60 33 94 81) -60]
Test Case: 837 | Input/Output: [(23 97 19 74) 19]
Test Case: 838 | Input/Output: [(71 42 -31 92) -31]
Test Case: 839 | Input/Output: [(83 49 85 -72) -72]
Test Case: 840 | Input/Output: [(-30 -67 -25 -97) -97]
Test Case: 841 | Input/Output: [(-68 -63 23 -64) -68]
Test Case: 842 | Input/Output: [(-49 58 -24 -41) -49]
Test Case: 843 | Input/Output: [(33 -88 63 -68) -88]
Test Case: 844 | Input/Output: [(90 72 5 -4) -4]
Test Case: 845 | Input/Output: [(68 -33 78 -88) -88]
Test Case: 846 | Input/Output: [(-48 54 35 -72) -72]
Test Case: 847 | Input/Output: [(71 90 76 -44) -44]
Test Case: 848 | Input/Output: [(73 56 -94 23) -94]
Test Case: 849 | Input/Output: [(8 61 39 42) 8]
Test Case: 850 | Input/Output: [(51 -49 51 -28) -49]
Test Case: 851 | Input/Output: [(-100 45 -71 -48) -100]
Test Case: 852 | Input/Output: [(28 -9 -35 34) -35]
Test Case: 853 | Input/Output: [(31 -90 33 29) -90]
Test Case: 854 | Input/Output: [(80 7 -73 -80) -80]
Test Case: 855 | Input/Output: [(-100 -47 -86 4) -100]
Test Case: 856 | Input/Output: [(19 -61 21 -27) -61]
Test Case: 857 | Input/Output: [(-99 -68 47 -31) -99]
Test Case: 858 | Input/Output: [(84 -26 -28 -47) -47]
Test Case: 859 | Input/Output: [(38 16 -89 -100) -100]
Test Case: 860 | Input/Output: [(100 -65 40 -14) -65]
Test Case: 861 | Input/Output: [(20 13 -12 -33) -33]
Test Case: 862 | Input/Output: [(66 -26 42 -70) -70]
Test Case: 863 | Input/Output: [(-55 -51 -10 -48) -55]
Test Case: 864 | Input/Output: [(-6 63 26 67) -6]
Test Case: 865 | Input/Output: [(62 -12 5 98) -12]
Test Case: 866 | Input/Output: [(34 92 -39 -69) -69]
Test Case: 867 | Input/Output: [(-3 0 -99 45) -99]
Test Case: 868 | Input/Output: [(-37 -95 -17 -66) -95]
Test Case: 869 | Input/Output: [(12 -64 31 22) -64]
Test Case: 870 | Input/Output: [(40 -10 40 -82) -82]
Test Case: 871 | Input/Output: [(86 -53 27 71) -53]
Test Case: 872 | Input/Output: [(33 44 -69 -47) -69]
Test Case: 873 | Input/Output: [(-38 -92 82 -1) -92]
Test Case: 874 | Input/Output: [(-55 93 95 -43) -55]
Test Case: 875 | Input/Output: [(-56 45 38 66) -56]
Test Case: 876 | Input/Output: [(-91 -83 60 -68) -91]
Test Case: 877 | Input/Output: [(-35 2 96 -39) -39]
Test Case: 878 | Input/Output: [(64 -100 22 -98) -100]
Test Case: 879 | Input/Output: [(-10 62 -13 -57) -57]
Test Case: 880 | Input/Output: [(-32 68 -94 -57) -94]
Test Case: 881 | Input/Output: [(61 64 24 -11) -11]
Test Case: 882 | Input/Output: [(-76 -51 -39 17) -76]
Test Case: 883 | Input/Output: [(63 -49 94 95) -49]
Test Case: 884 | Input/Output: [(-69 -72 58 -45) -72]
Test Case: 885 | Input/Output: [(58 23 -47 96) -47]
Test Case: 886 | Input/Output: [(-74 -82 45 -76) -82]
Test Case: 887 | Input/Output: [(89 -63 -1 -12) -63]
Test Case: 888 | Input/Output: [(-15 91 22 0) -15]
Test Case: 889 | Input/Output: [(19 50 1 24) 1]
Test Case: 890 | Input/Output: [(9 12 -47 66) -47]
Test Case: 891 | Input/Output: [(-48 -71 39 -81) -81]
Test Case: 892 | Input/Output: [(-74 -73 -42 -38) -74]
Test Case: 893 | Input/Output: [(0 86 34 66) 0]
Test Case: 894 | Input/Output: [(52 85 -100 -4) -100]
Test Case: 895 | Input/Output: [(-37 -38 10 -46) -46]
Test Case: 896 | Input/Output: [(-84 81 -94 93) -94]
Test Case: 897 | Input/Output: [(38 66 -12 -92) -92]
Test Case: 898 | Input/Output: [(15 -6 78 27) -6]
Test Case: 899 | Input/Output: [(-70 -93 -2 -51) -93]
Test Case: 900 | Input/Output: [(82 37 -79 81) -79]
Test Case: 901 | Input/Output: [(28 -36 -23 -63) -63]
Test Case: 902 | Input/Output: [(23 -51 63 7) -51]
Test Case: 903 | Input/Output: [(44 -77 86 25) -77]
Test Case: 904 | Input/Output: [(-4 -59 -54 96) -59]
Test Case: 905 | Input/Output: [(50 -14 48 49) -14]
Test Case: 906 | Input/Output: [(-22 64 31 -18) -22]
Test Case: 907 | Input/Output: [(12 -14 20 -38) -38]
Test Case: 908 | Input/Output: [(22 100 -62 -20) -62]
Test Case: 909 | Input/Output: [(-11 -26 -72 78) -72]
Test Case: 910 | Input/Output: [(-77 -33 5 84) -77]
Test Case: 911 | Input/Output: [(-30 96 82 -10) -30]
Test Case: 912 | Input/Output: [(-13 -72 36 -68) -72]
Test Case: 913 | Input/Output: [(8 13 73 -13) -13]
Test Case: 914 | Input/Output: [(41 77 80 -49) -49]
Test Case: 915 | Input/Output: [(74 -62 -94 73) -94]
Test Case: 916 | Input/Output: [(-36 9 -35 -29) -36]
Test Case: 917 | Input/Output: [(73 98 -88 61) -88]
Test Case: 918 | Input/Output: [(-73 27 4 36) -73]
Test Case: 919 | Input/Output: [(58 21 46 2) 2]
Test Case: 920 | Input/Output: [(-98 49 72 -31) -98]
Test Case: 921 | Input/Output: [(-62 80 75 -62) -62]
Test Case: 922 | Input/Output: [(-36 -7 -11 94) -36]
Test Case: 923 | Input/Output: [(15 -28 -87 26) -87]
Test Case: 924 | Input/Output: [(-29 0 -29 51) -29]
Test Case: 925 | Input/Output: [(-6 -53 -87 100) -87]
Test Case: 926 | Input/Output: [(-93 7 -10 15) -93]
Test Case: 927 | Input/Output: [(7 -13 61 9) -13]
Test Case: 928 | Input/Output: [(47 40 22 -79) -79]
Test Case: 929 | Input/Output: [(-60 -81 21 62) -81]
Test Case: 930 | Input/Output: [(-74 88 31 -38) -74]
Test Case: 931 | Input/Output: [(84 34 92 20) 20]
Test Case: 932 | Input/Output: [(73 -92 78 -17) -92]
Test Case: 933 | Input/Output: [(-16 -26 -75 -52) -75]
Test Case: 934 | Input/Output: [(-77 -80 -37 -46) -80]
Test Case: 935 | Input/Output: [(-64 2 -28 60) -64]
Test Case: 936 | Input/Output: [(59 22 -64 -44) -64]
Test Case: 937 | Input/Output: [(78 -22 -18 -49) -49]
Test Case: 938 | Input/Output: [(-13 43 -30 15) -30]
Test Case: 939 | Input/Output: [(52 -3 -40 -51) -51]
Test Case: 940 | Input/Output: [(67 -12 84 -16) -16]
Test Case: 941 | Input/Output: [(46 50 -99 24) -99]
Test Case: 942 | Input/Output: [(-56 -65 -86 88) -86]
Test Case: 943 | Input/Output: [(-13 -32 -98 -58) -98]
Test Case: 944 | Input/Output: [(-24 -7 -42 -77) -77]
Test Case: 945 | Input/Output: [(68 -28 -68 -59) -68]
Test Case: 946 | Input/Output: [(84 83 27 26) 26]
Test Case: 947 | Input/Output: [(19 79 56 -46) -46]
Test Case: 948 | Input/Output: [(-47 -93 74 -2) -93]
Test Case: 949 | Input/Output: [(34 -49 -22 -54) -54]
Test Case: 950 | Input/Output: [(-37 -35 88 4) -37]
Test Case: 951 | Input/Output: [(-35 -90 -68 60) -90]
Test Case: 952 | Input/Output: [(10 -71 -97 10) -97]
Test Case: 953 | Input/Output: [(-80 53 92 -31) -80]
Test Case: 954 | Input/Output: [(13 -53 -72 -62) -72]
Test Case: 955 | Input/Output: [(-54 -19 -55 -99) -99]
Test Case: 956 | Input/Output: [(92 -99 14 -41) -99]
Test Case: 957 | Input/Output: [(-84 30 -77 -24) -84]
Test Case: 958 | Input/Output: [(-56 22 0 -57) -57]
Test Case: 959 | Input/Output: [(11 82 -33 -49) -49]
Test Case: 960 | Input/Output: [(9 96 -82 58) -82]
Test Case: 961 | Input/Output: [(-98 -59 -2 73) -98]
Test Case: 962 | Input/Output: [(68 -95 -72 -2) -95]
Test Case: 963 | Input/Output: [(50 75 84 -1) -1]
Test Case: 964 | Input/Output: [(-19 8 -43 -41) -43]
Test Case: 965 | Input/Output: [(-40 1 57 10) -40]
Test Case: 966 | Input/Output: [(-86 -52 84 -92) -92]
Test Case: 967 | Input/Output: [(43 -40 -35 -33) -40]
Test Case: 968 | Input/Output: [(-76 93 59 78) -76]
Test Case: 969 | Input/Output: [(70 -88 43 97) -88]
Test Case: 970 | Input/Output: [(27 -3 -46 6) -46]
Test Case: 971 | Input/Output: [(-91 -42 -2 38) -91]
Test Case: 972 | Input/Output: [(-85 63 -64 19) -85]
Test Case: 973 | Input/Output: [(-21 -31 81 4) -31]
Test Case: 974 | Input/Output: [(0 -53 65 -86) -86]
Test Case: 975 | Input/Output: [(-69 -78 92 44) -78]
Test Case: 976 | Input/Output: [(-61 -64 25 9) -64]
Test Case: 977 | Input/Output: [(-36 -44 -26 -18) -44]
Test Case: 978 | Input/Output: [(23 58 86 90) 23]
Test Case: 979 | Input/Output: [(-53 1 22 15) -53]
Test Case: 980 | Input/Output: [(15 -7 25 -57) -57]
Test Case: 981 | Input/Output: [(100 -42 -63 -41) -63]
Test Case: 982 | Input/Output: [(-45 53 14 -19) -45]
Test Case: 983 | Input/Output: [(-41 -1 -72 -73) -73]
Test Case: 984 | Input/Output: [(14 77 -65 14) -65]
Test Case: 985 | Input/Output: [(32 -4 92 -39) -39]
Test Case: 986 | Input/Output: [(-92 -4 -63 67) -92]
Test Case: 987 | Input/Output: [(12 88 30 -45) -45]
Test Case: 988 | Input/Output: [(72 -26 -51 -7) -51]
Test Case: 989 | Input/Output: [(92 -53 -85 -98) -98]
Test Case: 990 | Input/Output: [(-61 69 -20 1) -61]
Test Case: 991 | Input/Output: [(-29 65 11 67) -29]
Test Case: 992 | Input/Output: [(100 29 -21 -58) -58]
Test Case: 993 | Input/Output: [(99 -65 38 81) -65]
Test Case: 994 | Input/Output: [(-50 -66 -7 6) -66]
Test Case: 995 | Input/Output: [(62 -47 -39 -25) -47]
Test Case: 996 | Input/Output: [(82 29 -98 -53) -98]
Test Case: 997 | Input/Output: [(21 -2 -35 12) -35]
Test Case: 998 | Input/Output: [(-57 -88 -84 89) -88]
Test Case: 999 | Input/Output: [(-38 -38 100 49) -38]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 103 12 -22 -76 -89 -67 -76 -69 78 63 -96 -80 -29 -7 28 32
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -13 -32 -32] -32] [[-71 -71 -41 -71] -71] [[93 93 93 55] 55] [[38 -25 -25 -25] -25] [[27 78 78 78] 27] [[-5 -70 -70 -70] -70] [[-51 -28 -51 -51] -51] [[-60 -60 95 -60] -60] [[56 56 -52 56] -52] [[91 98 91 91] 91] [(55 55 55 55) 55] [(-58 -58 -58 -58) -58] [(-62 -62 -62 -62) -62] [(-51 -51 -51 -51) -51] [(-35 -35 -35 -35) -35] [(91 96 70 28) 28] [(96 18 59 4) 4] [(7 49 39 31) 7] [(71 87 90 76) 71] [(64 23 42 44) 23] [(39 22 41 57) 22] [(64 35 45 78) 35] [(38 13 50 73) 13] [(77 58 72 20) 20] [(29 56 71 81) 29] [(34 5 36 46) 5] [(36 11 64 30) 11] [(33 51 42 34) 33] [(13 50 73 19) 13] [(78 54 73 71) 54] [(89 39 70 43) 39] [(84 99 77 56) 56] [(89 83 12 57) 12] [(21 12 27 65) 12] [(88 82 14 10) 10] [(-49 70 86 -93) -93] [(-71 18 -87 -77) -87] [(18 -63 76 6) -63] [(83 -6 -97 54) -97] [(58 -38 73 -78) -78] [(20 55 -40 -18) -40] [(-15 0 -75 85) -75] [(4 25 47 -61) -61] [(31 40 -51 26) -51] [(-21 41 -10 -75) -75] [(11 40 -9 -22) -22] [(-80 -50 -78 83) -80] [(51 54 -51 62) -51] [(-66 95 -73 -29) -73] [(-83 -39 -66 11) -83] [(71 14 69 -51) -51] [(85 -36 -16 73) -36] [(-49 -58 62 -56) -58] [(-53 -12 100 69) -53] [(-50 -90 83 73) -90] [(72 73 -37 75) -37] [(92 -65 -5 -76) -76] [(64 73 17 -52) -52] [(-22 83 -93 10) -93] [(-75 19 48 63) -75] [(-72 70 24 -47) -72] [(-53 83 -30 -49) -53] [(-22 -62 70 -43) -62] [(85 27 30 26) 26] [(-67 -2 -54 43) -67] [(-3 -95 50 -42) -95] [(-13 -11 85 86) -13] [(-100 99 -23 -63) -100] [(-46 -37 -41 -20) -46] [(-83 38 26 66) -83] [(-69 -89 17 -85) -89] [(89 -94 -70 54) -94] [(81 0 -89 60) -89] [(24 0 -20 -48) -48] [(46 46 -45 -77) -77] [(92 -9 53 -4) -9] [(82 -46 45 -97) -97] [(32 -1 18 -9) -9] [(17 -70 -6 -59) -70] [(3 -24 62 -26) -26] [(-60 67 14 -76) -76] [(-24 15 -19 -24) -24] [(-15 98 75 -62) -62] [(91 67 47 -39) -39] [(49 -23 -9 -85) -85] [(52 -43 34 29) -43] [(-34 56 51 -24) -34] [(31 88 44 -16) -16] [(-45 -92 -10 -94) -94] [(-46 -13 -16 17) -46] [(60 58 -9 90) -9] [(-84 60 91 94) -84] [(-45 1 9 87) -45] [(-17 82 39 -29) -29] [(-77 11 75 -51) -77])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 64                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 64                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 78                 
Correct output: 39                  | Program output: 89                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 89                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 88                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: 18                 
Correct output: -97                 | Program output: 83                 
Correct output: -78                 | Program output: 58                 
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 71                 
Correct output: -36                 | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: 92                 
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -22                
Correct output: 26                  | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -3                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -69                
Correct output: -94                 | Program output: 89                 
Correct output: -89                 | Program output: 81                 
Correct output: -48                 | Program output: 24                 
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: 92                 
Correct output: -97                 | Program output: 82                 
Correct output: -9                  | Program output: 32                 
Correct output: -70                 | Program output: 17                 
Correct output: -26                 | Program output: 3                  
Correct output: -76                 | Program output: -60                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 91                 
Correct output: -85                 | Program output: 49                 
Correct output: -43                 | Program output: 52                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 60                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_empty integer_mod exec_yank integer_min exec_y_when_autoconstructing (integer_shove integer_dec exec_yank) boolean_pop boolean_dup_times exec_yankdup exec_do*while (exec_s () () (exec_shove (integer_add exec_swap (integer_gt exec_swap () () boolean_invert_second_then_and) (exec_do*count (integer_dup_times integer_stackdepth) exec_yank in1) print_integer boolean_invert_second_then_and boolean_or exec_swap (boolean_invert_first_then_and) (integer_eq integer_flush exec_yankdup exec_shove (integer_eq exec_y (boolean_xor)))))))
Lexicase best errors: [0 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_empty integer_mod exec_yank integer_min exec_y_when_autoconstructing (integer_shove integer_dec exec_yank) boolean_pop boolean_dup_times exec_yankdup exec_do*while (exec_s () () (exec_shove (integer_add exec_swap (integer_gt exec_swap () () boolean_invert_second_then_and) (exec_do*count (integer_dup_times integer_stackdepth) exec_yank in1) print_integer boolean_invert_second_then_and boolean_or exec_swap (boolean_invert_first_then_and) (integer_eq integer_flush exec_yankdup exec_shove (integer_eq exec_y (boolean_xor)))))))
Zero cases best errors: [0 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 8 2 10 4 1 1 1 2 2)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (1 8 2 10 4 1 1 1 2 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (integer_empty integer_mod exec_yank integer_min exec_y_when_autoconstructing (integer_shove integer_dec exec_yank) boolean_pop boolean_dup_times exec_yankdup exec_do*while (exec_s () () (exec_shove (integer_add exec_swap (integer_gt exec_swap () () boolean_invert_second_then_and) (exec_do*count (integer_dup_times integer_stackdepth) exec_yank in1) print_integer boolean_invert_second_then_and boolean_or exec_swap (boolean_invert_first_then_and) (integer_eq integer_flush exec_yankdup exec_shove (integer_eq exec_y (boolean_xor)))))))
Errors: [0 0 1 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 52
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 9.968
Median total errors in population: 10
Error averages by case: (0.999 0.992 0.998 0.99 0.996 0.999 0.999 0.999 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.388
Average program size in population (points): 72.051
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 508959
--- Timings ---
Current time: 1559314741984 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 33.0%
Fitness Testing:      1.6 seconds, 62.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 44                 
Correct output: 22                  | Program output: 57                 
Correct output: 35                  | Program output: 78                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 81                 
Correct output: 5                   | Program output: 46                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 85                 
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: 83                 
Correct output: -51                 | Program output: 62                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: 11                 
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: 73                 
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: 69                 
Correct output: -90                 | Program output: 73                 
Correct output: -37                 | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 63                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: 43                 
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: 86                 
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -20                
Correct output: -83                 | Program output: 66                 
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: 54                 
Correct output: -89                 | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 17                 
Correct output: -9                  | Program output: 90                 
Correct output: -84                 | Program output: 94                 
Correct output: -45                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 3, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction tagged_812} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup_items integer_dec integer_dec exec_dup_items integer_yankdup integer_dup boolean_dup_items integer_swap exec_dup_items integer_eq in4 integer_yank boolean_swap print_integer in2 tagged_812 boolean_invert_first_then_and exec_do*range () integer_lte)
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.095
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 3, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction tagged_812} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup_items integer_dec integer_dec exec_dup_items integer_yankdup integer_dup boolean_dup_items integer_swap exec_dup_items integer_eq in4 integer_yank boolean_swap print_integer in2 tagged_812 boolean_invert_first_then_and exec_do*range () integer_lte)
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.095
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 281 1000 163 164 113 113 681 841 1000)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (113 281 0 163 164 113 113 681 841 0)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 3, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction tagged_812} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_lte})
Best program: (exec_if (integer_dec integer_dec exec_dup_items integer_yankdup integer_dup boolean_dup_items integer_swap exec_dup_items) (integer_eq in4 integer_yank boolean_swap print_integer) in2 tagged_812 boolean_invert_first_then_and exec_do*range () integer_lte)
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 7.531
Median total errors in population: 8
Error averages by case: (0.887 0.719 1.0 0.837 0.836 0.887 0.887 0.319 0.159 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 41.899
Average program size in population (points): 58.708
Average percent parens in population: 0.283
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.506
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 362
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1533526
--- Timings ---
Current time: 1559314744758 milliseconds
Total Time:           5.9 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.3 seconds, 39.4%
Fitness Testing:      2.6 seconds, 43.9%
Report:               0.9 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: 38                 
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 98                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 96                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 49                 
Correct output: 71                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 51                 
Correct output: 13                  | Program output: 50                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 99                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 82                 
Correct output: -93                 | Program output: 70                 
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: 83                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 25                 
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: 85                 
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: 92                 
Correct output: -52                 | Program output: 73                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: 38                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: 89                 
Correct output: -89                 | Program output: 81                 
Correct output: -48                 | Program output: 24                 
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: 17                 
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: 98                 
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: 49                 
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 56                 
Correct output: -16                 | Program output: 88                 
Correct output: -94                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 60                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: 82                 
Correct output: -77                 | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_dup_times print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) exec_if (boolean_shove boolean_eq) (exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())))
Lexicase best errors: [0 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_dup_times print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) exec_if (boolean_shove boolean_eq) (exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())))
Zero cases best errors: [0 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 715 4 284 284 325 560 30 35 285)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (170 715 4 284 284 325 560 30 35 285)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_dup_times print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) exec_if (boolean_shove boolean_eq) (exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())))
Errors: [0 1 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 61
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 7.308
Median total errors in population: 8
Error averages by case: (0.83 0.285 0.996 0.716 0.716 0.675 0.44 0.97 0.965 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.554
Average program size in population (points): 64.999
Average percent parens in population: 0.248
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.867
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2370753
--- Timings ---
Current time: 1559314748089 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 49.4%
Fitness Testing:      3.4 seconds, 37.0%
Report:               1.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 64                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 64                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 78                 
Correct output: 39                  | Program output: 89                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 82                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: 18                 
Correct output: -97                 | Program output: 83                 
Correct output: -78                 | Program output: 58                 
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 71                 
Correct output: -36                 | Program output: 85                 
Correct output: -58                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: 92                 
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -22                
Correct output: 26                  | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -3                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -69                
Correct output: -94                 | Program output: 89                 
Correct output: -89                 | Program output: 81                 
Correct output: -48                 | Program output: 24                 
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: 92                 
Correct output: -97                 | Program output: 82                 
Correct output: -9                  | Program output: 32                 
Correct output: -70                 | Program output: 17                 
Correct output: -26                 | Program output: 3                  
Correct output: -76                 | Program output: 67                 
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 91                 
Correct output: -85                 | Program output: 49                 
Correct output: -43                 | Program output: 52                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 60                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_dup_times print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) integer_fromboolean boolean_shove boolean_eq) exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Lexicase best errors: [1 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 59
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_dup_times print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) integer_fromboolean boolean_shove boolean_eq) exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Zero cases best errors: [1 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 59
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 247 153 407 247 98 98 221 403 440)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (152 247 153 407 247 98 98 221 403 440)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_dup_times print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) boolean_yankdup boolean_invert_second_then_and boolean_eq) exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Errors: [1 0 1 1 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 43
Size: 59
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.534
Median total errors in population: 7
Error averages by case: (0.848 0.753 0.847 0.593 0.753 0.902 0.902 0.779 0.597 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.023
Average program size in population (points): 65.078
Average percent parens in population: 0.273
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.25975
Median age in population: 4.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.004
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3086263
--- Timings ---
Current time: 1559314751017 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 52.5%
Fitness Testing:      4.1 seconds, 33.8%
Report:               1.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -28                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 96                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 64                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 64                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 77                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 78                 
Correct output: 39                  | Program output: 89                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 89                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 88                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: 18                 
Correct output: -63                 | Program output: 18                 
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: 58                 
Correct output: -40                 | Program output: 55                 
Correct output: -75                 | Program output: 0                  
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 40                 
Correct output: -75                 | Program output: 41                 
Correct output: -22                 | Program output: 40                 
Correct output: -80                 | Program output: -50                
Correct output: -51                 | Program output: 54                 
Correct output: -73                 | Program output: 95                 
Correct output: -83                 | Program output: -39                
Correct output: -51                 | Program output: 71                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: 73                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: 83                 
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: 83                 
Correct output: -62                 | Program output: -22                
Correct output: 26                  | Program output: 85                 
Correct output: -67                 | Program output: -2                 
Correct output: -95                 | Program output: -3                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: 99                 
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -69                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: 92                 
Correct output: -97                 | Program output: 82                 
Correct output: -9                  | Program output: 32                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: 3                  
Correct output: -76                 | Program output: -60                
Correct output: -24                 | Program output: 15                 
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 91                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: 52                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -13                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 exec_k_when_autoconstructing () (tag_exec_383 () boolean_dup_times) print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) exec_if (boolean_shove boolean_eq) (exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 exec_k_when_autoconstructing () (tag_exec_383 () boolean_dup_times) print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) exec_if (boolean_shove boolean_eq) (exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (723 174 244 245 275 174 306 275 174 461)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (723 174 244 245 275 174 306 275 174 461)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tag_exec_383} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 exec_k_when_autoconstructing () (tag_exec_383 () boolean_dup_times) print_integer exec_rot (exec_yankdup boolean_yankdup) (integer_add integer_dup_items boolean_flush integer_mod integer_lte) (boolean_yank -10 boolean_pop in4 boolean_dup_items exec_do*times (boolean_pop) exec_if (boolean_shove boolean_eq) (exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())))
Errors: [0 1 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.949
Median total errors in population: 7
Error averages by case: (0.277 0.826 0.756 0.755 0.725 0.826 0.694 0.725 0.826 0.539)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.817
Average program size in population (points): 66.313
Average percent parens in population: 0.274
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.806625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3804420
--- Timings ---
Current time: 1559314753857 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.1 seconds, 54.5%
Fitness Testing:      4.7 seconds, 31.8%
Report:               1.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 44                 
Correct output: 22                  | Program output: 57                 
Correct output: 35                  | Program output: 78                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 81                 
Correct output: 5                   | Program output: 46                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 85                 
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: 83                 
Correct output: -51                 | Program output: 62                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: 11                 
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: 73                 
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: 69                 
Correct output: -90                 | Program output: 73                 
Correct output: -37                 | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 63                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: 43                 
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: 86                 
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -20                
Correct output: -83                 | Program output: 66                 
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: 54                 
Correct output: -89                 | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 17                 
Correct output: -9                  | Program output: 90                 
Correct output: -84                 | Program output: 94                 
Correct output: -45                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_554} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tag_boolean_418} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_empty boolean_empty in4 in2 integer_stackdepth in4 print_integer tagged_554 integer_inc exec_k (exec_dup (exec_dup_items integer_empty integer_dup_items integer_lte boolean_stackdepth) in3) (exec_noop boolean_flush exec_dup (exec_do*times (exec_stackdepth tag_boolean_418) boolean_dup)))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_554} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tag_boolean_418} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_empty boolean_empty in4 in2 integer_stackdepth in4 print_integer tagged_554 integer_inc exec_k (exec_dup (exec_dup_items integer_empty integer_dup_items integer_lte boolean_stackdepth) in3) (exec_noop boolean_flush exec_dup (exec_do*times (exec_stackdepth tag_boolean_418) boolean_dup)))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (930 300 522 2 300 721 300 72 721 300)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (930 300 522 2 300 721 300 72 721 300)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub})
Best program: (exec_yankdup exec_k_when_autoconstructing () (integer_pop exec_yankdup) exec_do*while (exec_do*range (exec_dup_items exec_dup_times (in4 integer_lte exec_y (integer_min print_integer integer_div exec_noop exec_yankdup boolean_dup_times) boolean_not exec_s () () (exec_shove (integer_add exec_swap (integer_gt exec_swap () () boolean_invert_second_then_and) (exec_do*count (integer_dup_times integer_stackdepth) exec_yank boolean_or) print_integer boolean_invert_second_then_and boolean_or exec_swap (boolean_invert_first_then_and) (integer_eq integer_flush integer_pop exec_shove (integer_eq exec_y (integer_sub)))))))))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 42
Size: 62
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 5.832
Median total errors in population: 6
Error averages by case: (0.07 0.7 0.478 0.998 0.7 0.279 0.7 0.928 0.279 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.477
Average program size in population (points): 66.77
Average percent parens in population: 0.268
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.2814375
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4508811
--- Timings ---
Current time: 1559314757309 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.1 seconds, 56.7%
Fitness Testing:      5.3 seconds, 29.7%
Report:               2.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 44                 
Correct output: 22                  | Program output: 57                 
Correct output: 35                  | Program output: 78                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 81                 
Correct output: 5                   | Program output: 46                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 85                 
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: 83                 
Correct output: -51                 | Program output: 62                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: 11                 
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: 73                 
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: 69                 
Correct output: -90                 | Program output: 73                 
Correct output: -37                 | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 63                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: 43                 
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: 86                 
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -20                
Correct output: -83                 | Program output: 66                 
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: 54                 
Correct output: -89                 | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 17                 
Correct output: -9                  | Program output: 90                 
Correct output: -84                 | Program output: 94                 
Correct output: -45                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_554} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tag_boolean_418} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_stackdepth in4 print_integer tagged_554 integer_inc exec_k (exec_dup (exec_dup_items integer_empty exec_dup_times (integer_lte boolean_stackdepth) in3) exec_noop boolean_flush) (exec_dup (exec_s_when_autoconstructing (exec_stackdepth tag_boolean_418) (boolean_dup) ())))
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_554} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction tag_boolean_418} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_stackdepth in4 print_integer tagged_554 integer_inc exec_k (exec_dup (exec_dup_items integer_empty exec_dup_times (integer_lte boolean_stackdepth) in3) exec_noop boolean_flush) (exec_dup (exec_s_when_autoconstructing (exec_stackdepth tag_boolean_418) (boolean_dup) ())))
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (524 526 19 524 15 904 19 918 243 524)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (524 526 19 524 15 904 19 918 243 524)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 4, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction tagged_812} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_lte})
Best program: (boolean_dup_items integer_dec integer_dec exec_dup_items integer_yankdup integer_dup boolean_dup_items integer_swap exec_dup_items integer_eq in4 integer_yank boolean_swap print_integer in2 tagged_812 boolean_invert_first_then_and exec_do*range () integer_lte)
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 5.784
Median total errors in population: 4
Error averages by case: (0.476 0.474 0.981 0.476 0.985 0.096 0.981 0.082 0.757 0.476)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.731
Average program size in population (points): 62.6
Average percent parens in population: 0.258
Minimum age in population: 6.375
Maximum age in population: 10.875
Average age in population: 8.9586875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5282766
--- Timings ---
Current time: 1559314759991 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.0 seconds, 56.6%
Fitness Testing:      5.9 seconds, 28.0%
Report:               3.1 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 918 456 459 452 1000 910 456 905 459)
Population mean number of elite cases: 6.46
Count of perfect (error zero) individuals by case: (449 918 456 459 452 0 910 456 905 459)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 61
Size: 77
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 4.536
Median total errors in population: 5
Error averages by case: (0.551 0.082 0.544 0.541 0.548 1.0 0.09 0.544 0.095 0.541)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 44.981
Average program size in population (points): 59.433
Average percent parens in population: 0.233
Minimum age in population: 7.5
Maximum age in population: 11.953125
Average age in population: 10.368546875
Median age in population: 10.484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6000669
--- Timings ---
Current time: 1559314762899 milliseconds
Total Time:          23.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 58.1%
Fitness Testing:      6.5 seconds, 27.3%
Report:               3.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (exec_yankdup exec_k_when_autoconstructing () (integer_pop exec_yankdup) exec_do*while (exec_do*range (exec_dup_items exec_dup_times (in4 in2 integer_swap) tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while () integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add) integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s () (boolean_invert_first_then_and exec_rot (exec_yankdup exec_empty) () ()) ()) ())
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (exec_yankdup exec_k_when_autoconstructing () (integer_pop exec_yankdup) exec_do*while (exec_do*range (exec_dup_items exec_dup_times (in4 in2 integer_swap) tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while () integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add) integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s () (boolean_invert_first_then_and exec_rot (exec_yankdup exec_empty) () ()) ()) ())
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 274 603 749 876 876 4 892 882 274)
Population mean number of elite cases: 6.04
Count of perfect (error zero) individuals by case: (614 274 603 749 876 876 4 892 882 274)
Population mean number of perfect (error zero) cases: 6.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot})
Best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () () ()) () ()) ())
Errors: [0 1 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 59
Size: 75
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3.956
Median total errors in population: 3
Error averages by case: (0.386 0.726 0.397 0.251 0.124 0.124 0.996 0.108 0.118 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.172
Average program size in population (points): 68.743
Average percent parens in population: 0.208
Minimum age in population: 10.8125
Maximum age in population: 13.203125
Average age in population: 11.730171875
Median age in population: 11.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6497282
--- Timings ---
Current time: 1559314765868 milliseconds
Total Time:          26.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.9 seconds, 59.3%
Fitness Testing:      6.9 seconds, 25.9%
Report:               3.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: 70                 
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop})
Lexicase best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop ()) ())
Lexicase best errors: [1 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop})
Zero cases best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop ()) ())
Zero cases best errors: [1 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 368 371 361 371 158 886 388 158 908)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (363 368 371 361 371 158 886 388 158 908)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 61
Size: 77
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.668
Median total errors in population: 6
Error averages by case: (0.637 0.632 0.629 0.639 0.629 0.842 0.114 0.612 0.842 0.092)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.539
Average program size in population (points): 66.861
Average percent parens in population: 0.210
Minimum age in population: 11.8125
Maximum age in population: 15.07421875
Average age in population: 13.27018359375
Median age in population: 13.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6983641
--- Timings ---
Current time: 1559314768550 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.7 seconds, 60.0%
Fitness Testing:      7.4 seconds, 25.0%
Report:               4.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 70                 
Correct output: 4                   | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 72                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 73                 
Correct output: 39                  | Program output: 70                 
Correct output: 56                  | Program output: 77                 
Correct output: 12                  | Program output: 89                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: -45                
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 18                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: 58                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: -9                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 69                 
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -5                 
Correct output: -52                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -22                
Correct output: 26                  | Program output: 30                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -3                 
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -45                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -20                
Correct output: -77                 | Program output: -45                
Correct output: -9                  | Program output: 53                 
Correct output: -97                 | Program output: 45                 
Correct output: -9                  | Program output: 18                 
Correct output: -70                 | Program output: -6                 
Correct output: -26                 | Program output: 3                  
Correct output: -76                 | Program output: -45                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 47                 
Correct output: -85                 | Program output: -9                 
Correct output: -43                 | Program output: 34                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -45                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_and exec_empty boolean_and in3 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 65
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_and exec_empty boolean_and in3 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 65
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (547 258 768 736 258 258 392 250 391 768)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (547 258 768 736 258 258 392 250 391 768)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty boolean_and in3 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.374
Median total errors in population: 6
Error averages by case: (0.453 0.742 0.232 0.264 0.742 0.742 0.608 0.75 0.609 0.232)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.304
Average program size in population (points): 69.11
Average percent parens in population: 0.211
Minimum age in population: 12.8125
Maximum age in population: 16.66015625
Average age in population: 14.65379296875
Median age in population: 14.6826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7482960
--- Timings ---
Current time: 1559314771220 milliseconds
Total Time:          32.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.5 seconds, 60.6%
Fitness Testing:      7.8 seconds, 24.3%
Report:               4.7 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 91                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 84                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: -45                
Correct output: -93                 | Program output: -49                
Correct output: -87                 | Program output: -71                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 20                 
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: 4                  
Correct output: -51                 | Program output: 31                 
Correct output: -75                 | Program output: -21                
Correct output: -22                 | Program output: 11                 
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 64                 
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: -45                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -15                
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: 31                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -17                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_empty})
Lexicase best program: (-45 exec_pop () boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and integer_dup_items exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in3 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_empty)
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.128
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_empty})
Zero cases best program: (-45 exec_pop () boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and integer_dup_items exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in3 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_empty)
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (675 676 619 146 356 609 926 146 611 350)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (675 676 619 146 356 609 926 146 611 350)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty})
Best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () -45 exec_pop () boolean_and exec_empty boolean_and in3 exec_yank in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () integer_min print_integer integer_div exec_noop integer_inc boolean_dup_items boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup integer_empty) ()) () ())
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.886
Median total errors in population: 4
Error averages by case: (0.325 0.324 0.381 0.854 0.644 0.391 0.074 0.854 0.389 0.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.978
Average program size in population (points): 69.05
Average percent parens in population: 0.216
Minimum age in population: 13.8125
Maximum age in population: 17.861328125
Average age in population: 15.823869140625
Median age in population: 15.92138671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7987703
--- Timings ---
Current time: 1559314773790 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.2 seconds, 61.0%
Fitness Testing:      8.3 seconds, 23.7%
Report:               5.2 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 0                  
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -50                
Correct output: -51                 | Program output: 54                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 73                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: 38                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -13                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank})
Lexicase best program: (print_boolean -45 exec_pop () boolean_and integer_empty boolean_empty in4 in2 tag_exec_383 () integer_min print_integer integer_div exec_noop boolean_yank integer_dup_items boolean_flush integer_mod integer_lte boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup exec_when () boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank})
Zero cases best program: (print_boolean -45 exec_pop () boolean_and integer_empty boolean_empty in4 in2 tag_exec_383 () integer_min print_integer integer_div exec_noop boolean_yank integer_dup_items boolean_flush integer_mod integer_lte boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup exec_when () boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 748 153 752 13 155 153 280 13 744)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (154 748 153 752 13 155 153 280 13 744)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_exec_463} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -11} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (exec_yankdup exec_k_when_autoconstructing () (integer_pop exec_yankdup) exec_do*while (exec_do*range (exec_dup_items integer_flush in4 in2 boolean_invert_first_then_and) tag_exec_463 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -11 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add) integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.835
Median total errors in population: 7
Error averages by case: (0.846 0.252 0.847 0.248 0.987 0.845 0.847 0.72 0.987 0.256)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.684
Average program size in population (points): 71.564
Average percent parens in population: 0.218
Minimum age in population: 14.8125
Maximum age in population: 19.4755859375
Average age in population: 17.45859765625
Median age in population: 17.49462890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8513468
--- Timings ---
Current time: 1559314776422 milliseconds
Total Time:          37.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 61.5%
Fitness Testing:      8.7 seconds, 23.3%
Report:               5.6 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -66                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -41                
Correct output: -83                 | Program output: 26                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -16                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (exec_empty integer_pop integer_empty boolean_empty in4 in2 tag_exec_383 () exec_empty boolean_and in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_frominteger boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap integer_eq boolean_or) (integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 62
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (exec_empty integer_pop integer_empty boolean_empty in4 in2 tag_exec_383 () exec_empty boolean_and in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_frominteger boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap integer_eq boolean_or) (integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 62
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (912 883 883 237 915 665 229 665 665 233)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (912 883 883 237 915 665 229 665 665 233)
Population mean number of perfect (error zero) cases: 6.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (print_boolean integer_pop integer_empty boolean_empty in4 in2 tag_exec_383 () boolean_and exec_empty boolean_and in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 3.713
Median total errors in population: 3
Error averages by case: (0.088 0.117 0.117 0.763 0.085 0.335 0.771 0.335 0.335 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.382
Average program size in population (points): 63.305
Average percent parens in population: 0.213
Minimum age in population: 16.66015625
Maximum age in population: 20.9130859375
Average age in population: 19.0808857421875
Median age in population: 19.1494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8956819
--- Timings ---
Current time: 1559314778967 milliseconds
Total Time:          40.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.8 seconds, 62.0%
Fitness Testing:      9.1 seconds, 22.8%
Report:               6.0 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -66                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -41                
Correct output: -83                 | Program output: 26                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -16                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (print_boolean integer_pop integer_empty boolean_empty in4 in2 tag_exec_383 () boolean_and exec_empty boolean_and in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 66
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (print_boolean integer_pop integer_empty boolean_empty in4 in2 tag_exec_383 () boolean_and exec_empty boolean_and in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 66
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (644 638 645 492 647 923 649 647 924 652)
Population mean number of elite cases: 6.86
Count of perfect (error zero) individuals by case: (644 638 645 492 647 923 649 647 924 652)
Population mean number of perfect (error zero) cases: 6.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction tag_exec_383} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (exec_empty integer_pop integer_empty boolean_empty in4 in2 tag_exec_383 () exec_empty boolean_and in3 integer_min tag_exec_383 () integer_min print_integer integer_div integer_dup_times exec_while (integer_dup_items exec_dup_times (integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add) integer_dup boolean_rot boolean_frominteger boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap integer_eq boolean_or) (integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 49
Size: 63
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 3.139
Median total errors in population: 2
Error averages by case: (0.356 0.362 0.355 0.508 0.353 0.077 0.351 0.353 0.076 0.348)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.179
Average program size in population (points): 66.206
Average percent parens in population: 0.221
Minimum age in population: 18.95654296875
Maximum age in population: 22.4217529296875
Average age in population: 21.04953393554688
Median age in population: 20.943115234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9459403
--- Timings ---
Current time: 1559314781540 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.5 seconds, 62.4%
Fitness Testing:      9.5 seconds, 22.4%
Report:               6.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Lexicase best program: (exec_yankdup exec_k_when_autoconstructing () (integer_pop exec_yankdup) exec_do*while (exec_do*range (exec_dup_items exec_dup_times (in4 in1 integer_swap) tag_exec_383 () boolean_shove boolean_and exec_empty boolean_and in3 integer_swap) tag_exec_383 () integer_min exec_empty tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add) boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 86
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Zero cases best program: (exec_yankdup exec_k_when_autoconstructing () (integer_pop exec_yankdup) exec_do*while (exec_do*range (exec_dup_items exec_dup_times (in4 in1 integer_swap) tag_exec_383 () boolean_shove boolean_and exec_empty boolean_and in3 integer_swap) tag_exec_383 () integer_min exec_empty tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add) boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) integer_pop integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 86
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (650 652 652 368 653 932 363 648 931 386)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (650 652 652 368 653 932 363 648 931 386)
Population mean number of perfect (error zero) cases: 6.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction -45} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_swap} {:close 1, :instruction tag_exec_383} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_383} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction -10} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty})
Best program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 55
Size: 72
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 3.765
Median total errors in population: 3
Error averages by case: (0.35 0.348 0.348 0.632 0.347 0.068 0.637 0.352 0.069 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.529
Average program size in population (points): 62.789
Average percent parens in population: 0.206
Minimum age in population: 19.95654296875
Maximum age in population: 23.98919677734375
Average age in population: 22.51020947265625
Median age in population: 22.6529541015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.011
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9926694
--- Timings ---
Current time: 1559314784146 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.3 seconds, 62.8%
Fitness Testing:      9.9 seconds, 22.0%
Report:               6.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 15
Successful program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 72


Auto-simplifying with starting size: 72
step: 0
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 500
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 1000
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 1500
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 2000
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 2500
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 3000
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 3500
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 4000
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 4500
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

step: 5000
program: (-45 exec_pop () boolean_and exec_empty boolean_and in3 integer_gt in1 boolean_invert_first_then_and in2 integer_swap tag_exec_383 () boolean_and exec_empty in4 in3 integer_min tag_exec_383 () integer_min print_integer integer_div exec_noop exec_while (integer_dup_items boolean_flush integer_mod integer_lte) boolean_yank -10 boolean_pop in4 boolean_not boolean_pop integer_eq boolean_xor integer_add integer_dup boolean_rot boolean_and boolean_or exec_s (integer_inc boolean_dup_items) (boolean_yank integer_swap exec_pop (boolean_or) exec_k_when_autoconstructing (integer_flush exec_empty exec_s (boolean_invert_first_then_and exec_rot () (exec_yankdup exec_empty) ()) () ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 72

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
