Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -32 -13 -32] -32] [[-71 -71 -41 -71] -71] [[93 93 93 55] 55] [[-25 -25 -25 38] -25] [[78 78 78 27] 27] [[-5 -70 -70 -70] -70] [[-28 -51 -51 -51] -51] [[95 -60 -60 -60] -60] [[-52 56 56 56] -52] [[91 91 98 91] 91] [(55 55 55 55) 55] [(-58 -58 -58 -58) -58] [(-62 -62 -62 -62) -62] [(-51 -51 -51 -51) -51] [(-35 -35 -35 -35) -35] [(91 96 70 28) 28] [(96 18 59 4) 4] [(7 49 39 31) 7] [(71 87 90 76) 71] [(64 23 42 44) 23] [(39 22 41 57) 22] [(64 35 45 78) 35] [(38 13 50 73) 13] [(77 58 72 20) 20] [(29 56 71 81) 29] [(34 5 36 46) 5] [(36 11 64 30) 11] [(33 51 42 34) 33] [(13 50 73 19) 13] [(78 54 73 71) 54] [(89 39 70 43) 39] [(84 99 77 56) 56] [(89 83 12 57) 12] [(21 12 27 65) 12] [(88 82 14 10) 10] [(-49 70 86 -93) -93] [(-71 18 -87 -77) -87] [(18 -63 76 6) -63] [(83 -6 -97 54) -97] [(58 -38 73 -78) -78] [(20 55 -40 -18) -40] [(-15 0 -75 85) -75] [(4 25 47 -61) -61] [(31 40 -51 26) -51] [(-21 41 -10 -75) -75] [(11 40 -9 -22) -22] [(-80 -50 -78 83) -80] [(51 54 -51 62) -51] [(-66 95 -73 -29) -73] [(-83 -39 -66 11) -83] [(71 14 69 -51) -51] [(85 -36 -16 73) -36] [(-49 -58 62 -56) -58] [(-53 -12 100 69) -53] [(-50 -90 83 73) -90] [(72 73 -37 75) -37] [(92 -65 -5 -76) -76] [(64 73 17 -52) -52] [(-22 83 -93 10) -93] [(-75 19 48 63) -75] [(-72 70 24 -47) -72] [(-53 83 -30 -49) -53] [(-22 -62 70 -43) -62] [(85 27 30 26) 26] [(-67 -2 -54 43) -67] [(-3 -95 50 -42) -95] [(-13 -11 85 86) -13] [(-100 99 -23 -63) -100] [(-46 -37 -41 -20) -46] [(-83 38 26 66) -83] [(-69 -89 17 -85) -89] [(89 -94 -70 54) -94] [(81 0 -89 60) -89] [(24 0 -20 -48) -48] [(46 46 -45 -77) -77] [(92 -9 53 -4) -9] [(82 -46 45 -97) -97] [(32 -1 18 -9) -9] [(17 -70 -6 -59) -70] [(3 -24 62 -26) -26] [(-60 67 14 -76) -76] [(-24 15 -19 -24) -24] [(-15 98 75 -62) -62] [(91 67 47 -39) -39] [(49 -23 -9 -85) -85] [(52 -43 34 29) -43] [(-34 56 51 -24) -34] [(31 88 44 -16) -16] [(-45 -92 -10 -94) -94] [(-46 -13 -16 17) -46] [(60 58 -9 90) -9] [(-84 60 91 94) -84] [(-45 1 9 87) -45] [(-17 82 39 -29) -29] [(-77 11 75 -51) -77])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-32 -32 -13 -32] -32]
Train Case:   6 | Input/Output: [[-71 -71 -41 -71] -71]
Train Case:   7 | Input/Output: [[93 93 93 55] 55]
Train Case:   8 | Input/Output: [[-25 -25 -25 38] -25]
Train Case:   9 | Input/Output: [[78 78 78 27] 27]
Train Case:  10 | Input/Output: [[-5 -70 -70 -70] -70]
Train Case:  11 | Input/Output: [[-28 -51 -51 -51] -51]
Train Case:  12 | Input/Output: [[95 -60 -60 -60] -60]
Train Case:  13 | Input/Output: [[-52 56 56 56] -52]
Train Case:  14 | Input/Output: [[91 91 98 91] 91]
Train Case:  15 | Input/Output: [(55 55 55 55) 55]
Train Case:  16 | Input/Output: [(-58 -58 -58 -58) -58]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(-51 -51 -51 -51) -51]
Train Case:  19 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  20 | Input/Output: [(91 96 70 28) 28]
Train Case:  21 | Input/Output: [(96 18 59 4) 4]
Train Case:  22 | Input/Output: [(7 49 39 31) 7]
Train Case:  23 | Input/Output: [(71 87 90 76) 71]
Train Case:  24 | Input/Output: [(64 23 42 44) 23]
Train Case:  25 | Input/Output: [(39 22 41 57) 22]
Train Case:  26 | Input/Output: [(64 35 45 78) 35]
Train Case:  27 | Input/Output: [(38 13 50 73) 13]
Train Case:  28 | Input/Output: [(77 58 72 20) 20]
Train Case:  29 | Input/Output: [(29 56 71 81) 29]
Train Case:  30 | Input/Output: [(34 5 36 46) 5]
Train Case:  31 | Input/Output: [(36 11 64 30) 11]
Train Case:  32 | Input/Output: [(33 51 42 34) 33]
Train Case:  33 | Input/Output: [(13 50 73 19) 13]
Train Case:  34 | Input/Output: [(78 54 73 71) 54]
Train Case:  35 | Input/Output: [(89 39 70 43) 39]
Train Case:  36 | Input/Output: [(84 99 77 56) 56]
Train Case:  37 | Input/Output: [(89 83 12 57) 12]
Train Case:  38 | Input/Output: [(21 12 27 65) 12]
Train Case:  39 | Input/Output: [(88 82 14 10) 10]
Train Case:  40 | Input/Output: [(-49 70 86 -93) -93]
Train Case:  41 | Input/Output: [(-71 18 -87 -77) -87]
Train Case:  42 | Input/Output: [(18 -63 76 6) -63]
Train Case:  43 | Input/Output: [(83 -6 -97 54) -97]
Train Case:  44 | Input/Output: [(58 -38 73 -78) -78]
Train Case:  45 | Input/Output: [(20 55 -40 -18) -40]
Train Case:  46 | Input/Output: [(-15 0 -75 85) -75]
Train Case:  47 | Input/Output: [(4 25 47 -61) -61]
Train Case:  48 | Input/Output: [(31 40 -51 26) -51]
Train Case:  49 | Input/Output: [(-21 41 -10 -75) -75]
Train Case:  50 | Input/Output: [(11 40 -9 -22) -22]
Train Case:  51 | Input/Output: [(-80 -50 -78 83) -80]
Train Case:  52 | Input/Output: [(51 54 -51 62) -51]
Train Case:  53 | Input/Output: [(-66 95 -73 -29) -73]
Train Case:  54 | Input/Output: [(-83 -39 -66 11) -83]
Train Case:  55 | Input/Output: [(71 14 69 -51) -51]
Train Case:  56 | Input/Output: [(85 -36 -16 73) -36]
Train Case:  57 | Input/Output: [(-49 -58 62 -56) -58]
Train Case:  58 | Input/Output: [(-53 -12 100 69) -53]
Train Case:  59 | Input/Output: [(-50 -90 83 73) -90]
Train Case:  60 | Input/Output: [(72 73 -37 75) -37]
Train Case:  61 | Input/Output: [(92 -65 -5 -76) -76]
Train Case:  62 | Input/Output: [(64 73 17 -52) -52]
Train Case:  63 | Input/Output: [(-22 83 -93 10) -93]
Train Case:  64 | Input/Output: [(-75 19 48 63) -75]
Train Case:  65 | Input/Output: [(-72 70 24 -47) -72]
Train Case:  66 | Input/Output: [(-53 83 -30 -49) -53]
Train Case:  67 | Input/Output: [(-22 -62 70 -43) -62]
Train Case:  68 | Input/Output: [(85 27 30 26) 26]
Train Case:  69 | Input/Output: [(-67 -2 -54 43) -67]
Train Case:  70 | Input/Output: [(-3 -95 50 -42) -95]
Train Case:  71 | Input/Output: [(-13 -11 85 86) -13]
Train Case:  72 | Input/Output: [(-100 99 -23 -63) -100]
Train Case:  73 | Input/Output: [(-46 -37 -41 -20) -46]
Train Case:  74 | Input/Output: [(-83 38 26 66) -83]
Train Case:  75 | Input/Output: [(-69 -89 17 -85) -89]
Train Case:  76 | Input/Output: [(89 -94 -70 54) -94]
Train Case:  77 | Input/Output: [(81 0 -89 60) -89]
Train Case:  78 | Input/Output: [(24 0 -20 -48) -48]
Train Case:  79 | Input/Output: [(46 46 -45 -77) -77]
Train Case:  80 | Input/Output: [(92 -9 53 -4) -9]
Train Case:  81 | Input/Output: [(82 -46 45 -97) -97]
Train Case:  82 | Input/Output: [(32 -1 18 -9) -9]
Train Case:  83 | Input/Output: [(17 -70 -6 -59) -70]
Train Case:  84 | Input/Output: [(3 -24 62 -26) -26]
Train Case:  85 | Input/Output: [(-60 67 14 -76) -76]
Train Case:  86 | Input/Output: [(-24 15 -19 -24) -24]
Train Case:  87 | Input/Output: [(-15 98 75 -62) -62]
Train Case:  88 | Input/Output: [(91 67 47 -39) -39]
Train Case:  89 | Input/Output: [(49 -23 -9 -85) -85]
Train Case:  90 | Input/Output: [(52 -43 34 29) -43]
Train Case:  91 | Input/Output: [(-34 56 51 -24) -34]
Train Case:  92 | Input/Output: [(31 88 44 -16) -16]
Train Case:  93 | Input/Output: [(-45 -92 -10 -94) -94]
Train Case:  94 | Input/Output: [(-46 -13 -16 17) -46]
Train Case:  95 | Input/Output: [(60 58 -9 90) -9]
Train Case:  96 | Input/Output: [(-84 60 91 94) -84]
Train Case:  97 | Input/Output: [(-45 1 9 87) -45]
Train Case:  98 | Input/Output: [(-17 82 39 -29) -29]
Train Case:  99 | Input/Output: [(-77 11 75 -51) -77]
Test Case:   0 | Input/Output: [[-89 86 86 86] -89]
Test Case:   1 | Input/Output: [[-9 -9 -4 -9] -9]
Test Case:   2 | Input/Output: [[-59 -31 -59 -59] -59]
Test Case:   3 | Input/Output: [[-27 83 83 83] -27]
Test Case:   4 | Input/Output: [[35 35 35 0] 0]
Test Case:   5 | Input/Output: [[31 31 53 31] 31]
Test Case:   6 | Input/Output: [[-49 -31 -31 -31] -49]
Test Case:   7 | Input/Output: [[-29 -56 -56 -56] -56]
Test Case:   8 | Input/Output: [[10 10 36 10] 10]
Test Case:   9 | Input/Output: [[-69 -48 -48 -48] -69]
Test Case:  10 | Input/Output: [[91 91 91 -64] -64]
Test Case:  11 | Input/Output: [[8 8 8 -63] -63]
Test Case:  12 | Input/Output: [[93 82 82 82] 82]
Test Case:  13 | Input/Output: [[99 84 99 99] 84]
Test Case:  14 | Input/Output: [[-98 -26 -98 -98] -98]
Test Case:  15 | Input/Output: [[-64 -68 -68 -68] -68]
Test Case:  16 | Input/Output: [[-17 -17 -17 67] -17]
Test Case:  17 | Input/Output: [[49 41 41 41] 41]
Test Case:  18 | Input/Output: [[10 -98 -98 -98] -98]
Test Case:  19 | Input/Output: [[-17 67 -17 -17] -17]
Test Case:  20 | Input/Output: [[-9 -53 -53 -53] -53]
Test Case:  21 | Input/Output: [[25 25 25 83] 25]
Test Case:  22 | Input/Output: [[-21 -22 -21 -21] -22]
Test Case:  23 | Input/Output: [[-48 -15 -15 -15] -48]
Test Case:  24 | Input/Output: [[10 25 25 25] 10]
Test Case:  25 | Input/Output: [[-68 -65 -65 -65] -68]
Test Case:  26 | Input/Output: [[-59 -59 -59 13] -59]
Test Case:  27 | Input/Output: [[-55 0 0 0] -55]
Test Case:  28 | Input/Output: [[15 15 -7 15] -7]
Test Case:  29 | Input/Output: [[-69 37 37 37] -69]
Test Case:  30 | Input/Output: [[-34 29 -34 -34] -34]
Test Case:  31 | Input/Output: [[-24 -24 -24 7] -24]
Test Case:  32 | Input/Output: [[61 78 78 78] 61]
Test Case:  33 | Input/Output: [[6 -60 6 6] -60]
Test Case:  34 | Input/Output: [[31 31 31 68] 31]
Test Case:  35 | Input/Output: [[-75 -75 64 -75] -75]
Test Case:  36 | Input/Output: [[73 73 73 66] 66]
Test Case:  37 | Input/Output: [[-100 -100 80 -100] -100]
Test Case:  38 | Input/Output: [[-94 -94 -94 92] -94]
Test Case:  39 | Input/Output: [[-77 -77 52 -77] -77]
Test Case:  40 | Input/Output: [[-4 -54 -4 -4] -54]
Test Case:  41 | Input/Output: [[4 10 4 4] 4]
Test Case:  42 | Input/Output: [[92 92 88 92] 88]
Test Case:  43 | Input/Output: [[42 42 17 42] 17]
Test Case:  44 | Input/Output: [[-15 -15 -15 86] -15]
Test Case:  45 | Input/Output: [[-11 -11 75 -11] -11]
Test Case:  46 | Input/Output: [[0 0 80 0] 0]
Test Case:  47 | Input/Output: [[-76 -85 -85 -85] -85]
Test Case:  48 | Input/Output: [[-80 64 64 64] -80]
Test Case:  49 | Input/Output: [[32 32 32 -17] -17]
Test Case:  50 | Input/Output: [[61 61 61 55] 55]
Test Case:  51 | Input/Output: [[17 -52 17 17] -52]
Test Case:  52 | Input/Output: [[-86 -17 -86 -86] -86]
Test Case:  53 | Input/Output: [[-4 -4 -4 67] -4]
Test Case:  54 | Input/Output: [[88 88 -41 88] -41]
Test Case:  55 | Input/Output: [[21 75 75 75] 21]
Test Case:  56 | Input/Output: [[-22 -22 -22 -22] -22]
Test Case:  57 | Input/Output: [[19 97 97 97] 19]
Test Case:  58 | Input/Output: [[-21 34 34 34] -21]
Test Case:  59 | Input/Output: [[-25 -25 -25 -57] -57]
Test Case:  60 | Input/Output: [[72 -39 72 72] -39]
Test Case:  61 | Input/Output: [[-19 99 99 99] -19]
Test Case:  62 | Input/Output: [[-87 -87 -72 -87] -87]
Test Case:  63 | Input/Output: [[-44 87 87 87] -44]
Test Case:  64 | Input/Output: [[-67 -67 -67 -50] -67]
Test Case:  65 | Input/Output: [[19 19 19 72] 19]
Test Case:  66 | Input/Output: [[77 -25 77 77] -25]
Test Case:  67 | Input/Output: [[-76 67 -76 -76] -76]
Test Case:  68 | Input/Output: [[60 -20 60 60] -20]
Test Case:  69 | Input/Output: [[-12 -12 14 -12] -12]
Test Case:  70 | Input/Output: [[56 82 56 56] 56]
Test Case:  71 | Input/Output: [[88 -13 88 88] -13]
Test Case:  72 | Input/Output: [[63 19 63 63] 19]
Test Case:  73 | Input/Output: [[-76 99 99 99] -76]
Test Case:  74 | Input/Output: [[-40 -40 -40 62] -40]
Test Case:  75 | Input/Output: [[11 89 11 11] 11]
Test Case:  76 | Input/Output: [[34 34 70 34] 34]
Test Case:  77 | Input/Output: [[7 7 -6 7] -6]
Test Case:  78 | Input/Output: [[-89 -89 -89 -26] -89]
Test Case:  79 | Input/Output: [[49 22 49 49] 22]
Test Case:  80 | Input/Output: [[24 24 -17 24] -17]
Test Case:  81 | Input/Output: [[-41 24 -41 -41] -41]
Test Case:  82 | Input/Output: [[29 29 84 29] 29]
Test Case:  83 | Input/Output: [[78 78 78 97] 78]
Test Case:  84 | Input/Output: [[44 -14 -14 -14] -14]
Test Case:  85 | Input/Output: [[4 4 4 71] 4]
Test Case:  86 | Input/Output: [[-76 -89 -89 -89] -89]
Test Case:  87 | Input/Output: [[20 -9 20 20] -9]
Test Case:  88 | Input/Output: [[-17 87 -17 -17] -17]
Test Case:  89 | Input/Output: [[-32 -32 -38 -32] -38]
Test Case:  90 | Input/Output: [[-91 -84 -84 -84] -91]
Test Case:  91 | Input/Output: [[43 66 43 43] 43]
Test Case:  92 | Input/Output: [[-47 -47 -47 50] -47]
Test Case:  93 | Input/Output: [[-59 -22 -59 -59] -59]
Test Case:  94 | Input/Output: [[-88 -88 -88 27] -88]
Test Case:  95 | Input/Output: [[58 58 58 -18] -18]
Test Case:  96 | Input/Output: [[80 -30 80 80] -30]
Test Case:  97 | Input/Output: [[56 -31 56 56] -31]
Test Case:  98 | Input/Output: [[-81 -81 -81 53] -81]
Test Case:  99 | Input/Output: [[82 82 97 82] 82]
Test Case: 100 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 101 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 102 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 103 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 104 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 105 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 106 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 107 | Input/Output: [(58 58 58 58) 58]
Test Case: 108 | Input/Output: [(53 53 53 53) 53]
Test Case: 109 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 110 | Input/Output: [(12 12 12 12) 12]
Test Case: 111 | Input/Output: [(39 39 39 39) 39]
Test Case: 112 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 113 | Input/Output: [(4 4 4 4) 4]
Test Case: 114 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 115 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 116 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 117 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 118 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 119 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 120 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 121 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 122 | Input/Output: [(51 51 51 51) 51]
Test Case: 123 | Input/Output: [(61 61 61 61) 61]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(38 38 38 38) 38]
Test Case: 126 | Input/Output: [(86 86 86 86) 86]
Test Case: 127 | Input/Output: [(49 49 49 49) 49]
Test Case: 128 | Input/Output: [(13 13 13 13) 13]
Test Case: 129 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 130 | Input/Output: [(71 71 71 71) 71]
Test Case: 131 | Input/Output: [(26 26 26 26) 26]
Test Case: 132 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 133 | Input/Output: [(53 53 53 53) 53]
Test Case: 134 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 135 | Input/Output: [(44 44 44 44) 44]
Test Case: 136 | Input/Output: [(38 38 38 38) 38]
Test Case: 137 | Input/Output: [(92 92 92 92) 92]
Test Case: 138 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 139 | Input/Output: [(91 91 91 91) 91]
Test Case: 140 | Input/Output: [(68 68 68 68) 68]
Test Case: 141 | Input/Output: [(67 67 67 67) 67]
Test Case: 142 | Input/Output: [(21 21 21 21) 21]
Test Case: 143 | Input/Output: [(14 14 14 14) 14]
Test Case: 144 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 145 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 146 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 147 | Input/Output: [(99 99 99 99) 99]
Test Case: 148 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 149 | Input/Output: [(95 95 95 95) 95]
Test Case: 150 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 151 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 152 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 153 | Input/Output: [(34 34 34 34) 34]
Test Case: 154 | Input/Output: [(95 95 95 95) 95]
Test Case: 155 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 156 | Input/Output: [(76 76 76 76) 76]
Test Case: 157 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 158 | Input/Output: [(24 24 24 24) 24]
Test Case: 159 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 160 | Input/Output: [(85 85 85 85) 85]
Test Case: 161 | Input/Output: [(85 85 85 85) 85]
Test Case: 162 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 163 | Input/Output: [(71 71 71 71) 71]
Test Case: 164 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 165 | Input/Output: [(86 86 86 86) 86]
Test Case: 166 | Input/Output: [(38 38 38 38) 38]
Test Case: 167 | Input/Output: [(49 49 49 49) 49]
Test Case: 168 | Input/Output: [(64 64 64 64) 64]
Test Case: 169 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 170 | Input/Output: [(89 89 89 89) 89]
Test Case: 171 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 172 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 173 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 174 | Input/Output: [(3 3 3 3) 3]
Test Case: 175 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 176 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 177 | Input/Output: [(31 31 31 31) 31]
Test Case: 178 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 179 | Input/Output: [(94 94 94 94) 94]
Test Case: 180 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 181 | Input/Output: [(72 72 72 72) 72]
Test Case: 182 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 183 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 184 | Input/Output: [(14 14 14 14) 14]
Test Case: 185 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 186 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 187 | Input/Output: [(26 26 26 26) 26]
Test Case: 188 | Input/Output: [(49 49 49 49) 49]
Test Case: 189 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 190 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 191 | Input/Output: [(26 26 26 26) 26]
Test Case: 192 | Input/Output: [(100 100 100 100) 100]
Test Case: 193 | Input/Output: [(92 92 92 92) 92]
Test Case: 194 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 195 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 196 | Input/Output: [(23 23 23 23) 23]
Test Case: 197 | Input/Output: [(72 72 72 72) 72]
Test Case: 198 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 199 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 200 | Input/Output: [(9 43 34 99) 9]
Test Case: 201 | Input/Output: [(54 9 65 35) 9]
Test Case: 202 | Input/Output: [(34 57 16 14) 14]
Test Case: 203 | Input/Output: [(45 5 63 11) 5]
Test Case: 204 | Input/Output: [(42 9 2 100) 2]
Test Case: 205 | Input/Output: [(32 18 14 47) 14]
Test Case: 206 | Input/Output: [(48 13 22 48) 13]
Test Case: 207 | Input/Output: [(71 57 80 46) 46]
Test Case: 208 | Input/Output: [(22 72 20 58) 20]
Test Case: 209 | Input/Output: [(67 82 13 97) 13]
Test Case: 210 | Input/Output: [(15 3 56 98) 3]
Test Case: 211 | Input/Output: [(95 43 46 43) 43]
Test Case: 212 | Input/Output: [(84 81 83 27) 27]
Test Case: 213 | Input/Output: [(7 9 21 47) 7]
Test Case: 214 | Input/Output: [(32 88 72 31) 31]
Test Case: 215 | Input/Output: [(82 73 16 60) 16]
Test Case: 216 | Input/Output: [(12 43 38 34) 12]
Test Case: 217 | Input/Output: [(27 15 70 78) 15]
Test Case: 218 | Input/Output: [(39 31 18 55) 18]
Test Case: 219 | Input/Output: [(5 24 57 79) 5]
Test Case: 220 | Input/Output: [(31 92 96 93) 31]
Test Case: 221 | Input/Output: [(8 97 23 76) 8]
Test Case: 222 | Input/Output: [(54 94 35 70) 35]
Test Case: 223 | Input/Output: [(53 24 86 38) 24]
Test Case: 224 | Input/Output: [(26 35 63 58) 26]
Test Case: 225 | Input/Output: [(4 71 53 80) 4]
Test Case: 226 | Input/Output: [(71 68 5 77) 5]
Test Case: 227 | Input/Output: [(59 44 33 43) 33]
Test Case: 228 | Input/Output: [(27 50 96 55) 27]
Test Case: 229 | Input/Output: [(9 56 5 41) 5]
Test Case: 230 | Input/Output: [(62 47 91 51) 47]
Test Case: 231 | Input/Output: [(77 11 66 97) 11]
Test Case: 232 | Input/Output: [(38 43 83 20) 20]
Test Case: 233 | Input/Output: [(23 48 54 43) 23]
Test Case: 234 | Input/Output: [(51 91 36 54) 36]
Test Case: 235 | Input/Output: [(78 56 39 57) 39]
Test Case: 236 | Input/Output: [(33 66 48 13) 13]
Test Case: 237 | Input/Output: [(15 78 22 90) 15]
Test Case: 238 | Input/Output: [(22 9 15 65) 9]
Test Case: 239 | Input/Output: [(92 18 97 5) 5]
Test Case: 240 | Input/Output: [(86 62 0 86) 0]
Test Case: 241 | Input/Output: [(36 74 7 32) 7]
Test Case: 242 | Input/Output: [(21 52 84 90) 21]
Test Case: 243 | Input/Output: [(46 76 63 76) 46]
Test Case: 244 | Input/Output: [(21 63 4 50) 4]
Test Case: 245 | Input/Output: [(3 17 65 92) 3]
Test Case: 246 | Input/Output: [(32 54 51 100) 32]
Test Case: 247 | Input/Output: [(84 47 83 66) 47]
Test Case: 248 | Input/Output: [(75 17 18 28) 17]
Test Case: 249 | Input/Output: [(80 19 69 70) 19]
Test Case: 250 | Input/Output: [(71 60 92 34) 34]
Test Case: 251 | Input/Output: [(30 6 87 81) 6]
Test Case: 252 | Input/Output: [(29 48 27 81) 27]
Test Case: 253 | Input/Output: [(99 96 32 65) 32]
Test Case: 254 | Input/Output: [(90 28 87 86) 28]
Test Case: 255 | Input/Output: [(95 35 48 28) 28]
Test Case: 256 | Input/Output: [(23 61 36 16) 16]
Test Case: 257 | Input/Output: [(24 44 60 50) 24]
Test Case: 258 | Input/Output: [(64 21 73 83) 21]
Test Case: 259 | Input/Output: [(33 7 55 34) 7]
Test Case: 260 | Input/Output: [(5 3 54 34) 3]
Test Case: 261 | Input/Output: [(7 68 40 31) 7]
Test Case: 262 | Input/Output: [(9 50 54 12) 9]
Test Case: 263 | Input/Output: [(24 13 46 10) 10]
Test Case: 264 | Input/Output: [(31 49 65 100) 31]
Test Case: 265 | Input/Output: [(89 13 55 97) 13]
Test Case: 266 | Input/Output: [(26 56 93 38) 26]
Test Case: 267 | Input/Output: [(77 51 89 21) 21]
Test Case: 268 | Input/Output: [(13 58 89 84) 13]
Test Case: 269 | Input/Output: [(4 77 87 99) 4]
Test Case: 270 | Input/Output: [(33 81 59 4) 4]
Test Case: 271 | Input/Output: [(13 28 20 85) 13]
Test Case: 272 | Input/Output: [(65 14 43 100) 14]
Test Case: 273 | Input/Output: [(43 26 2 98) 2]
Test Case: 274 | Input/Output: [(99 91 9 53) 9]
Test Case: 275 | Input/Output: [(67 32 26 76) 26]
Test Case: 276 | Input/Output: [(96 53 51 30) 30]
Test Case: 277 | Input/Output: [(57 64 89 33) 33]
Test Case: 278 | Input/Output: [(100 52 73 67) 52]
Test Case: 279 | Input/Output: [(36 60 48 82) 36]
Test Case: 280 | Input/Output: [(63 22 41 8) 8]
Test Case: 281 | Input/Output: [(36 33 65 13) 13]
Test Case: 282 | Input/Output: [(32 81 79 33) 32]
Test Case: 283 | Input/Output: [(40 55 2 71) 2]
Test Case: 284 | Input/Output: [(36 72 13 7) 7]
Test Case: 285 | Input/Output: [(15 69 14 6) 6]
Test Case: 286 | Input/Output: [(67 72 15 98) 15]
Test Case: 287 | Input/Output: [(53 23 36 87) 23]
Test Case: 288 | Input/Output: [(16 5 47 80) 5]
Test Case: 289 | Input/Output: [(3 87 86 15) 3]
Test Case: 290 | Input/Output: [(22 18 60 86) 18]
Test Case: 291 | Input/Output: [(40 83 4 22) 4]
Test Case: 292 | Input/Output: [(51 87 25 89) 25]
Test Case: 293 | Input/Output: [(45 51 57 74) 45]
Test Case: 294 | Input/Output: [(19 32 80 13) 13]
Test Case: 295 | Input/Output: [(7 82 12 15) 7]
Test Case: 296 | Input/Output: [(61 30 55 32) 30]
Test Case: 297 | Input/Output: [(91 6 23 84) 6]
Test Case: 298 | Input/Output: [(1 7 67 67) 1]
Test Case: 299 | Input/Output: [(61 35 100 37) 35]
Test Case: 300 | Input/Output: [(95 71 64 94) 64]
Test Case: 301 | Input/Output: [(96 20 95 32) 20]
Test Case: 302 | Input/Output: [(62 21 85 92) 21]
Test Case: 303 | Input/Output: [(56 56 54 43) 43]
Test Case: 304 | Input/Output: [(44 94 24 39) 24]
Test Case: 305 | Input/Output: [(93 79 35 64) 35]
Test Case: 306 | Input/Output: [(92 6 71 100) 6]
Test Case: 307 | Input/Output: [(68 50 24 4) 4]
Test Case: 308 | Input/Output: [(45 0 14 35) 0]
Test Case: 309 | Input/Output: [(15 69 50 65) 15]
Test Case: 310 | Input/Output: [(11 44 25 68) 11]
Test Case: 311 | Input/Output: [(40 43 68 55) 40]
Test Case: 312 | Input/Output: [(68 71 92 53) 53]
Test Case: 313 | Input/Output: [(61 70 61 57) 57]
Test Case: 314 | Input/Output: [(45 38 95 32) 32]
Test Case: 315 | Input/Output: [(64 32 87 7) 7]
Test Case: 316 | Input/Output: [(56 49 88 28) 28]
Test Case: 317 | Input/Output: [(17 55 38 37) 17]
Test Case: 318 | Input/Output: [(99 14 43 92) 14]
Test Case: 319 | Input/Output: [(52 30 34 36) 30]
Test Case: 320 | Input/Output: [(46 94 0 57) 0]
Test Case: 321 | Input/Output: [(53 69 2 94) 2]
Test Case: 322 | Input/Output: [(42 24 0 50) 0]
Test Case: 323 | Input/Output: [(78 47 100 56) 47]
Test Case: 324 | Input/Output: [(12 38 37 17) 12]
Test Case: 325 | Input/Output: [(49 64 75 55) 49]
Test Case: 326 | Input/Output: [(25 65 20 34) 20]
Test Case: 327 | Input/Output: [(58 17 13 50) 13]
Test Case: 328 | Input/Output: [(12 50 23 91) 12]
Test Case: 329 | Input/Output: [(46 76 19 8) 8]
Test Case: 330 | Input/Output: [(98 10 49 3) 3]
Test Case: 331 | Input/Output: [(33 42 91 77) 33]
Test Case: 332 | Input/Output: [(71 58 72 9) 9]
Test Case: 333 | Input/Output: [(64 91 9 88) 9]
Test Case: 334 | Input/Output: [(30 84 33 42) 30]
Test Case: 335 | Input/Output: [(13 21 67 76) 13]
Test Case: 336 | Input/Output: [(90 61 83 41) 41]
Test Case: 337 | Input/Output: [(50 90 14 86) 14]
Test Case: 338 | Input/Output: [(70 65 83 2) 2]
Test Case: 339 | Input/Output: [(57 31 53 76) 31]
Test Case: 340 | Input/Output: [(20 80 98 42) 20]
Test Case: 341 | Input/Output: [(68 57 25 49) 25]
Test Case: 342 | Input/Output: [(64 25 46 92) 25]
Test Case: 343 | Input/Output: [(88 11 52 49) 11]
Test Case: 344 | Input/Output: [(18 56 68 28) 18]
Test Case: 345 | Input/Output: [(57 81 14 28) 14]
Test Case: 346 | Input/Output: [(54 2 37 80) 2]
Test Case: 347 | Input/Output: [(43 9 71 75) 9]
Test Case: 348 | Input/Output: [(11 33 1 79) 1]
Test Case: 349 | Input/Output: [(67 64 27 84) 27]
Test Case: 350 | Input/Output: [(32 50 4 88) 4]
Test Case: 351 | Input/Output: [(37 40 35 72) 35]
Test Case: 352 | Input/Output: [(9 57 49 32) 9]
Test Case: 353 | Input/Output: [(45 0 86 35) 0]
Test Case: 354 | Input/Output: [(2 41 38 89) 2]
Test Case: 355 | Input/Output: [(74 45 10 50) 10]
Test Case: 356 | Input/Output: [(68 34 66 95) 34]
Test Case: 357 | Input/Output: [(48 54 96 25) 25]
Test Case: 358 | Input/Output: [(22 89 50 42) 22]
Test Case: 359 | Input/Output: [(82 96 60 66) 60]
Test Case: 360 | Input/Output: [(99 4 97 89) 4]
Test Case: 361 | Input/Output: [(80 76 75 93) 75]
Test Case: 362 | Input/Output: [(68 83 20 63) 20]
Test Case: 363 | Input/Output: [(90 21 76 14) 14]
Test Case: 364 | Input/Output: [(8 24 21 4) 4]
Test Case: 365 | Input/Output: [(17 54 90 17) 17]
Test Case: 366 | Input/Output: [(22 74 25 12) 12]
Test Case: 367 | Input/Output: [(25 68 93 46) 25]
Test Case: 368 | Input/Output: [(44 99 22 94) 22]
Test Case: 369 | Input/Output: [(33 33 24 66) 24]
Test Case: 370 | Input/Output: [(35 38 49 96) 35]
Test Case: 371 | Input/Output: [(3 38 84 24) 3]
Test Case: 372 | Input/Output: [(33 19 18 73) 18]
Test Case: 373 | Input/Output: [(83 67 42 89) 42]
Test Case: 374 | Input/Output: [(91 10 41 58) 10]
Test Case: 375 | Input/Output: [(13 20 89 38) 13]
Test Case: 376 | Input/Output: [(10 34 82 74) 10]
Test Case: 377 | Input/Output: [(6 31 12 21) 6]
Test Case: 378 | Input/Output: [(13 5 58 47) 5]
Test Case: 379 | Input/Output: [(16 2 36 85) 2]
Test Case: 380 | Input/Output: [(89 88 43 44) 43]
Test Case: 381 | Input/Output: [(98 86 47 18) 18]
Test Case: 382 | Input/Output: [(54 45 93 31) 31]
Test Case: 383 | Input/Output: [(92 93 73 66) 66]
Test Case: 384 | Input/Output: [(79 88 24 92) 24]
Test Case: 385 | Input/Output: [(75 48 21 42) 21]
Test Case: 386 | Input/Output: [(55 35 17 10) 10]
Test Case: 387 | Input/Output: [(38 89 92 33) 33]
Test Case: 388 | Input/Output: [(79 9 44 0) 0]
Test Case: 389 | Input/Output: [(5 15 72 85) 5]
Test Case: 390 | Input/Output: [(45 2 83 81) 2]
Test Case: 391 | Input/Output: [(86 5 25 66) 5]
Test Case: 392 | Input/Output: [(26 44 76 37) 26]
Test Case: 393 | Input/Output: [(22 77 67 65) 22]
Test Case: 394 | Input/Output: [(14 44 84 12) 12]
Test Case: 395 | Input/Output: [(39 61 91 8) 8]
Test Case: 396 | Input/Output: [(78 100 24 64) 24]
Test Case: 397 | Input/Output: [(38 22 2 11) 2]
Test Case: 398 | Input/Output: [(67 15 87 32) 15]
Test Case: 399 | Input/Output: [(53 98 70 18) 18]
Test Case: 400 | Input/Output: [(-26 -56 28 74) -56]
Test Case: 401 | Input/Output: [(-19 6 -99 -59) -99]
Test Case: 402 | Input/Output: [(-49 17 84 12) -49]
Test Case: 403 | Input/Output: [(62 -87 -78 23) -87]
Test Case: 404 | Input/Output: [(82 -39 16 -34) -39]
Test Case: 405 | Input/Output: [(-99 55 91 78) -99]
Test Case: 406 | Input/Output: [(-43 -15 12 62) -43]
Test Case: 407 | Input/Output: [(-89 -83 -25 29) -89]
Test Case: 408 | Input/Output: [(-23 36 -7 -20) -23]
Test Case: 409 | Input/Output: [(48 -97 -8 81) -97]
Test Case: 410 | Input/Output: [(55 97 -31 -55) -55]
Test Case: 411 | Input/Output: [(-84 53 45 -99) -99]
Test Case: 412 | Input/Output: [(62 -70 -72 -84) -84]
Test Case: 413 | Input/Output: [(-7 -57 -73 11) -73]
Test Case: 414 | Input/Output: [(-17 -76 -81 73) -81]
Test Case: 415 | Input/Output: [(-23 -62 11 -54) -62]
Test Case: 416 | Input/Output: [(31 -50 86 42) -50]
Test Case: 417 | Input/Output: [(94 -37 65 -100) -100]
Test Case: 418 | Input/Output: [(-30 31 100 -82) -82]
Test Case: 419 | Input/Output: [(-54 -31 -99 -13) -99]
Test Case: 420 | Input/Output: [(90 79 -10 -40) -40]
Test Case: 421 | Input/Output: [(-32 96 58 84) -32]
Test Case: 422 | Input/Output: [(-53 74 8 23) -53]
Test Case: 423 | Input/Output: [(21 -47 19 21) -47]
Test Case: 424 | Input/Output: [(-10 -98 -71 77) -98]
Test Case: 425 | Input/Output: [(-14 74 -5 -45) -45]
Test Case: 426 | Input/Output: [(-93 -5 -98 55) -98]
Test Case: 427 | Input/Output: [(-27 34 57 57) -27]
Test Case: 428 | Input/Output: [(-54 98 -55 -35) -55]
Test Case: 429 | Input/Output: [(-6 57 78 25) -6]
Test Case: 430 | Input/Output: [(92 62 58 66) 58]
Test Case: 431 | Input/Output: [(12 -43 84 -65) -65]
Test Case: 432 | Input/Output: [(19 -55 64 63) -55]
Test Case: 433 | Input/Output: [(26 -79 -19 -99) -99]
Test Case: 434 | Input/Output: [(96 -91 -7 8) -91]
Test Case: 435 | Input/Output: [(-85 60 -51 -71) -85]
Test Case: 436 | Input/Output: [(52 -67 40 -28) -67]
Test Case: 437 | Input/Output: [(66 54 -89 -70) -89]
Test Case: 438 | Input/Output: [(9 -12 97 -63) -63]
Test Case: 439 | Input/Output: [(64 -41 -74 -81) -81]
Test Case: 440 | Input/Output: [(-93 38 71 17) -93]
Test Case: 441 | Input/Output: [(-16 -69 -11 49) -69]
Test Case: 442 | Input/Output: [(-60 -16 -49 42) -60]
Test Case: 443 | Input/Output: [(-65 21 15 40) -65]
Test Case: 444 | Input/Output: [(100 -48 80 -51) -51]
Test Case: 445 | Input/Output: [(26 -48 -23 87) -48]
Test Case: 446 | Input/Output: [(31 91 -16 82) -16]
Test Case: 447 | Input/Output: [(89 -88 95 62) -88]
Test Case: 448 | Input/Output: [(-22 -25 81 74) -25]
Test Case: 449 | Input/Output: [(-75 9 -16 80) -75]
Test Case: 450 | Input/Output: [(50 -59 -23 44) -59]
Test Case: 451 | Input/Output: [(-18 -69 -79 -75) -79]
Test Case: 452 | Input/Output: [(36 -84 -82 43) -84]
Test Case: 453 | Input/Output: [(-48 64 -46 -60) -60]
Test Case: 454 | Input/Output: [(82 -79 -61 -44) -79]
Test Case: 455 | Input/Output: [(27 52 -11 30) -11]
Test Case: 456 | Input/Output: [(-61 13 79 -23) -61]
Test Case: 457 | Input/Output: [(-28 74 -99 57) -99]
Test Case: 458 | Input/Output: [(-8 -97 -26 -76) -97]
Test Case: 459 | Input/Output: [(-79 24 52 35) -79]
Test Case: 460 | Input/Output: [(-99 -5 -47 45) -99]
Test Case: 461 | Input/Output: [(-26 -46 42 -88) -88]
Test Case: 462 | Input/Output: [(-16 -63 7 66) -63]
Test Case: 463 | Input/Output: [(35 42 42 -42) -42]
Test Case: 464 | Input/Output: [(-59 97 -22 -85) -85]
Test Case: 465 | Input/Output: [(-55 59 -84 75) -84]
Test Case: 466 | Input/Output: [(78 -66 99 62) -66]
Test Case: 467 | Input/Output: [(-100 -24 57 -96) -100]
Test Case: 468 | Input/Output: [(6 -42 -64 6) -64]
Test Case: 469 | Input/Output: [(-77 -7 -81 52) -81]
Test Case: 470 | Input/Output: [(11 23 13 -5) -5]
Test Case: 471 | Input/Output: [(75 -98 76 -4) -98]
Test Case: 472 | Input/Output: [(-35 4 40 31) -35]
Test Case: 473 | Input/Output: [(25 32 57 85) 25]
Test Case: 474 | Input/Output: [(-28 22 28 -82) -82]
Test Case: 475 | Input/Output: [(52 28 -83 95) -83]
Test Case: 476 | Input/Output: [(-89 2 -53 -65) -89]
Test Case: 477 | Input/Output: [(-64 -42 69 -12) -64]
Test Case: 478 | Input/Output: [(23 49 21 2) 2]
Test Case: 479 | Input/Output: [(-13 31 -66 -98) -98]
Test Case: 480 | Input/Output: [(47 -33 36 22) -33]
Test Case: 481 | Input/Output: [(44 -34 95 -3) -34]
Test Case: 482 | Input/Output: [(-3 28 28 -17) -17]
Test Case: 483 | Input/Output: [(-18 6 -32 -14) -32]
Test Case: 484 | Input/Output: [(-5 -15 -14 -58) -58]
Test Case: 485 | Input/Output: [(-15 -5 31 37) -15]
Test Case: 486 | Input/Output: [(-14 78 -69 -94) -94]
Test Case: 487 | Input/Output: [(-5 -48 -93 -33) -93]
Test Case: 488 | Input/Output: [(-8 9 -41 85) -41]
Test Case: 489 | Input/Output: [(-70 53 25 -7) -70]
Test Case: 490 | Input/Output: [(79 15 -76 -49) -76]
Test Case: 491 | Input/Output: [(2 -30 53 -27) -30]
Test Case: 492 | Input/Output: [(6 7 38 -94) -94]
Test Case: 493 | Input/Output: [(-14 -33 -59 -82) -82]
Test Case: 494 | Input/Output: [(71 79 2 85) 2]
Test Case: 495 | Input/Output: [(46 -26 58 44) -26]
Test Case: 496 | Input/Output: [(46 39 55 -97) -97]
Test Case: 497 | Input/Output: [(89 -93 35 65) -93]
Test Case: 498 | Input/Output: [(-68 -33 -14 60) -68]
Test Case: 499 | Input/Output: [(-24 74 92 73) -24]
Test Case: 500 | Input/Output: [(40 8 37 30) 8]
Test Case: 501 | Input/Output: [(-49 7 -33 -71) -71]
Test Case: 502 | Input/Output: [(60 90 54 -48) -48]
Test Case: 503 | Input/Output: [(-2 -100 80 44) -100]
Test Case: 504 | Input/Output: [(53 -66 -89 -68) -89]
Test Case: 505 | Input/Output: [(-12 68 7 76) -12]
Test Case: 506 | Input/Output: [(-99 21 70 -46) -99]
Test Case: 507 | Input/Output: [(-2 22 82 -56) -56]
Test Case: 508 | Input/Output: [(-95 42 -1 60) -95]
Test Case: 509 | Input/Output: [(-76 46 32 -30) -76]
Test Case: 510 | Input/Output: [(-88 57 -66 87) -88]
Test Case: 511 | Input/Output: [(86 24 38 -72) -72]
Test Case: 512 | Input/Output: [(36 -42 35 89) -42]
Test Case: 513 | Input/Output: [(-81 51 -54 -90) -90]
Test Case: 514 | Input/Output: [(33 -54 15 2) -54]
Test Case: 515 | Input/Output: [(40 46 -64 -13) -64]
Test Case: 516 | Input/Output: [(-84 8 -77 2) -84]
Test Case: 517 | Input/Output: [(69 53 21 97) 21]
Test Case: 518 | Input/Output: [(13 63 -67 -15) -67]
Test Case: 519 | Input/Output: [(36 -8 -82 -42) -82]
Test Case: 520 | Input/Output: [(-87 -49 36 -26) -87]
Test Case: 521 | Input/Output: [(-1 -66 60 -61) -66]
Test Case: 522 | Input/Output: [(-76 -33 84 40) -76]
Test Case: 523 | Input/Output: [(48 -73 43 -73) -73]
Test Case: 524 | Input/Output: [(93 -62 75 -18) -62]
Test Case: 525 | Input/Output: [(78 -22 -52 -96) -96]
Test Case: 526 | Input/Output: [(23 14 26 -90) -90]
Test Case: 527 | Input/Output: [(0 60 -41 27) -41]
Test Case: 528 | Input/Output: [(32 88 26 -57) -57]
Test Case: 529 | Input/Output: [(47 14 76 -53) -53]
Test Case: 530 | Input/Output: [(12 85 27 -80) -80]
Test Case: 531 | Input/Output: [(-7 38 30 -41) -41]
Test Case: 532 | Input/Output: [(77 -95 22 -60) -95]
Test Case: 533 | Input/Output: [(46 74 58 -2) -2]
Test Case: 534 | Input/Output: [(36 87 5 10) 5]
Test Case: 535 | Input/Output: [(85 -7 41 -72) -72]
Test Case: 536 | Input/Output: [(-69 60 26 -91) -91]
Test Case: 537 | Input/Output: [(73 -3 -12 64) -12]
Test Case: 538 | Input/Output: [(42 -45 57 89) -45]
Test Case: 539 | Input/Output: [(-4 -37 -11 -79) -79]
Test Case: 540 | Input/Output: [(-32 78 89 -63) -63]
Test Case: 541 | Input/Output: [(64 82 -76 -41) -76]
Test Case: 542 | Input/Output: [(-84 -69 79 71) -84]
Test Case: 543 | Input/Output: [(48 69 66 49) 48]
Test Case: 544 | Input/Output: [(-53 58 -64 -73) -73]
Test Case: 545 | Input/Output: [(-59 25 48 45) -59]
Test Case: 546 | Input/Output: [(9 -15 52 21) -15]
Test Case: 547 | Input/Output: [(19 7 -88 -79) -88]
Test Case: 548 | Input/Output: [(-19 47 -98 6) -98]
Test Case: 549 | Input/Output: [(51 57 54 -38) -38]
Test Case: 550 | Input/Output: [(71 -79 39 45) -79]
Test Case: 551 | Input/Output: [(-81 -51 2 72) -81]
Test Case: 552 | Input/Output: [(25 21 93 -71) -71]
Test Case: 553 | Input/Output: [(-3 82 56 -38) -38]
Test Case: 554 | Input/Output: [(-20 97 -16 95) -20]
Test Case: 555 | Input/Output: [(-27 13 28 -42) -42]
Test Case: 556 | Input/Output: [(34 -82 -47 49) -82]
Test Case: 557 | Input/Output: [(-14 98 -97 -80) -97]
Test Case: 558 | Input/Output: [(59 -7 -77 -50) -77]
Test Case: 559 | Input/Output: [(52 -25 -2 -47) -47]
Test Case: 560 | Input/Output: [(71 -61 19 61) -61]
Test Case: 561 | Input/Output: [(8 36 11 91) 8]
Test Case: 562 | Input/Output: [(30 -63 -29 14) -63]
Test Case: 563 | Input/Output: [(-41 -80 60 -13) -80]
Test Case: 564 | Input/Output: [(60 -50 90 97) -50]
Test Case: 565 | Input/Output: [(19 27 -52 39) -52]
Test Case: 566 | Input/Output: [(-33 51 83 91) -33]
Test Case: 567 | Input/Output: [(75 -70 -70 -70) -70]
Test Case: 568 | Input/Output: [(-42 -77 -11 -30) -77]
Test Case: 569 | Input/Output: [(-34 58 35 86) -34]
Test Case: 570 | Input/Output: [(-59 66 27 -8) -59]
Test Case: 571 | Input/Output: [(-85 38 -1 -29) -85]
Test Case: 572 | Input/Output: [(-99 -50 75 54) -99]
Test Case: 573 | Input/Output: [(8 -21 52 -88) -88]
Test Case: 574 | Input/Output: [(56 -88 -74 89) -88]
Test Case: 575 | Input/Output: [(98 -41 -13 -36) -41]
Test Case: 576 | Input/Output: [(-16 -68 79 -53) -68]
Test Case: 577 | Input/Output: [(69 67 -21 59) -21]
Test Case: 578 | Input/Output: [(27 19 -28 17) -28]
Test Case: 579 | Input/Output: [(-66 -17 -21 62) -66]
Test Case: 580 | Input/Output: [(-63 -38 -72 84) -72]
Test Case: 581 | Input/Output: [(89 35 -14 47) -14]
Test Case: 582 | Input/Output: [(-90 -51 -10 74) -90]
Test Case: 583 | Input/Output: [(-79 -50 -51 -53) -79]
Test Case: 584 | Input/Output: [(-34 -38 90 17) -38]
Test Case: 585 | Input/Output: [(-71 -31 83 15) -71]
Test Case: 586 | Input/Output: [(17 32 -18 -56) -56]
Test Case: 587 | Input/Output: [(-75 -51 -10 18) -75]
Test Case: 588 | Input/Output: [(70 -51 -87 2) -87]
Test Case: 589 | Input/Output: [(83 92 -83 66) -83]
Test Case: 590 | Input/Output: [(-87 77 -10 -51) -87]
Test Case: 591 | Input/Output: [(52 55 -45 -26) -45]
Test Case: 592 | Input/Output: [(79 1 -10 -27) -27]
Test Case: 593 | Input/Output: [(7 44 -20 -79) -79]
Test Case: 594 | Input/Output: [(99 -94 16 84) -94]
Test Case: 595 | Input/Output: [(61 -43 -66 -16) -66]
Test Case: 596 | Input/Output: [(-65 99 -34 8) -65]
Test Case: 597 | Input/Output: [(12 41 37 44) 12]
Test Case: 598 | Input/Output: [(-87 -5 -65 -4) -87]
Test Case: 599 | Input/Output: [(31 20 -4 -18) -18]
Test Case: 600 | Input/Output: [(63 -17 48 -93) -93]
Test Case: 601 | Input/Output: [(-61 36 83 52) -61]
Test Case: 602 | Input/Output: [(45 -92 -46 6) -92]
Test Case: 603 | Input/Output: [(-21 96 75 12) -21]
Test Case: 604 | Input/Output: [(59 -79 68 -99) -99]
Test Case: 605 | Input/Output: [(98 -2 -47 41) -47]
Test Case: 606 | Input/Output: [(95 84 29 -41) -41]
Test Case: 607 | Input/Output: [(-94 86 -31 83) -94]
Test Case: 608 | Input/Output: [(72 -24 -90 50) -90]
Test Case: 609 | Input/Output: [(40 -12 -84 32) -84]
Test Case: 610 | Input/Output: [(-18 -28 -19 -40) -40]
Test Case: 611 | Input/Output: [(-82 -2 72 34) -82]
Test Case: 612 | Input/Output: [(90 -1 20 24) -1]
Test Case: 613 | Input/Output: [(4 20 -41 100) -41]
Test Case: 614 | Input/Output: [(-76 -75 -85 -77) -85]
Test Case: 615 | Input/Output: [(-38 36 -94 -17) -94]
Test Case: 616 | Input/Output: [(70 58 -90 -65) -90]
Test Case: 617 | Input/Output: [(-39 -16 -99 -75) -99]
Test Case: 618 | Input/Output: [(-4 82 14 -23) -23]
Test Case: 619 | Input/Output: [(27 70 54 -30) -30]
Test Case: 620 | Input/Output: [(-73 -12 92 79) -73]
Test Case: 621 | Input/Output: [(-33 -55 92 54) -55]
Test Case: 622 | Input/Output: [(15 1 74 91) 1]
Test Case: 623 | Input/Output: [(-10 -46 -68 -57) -68]
Test Case: 624 | Input/Output: [(42 -32 28 -13) -32]
Test Case: 625 | Input/Output: [(26 -52 -12 -24) -52]
Test Case: 626 | Input/Output: [(76 77 -30 -3) -30]
Test Case: 627 | Input/Output: [(53 56 -26 25) -26]
Test Case: 628 | Input/Output: [(17 36 -7 69) -7]
Test Case: 629 | Input/Output: [(-26 91 38 73) -26]
Test Case: 630 | Input/Output: [(33 58 -8 61) -8]
Test Case: 631 | Input/Output: [(92 47 -36 -56) -56]
Test Case: 632 | Input/Output: [(-55 96 72 17) -55]
Test Case: 633 | Input/Output: [(-2 27 58 -41) -41]
Test Case: 634 | Input/Output: [(95 82 -50 69) -50]
Test Case: 635 | Input/Output: [(65 60 -61 65) -61]
Test Case: 636 | Input/Output: [(-22 -32 24 -23) -32]
Test Case: 637 | Input/Output: [(16 -99 96 -65) -99]
Test Case: 638 | Input/Output: [(2 27 -34 58) -34]
Test Case: 639 | Input/Output: [(-13 -33 93 -99) -99]
Test Case: 640 | Input/Output: [(-3 -16 68 72) -16]
Test Case: 641 | Input/Output: [(65 20 -12 -92) -92]
Test Case: 642 | Input/Output: [(71 -74 16 7) -74]
Test Case: 643 | Input/Output: [(65 -71 54 4) -71]
Test Case: 644 | Input/Output: [(75 27 -4 -8) -8]
Test Case: 645 | Input/Output: [(-71 51 92 -19) -71]
Test Case: 646 | Input/Output: [(81 30 -17 -43) -43]
Test Case: 647 | Input/Output: [(-74 9 -85 -96) -96]
Test Case: 648 | Input/Output: [(10 73 33 -10) -10]
Test Case: 649 | Input/Output: [(59 16 -61 3) -61]
Test Case: 650 | Input/Output: [(16 15 -54 -99) -99]
Test Case: 651 | Input/Output: [(44 -82 13 -56) -82]
Test Case: 652 | Input/Output: [(69 -94 96 -52) -94]
Test Case: 653 | Input/Output: [(-73 -87 71 -74) -87]
Test Case: 654 | Input/Output: [(66 69 -48 -70) -70]
Test Case: 655 | Input/Output: [(96 -63 90 -83) -83]
Test Case: 656 | Input/Output: [(-66 63 -4 -92) -92]
Test Case: 657 | Input/Output: [(13 -83 -39 14) -83]
Test Case: 658 | Input/Output: [(87 92 72 -49) -49]
Test Case: 659 | Input/Output: [(96 -7 -29 -89) -89]
Test Case: 660 | Input/Output: [(10 39 -63 6) -63]
Test Case: 661 | Input/Output: [(29 -10 88 -46) -46]
Test Case: 662 | Input/Output: [(20 -29 -16 -4) -29]
Test Case: 663 | Input/Output: [(-70 -32 -4 43) -70]
Test Case: 664 | Input/Output: [(65 70 -73 -94) -94]
Test Case: 665 | Input/Output: [(-93 61 32 99) -93]
Test Case: 666 | Input/Output: [(92 50 -41 16) -41]
Test Case: 667 | Input/Output: [(-67 78 94 -89) -89]
Test Case: 668 | Input/Output: [(65 2 -54 31) -54]
Test Case: 669 | Input/Output: [(-3 12 32 -39) -39]
Test Case: 670 | Input/Output: [(1 -47 84 -100) -100]
Test Case: 671 | Input/Output: [(19 5 -61 -36) -61]
Test Case: 672 | Input/Output: [(-11 -96 -5 -11) -96]
Test Case: 673 | Input/Output: [(-99 -38 2 11) -99]
Test Case: 674 | Input/Output: [(-97 -66 -85 43) -97]
Test Case: 675 | Input/Output: [(30 23 -31 100) -31]
Test Case: 676 | Input/Output: [(-100 4 67 -23) -100]
Test Case: 677 | Input/Output: [(28 34 82 -26) -26]
Test Case: 678 | Input/Output: [(21 23 -70 9) -70]
Test Case: 679 | Input/Output: [(-61 58 18 61) -61]
Test Case: 680 | Input/Output: [(-92 56 -70 -60) -92]
Test Case: 681 | Input/Output: [(-29 61 81 0) -29]
Test Case: 682 | Input/Output: [(8 -52 30 -51) -52]
Test Case: 683 | Input/Output: [(-66 34 -20 20) -66]
Test Case: 684 | Input/Output: [(33 48 35 -21) -21]
Test Case: 685 | Input/Output: [(21 -77 37 40) -77]
Test Case: 686 | Input/Output: [(21 35 85 60) 21]
Test Case: 687 | Input/Output: [(28 -75 -77 -25) -77]
Test Case: 688 | Input/Output: [(99 -36 -65 -8) -65]
Test Case: 689 | Input/Output: [(45 -94 15 -28) -94]
Test Case: 690 | Input/Output: [(-5 -73 77 17) -73]
Test Case: 691 | Input/Output: [(62 -28 -81 -49) -81]
Test Case: 692 | Input/Output: [(10 -21 36 66) -21]
Test Case: 693 | Input/Output: [(83 -58 -68 65) -68]
Test Case: 694 | Input/Output: [(-86 100 -45 -87) -87]
Test Case: 695 | Input/Output: [(50 -39 -6 80) -39]
Test Case: 696 | Input/Output: [(92 40 39 69) 39]
Test Case: 697 | Input/Output: [(63 90 72 -94) -94]
Test Case: 698 | Input/Output: [(-93 -55 90 10) -93]
Test Case: 699 | Input/Output: [(-31 -30 46 88) -31]
Test Case: 700 | Input/Output: [(-48 -81 31 -68) -81]
Test Case: 701 | Input/Output: [(29 25 -50 -47) -50]
Test Case: 702 | Input/Output: [(-65 -55 -19 77) -65]
Test Case: 703 | Input/Output: [(24 89 -58 83) -58]
Test Case: 704 | Input/Output: [(-94 38 11 -26) -94]
Test Case: 705 | Input/Output: [(-20 52 40 -9) -20]
Test Case: 706 | Input/Output: [(71 5 -92 -94) -94]
Test Case: 707 | Input/Output: [(58 49 -83 84) -83]
Test Case: 708 | Input/Output: [(-33 25 -48 -13) -48]
Test Case: 709 | Input/Output: [(11 35 -23 -23) -23]
Test Case: 710 | Input/Output: [(-17 18 -30 94) -30]
Test Case: 711 | Input/Output: [(-48 -28 1 11) -48]
Test Case: 712 | Input/Output: [(68 -90 85 36) -90]
Test Case: 713 | Input/Output: [(-17 -79 -65 -23) -79]
Test Case: 714 | Input/Output: [(-83 -85 86 29) -85]
Test Case: 715 | Input/Output: [(-55 -71 -82 30) -82]
Test Case: 716 | Input/Output: [(-81 -53 65 -48) -81]
Test Case: 717 | Input/Output: [(-45 -18 58 47) -45]
Test Case: 718 | Input/Output: [(-79 -1 64 53) -79]
Test Case: 719 | Input/Output: [(-78 -9 84 -68) -78]
Test Case: 720 | Input/Output: [(-8 67 -6 16) -8]
Test Case: 721 | Input/Output: [(-65 36 -43 47) -65]
Test Case: 722 | Input/Output: [(-15 -97 -18 91) -97]
Test Case: 723 | Input/Output: [(-12 -10 -47 14) -47]
Test Case: 724 | Input/Output: [(-40 51 7 -18) -40]
Test Case: 725 | Input/Output: [(24 -18 29 17) -18]
Test Case: 726 | Input/Output: [(39 14 -33 0) -33]
Test Case: 727 | Input/Output: [(-63 -39 -78 -73) -78]
Test Case: 728 | Input/Output: [(-25 -39 -24 52) -39]
Test Case: 729 | Input/Output: [(55 -76 -2 48) -76]
Test Case: 730 | Input/Output: [(-38 71 -12 -34) -38]
Test Case: 731 | Input/Output: [(-25 -88 -61 97) -88]
Test Case: 732 | Input/Output: [(-85 70 -72 -95) -95]
Test Case: 733 | Input/Output: [(-66 -91 -39 65) -91]
Test Case: 734 | Input/Output: [(83 -55 -34 97) -55]
Test Case: 735 | Input/Output: [(-18 100 93 90) -18]
Test Case: 736 | Input/Output: [(-8 -92 28 87) -92]
Test Case: 737 | Input/Output: [(94 -85 89 22) -85]
Test Case: 738 | Input/Output: [(-85 32 -98 -77) -98]
Test Case: 739 | Input/Output: [(10 -100 24 -63) -100]
Test Case: 740 | Input/Output: [(-89 -28 -78 18) -89]
Test Case: 741 | Input/Output: [(56 -73 77 -47) -73]
Test Case: 742 | Input/Output: [(-69 29 10 3) -69]
Test Case: 743 | Input/Output: [(-65 29 54 -84) -84]
Test Case: 744 | Input/Output: [(37 -18 3 -81) -81]
Test Case: 745 | Input/Output: [(-71 -25 8 48) -71]
Test Case: 746 | Input/Output: [(-44 40 -93 -22) -93]
Test Case: 747 | Input/Output: [(-88 -86 52 -32) -88]
Test Case: 748 | Input/Output: [(45 44 31 -31) -31]
Test Case: 749 | Input/Output: [(90 -44 5 -92) -92]
Test Case: 750 | Input/Output: [(-53 -19 -44 -26) -53]
Test Case: 751 | Input/Output: [(-89 7 39 17) -89]
Test Case: 752 | Input/Output: [(80 99 87 0) 0]
Test Case: 753 | Input/Output: [(58 4 -7 -79) -79]
Test Case: 754 | Input/Output: [(62 -98 70 63) -98]
Test Case: 755 | Input/Output: [(15 -83 -76 70) -83]
Test Case: 756 | Input/Output: [(57 -58 -59 6) -59]
Test Case: 757 | Input/Output: [(-46 43 -14 -9) -46]
Test Case: 758 | Input/Output: [(29 51 -77 -99) -99]
Test Case: 759 | Input/Output: [(-93 -48 -17 33) -93]
Test Case: 760 | Input/Output: [(-61 -71 31 55) -71]
Test Case: 761 | Input/Output: [(60 -57 -76 -88) -88]
Test Case: 762 | Input/Output: [(72 -38 6 18) -38]
Test Case: 763 | Input/Output: [(-71 -51 -47 1) -71]
Test Case: 764 | Input/Output: [(-26 -6 -77 21) -77]
Test Case: 765 | Input/Output: [(-37 -92 65 0) -92]
Test Case: 766 | Input/Output: [(86 -63 94 -29) -63]
Test Case: 767 | Input/Output: [(77 -97 -6 -92) -97]
Test Case: 768 | Input/Output: [(-43 -23 -37 63) -43]
Test Case: 769 | Input/Output: [(5 83 75 -24) -24]
Test Case: 770 | Input/Output: [(-84 91 -66 -60) -84]
Test Case: 771 | Input/Output: [(-47 89 -97 -3) -97]
Test Case: 772 | Input/Output: [(-1 -2 87 -6) -6]
Test Case: 773 | Input/Output: [(-45 19 -55 -32) -55]
Test Case: 774 | Input/Output: [(-19 82 -69 -59) -69]
Test Case: 775 | Input/Output: [(10 -74 -5 -92) -92]
Test Case: 776 | Input/Output: [(28 -78 7 82) -78]
Test Case: 777 | Input/Output: [(-91 60 -69 70) -91]
Test Case: 778 | Input/Output: [(-17 -31 -74 4) -74]
Test Case: 779 | Input/Output: [(-58 -19 -63 -63) -63]
Test Case: 780 | Input/Output: [(48 -22 52 -39) -39]
Test Case: 781 | Input/Output: [(-63 -12 88 -19) -63]
Test Case: 782 | Input/Output: [(-95 82 -33 73) -95]
Test Case: 783 | Input/Output: [(18 62 -70 -66) -70]
Test Case: 784 | Input/Output: [(16 13 73 -50) -50]
Test Case: 785 | Input/Output: [(74 92 -26 84) -26]
Test Case: 786 | Input/Output: [(100 49 4 17) 4]
Test Case: 787 | Input/Output: [(95 -62 58 37) -62]
Test Case: 788 | Input/Output: [(61 30 -68 -27) -68]
Test Case: 789 | Input/Output: [(-52 -87 -45 -83) -87]
Test Case: 790 | Input/Output: [(39 47 -38 -74) -74]
Test Case: 791 | Input/Output: [(47 69 53 -6) -6]
Test Case: 792 | Input/Output: [(-7 -60 -75 88) -75]
Test Case: 793 | Input/Output: [(54 -68 48 -85) -85]
Test Case: 794 | Input/Output: [(-54 -7 -90 -72) -90]
Test Case: 795 | Input/Output: [(-100 -45 91 -29) -100]
Test Case: 796 | Input/Output: [(-72 28 3 -56) -72]
Test Case: 797 | Input/Output: [(-33 87 8 -88) -88]
Test Case: 798 | Input/Output: [(-51 64 -9 21) -51]
Test Case: 799 | Input/Output: [(89 63 75 24) 24]
Test Case: 800 | Input/Output: [(-90 49 -69 34) -90]
Test Case: 801 | Input/Output: [(22 -72 90 67) -72]
Test Case: 802 | Input/Output: [(77 -75 20 3) -75]
Test Case: 803 | Input/Output: [(-57 6 44 -56) -57]
Test Case: 804 | Input/Output: [(-83 -87 -63 -74) -87]
Test Case: 805 | Input/Output: [(50 -79 -50 -23) -79]
Test Case: 806 | Input/Output: [(-99 -70 -64 26) -99]
Test Case: 807 | Input/Output: [(94 84 46 -21) -21]
Test Case: 808 | Input/Output: [(61 -42 89 82) -42]
Test Case: 809 | Input/Output: [(6 33 -75 17) -75]
Test Case: 810 | Input/Output: [(67 13 8 32) 8]
Test Case: 811 | Input/Output: [(94 -73 28 -71) -73]
Test Case: 812 | Input/Output: [(-61 -66 20 46) -66]
Test Case: 813 | Input/Output: [(-76 -79 84 19) -79]
Test Case: 814 | Input/Output: [(70 98 35 -28) -28]
Test Case: 815 | Input/Output: [(30 -62 -25 61) -62]
Test Case: 816 | Input/Output: [(-21 7 37 76) -21]
Test Case: 817 | Input/Output: [(-53 10 -35 42) -53]
Test Case: 818 | Input/Output: [(-13 -55 60 -32) -55]
Test Case: 819 | Input/Output: [(-18 97 -37 -43) -43]
Test Case: 820 | Input/Output: [(-25 -97 -8 49) -97]
Test Case: 821 | Input/Output: [(-20 -25 42 -77) -77]
Test Case: 822 | Input/Output: [(-76 38 71 30) -76]
Test Case: 823 | Input/Output: [(-5 27 43 -24) -24]
Test Case: 824 | Input/Output: [(-53 -8 -25 -75) -75]
Test Case: 825 | Input/Output: [(3 -46 -100 17) -100]
Test Case: 826 | Input/Output: [(20 -4 6 -49) -49]
Test Case: 827 | Input/Output: [(-35 32 -47 53) -47]
Test Case: 828 | Input/Output: [(-74 -64 -34 -19) -74]
Test Case: 829 | Input/Output: [(-26 -55 12 -71) -71]
Test Case: 830 | Input/Output: [(35 32 92 -79) -79]
Test Case: 831 | Input/Output: [(-80 -15 -84 85) -84]
Test Case: 832 | Input/Output: [(56 -19 -37 12) -37]
Test Case: 833 | Input/Output: [(52 -72 19 65) -72]
Test Case: 834 | Input/Output: [(-32 16 -47 89) -47]
Test Case: 835 | Input/Output: [(32 99 49 -42) -42]
Test Case: 836 | Input/Output: [(30 57 24 -38) -38]
Test Case: 837 | Input/Output: [(-93 -20 25 -88) -93]
Test Case: 838 | Input/Output: [(69 -57 21 94) -57]
Test Case: 839 | Input/Output: [(-15 -94 -100 -68) -100]
Test Case: 840 | Input/Output: [(-42 -73 57 -82) -82]
Test Case: 841 | Input/Output: [(-85 -2 -8 -82) -85]
Test Case: 842 | Input/Output: [(-36 21 35 10) -36]
Test Case: 843 | Input/Output: [(-25 48 -68 87) -68]
Test Case: 844 | Input/Output: [(83 19 -59 88) -59]
Test Case: 845 | Input/Output: [(2 1 58 -53) -53]
Test Case: 846 | Input/Output: [(73 6 -97 -45) -97]
Test Case: 847 | Input/Output: [(82 -51 67 -64) -64]
Test Case: 848 | Input/Output: [(11 -11 -89 71) -89]
Test Case: 849 | Input/Output: [(94 66 80 -82) -82]
Test Case: 850 | Input/Output: [(-52 -30 -67 -38) -67]
Test Case: 851 | Input/Output: [(-7 -38 7 13) -38]
Test Case: 852 | Input/Output: [(-12 58 -93 -60) -93]
Test Case: 853 | Input/Output: [(-98 46 35 57) -98]
Test Case: 854 | Input/Output: [(-99 -78 -16 18) -99]
Test Case: 855 | Input/Output: [(-22 -9 -98 25) -98]
Test Case: 856 | Input/Output: [(39 13 49 -52) -52]
Test Case: 857 | Input/Output: [(8 91 -97 83) -97]
Test Case: 858 | Input/Output: [(-98 -2 90 -91) -98]
Test Case: 859 | Input/Output: [(-48 -36 76 -24) -48]
Test Case: 860 | Input/Output: [(-85 68 10 71) -85]
Test Case: 861 | Input/Output: [(97 -90 -32 -7) -90]
Test Case: 862 | Input/Output: [(-30 75 -98 58) -98]
Test Case: 863 | Input/Output: [(-31 9 89 13) -31]
Test Case: 864 | Input/Output: [(-16 -33 6 62) -33]
Test Case: 865 | Input/Output: [(95 92 73 21) 21]
Test Case: 866 | Input/Output: [(11 78 72 14) 11]
Test Case: 867 | Input/Output: [(-81 -35 -69 -30) -81]
Test Case: 868 | Input/Output: [(24 -97 8 -17) -97]
Test Case: 869 | Input/Output: [(-92 -18 -62 -49) -92]
Test Case: 870 | Input/Output: [(-19 28 -12 59) -19]
Test Case: 871 | Input/Output: [(53 -24 59 26) -24]
Test Case: 872 | Input/Output: [(38 57 -68 -19) -68]
Test Case: 873 | Input/Output: [(46 25 57 -61) -61]
Test Case: 874 | Input/Output: [(-59 10 17 89) -59]
Test Case: 875 | Input/Output: [(26 -30 -11 42) -30]
Test Case: 876 | Input/Output: [(-22 -4 55 51) -22]
Test Case: 877 | Input/Output: [(14 47 90 -6) -6]
Test Case: 878 | Input/Output: [(8 -91 -9 80) -91]
Test Case: 879 | Input/Output: [(91 51 -69 42) -69]
Test Case: 880 | Input/Output: [(85 -29 77 -65) -65]
Test Case: 881 | Input/Output: [(-20 -9 -30 -77) -77]
Test Case: 882 | Input/Output: [(-58 55 93 43) -58]
Test Case: 883 | Input/Output: [(-30 69 -80 -15) -80]
Test Case: 884 | Input/Output: [(-52 3 27 11) -52]
Test Case: 885 | Input/Output: [(-18 -93 -56 4) -93]
Test Case: 886 | Input/Output: [(-19 80 -58 56) -58]
Test Case: 887 | Input/Output: [(-45 -89 50 63) -89]
Test Case: 888 | Input/Output: [(-7 16 28 -100) -100]
Test Case: 889 | Input/Output: [(-34 100 -51 21) -51]
Test Case: 890 | Input/Output: [(-21 -11 40 -25) -25]
Test Case: 891 | Input/Output: [(-31 64 -31 65) -31]
Test Case: 892 | Input/Output: [(45 -7 -88 -64) -88]
Test Case: 893 | Input/Output: [(-25 -90 1 84) -90]
Test Case: 894 | Input/Output: [(51 -31 -15 68) -31]
Test Case: 895 | Input/Output: [(81 3 77 -56) -56]
Test Case: 896 | Input/Output: [(1 -30 87 -5) -30]
Test Case: 897 | Input/Output: [(25 -7 -94 58) -94]
Test Case: 898 | Input/Output: [(-96 1 26 39) -96]
Test Case: 899 | Input/Output: [(-24 72 91 -25) -25]
Test Case: 900 | Input/Output: [(-36 -89 20 -97) -97]
Test Case: 901 | Input/Output: [(-43 77 5 19) -43]
Test Case: 902 | Input/Output: [(91 -57 -44 48) -57]
Test Case: 903 | Input/Output: [(73 -8 53 36) -8]
Test Case: 904 | Input/Output: [(35 33 -92 86) -92]
Test Case: 905 | Input/Output: [(-58 -85 -27 87) -85]
Test Case: 906 | Input/Output: [(14 72 -30 -26) -30]
Test Case: 907 | Input/Output: [(-59 23 50 86) -59]
Test Case: 908 | Input/Output: [(1 25 22 -100) -100]
Test Case: 909 | Input/Output: [(-6 -76 23 26) -76]
Test Case: 910 | Input/Output: [(41 77 47 -45) -45]
Test Case: 911 | Input/Output: [(68 16 -91 75) -91]
Test Case: 912 | Input/Output: [(55 -6 -59 -60) -60]
Test Case: 913 | Input/Output: [(7 -5 0 51) -5]
Test Case: 914 | Input/Output: [(-94 -49 -1 35) -94]
Test Case: 915 | Input/Output: [(13 2 33 -36) -36]
Test Case: 916 | Input/Output: [(37 -52 -10 -46) -52]
Test Case: 917 | Input/Output: [(26 -72 43 30) -72]
Test Case: 918 | Input/Output: [(85 30 -37 76) -37]
Test Case: 919 | Input/Output: [(20 48 -54 41) -54]
Test Case: 920 | Input/Output: [(63 39 65 -73) -73]
Test Case: 921 | Input/Output: [(-27 -31 23 -63) -63]
Test Case: 922 | Input/Output: [(54 -30 -45 5) -45]
Test Case: 923 | Input/Output: [(-50 26 39 11) -50]
Test Case: 924 | Input/Output: [(21 -57 27 -57) -57]
Test Case: 925 | Input/Output: [(-44 73 10 -80) -80]
Test Case: 926 | Input/Output: [(100 -70 66 20) -70]
Test Case: 927 | Input/Output: [(11 28 55 36) 11]
Test Case: 928 | Input/Output: [(56 19 75 -1) -1]
Test Case: 929 | Input/Output: [(85 -19 81 91) -19]
Test Case: 930 | Input/Output: [(-68 96 96 11) -68]
Test Case: 931 | Input/Output: [(41 -22 68 97) -22]
Test Case: 932 | Input/Output: [(7 -17 -62 -78) -78]
Test Case: 933 | Input/Output: [(94 -17 61 -27) -27]
Test Case: 934 | Input/Output: [(-91 -17 42 -82) -91]
Test Case: 935 | Input/Output: [(-27 88 54 78) -27]
Test Case: 936 | Input/Output: [(25 -90 46 -66) -90]
Test Case: 937 | Input/Output: [(62 86 10 79) 10]
Test Case: 938 | Input/Output: [(46 -74 86 -89) -89]
Test Case: 939 | Input/Output: [(-41 81 88 -89) -89]
Test Case: 940 | Input/Output: [(-25 2 -6 -88) -88]
Test Case: 941 | Input/Output: [(50 -21 -54 49) -54]
Test Case: 942 | Input/Output: [(35 -11 -74 30) -74]
Test Case: 943 | Input/Output: [(53 25 -17 83) -17]
Test Case: 944 | Input/Output: [(5 -80 66 45) -80]
Test Case: 945 | Input/Output: [(59 -36 35 -60) -60]
Test Case: 946 | Input/Output: [(-67 -70 -31 -76) -76]
Test Case: 947 | Input/Output: [(60 -53 59 57) -53]
Test Case: 948 | Input/Output: [(-46 -73 -32 97) -73]
Test Case: 949 | Input/Output: [(-17 -38 1 93) -38]
Test Case: 950 | Input/Output: [(-80 20 -71 20) -80]
Test Case: 951 | Input/Output: [(77 -16 17 -46) -46]
Test Case: 952 | Input/Output: [(-96 -94 15 -90) -96]
Test Case: 953 | Input/Output: [(79 -47 -46 83) -47]
Test Case: 954 | Input/Output: [(-36 -18 -3 -29) -36]
Test Case: 955 | Input/Output: [(70 69 21 -14) -14]
Test Case: 956 | Input/Output: [(-86 -70 70 53) -86]
Test Case: 957 | Input/Output: [(-84 -92 -85 9) -92]
Test Case: 958 | Input/Output: [(-49 -83 70 100) -83]
Test Case: 959 | Input/Output: [(76 -29 84 -95) -95]
Test Case: 960 | Input/Output: [(91 -87 -51 -15) -87]
Test Case: 961 | Input/Output: [(-3 -61 -74 43) -74]
Test Case: 962 | Input/Output: [(77 77 20 -51) -51]
Test Case: 963 | Input/Output: [(-80 -76 19 20) -80]
Test Case: 964 | Input/Output: [(-47 49 -100 -92) -100]
Test Case: 965 | Input/Output: [(27 68 58 34) 27]
Test Case: 966 | Input/Output: [(-52 -32 6 56) -52]
Test Case: 967 | Input/Output: [(38 40 -6 72) -6]
Test Case: 968 | Input/Output: [(26 -89 -74 -44) -89]
Test Case: 969 | Input/Output: [(60 -96 -6 -63) -96]
Test Case: 970 | Input/Output: [(-21 92 31 91) -21]
Test Case: 971 | Input/Output: [(-74 -25 41 15) -74]
Test Case: 972 | Input/Output: [(-87 -62 -44 19) -87]
Test Case: 973 | Input/Output: [(-74 -59 82 -79) -79]
Test Case: 974 | Input/Output: [(-87 -88 -61 -43) -88]
Test Case: 975 | Input/Output: [(38 -26 -48 -96) -96]
Test Case: 976 | Input/Output: [(55 -50 40 -30) -50]
Test Case: 977 | Input/Output: [(58 -94 62 -75) -94]
Test Case: 978 | Input/Output: [(90 -77 -61 66) -77]
Test Case: 979 | Input/Output: [(24 -69 -13 -67) -69]
Test Case: 980 | Input/Output: [(88 -49 53 34) -49]
Test Case: 981 | Input/Output: [(-84 70 -66 16) -84]
Test Case: 982 | Input/Output: [(44 6 51 -97) -97]
Test Case: 983 | Input/Output: [(-80 67 28 9) -80]
Test Case: 984 | Input/Output: [(-8 -32 19 36) -32]
Test Case: 985 | Input/Output: [(-54 39 -9 -55) -55]
Test Case: 986 | Input/Output: [(-65 72 85 1) -65]
Test Case: 987 | Input/Output: [(-4 -25 58 -69) -69]
Test Case: 988 | Input/Output: [(47 76 32 -10) -10]
Test Case: 989 | Input/Output: [(-97 -90 -18 -74) -97]
Test Case: 990 | Input/Output: [(-90 39 35 -34) -90]
Test Case: 991 | Input/Output: [(-49 -33 -6 -63) -63]
Test Case: 992 | Input/Output: [(12 -50 -16 -70) -70]
Test Case: 993 | Input/Output: [(1 -5 47 -5) -5]
Test Case: 994 | Input/Output: [(-64 -85 -84 22) -85]
Test Case: 995 | Input/Output: [(-76 32 29 -79) -79]
Test Case: 996 | Input/Output: [(-97 -39 -14 66) -97]
Test Case: 997 | Input/Output: [(-94 78 -6 79) -94]
Test Case: 998 | Input/Output: [(-10 64 96 41) -10]
Test Case: 999 | Input/Output: [(-99 -50 -73 60) -99]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 86 -7 -122 34 -29 114 105 97 54 -87 72 101 -79 13 74 -82
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -32 -13 -32] -32] [[-71 -71 -41 -71] -71] [[93 93 93 55] 55] [[-25 -25 -25 38] -25] [[78 78 78 27] 27] [[-5 -70 -70 -70] -70] [[-28 -51 -51 -51] -51] [[95 -60 -60 -60] -60] [[-52 56 56 56] -52] [[91 91 98 91] 91] [(55 55 55 55) 55] [(-58 -58 -58 -58) -58] [(-62 -62 -62 -62) -62] [(-51 -51 -51 -51) -51] [(-35 -35 -35 -35) -35] [(91 96 70 28) 28] [(96 18 59 4) 4] [(7 49 39 31) 7] [(71 87 90 76) 71] [(64 23 42 44) 23] [(39 22 41 57) 22] [(64 35 45 78) 35] [(38 13 50 73) 13] [(77 58 72 20) 20] [(29 56 71 81) 29] [(34 5 36 46) 5] [(36 11 64 30) 11] [(33 51 42 34) 33] [(13 50 73 19) 13] [(78 54 73 71) 54] [(89 39 70 43) 39] [(84 99 77 56) 56] [(89 83 12 57) 12] [(21 12 27 65) 12] [(88 82 14 10) 10] [(-49 70 86 -93) -93] [(-71 18 -87 -77) -87] [(18 -63 76 6) -63] [(83 -6 -97 54) -97] [(58 -38 73 -78) -78] [(20 55 -40 -18) -40] [(-15 0 -75 85) -75] [(4 25 47 -61) -61] [(31 40 -51 26) -51] [(-21 41 -10 -75) -75] [(11 40 -9 -22) -22] [(-80 -50 -78 83) -80] [(51 54 -51 62) -51] [(-66 95 -73 -29) -73] [(-83 -39 -66 11) -83] [(71 14 69 -51) -51] [(85 -36 -16 73) -36] [(-49 -58 62 -56) -58] [(-53 -12 100 69) -53] [(-50 -90 83 73) -90] [(72 73 -37 75) -37] [(92 -65 -5 -76) -76] [(64 73 17 -52) -52] [(-22 83 -93 10) -93] [(-75 19 48 63) -75] [(-72 70 24 -47) -72] [(-53 83 -30 -49) -53] [(-22 -62 70 -43) -62] [(85 27 30 26) 26] [(-67 -2 -54 43) -67] [(-3 -95 50 -42) -95] [(-13 -11 85 86) -13] [(-100 99 -23 -63) -100] [(-46 -37 -41 -20) -46] [(-83 38 26 66) -83] [(-69 -89 17 -85) -89] [(89 -94 -70 54) -94] [(81 0 -89 60) -89] [(24 0 -20 -48) -48] [(46 46 -45 -77) -77] [(92 -9 53 -4) -9] [(82 -46 45 -97) -97] [(32 -1 18 -9) -9] [(17 -70 -6 -59) -70] [(3 -24 62 -26) -26] [(-60 67 14 -76) -76] [(-24 15 -19 -24) -24] [(-15 98 75 -62) -62] [(91 67 47 -39) -39] [(49 -23 -9 -85) -85] [(52 -43 34 29) -43] [(-34 56 51 -24) -34] [(31 88 44 -16) -16] [(-45 -92 -10 -94) -94] [(-46 -13 -16 17) -46] [(60 58 -9 90) -9] [(-84 60 91 94) -84] [(-45 1 9 87) -45] [(-17 82 39 -29) -29] [(-77 11 75 -51) -77])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 96                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 49                 
Correct output: 71                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 51                 
Correct output: 13                  | Program output: 50                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 99                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 82                 
Correct output: -93                 | Program output: 70                 
Correct output: -87                 | Program output: 18                 
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 55                 
Correct output: -75                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -51                 | Program output: 40                 
Correct output: -75                 | Program output: 41                 
Correct output: -22                 | Program output: 40                 
Correct output: -80                 | Program output: -50                
Correct output: -51                 | Program output: 54                 
Correct output: -73                 | Program output: 95                 
Correct output: -83                 | Program output: -39                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 73                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 73                 
Correct output: -93                 | Program output: 83                 
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: 70                 
Correct output: -53                 | Program output: 83                 
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: 99                 
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: 38                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: 67                 
Correct output: -24                 | Program output: 15                 
Correct output: -62                 | Program output: 98                 
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 56                 
Correct output: -16                 | Program output: 88                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -13                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: 82                 
Correct output: -77                 | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_flush print_integer exec_pop (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max boolean_or integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.210
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_flush print_integer exec_pop (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max boolean_or integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 1 2 1 1 3 4 6 2)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (2 2 1 2 1 1 3 4 6 2)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (integer_flush print_integer exec_pop (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max boolean_or integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 81
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 9.976
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.999 0.998 0.999 0.999 0.997 0.996 0.994 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.934
Average program size in population (points): 70.24
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 459122
--- Timings ---
Current time: 1559314484318 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 27.7%
Fitness Testing:      1.9 seconds, 68.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 96                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 49                 
Correct output: 71                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 51                 
Correct output: 13                  | Program output: 50                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 99                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 82                 
Correct output: -93                 | Program output: 70                 
Correct output: -87                 | Program output: 18                 
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 55                 
Correct output: -75                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -51                 | Program output: 40                 
Correct output: -75                 | Program output: 41                 
Correct output: -22                 | Program output: 40                 
Correct output: -80                 | Program output: -50                
Correct output: -51                 | Program output: 54                 
Correct output: -73                 | Program output: 95                 
Correct output: -83                 | Program output: -39                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 73                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 73                 
Correct output: -93                 | Program output: 83                 
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: 70                 
Correct output: -53                 | Program output: 83                 
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: 99                 
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: 38                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: 67                 
Correct output: -24                 | Program output: 15                 
Correct output: -62                 | Program output: 98                 
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 56                 
Correct output: -16                 | Program output: 88                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -13                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: 82                 
Correct output: -77                 | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (integer_rot) boolean_xor boolean_dup_items exec_while (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max integer_flush integer_div print_integer integer_dup boolean_and boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Lexicase best errors: [1 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 87
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (integer_rot) boolean_xor boolean_dup_items exec_while (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max integer_flush integer_div print_integer integer_dup boolean_and boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Zero cases best errors: [1 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 87
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 290 1000 1000 852 369 190 364 290 368)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (0 290 0 0 852 369 190 364 290 368)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (integer_flush print_integer exec_pop (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max boolean_or integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Errors: [1 1 1 1 0 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 64
Size: 81
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 7.277
Median total errors in population: 7
Error averages by case: (1.0 0.71 1.0 1.0 0.148 0.631 0.81 0.636 0.71 0.632)
Error minima by case: (1 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 53.725
Average program size in population (points): 69.512
Average percent parens in population: 0.226
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.494
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 917101
--- Timings ---
Current time: 1559314487152 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 43.3%
Fitness Testing:      2.6 seconds, 45.5%
Report:               0.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 93                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 78                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 96                 
Correct output: 4                   | Program output: 18                 
Correct output: 7                   | Program output: 49                 
Correct output: 71                  | Program output: 87                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 35                  | Program output: 35                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 58                 
Correct output: 29                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 51                 
Correct output: 13                  | Program output: 50                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 56                  | Program output: 99                 
Correct output: 12                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 10                  | Program output: 82                 
Correct output: -93                 | Program output: 70                 
Correct output: -87                 | Program output: 18                 
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -6                 
Correct output: -78                 | Program output: -38                
Correct output: -40                 | Program output: 55                 
Correct output: -75                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -51                 | Program output: 40                 
Correct output: -75                 | Program output: 41                 
Correct output: -22                 | Program output: 40                 
Correct output: -80                 | Program output: -50                
Correct output: -51                 | Program output: 54                 
Correct output: -73                 | Program output: 95                 
Correct output: -83                 | Program output: -39                
Correct output: -51                 | Program output: 14                 
Correct output: -36                 | Program output: -36                
Correct output: -58                 | Program output: -58                
Correct output: -53                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -37                 | Program output: 73                 
Correct output: -76                 | Program output: -65                
Correct output: -52                 | Program output: 73                 
Correct output: -93                 | Program output: 83                 
Correct output: -75                 | Program output: 19                 
Correct output: -72                 | Program output: 70                 
Correct output: -53                 | Program output: 83                 
Correct output: -62                 | Program output: -62                
Correct output: 26                  | Program output: 27                 
Correct output: -67                 | Program output: -2                 
Correct output: -95                 | Program output: -95                
Correct output: -13                 | Program output: -11                
Correct output: -100                | Program output: 99                 
Correct output: -46                 | Program output: -37                
Correct output: -83                 | Program output: 38                 
Correct output: -89                 | Program output: -89                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 0                  
Correct output: -48                 | Program output: 0                  
Correct output: -77                 | Program output: 46                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -46                
Correct output: -9                  | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -24                
Correct output: -76                 | Program output: 67                 
Correct output: -24                 | Program output: 15                 
Correct output: -62                 | Program output: 98                 
Correct output: -39                 | Program output: 67                 
Correct output: -85                 | Program output: -23                
Correct output: -43                 | Program output: -43                
Correct output: -34                 | Program output: 56                 
Correct output: -16                 | Program output: 88                 
Correct output: -94                 | Program output: -92                
Correct output: -46                 | Program output: -13                
Correct output: -9                  | Program output: 58                 
Correct output: -84                 | Program output: 60                 
Correct output: -45                 | Program output: 1                  
Correct output: -29                 | Program output: 82                 
Correct output: -77                 | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_flush print_integer exec_pop (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max boolean_or integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_dup boolean_and exec_shove (exec_stackdepth boolean_yankdup integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ())
Lexicase best errors: [0 1 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 80
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_flush print_integer exec_pop (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max boolean_or integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_dup boolean_and exec_shove (exec_stackdepth boolean_yankdup integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ())
Zero cases best errors: [0 1 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 80
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 284 128 128 399 1000 284 128 683 1000)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (395 284 128 128 399 0 284 128 683 0)
Population mean number of perfect (error zero) cases: 2.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_664} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (integer_flush print_integer exec_pop (in1 integer_swap exec_s (exec_empty integer_yankdup) (integer_fromboolean integer_empty boolean_rot) (integer_dec integer_mod integer_yankdup exec_dup_times (boolean_dup) integer_pop) boolean_dup) tagged_664 exec_empty exec_do*range () boolean_xor print_integer boolean_dup_times integer_max boolean_or integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Errors: [0 1 1 1 0 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 64
Size: 81
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 7.571
Median total errors in population: 7
Error averages by case: (0.605 0.716 0.872 0.872 0.601 1.0 0.716 0.872 0.317 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 50.85
Average program size in population (points): 65.551
Average percent parens in population: 0.226
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.967
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1363213
--- Timings ---
Current time: 1559314490325 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.7 seconds, 52.6%
Fitness Testing:      3.1 seconds, 35.1%
Report:               1.0 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: 56                 
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 31                 
Correct output: 71                  | Program output: 76                 
Correct output: 23                  | Program output: 44                 
Correct output: 22                  | Program output: 57                 
Correct output: 35                  | Program output: 78                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 81                 
Correct output: 5                   | Program output: 46                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 34                 
Correct output: 13                  | Program output: 19                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: 85                 
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: 83                 
Correct output: -51                 | Program output: 62                 
Correct output: -73                 | Program output: -29                
Correct output: -83                 | Program output: 11                 
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: 73                 
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: 69                 
Correct output: -90                 | Program output: 73                 
Correct output: -37                 | Program output: 75                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: 10                 
Correct output: -75                 | Program output: 63                 
Correct output: -72                 | Program output: -47                
Correct output: -53                 | Program output: -49                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: 43                 
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: 86                 
Correct output: -100                | Program output: -63                
Correct output: -46                 | Program output: -20                
Correct output: -83                 | Program output: 66                 
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: 54                 
Correct output: -89                 | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -24                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: 17                 
Correct output: -9                  | Program output: 90                 
Correct output: -84                 | Program output: 94                 
Correct output: -45                 | Program output: 87                 
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_xor exec_if (boolean_invert_second_then_and integer_pop in4 integer_add print_integer) (boolean_eq) in2 integer_eq exec_do*count () boolean_swap boolean_flush integer_mult exec_if (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_xor) (integer_dec) boolean_or exec_y () boolean_pop exec_yankdup integer_add boolean_xor in1) (exec_flush exec_k (print_newline) (boolean_invert_first_then_and) exec_when () boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_xor exec_if (boolean_invert_second_then_and integer_pop in4 integer_add print_integer) (boolean_eq) in2 integer_eq exec_do*count () boolean_swap boolean_flush integer_mult exec_if (boolean_invert_second_then_and exec_k_when_autoconstructing (integer_rot boolean_xor) (integer_dec) boolean_or exec_y () boolean_pop exec_yankdup integer_add boolean_xor in1) (exec_flush exec_k (print_newline) (boolean_invert_first_then_and) exec_when () boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean integer_empty exec_k () (boolean_swap print_integer) integer_lte boolean_empty) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 347 340 621 340 347 232 347 232 232)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (340 347 340 621 340 347 232 347 232 232)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction tagged_378} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction -84} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or})
Best program: (boolean_or integer_swap boolean_yank integer_sub integer_dup_items integer_dup exec_do*range (exec_empty in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) exec_dup (exec_swap (exec_do*while (integer_yankdup integer_swap) boolean_swap integer_lt boolean_flush) (exec_shove (exec_empty in3 boolean_frominteger integer_empty integer_eq integer_lt exec_noop boolean_or boolean_swap exec_shove (integer_div boolean_dup integer_empty exec_swap () (exec_do*count (exec_s (integer_shove) (boolean_flush integer_flush exec_do*times () boolean_yank integer_add boolean_yank in2 tagged_378 exec_noop) (integer_dec -84 integer_shove boolean_swap exec_dup_items boolean_flush print_integer exec_dup (integer_yankdup exec_do*while () exec_dup (exec_yankdup) integer_eq exec_k_when_autoconstructing (integer_swap boolean_shove in2 integer_eq exec_swap () (in2 in1 boolean_not exec_do*while ()) exec_while (boolean_xor) exec_k (integer_shove exec_eq boolean_not in3 integer_mult boolean_and boolean_empty) (exec_swap (integer_flush boolean_or) ())) ()))))))))))))
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 98
Size: 135
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 6.622
Median total errors in population: 7
Error averages by case: (0.66 0.653 0.66 0.379 0.66 0.653 0.768 0.653 0.768 0.768)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.233
Average program size in population (points): 66.367
Average percent parens in population: 0.225
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.42425
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1905288
--- Timings ---
Current time: 1559314493767 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.9 seconds, 57.3%
Fitness Testing:      3.7 seconds, 30.4%
Report:               1.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 402
Test mean error for best: 0.40200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 44                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 64                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: 73                 
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: 54                 
Correct output: -89                 | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 60                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items boolean_and in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())))
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 93
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items boolean_and in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())))
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 93
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 1000 1000 638 642 1000 642 879 880 237)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (237 0 0 638 642 0 642 879 880 237)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items boolean_and in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())))
Errors: [0 1 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 69
Size: 93
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 5.845
Median total errors in population: 5
Error averages by case: (0.763 1.0 1.0 0.362 0.358 1.0 0.358 0.121 0.12 0.763)
Error minima by case: (0 1 1 0 0 1 0 0 0 0)
Average genome size in population (length): 49.725
Average program size in population (points): 65.529
Average percent parens in population: 0.234
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.893
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2549401
--- Timings ---
Current time: 1559314497237 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.1 seconds, 58.7%
Fitness Testing:      4.4 seconds, 28.0%
Report:               2.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 402
Test mean error for best: 0.40200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 44                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 64                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 57                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -77                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -18                
Correct output: -75                 | Program output: -15                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: 26                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: 51                 
Correct output: -73                 | Program output: -66                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: 73                 
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: 72                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: 54                 
Correct output: -89                 | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: 60                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items boolean_and in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup boolean_dup_times boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean boolean_empty) ()))))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items boolean_and in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup boolean_dup_times boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean boolean_empty) ()))))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 811 826 811 828 840 840 840 1000)
Population mean number of elite cases: 8.80
Count of perfect (error zero) individuals by case: (0 0 811 826 811 828 840 840 840 0)
Population mean number of perfect (error zero) cases: 5.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (boolean_or exec_k_when_autoconstructing () (boolean_xor boolean_dup_items boolean_and in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank exec_while () boolean_rot integer_min boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())))
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 65
Size: 89
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 4.204
Median total errors in population: 3
Error averages by case: (1.0 1.0 0.189 0.174 0.189 0.172 0.16 0.16 0.16 1.0)
Error minima by case: (1 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 68.674
Average program size in population (points): 92.546
Average percent parens in population: 0.258
Minimum age in population: 7.125
Maximum age in population: 8.125
Average age in population: 7.637
Median age in population: 8.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 354
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 355
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3602353
--- Timings ---
Current time: 1559314501018 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.2 seconds, 57.9%
Fitness Testing:      5.5 seconds, 28.3%
Report:               2.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 102
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 102
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 1 2 1 1 1 827 848 1)
Population mean number of elite cases: 1.69
Count of perfect (error zero) individuals by case: (2 2 1 2 1 1 1 827 848 1)
Population mean number of perfect (error zero) cases: 1.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())
Errors: [1 1 0 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 77
Size: 102
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 8.314
Median total errors in population: 8
Error averages by case: (0.998 0.998 0.999 0.998 0.999 0.999 0.999 0.173 0.152 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.774
Average program size in population (points): 92.779
Average percent parens in population: 0.259
Minimum age in population: 8.125
Maximum age in population: 10.125
Average age in population: 9.0875
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4657770
--- Timings ---
Current time: 1559314504486 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.9 seconds, 56.7%
Fitness Testing:      6.6 seconds, 28.8%
Report:               3.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (exec_do*range (integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) exec_y (exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 104
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (exec_do*range (integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) exec_y (exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 104
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (593 241 593 594 591 245 245 593 718 593)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (593 241 593 594 591 245 245 593 718 593)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times})
Best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte exec_dup_times ())) ())
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 77
Size: 103
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 4.994
Median total errors in population: 3
Error averages by case: (0.407 0.759 0.407 0.406 0.409 0.755 0.755 0.407 0.282 0.407)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.019
Average program size in population (points): 98.369
Average percent parens in population: 0.248
Minimum age in population: 9.625
Maximum age in population: 11.625
Average age in population: 10.975
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5680415
--- Timings ---
Current time: 1559314507914 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.6 seconds, 55.7%
Fitness Testing:      7.7 seconds, 29.3%
Report:               3.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Lexicase best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_add) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_dec) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 102
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Zero cases best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_add) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_dec) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 102
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (817 302 304 303 516 518 832 516 832 824)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (817 302 304 303 516 518 832 516 832 824)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div) print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer exec_do*count () boolean_or integer_mod print_integer exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove (exec_stackdepth print_boolean integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ())
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 77
Size: 102
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 4.236
Median total errors in population: 3
Error averages by case: (0.183 0.698 0.696 0.697 0.484 0.482 0.168 0.484 0.168 0.176)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.159
Average program size in population (points): 97.586
Average percent parens in population: 0.250
Minimum age in population: 11.125
Maximum age in population: 13.625
Average age in population: 12.384
Median age in population: 12.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6738877
--- Timings ---
Current time: 1559314511901 milliseconds
Total Time:          30.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.8 seconds, 55.7%
Fitness Testing:      8.8 seconds, 29.0%
Report:               4.5 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_or integer_stackdepth exec_do*times () boolean_xor boolean_dup_items in3 in1 integer_min in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_xor in2 boolean_empty integer_empty integer_min integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 92
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_or integer_stackdepth exec_do*times () boolean_xor boolean_dup_items in3 in1 integer_min in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_xor in2 boolean_empty integer_empty integer_min integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () integer_empty integer_min print_integer) exec_do*count () boolean_or integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot boolean_eq boolean_and exec_shove ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 92
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (845 432 433 821 846 432 432 823 834 433)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (845 432 433 821 846 432 432 823 834 433)
Population mean number of perfect (error zero) cases: 6.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 2, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty})
Best program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 75
Size: 101
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 3.669
Median total errors in population: 5
Error averages by case: (0.155 0.568 0.567 0.179 0.154 0.568 0.568 0.177 0.166 0.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.295
Average program size in population (points): 96.7
Average percent parens in population: 0.252
Minimum age in population: 12.125
Maximum age in population: 15.375
Average age in population: 13.855375
Median age in population: 13.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7787099
--- Timings ---
Current time: 1559314515647 milliseconds
Total Time:          33.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 55.4%
Fitness Testing:      9.9 seconds, 29.1%
Report:               5.2 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 101


Auto-simplifying with starting size: 101
step: 0
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 500
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 1000
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 1500
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 2000
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 2500
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 3000
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 3500
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 4000
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 4500
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

step: 5000
program: (boolean_or integer_stackdepth exec_k_when_autoconstructing () (boolean_xor boolean_dup_items in3 in1 integer_min) in4 exec_rot (exec_y (print_integer)) (exec_while () boolean_flush) (boolean_not integer_min boolean_flush exec_noop) exec_if (boolean_frominteger boolean_empty integer_min boolean_flush exec_noop) (exec_if (boolean_frominteger boolean_empty integer_swap) (exec_do*while (boolean_rot integer_lte exec_do*count (integer_fromboolean) integer_div print_integer integer_dup integer_div boolean_yankdup exec_dup_times (boolean_shove in2 boolean_empty integer_empty integer_min print_integer) exec_do*count () integer_rot integer_mod print_integer) exec_do*count () boolean_or integer_div boolean_frominteger exec_yank integer_inc integer_gt integer_rot exec_while () boolean_rot exec_empty boolean_and exec_shove (exec_stackdepth exec_dup_times (integer_stackdepth) boolean_dup_times exec_s (boolean_rot) (integer_fromboolean exec_y_when_autoconstructing (exec_k () (boolean_swap print_integer) integer_lte boolean_empty)) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 101

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 211
Test mean error for best: 0.21100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: 55                  | Program output: 55                 
Correct output: -25                 | Program output: -25                
Correct output: 27                  | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -51                 | Program output: -51                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: 91                  | Program output: 91                 
Correct output: 55                  | Program output: 55                 
Correct output: -58                 | Program output: -58                
Correct output: -62                 | Program output: -62                
Correct output: -51                 | Program output: -51                
Correct output: -35                 | Program output: -35                
Correct output: 28                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 71                  | Program output: 71                 
Correct output: 23                  | Program output: 42                 
Correct output: 22                  | Program output: 39                 
Correct output: 35                  | Program output: 45                 
Correct output: 13                  | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 29                  | Program output: 29                 
Correct output: 5                   | Program output: 34                 
Correct output: 11                  | Program output: 30                 
Correct output: 33                  | Program output: 33                 
Correct output: 13                  | Program output: 13                 
Correct output: 54                  | Program output: 71                 
Correct output: 39                  | Program output: 43                 
Correct output: 56                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 6                  
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -51                 | Program output: -51                
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -80                 | Program output: -80                
Correct output: -51                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -51                 | Program output: -51                
Correct output: -36                 | Program output: -16                
Correct output: -58                 | Program output: -56                
Correct output: -53                 | Program output: -53                
Correct output: -90                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -93                 | Program output: -93                
Correct output: -75                 | Program output: -75                
Correct output: -72                 | Program output: -72                
Correct output: -53                 | Program output: -53                
Correct output: -62                 | Program output: -43                
Correct output: 26                  | Program output: 26                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -42                
Correct output: -13                 | Program output: -13                
Correct output: -100                | Program output: -100               
Correct output: -46                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -85                
Correct output: -94                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -77                 | Program output: -77                
Correct output: -9                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -70                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: -76                 | Program output: -76                
Correct output: -24                 | Program output: -24                
Correct output: -62                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -43                 | Program output: 29                 
Correct output: -34                 | Program output: -34                
Correct output: -16                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: -46                 | Program output: -46                
Correct output: -9                  | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
Correct output: -29                 | Program output: -29                
Correct output: -77                 | Program output: -77                
;;******************************
