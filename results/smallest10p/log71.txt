Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-61 -61 -98 -61] -98] [[-98 -63 -98 -98] -98] [[-80 -79 -79 -79] -80] [[28 1 28 28] 1] [[-70 -70 40 -70] -70] [[52 52 11 52] 11] [[37 37 37 49] 37] [[-77 -42 -42 -42] -77] [[78 78 78 -68] -68] [[22 22 52 22] 22] [(23 23 23 23) 23] [(-74 -74 -74 -74) -74] [(13 13 13 13) 13] [(2 2 2 2) 2] [(8 8 8 8) 8] [(24 22 35 13) 13] [(95 71 75 10) 10] [(45 81 70 24) 24] [(68 26 40 38) 26] [(92 58 45 43) 43] [(37 67 92 50) 37] [(2 90 85 18) 2] [(90 74 20 55) 20] [(90 50 83 67) 50] [(22 18 61 21) 18] [(49 36 5 0) 0] [(54 63 51 34) 34] [(96 49 57 44) 44] [(65 67 95 73) 65] [(54 62 9 69) 9] [(53 99 27 13) 13] [(82 37 63 66) 37] [(25 8 79 19) 8] [(14 38 24 89) 14] [(30 82 53 27) 27] [(3 -89 9 48) -89] [(78 -98 93 32) -98] [(-68 -91 -24 -26) -91] [(-89 -50 46 -82) -89] [(-2 53 -91 -16) -91] [(82 86 32 -7) -7] [(23 65 -22 51) -22] [(-76 -81 -96 0) -96] [(-12 -61 -68 -79) -79] [(72 48 -95 -53) -95] [(96 -87 49 -16) -87] [(47 -62 75 -32) -62] [(-53 57 -48 -43) -53] [(50 -3 -72 28) -72] [(66 92 24 82) 24] [(-56 -50 -19 -93) -93] [(74 12 14 13) 12] [(70 -96 -28 -68) -96] [(62 -98 -93 -28) -98] [(47 -12 -57 21) -57] [(-15 -52 -29 -64) -64] [(48 -67 -2 -52) -67] [(74 -7 -94 93) -94] [(38 -57 -53 -48) -57] [(76 26 43 32) 26] [(72 59 -23 40) -23] [(52 96 23 -21) -21] [(11 52 -24 32) -24] [(-77 -12 -78 11) -78] [(30 -87 -59 -1) -87] [(89 -74 66 82) -74] [(40 84 26 19) 19] [(33 -42 -92 37) -92] [(46 40 -46 -55) -55] [(24 -13 -7 -24) -24] [(12 89 22 -81) -81] [(-89 52 10 -94) -94] [(37 -85 -43 10) -85] [(46 -76 48 -77) -77] [(86 -10 27 -30) -30] [(-95 54 9 -42) -95] [(95 -40 -85 -2) -85] [(-5 15 -74 -82) -82] [(-93 -62 -57 49) -93] [(-41 -62 27 17) -62] [(-92 15 -6 0) -92] [(-37 20 -66 1) -66] [(-17 -87 -75 -71) -87] [(54 21 -6 54) -6] [(-42 71 -95 -74) -95] [(-69 93 -18 -44) -69] [(39 -33 -88 -84) -88] [(55 57 -15 84) -15] [(-80 64 44 -54) -80] [(-95 51 92 93) -95] [(62 33 -97 39) -97] [(-30 -82 64 68) -82] [(-52 -45 11 -62) -62] [(-80 41 -92 -48) -92] [(85 -44 80 37) -44])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-61 -61 -98 -61] -98]
Train Case:   6 | Input/Output: [[-98 -63 -98 -98] -98]
Train Case:   7 | Input/Output: [[-80 -79 -79 -79] -80]
Train Case:   8 | Input/Output: [[28 1 28 28] 1]
Train Case:   9 | Input/Output: [[-70 -70 40 -70] -70]
Train Case:  10 | Input/Output: [[52 52 11 52] 11]
Train Case:  11 | Input/Output: [[37 37 37 49] 37]
Train Case:  12 | Input/Output: [[-77 -42 -42 -42] -77]
Train Case:  13 | Input/Output: [[78 78 78 -68] -68]
Train Case:  14 | Input/Output: [[22 22 52 22] 22]
Train Case:  15 | Input/Output: [(23 23 23 23) 23]
Train Case:  16 | Input/Output: [(-74 -74 -74 -74) -74]
Train Case:  17 | Input/Output: [(13 13 13 13) 13]
Train Case:  18 | Input/Output: [(2 2 2 2) 2]
Train Case:  19 | Input/Output: [(8 8 8 8) 8]
Train Case:  20 | Input/Output: [(24 22 35 13) 13]
Train Case:  21 | Input/Output: [(95 71 75 10) 10]
Train Case:  22 | Input/Output: [(45 81 70 24) 24]
Train Case:  23 | Input/Output: [(68 26 40 38) 26]
Train Case:  24 | Input/Output: [(92 58 45 43) 43]
Train Case:  25 | Input/Output: [(37 67 92 50) 37]
Train Case:  26 | Input/Output: [(2 90 85 18) 2]
Train Case:  27 | Input/Output: [(90 74 20 55) 20]
Train Case:  28 | Input/Output: [(90 50 83 67) 50]
Train Case:  29 | Input/Output: [(22 18 61 21) 18]
Train Case:  30 | Input/Output: [(49 36 5 0) 0]
Train Case:  31 | Input/Output: [(54 63 51 34) 34]
Train Case:  32 | Input/Output: [(96 49 57 44) 44]
Train Case:  33 | Input/Output: [(65 67 95 73) 65]
Train Case:  34 | Input/Output: [(54 62 9 69) 9]
Train Case:  35 | Input/Output: [(53 99 27 13) 13]
Train Case:  36 | Input/Output: [(82 37 63 66) 37]
Train Case:  37 | Input/Output: [(25 8 79 19) 8]
Train Case:  38 | Input/Output: [(14 38 24 89) 14]
Train Case:  39 | Input/Output: [(30 82 53 27) 27]
Train Case:  40 | Input/Output: [(3 -89 9 48) -89]
Train Case:  41 | Input/Output: [(78 -98 93 32) -98]
Train Case:  42 | Input/Output: [(-68 -91 -24 -26) -91]
Train Case:  43 | Input/Output: [(-89 -50 46 -82) -89]
Train Case:  44 | Input/Output: [(-2 53 -91 -16) -91]
Train Case:  45 | Input/Output: [(82 86 32 -7) -7]
Train Case:  46 | Input/Output: [(23 65 -22 51) -22]
Train Case:  47 | Input/Output: [(-76 -81 -96 0) -96]
Train Case:  48 | Input/Output: [(-12 -61 -68 -79) -79]
Train Case:  49 | Input/Output: [(72 48 -95 -53) -95]
Train Case:  50 | Input/Output: [(96 -87 49 -16) -87]
Train Case:  51 | Input/Output: [(47 -62 75 -32) -62]
Train Case:  52 | Input/Output: [(-53 57 -48 -43) -53]
Train Case:  53 | Input/Output: [(50 -3 -72 28) -72]
Train Case:  54 | Input/Output: [(66 92 24 82) 24]
Train Case:  55 | Input/Output: [(-56 -50 -19 -93) -93]
Train Case:  56 | Input/Output: [(74 12 14 13) 12]
Train Case:  57 | Input/Output: [(70 -96 -28 -68) -96]
Train Case:  58 | Input/Output: [(62 -98 -93 -28) -98]
Train Case:  59 | Input/Output: [(47 -12 -57 21) -57]
Train Case:  60 | Input/Output: [(-15 -52 -29 -64) -64]
Train Case:  61 | Input/Output: [(48 -67 -2 -52) -67]
Train Case:  62 | Input/Output: [(74 -7 -94 93) -94]
Train Case:  63 | Input/Output: [(38 -57 -53 -48) -57]
Train Case:  64 | Input/Output: [(76 26 43 32) 26]
Train Case:  65 | Input/Output: [(72 59 -23 40) -23]
Train Case:  66 | Input/Output: [(52 96 23 -21) -21]
Train Case:  67 | Input/Output: [(11 52 -24 32) -24]
Train Case:  68 | Input/Output: [(-77 -12 -78 11) -78]
Train Case:  69 | Input/Output: [(30 -87 -59 -1) -87]
Train Case:  70 | Input/Output: [(89 -74 66 82) -74]
Train Case:  71 | Input/Output: [(40 84 26 19) 19]
Train Case:  72 | Input/Output: [(33 -42 -92 37) -92]
Train Case:  73 | Input/Output: [(46 40 -46 -55) -55]
Train Case:  74 | Input/Output: [(24 -13 -7 -24) -24]
Train Case:  75 | Input/Output: [(12 89 22 -81) -81]
Train Case:  76 | Input/Output: [(-89 52 10 -94) -94]
Train Case:  77 | Input/Output: [(37 -85 -43 10) -85]
Train Case:  78 | Input/Output: [(46 -76 48 -77) -77]
Train Case:  79 | Input/Output: [(86 -10 27 -30) -30]
Train Case:  80 | Input/Output: [(-95 54 9 -42) -95]
Train Case:  81 | Input/Output: [(95 -40 -85 -2) -85]
Train Case:  82 | Input/Output: [(-5 15 -74 -82) -82]
Train Case:  83 | Input/Output: [(-93 -62 -57 49) -93]
Train Case:  84 | Input/Output: [(-41 -62 27 17) -62]
Train Case:  85 | Input/Output: [(-92 15 -6 0) -92]
Train Case:  86 | Input/Output: [(-37 20 -66 1) -66]
Train Case:  87 | Input/Output: [(-17 -87 -75 -71) -87]
Train Case:  88 | Input/Output: [(54 21 -6 54) -6]
Train Case:  89 | Input/Output: [(-42 71 -95 -74) -95]
Train Case:  90 | Input/Output: [(-69 93 -18 -44) -69]
Train Case:  91 | Input/Output: [(39 -33 -88 -84) -88]
Train Case:  92 | Input/Output: [(55 57 -15 84) -15]
Train Case:  93 | Input/Output: [(-80 64 44 -54) -80]
Train Case:  94 | Input/Output: [(-95 51 92 93) -95]
Train Case:  95 | Input/Output: [(62 33 -97 39) -97]
Train Case:  96 | Input/Output: [(-30 -82 64 68) -82]
Train Case:  97 | Input/Output: [(-52 -45 11 -62) -62]
Train Case:  98 | Input/Output: [(-80 41 -92 -48) -92]
Train Case:  99 | Input/Output: [(85 -44 80 37) -44]
Test Case:   0 | Input/Output: [[-33 -33 -33 -86] -86]
Test Case:   1 | Input/Output: [[-60 -60 82 -60] -60]
Test Case:   2 | Input/Output: [[48 -62 48 48] -62]
Test Case:   3 | Input/Output: [[6 6 30 6] 6]
Test Case:   4 | Input/Output: [[-33 -33 -33 44] -33]
Test Case:   5 | Input/Output: [[62 4 4 4] 4]
Test Case:   6 | Input/Output: [[19 -56 -56 -56] -56]
Test Case:   7 | Input/Output: [[-93 -19 -93 -93] -93]
Test Case:   8 | Input/Output: [[95 95 -5 95] -5]
Test Case:   9 | Input/Output: [[39 -25 39 39] -25]
Test Case:  10 | Input/Output: [[58 3 3 3] 3]
Test Case:  11 | Input/Output: [[-67 -67 -67 96] -67]
Test Case:  12 | Input/Output: [[-45 -45 33 -45] -45]
Test Case:  13 | Input/Output: [[51 9 9 9] 9]
Test Case:  14 | Input/Output: [[66 17 66 66] 17]
Test Case:  15 | Input/Output: [[89 -95 -95 -95] -95]
Test Case:  16 | Input/Output: [[11 88 88 88] 11]
Test Case:  17 | Input/Output: [[64 30 64 64] 30]
Test Case:  18 | Input/Output: [[-37 -37 -43 -37] -43]
Test Case:  19 | Input/Output: [[53 53 53 99] 53]
Test Case:  20 | Input/Output: [[35 35 35 -73] -73]
Test Case:  21 | Input/Output: [[-83 14 -83 -83] -83]
Test Case:  22 | Input/Output: [[10 97 10 10] 10]
Test Case:  23 | Input/Output: [[93 93 93 21] 21]
Test Case:  24 | Input/Output: [[-46 -46 -95 -46] -95]
Test Case:  25 | Input/Output: [[-86 -86 65 -86] -86]
Test Case:  26 | Input/Output: [[-25 25 -25 -25] -25]
Test Case:  27 | Input/Output: [[96 -92 96 96] -92]
Test Case:  28 | Input/Output: [[55 -52 55 55] -52]
Test Case:  29 | Input/Output: [[-9 -9 -9 -9] -9]
Test Case:  30 | Input/Output: [[97 97 97 78] 78]
Test Case:  31 | Input/Output: [[-12 -43 -43 -43] -43]
Test Case:  32 | Input/Output: [[-32 -51 -51 -51] -51]
Test Case:  33 | Input/Output: [[-93 29 -93 -93] -93]
Test Case:  34 | Input/Output: [[-75 -75 -75 -65] -75]
Test Case:  35 | Input/Output: [[-71 -31 -31 -31] -71]
Test Case:  36 | Input/Output: [[-25 -23 -23 -23] -25]
Test Case:  37 | Input/Output: [[-8 43 43 43] -8]
Test Case:  38 | Input/Output: [[-84 72 -84 -84] -84]
Test Case:  39 | Input/Output: [[-34 71 71 71] -34]
Test Case:  40 | Input/Output: [[78 78 78 18] 18]
Test Case:  41 | Input/Output: [[43 93 43 43] 43]
Test Case:  42 | Input/Output: [[96 96 -25 96] -25]
Test Case:  43 | Input/Output: [[3 3 -84 3] -84]
Test Case:  44 | Input/Output: [[-36 -67 -36 -36] -67]
Test Case:  45 | Input/Output: [[61 -1 -1 -1] -1]
Test Case:  46 | Input/Output: [[-4 81 81 81] -4]
Test Case:  47 | Input/Output: [[-35 -35 -35 -88] -88]
Test Case:  48 | Input/Output: [[66 4 66 66] 4]
Test Case:  49 | Input/Output: [[83 83 -85 83] -85]
Test Case:  50 | Input/Output: [[37 37 -7 37] -7]
Test Case:  51 | Input/Output: [[52 60 52 52] 52]
Test Case:  52 | Input/Output: [[56 -81 -81 -81] -81]
Test Case:  53 | Input/Output: [[91 91 91 -68] -68]
Test Case:  54 | Input/Output: [[-34 -34 20 -34] -34]
Test Case:  55 | Input/Output: [[98 98 98 -65] -65]
Test Case:  56 | Input/Output: [[75 75 75 -47] -47]
Test Case:  57 | Input/Output: [[12 12 -49 12] -49]
Test Case:  58 | Input/Output: [[-89 -43 -43 -43] -89]
Test Case:  59 | Input/Output: [[7 63 7 7] 7]
Test Case:  60 | Input/Output: [[40 -20 -20 -20] -20]
Test Case:  61 | Input/Output: [[-73 37 37 37] -73]
Test Case:  62 | Input/Output: [[59 83 59 59] 59]
Test Case:  63 | Input/Output: [[14 78 14 14] 14]
Test Case:  64 | Input/Output: [[-47 11 11 11] -47]
Test Case:  65 | Input/Output: [[-75 -75 -75 -54] -75]
Test Case:  66 | Input/Output: [[-52 -52 -70 -52] -70]
Test Case:  67 | Input/Output: [[18 18 -15 18] -15]
Test Case:  68 | Input/Output: [[-21 -56 -21 -21] -56]
Test Case:  69 | Input/Output: [[-81 -81 -53 -81] -81]
Test Case:  70 | Input/Output: [[-84 -84 -84 5] -84]
Test Case:  71 | Input/Output: [[53 -79 -79 -79] -79]
Test Case:  72 | Input/Output: [[-85 -85 -85 -83] -85]
Test Case:  73 | Input/Output: [[85 -99 -99 -99] -99]
Test Case:  74 | Input/Output: [[-8 7 -8 -8] -8]
Test Case:  75 | Input/Output: [[-96 82 82 82] -96]
Test Case:  76 | Input/Output: [[96 96 -1 96] -1]
Test Case:  77 | Input/Output: [[30 -70 30 30] -70]
Test Case:  78 | Input/Output: [[11 27 27 27] 11]
Test Case:  79 | Input/Output: [[35 20 35 35] 20]
Test Case:  80 | Input/Output: [[39 58 39 39] 39]
Test Case:  81 | Input/Output: [[85 85 85 -56] -56]
Test Case:  82 | Input/Output: [[-88 -68 -88 -88] -88]
Test Case:  83 | Input/Output: [[-22 -22 -22 -39] -39]
Test Case:  84 | Input/Output: [[32 83 83 83] 32]
Test Case:  85 | Input/Output: [[-54 -53 -53 -53] -54]
Test Case:  86 | Input/Output: [[-87 43 -87 -87] -87]
Test Case:  87 | Input/Output: [[47 61 47 47] 47]
Test Case:  88 | Input/Output: [[4 56 4 4] 4]
Test Case:  89 | Input/Output: [[-79 -32 -32 -32] -79]
Test Case:  90 | Input/Output: [[51 34 51 51] 34]
Test Case:  91 | Input/Output: [[-91 -91 -91 27] -91]
Test Case:  92 | Input/Output: [[42 42 44 42] 42]
Test Case:  93 | Input/Output: [[59 -98 59 59] -98]
Test Case:  94 | Input/Output: [[-47 -39 -39 -39] -47]
Test Case:  95 | Input/Output: [[70 -43 70 70] -43]
Test Case:  96 | Input/Output: [[-58 -71 -58 -58] -71]
Test Case:  97 | Input/Output: [[38 38 46 38] 38]
Test Case:  98 | Input/Output: [[51 66 51 51] 51]
Test Case:  99 | Input/Output: [[70 70 17 70] 17]
Test Case: 100 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 101 | Input/Output: [(5 5 5 5) 5]
Test Case: 102 | Input/Output: [(72 72 72 72) 72]
Test Case: 103 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 104 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 105 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 106 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 107 | Input/Output: [(16 16 16 16) 16]
Test Case: 108 | Input/Output: [(48 48 48 48) 48]
Test Case: 109 | Input/Output: [(20 20 20 20) 20]
Test Case: 110 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 111 | Input/Output: [(60 60 60 60) 60]
Test Case: 112 | Input/Output: [(53 53 53 53) 53]
Test Case: 113 | Input/Output: [(87 87 87 87) 87]
Test Case: 114 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 115 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 116 | Input/Output: [(10 10 10 10) 10]
Test Case: 117 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 118 | Input/Output: [(94 94 94 94) 94]
Test Case: 119 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 120 | Input/Output: [(84 84 84 84) 84]
Test Case: 121 | Input/Output: [(63 63 63 63) 63]
Test Case: 122 | Input/Output: [(58 58 58 58) 58]
Test Case: 123 | Input/Output: [(39 39 39 39) 39]
Test Case: 124 | Input/Output: [(52 52 52 52) 52]
Test Case: 125 | Input/Output: [(97 97 97 97) 97]
Test Case: 126 | Input/Output: [(84 84 84 84) 84]
Test Case: 127 | Input/Output: [(22 22 22 22) 22]
Test Case: 128 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 129 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 130 | Input/Output: [(2 2 2 2) 2]
Test Case: 131 | Input/Output: [(41 41 41 41) 41]
Test Case: 132 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 133 | Input/Output: [(88 88 88 88) 88]
Test Case: 134 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 135 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 136 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 137 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 138 | Input/Output: [(24 24 24 24) 24]
Test Case: 139 | Input/Output: [(64 64 64 64) 64]
Test Case: 140 | Input/Output: [(6 6 6 6) 6]
Test Case: 141 | Input/Output: [(92 92 92 92) 92]
Test Case: 142 | Input/Output: [(79 79 79 79) 79]
Test Case: 143 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 144 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 145 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 146 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 147 | Input/Output: [(5 5 5 5) 5]
Test Case: 148 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 149 | Input/Output: [(48 48 48 48) 48]
Test Case: 150 | Input/Output: [(63 63 63 63) 63]
Test Case: 151 | Input/Output: [(1 1 1 1) 1]
Test Case: 152 | Input/Output: [(73 73 73 73) 73]
Test Case: 153 | Input/Output: [(84 84 84 84) 84]
Test Case: 154 | Input/Output: [(21 21 21 21) 21]
Test Case: 155 | Input/Output: [(25 25 25 25) 25]
Test Case: 156 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 157 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 158 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 159 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 160 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 161 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 162 | Input/Output: [(29 29 29 29) 29]
Test Case: 163 | Input/Output: [(37 37 37 37) 37]
Test Case: 164 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 165 | Input/Output: [(43 43 43 43) 43]
Test Case: 166 | Input/Output: [(3 3 3 3) 3]
Test Case: 167 | Input/Output: [(76 76 76 76) 76]
Test Case: 168 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 169 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 170 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 171 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 172 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 173 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 174 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 175 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 176 | Input/Output: [(90 90 90 90) 90]
Test Case: 177 | Input/Output: [(95 95 95 95) 95]
Test Case: 178 | Input/Output: [(30 30 30 30) 30]
Test Case: 179 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 180 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 181 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 182 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 183 | Input/Output: [(27 27 27 27) 27]
Test Case: 184 | Input/Output: [(24 24 24 24) 24]
Test Case: 185 | Input/Output: [(1 1 1 1) 1]
Test Case: 186 | Input/Output: [(68 68 68 68) 68]
Test Case: 187 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 188 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 189 | Input/Output: [(17 17 17 17) 17]
Test Case: 190 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 191 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 192 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 193 | Input/Output: [(44 44 44 44) 44]
Test Case: 194 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 195 | Input/Output: [(44 44 44 44) 44]
Test Case: 196 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 197 | Input/Output: [(10 10 10 10) 10]
Test Case: 198 | Input/Output: [(3 3 3 3) 3]
Test Case: 199 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 200 | Input/Output: [(76 91 8 44) 8]
Test Case: 201 | Input/Output: [(62 80 81 30) 30]
Test Case: 202 | Input/Output: [(55 33 57 45) 33]
Test Case: 203 | Input/Output: [(51 18 6 89) 6]
Test Case: 204 | Input/Output: [(26 94 62 11) 11]
Test Case: 205 | Input/Output: [(9 52 81 35) 9]
Test Case: 206 | Input/Output: [(15 61 35 15) 15]
Test Case: 207 | Input/Output: [(11 2 46 70) 2]
Test Case: 208 | Input/Output: [(11 46 88 76) 11]
Test Case: 209 | Input/Output: [(68 27 86 94) 27]
Test Case: 210 | Input/Output: [(47 15 87 52) 15]
Test Case: 211 | Input/Output: [(81 28 26 10) 10]
Test Case: 212 | Input/Output: [(96 27 60 6) 6]
Test Case: 213 | Input/Output: [(11 27 63 50) 11]
Test Case: 214 | Input/Output: [(4 54 86 86) 4]
Test Case: 215 | Input/Output: [(89 45 64 3) 3]
Test Case: 216 | Input/Output: [(5 11 96 75) 5]
Test Case: 217 | Input/Output: [(97 84 35 15) 15]
Test Case: 218 | Input/Output: [(58 18 1 72) 1]
Test Case: 219 | Input/Output: [(30 47 87 61) 30]
Test Case: 220 | Input/Output: [(27 54 93 71) 27]
Test Case: 221 | Input/Output: [(85 94 11 51) 11]
Test Case: 222 | Input/Output: [(87 57 74 15) 15]
Test Case: 223 | Input/Output: [(57 62 96 33) 33]
Test Case: 224 | Input/Output: [(19 25 27 28) 19]
Test Case: 225 | Input/Output: [(3 49 82 43) 3]
Test Case: 226 | Input/Output: [(100 59 36 95) 36]
Test Case: 227 | Input/Output: [(34 25 10 74) 10]
Test Case: 228 | Input/Output: [(97 86 73 70) 70]
Test Case: 229 | Input/Output: [(12 76 69 59) 12]
Test Case: 230 | Input/Output: [(75 37 82 13) 13]
Test Case: 231 | Input/Output: [(0 97 99 19) 0]
Test Case: 232 | Input/Output: [(42 97 24 68) 24]
Test Case: 233 | Input/Output: [(14 79 85 13) 13]
Test Case: 234 | Input/Output: [(43 79 30 44) 30]
Test Case: 235 | Input/Output: [(15 3 93 37) 3]
Test Case: 236 | Input/Output: [(36 35 21 48) 21]
Test Case: 237 | Input/Output: [(60 60 73 34) 34]
Test Case: 238 | Input/Output: [(46 26 29 80) 26]
Test Case: 239 | Input/Output: [(15 4 98 100) 4]
Test Case: 240 | Input/Output: [(47 65 36 50) 36]
Test Case: 241 | Input/Output: [(77 0 44 71) 0]
Test Case: 242 | Input/Output: [(62 37 31 47) 31]
Test Case: 243 | Input/Output: [(89 61 42 36) 36]
Test Case: 244 | Input/Output: [(81 25 52 63) 25]
Test Case: 245 | Input/Output: [(92 17 27 99) 17]
Test Case: 246 | Input/Output: [(12 14 89 65) 12]
Test Case: 247 | Input/Output: [(60 92 15 93) 15]
Test Case: 248 | Input/Output: [(79 86 94 7) 7]
Test Case: 249 | Input/Output: [(95 69 76 64) 64]
Test Case: 250 | Input/Output: [(24 97 8 47) 8]
Test Case: 251 | Input/Output: [(35 45 2 37) 2]
Test Case: 252 | Input/Output: [(29 79 60 10) 10]
Test Case: 253 | Input/Output: [(26 36 66 60) 26]
Test Case: 254 | Input/Output: [(15 84 27 33) 15]
Test Case: 255 | Input/Output: [(60 74 65 13) 13]
Test Case: 256 | Input/Output: [(92 77 56 62) 56]
Test Case: 257 | Input/Output: [(59 70 51 69) 51]
Test Case: 258 | Input/Output: [(16 7 34 12) 7]
Test Case: 259 | Input/Output: [(77 30 59 82) 30]
Test Case: 260 | Input/Output: [(25 87 2 14) 2]
Test Case: 261 | Input/Output: [(92 51 73 28) 28]
Test Case: 262 | Input/Output: [(87 25 35 56) 25]
Test Case: 263 | Input/Output: [(87 51 44 67) 44]
Test Case: 264 | Input/Output: [(36 32 86 5) 5]
Test Case: 265 | Input/Output: [(60 46 98 0) 0]
Test Case: 266 | Input/Output: [(46 98 33 48) 33]
Test Case: 267 | Input/Output: [(38 43 64 53) 38]
Test Case: 268 | Input/Output: [(94 43 55 99) 43]
Test Case: 269 | Input/Output: [(100 42 54 65) 42]
Test Case: 270 | Input/Output: [(40 81 25 67) 25]
Test Case: 271 | Input/Output: [(76 86 34 81) 34]
Test Case: 272 | Input/Output: [(6 5 47 24) 5]
Test Case: 273 | Input/Output: [(12 77 71 42) 12]
Test Case: 274 | Input/Output: [(66 23 47 30) 23]
Test Case: 275 | Input/Output: [(69 8 45 54) 8]
Test Case: 276 | Input/Output: [(22 76 25 97) 22]
Test Case: 277 | Input/Output: [(14 30 46 72) 14]
Test Case: 278 | Input/Output: [(57 79 65 93) 57]
Test Case: 279 | Input/Output: [(62 0 85 71) 0]
Test Case: 280 | Input/Output: [(24 84 19 37) 19]
Test Case: 281 | Input/Output: [(15 22 27 74) 15]
Test Case: 282 | Input/Output: [(54 21 89 8) 8]
Test Case: 283 | Input/Output: [(41 66 92 55) 41]
Test Case: 284 | Input/Output: [(19 65 27 43) 19]
Test Case: 285 | Input/Output: [(26 74 56 1) 1]
Test Case: 286 | Input/Output: [(93 30 18 47) 18]
Test Case: 287 | Input/Output: [(86 96 38 34) 34]
Test Case: 288 | Input/Output: [(85 51 36 75) 36]
Test Case: 289 | Input/Output: [(16 88 76 79) 16]
Test Case: 290 | Input/Output: [(1 61 84 91) 1]
Test Case: 291 | Input/Output: [(73 2 11 89) 2]
Test Case: 292 | Input/Output: [(44 49 78 18) 18]
Test Case: 293 | Input/Output: [(69 87 3 0) 0]
Test Case: 294 | Input/Output: [(61 47 12 34) 12]
Test Case: 295 | Input/Output: [(77 95 9 62) 9]
Test Case: 296 | Input/Output: [(91 56 17 79) 17]
Test Case: 297 | Input/Output: [(78 72 37 93) 37]
Test Case: 298 | Input/Output: [(57 21 32 26) 21]
Test Case: 299 | Input/Output: [(22 1 65 89) 1]
Test Case: 300 | Input/Output: [(31 41 83 7) 7]
Test Case: 301 | Input/Output: [(92 27 6 77) 6]
Test Case: 302 | Input/Output: [(75 9 95 28) 9]
Test Case: 303 | Input/Output: [(7 41 52 5) 5]
Test Case: 304 | Input/Output: [(31 54 95 5) 5]
Test Case: 305 | Input/Output: [(58 1 49 5) 1]
Test Case: 306 | Input/Output: [(3 71 56 55) 3]
Test Case: 307 | Input/Output: [(38 91 7 17) 7]
Test Case: 308 | Input/Output: [(3 2 65 95) 2]
Test Case: 309 | Input/Output: [(67 17 76 33) 17]
Test Case: 310 | Input/Output: [(36 80 5 41) 5]
Test Case: 311 | Input/Output: [(15 36 8 24) 8]
Test Case: 312 | Input/Output: [(56 20 100 1) 1]
Test Case: 313 | Input/Output: [(66 46 80 72) 46]
Test Case: 314 | Input/Output: [(96 30 38 50) 30]
Test Case: 315 | Input/Output: [(85 41 99 20) 20]
Test Case: 316 | Input/Output: [(58 22 94 34) 22]
Test Case: 317 | Input/Output: [(69 74 54 11) 11]
Test Case: 318 | Input/Output: [(37 16 14 37) 14]
Test Case: 319 | Input/Output: [(68 36 90 100) 36]
Test Case: 320 | Input/Output: [(34 43 97 20) 20]
Test Case: 321 | Input/Output: [(19 46 65 99) 19]
Test Case: 322 | Input/Output: [(16 29 27 12) 12]
Test Case: 323 | Input/Output: [(86 15 58 94) 15]
Test Case: 324 | Input/Output: [(48 59 17 15) 15]
Test Case: 325 | Input/Output: [(24 39 89 87) 24]
Test Case: 326 | Input/Output: [(53 15 41 96) 15]
Test Case: 327 | Input/Output: [(98 69 10 56) 10]
Test Case: 328 | Input/Output: [(0 91 68 70) 0]
Test Case: 329 | Input/Output: [(24 61 42 53) 24]
Test Case: 330 | Input/Output: [(64 66 34 86) 34]
Test Case: 331 | Input/Output: [(76 52 52 69) 52]
Test Case: 332 | Input/Output: [(49 69 7 5) 5]
Test Case: 333 | Input/Output: [(18 61 98 95) 18]
Test Case: 334 | Input/Output: [(4 82 56 85) 4]
Test Case: 335 | Input/Output: [(26 7 21 92) 7]
Test Case: 336 | Input/Output: [(11 20 83 39) 11]
Test Case: 337 | Input/Output: [(48 37 27 70) 27]
Test Case: 338 | Input/Output: [(87 2 73 91) 2]
Test Case: 339 | Input/Output: [(38 20 32 10) 10]
Test Case: 340 | Input/Output: [(85 21 99 12) 12]
Test Case: 341 | Input/Output: [(73 100 92 80) 73]
Test Case: 342 | Input/Output: [(46 33 84 90) 33]
Test Case: 343 | Input/Output: [(41 2 82 14) 2]
Test Case: 344 | Input/Output: [(100 61 20 48) 20]
Test Case: 345 | Input/Output: [(26 21 35 53) 21]
Test Case: 346 | Input/Output: [(43 77 24 80) 24]
Test Case: 347 | Input/Output: [(55 41 99 3) 3]
Test Case: 348 | Input/Output: [(22 71 15 16) 15]
Test Case: 349 | Input/Output: [(32 25 77 70) 25]
Test Case: 350 | Input/Output: [(29 31 24 73) 24]
Test Case: 351 | Input/Output: [(17 37 18 96) 17]
Test Case: 352 | Input/Output: [(56 4 63 32) 4]
Test Case: 353 | Input/Output: [(34 50 7 65) 7]
Test Case: 354 | Input/Output: [(47 9 18 32) 9]
Test Case: 355 | Input/Output: [(39 58 83 71) 39]
Test Case: 356 | Input/Output: [(1 6 18 62) 1]
Test Case: 357 | Input/Output: [(87 77 56 47) 47]
Test Case: 358 | Input/Output: [(1 73 72 78) 1]
Test Case: 359 | Input/Output: [(67 33 22 58) 22]
Test Case: 360 | Input/Output: [(84 64 21 52) 21]
Test Case: 361 | Input/Output: [(1 35 0 93) 0]
Test Case: 362 | Input/Output: [(48 47 74 37) 37]
Test Case: 363 | Input/Output: [(81 91 16 92) 16]
Test Case: 364 | Input/Output: [(45 98 2 66) 2]
Test Case: 365 | Input/Output: [(30 48 24 9) 9]
Test Case: 366 | Input/Output: [(82 35 18 93) 18]
Test Case: 367 | Input/Output: [(76 18 3 83) 3]
Test Case: 368 | Input/Output: [(38 3 53 37) 3]
Test Case: 369 | Input/Output: [(37 67 75 12) 12]
Test Case: 370 | Input/Output: [(24 9 76 67) 9]
Test Case: 371 | Input/Output: [(22 24 82 94) 22]
Test Case: 372 | Input/Output: [(79 62 72 47) 47]
Test Case: 373 | Input/Output: [(33 11 21 8) 8]
Test Case: 374 | Input/Output: [(80 52 11 98) 11]
Test Case: 375 | Input/Output: [(28 22 47 93) 22]
Test Case: 376 | Input/Output: [(40 35 94 24) 24]
Test Case: 377 | Input/Output: [(95 55 90 10) 10]
Test Case: 378 | Input/Output: [(75 35 83 59) 35]
Test Case: 379 | Input/Output: [(78 27 49 12) 12]
Test Case: 380 | Input/Output: [(71 92 87 2) 2]
Test Case: 381 | Input/Output: [(74 59 35 24) 24]
Test Case: 382 | Input/Output: [(0 62 61 9) 0]
Test Case: 383 | Input/Output: [(14 9 1 41) 1]
Test Case: 384 | Input/Output: [(57 50 67 56) 50]
Test Case: 385 | Input/Output: [(46 79 100 12) 12]
Test Case: 386 | Input/Output: [(46 6 9 9) 6]
Test Case: 387 | Input/Output: [(2 80 10 27) 2]
Test Case: 388 | Input/Output: [(38 37 65 38) 37]
Test Case: 389 | Input/Output: [(59 73 32 0) 0]
Test Case: 390 | Input/Output: [(70 52 97 27) 27]
Test Case: 391 | Input/Output: [(46 14 98 45) 14]
Test Case: 392 | Input/Output: [(87 4 62 26) 4]
Test Case: 393 | Input/Output: [(53 57 27 67) 27]
Test Case: 394 | Input/Output: [(26 12 93 82) 12]
Test Case: 395 | Input/Output: [(66 71 45 58) 45]
Test Case: 396 | Input/Output: [(52 39 36 3) 3]
Test Case: 397 | Input/Output: [(6 9 81 63) 6]
Test Case: 398 | Input/Output: [(72 3 26 78) 3]
Test Case: 399 | Input/Output: [(7 77 55 5) 5]
Test Case: 400 | Input/Output: [(34 -95 -100 15) -100]
Test Case: 401 | Input/Output: [(-51 5 83 11) -51]
Test Case: 402 | Input/Output: [(7 -63 -85 -36) -85]
Test Case: 403 | Input/Output: [(-18 72 35 53) -18]
Test Case: 404 | Input/Output: [(-9 -67 20 98) -67]
Test Case: 405 | Input/Output: [(-73 30 32 -92) -92]
Test Case: 406 | Input/Output: [(-98 -30 -78 60) -98]
Test Case: 407 | Input/Output: [(-82 -99 6 47) -99]
Test Case: 408 | Input/Output: [(-42 16 38 -68) -68]
Test Case: 409 | Input/Output: [(-70 -32 91 36) -70]
Test Case: 410 | Input/Output: [(93 -98 -8 -64) -98]
Test Case: 411 | Input/Output: [(51 -80 34 97) -80]
Test Case: 412 | Input/Output: [(-53 70 -7 80) -53]
Test Case: 413 | Input/Output: [(-23 15 98 59) -23]
Test Case: 414 | Input/Output: [(48 -67 28 36) -67]
Test Case: 415 | Input/Output: [(-54 -72 -69 71) -72]
Test Case: 416 | Input/Output: [(-42 43 66 81) -42]
Test Case: 417 | Input/Output: [(-64 39 75 47) -64]
Test Case: 418 | Input/Output: [(97 65 -31 -24) -31]
Test Case: 419 | Input/Output: [(96 11 -59 34) -59]
Test Case: 420 | Input/Output: [(-75 77 -14 -97) -97]
Test Case: 421 | Input/Output: [(3 11 36 -77) -77]
Test Case: 422 | Input/Output: [(99 -83 46 -88) -88]
Test Case: 423 | Input/Output: [(-99 -93 6 -37) -99]
Test Case: 424 | Input/Output: [(77 33 -94 -62) -94]
Test Case: 425 | Input/Output: [(-53 -95 -71 76) -95]
Test Case: 426 | Input/Output: [(-17 77 -99 -81) -99]
Test Case: 427 | Input/Output: [(-38 43 19 -84) -84]
Test Case: 428 | Input/Output: [(11 30 -60 -61) -61]
Test Case: 429 | Input/Output: [(87 63 -33 27) -33]
Test Case: 430 | Input/Output: [(-98 -36 -88 85) -98]
Test Case: 431 | Input/Output: [(28 5 81 90) 5]
Test Case: 432 | Input/Output: [(83 44 -74 -38) -74]
Test Case: 433 | Input/Output: [(36 82 73 75) 36]
Test Case: 434 | Input/Output: [(-71 26 1 -20) -71]
Test Case: 435 | Input/Output: [(-94 27 -89 -26) -94]
Test Case: 436 | Input/Output: [(-70 86 99 -49) -70]
Test Case: 437 | Input/Output: [(-30 40 -58 11) -58]
Test Case: 438 | Input/Output: [(-50 -22 -55 -1) -55]
Test Case: 439 | Input/Output: [(-48 34 76 -69) -69]
Test Case: 440 | Input/Output: [(12 80 -33 -51) -51]
Test Case: 441 | Input/Output: [(18 -83 -93 -88) -93]
Test Case: 442 | Input/Output: [(-82 -35 95 4) -82]
Test Case: 443 | Input/Output: [(78 76 -86 91) -86]
Test Case: 444 | Input/Output: [(53 -44 95 77) -44]
Test Case: 445 | Input/Output: [(-13 50 40 -61) -61]
Test Case: 446 | Input/Output: [(69 -40 0 62) -40]
Test Case: 447 | Input/Output: [(94 -69 -31 -24) -69]
Test Case: 448 | Input/Output: [(-37 -34 -63 32) -63]
Test Case: 449 | Input/Output: [(-32 -65 -79 82) -79]
Test Case: 450 | Input/Output: [(77 60 46 -33) -33]
Test Case: 451 | Input/Output: [(80 26 -65 1) -65]
Test Case: 452 | Input/Output: [(-8 52 -46 34) -46]
Test Case: 453 | Input/Output: [(8 -65 82 81) -65]
Test Case: 454 | Input/Output: [(-81 79 -30 16) -81]
Test Case: 455 | Input/Output: [(56 1 73 27) 1]
Test Case: 456 | Input/Output: [(-68 -89 -84 -24) -89]
Test Case: 457 | Input/Output: [(-45 -46 -22 -18) -46]
Test Case: 458 | Input/Output: [(-43 -32 15 -5) -43]
Test Case: 459 | Input/Output: [(51 -79 -64 66) -79]
Test Case: 460 | Input/Output: [(3 41 68 -18) -18]
Test Case: 461 | Input/Output: [(53 -93 85 98) -93]
Test Case: 462 | Input/Output: [(4 8 2 42) 2]
Test Case: 463 | Input/Output: [(24 -15 -63 24) -63]
Test Case: 464 | Input/Output: [(94 90 -40 50) -40]
Test Case: 465 | Input/Output: [(-58 -26 -88 28) -88]
Test Case: 466 | Input/Output: [(14 -79 -75 13) -79]
Test Case: 467 | Input/Output: [(93 55 29 73) 29]
Test Case: 468 | Input/Output: [(-49 63 46 1) -49]
Test Case: 469 | Input/Output: [(95 -90 59 -43) -90]
Test Case: 470 | Input/Output: [(43 -39 23 -37) -39]
Test Case: 471 | Input/Output: [(67 91 -22 -60) -60]
Test Case: 472 | Input/Output: [(29 -24 -13 -45) -45]
Test Case: 473 | Input/Output: [(47 -75 64 76) -75]
Test Case: 474 | Input/Output: [(2 -9 -62 27) -62]
Test Case: 475 | Input/Output: [(-20 -15 -100 -79) -100]
Test Case: 476 | Input/Output: [(32 -81 -5 -48) -81]
Test Case: 477 | Input/Output: [(72 91 -86 -16) -86]
Test Case: 478 | Input/Output: [(-65 70 69 67) -65]
Test Case: 479 | Input/Output: [(61 -11 2 -39) -39]
Test Case: 480 | Input/Output: [(99 -34 66 -84) -84]
Test Case: 481 | Input/Output: [(-75 -36 81 -36) -75]
Test Case: 482 | Input/Output: [(44 -39 -55 -28) -55]
Test Case: 483 | Input/Output: [(-85 -65 37 75) -85]
Test Case: 484 | Input/Output: [(93 23 -18 -3) -18]
Test Case: 485 | Input/Output: [(-40 -56 -73 -63) -73]
Test Case: 486 | Input/Output: [(82 23 52 80) 23]
Test Case: 487 | Input/Output: [(-81 -89 36 2) -89]
Test Case: 488 | Input/Output: [(67 -2 -44 90) -44]
Test Case: 489 | Input/Output: [(75 44 83 -21) -21]
Test Case: 490 | Input/Output: [(95 -65 100 -11) -65]
Test Case: 491 | Input/Output: [(51 93 37 19) 19]
Test Case: 492 | Input/Output: [(93 46 -14 44) -14]
Test Case: 493 | Input/Output: [(-11 -9 30 -48) -48]
Test Case: 494 | Input/Output: [(40 -91 -80 -70) -91]
Test Case: 495 | Input/Output: [(-76 59 -77 -11) -77]
Test Case: 496 | Input/Output: [(-66 -64 -35 -15) -66]
Test Case: 497 | Input/Output: [(-16 -83 98 38) -83]
Test Case: 498 | Input/Output: [(71 76 -56 64) -56]
Test Case: 499 | Input/Output: [(-46 -6 56 53) -46]
Test Case: 500 | Input/Output: [(-53 -57 -86 -18) -86]
Test Case: 501 | Input/Output: [(-88 64 -95 -14) -95]
Test Case: 502 | Input/Output: [(59 85 -16 -76) -76]
Test Case: 503 | Input/Output: [(-6 8 88 46) -6]
Test Case: 504 | Input/Output: [(-92 -38 56 -41) -92]
Test Case: 505 | Input/Output: [(42 -70 96 28) -70]
Test Case: 506 | Input/Output: [(-28 -22 -78 40) -78]
Test Case: 507 | Input/Output: [(84 -38 4 -49) -49]
Test Case: 508 | Input/Output: [(62 91 -41 -3) -41]
Test Case: 509 | Input/Output: [(-34 56 40 27) -34]
Test Case: 510 | Input/Output: [(18 -87 -43 -11) -87]
Test Case: 511 | Input/Output: [(-72 -89 43 14) -89]
Test Case: 512 | Input/Output: [(84 -81 91 49) -81]
Test Case: 513 | Input/Output: [(-9 -11 62 87) -11]
Test Case: 514 | Input/Output: [(97 62 36 -48) -48]
Test Case: 515 | Input/Output: [(63 30 77 1) 1]
Test Case: 516 | Input/Output: [(-93 0 -39 -19) -93]
Test Case: 517 | Input/Output: [(-71 86 -5 6) -71]
Test Case: 518 | Input/Output: [(39 91 -19 88) -19]
Test Case: 519 | Input/Output: [(9 -88 -32 14) -88]
Test Case: 520 | Input/Output: [(-37 -75 -70 98) -75]
Test Case: 521 | Input/Output: [(-67 74 -7 -96) -96]
Test Case: 522 | Input/Output: [(86 27 63 2) 2]
Test Case: 523 | Input/Output: [(46 -96 -10 64) -96]
Test Case: 524 | Input/Output: [(18 77 -52 27) -52]
Test Case: 525 | Input/Output: [(22 -37 48 -58) -58]
Test Case: 526 | Input/Output: [(23 97 -56 -52) -56]
Test Case: 527 | Input/Output: [(23 -23 -20 -62) -62]
Test Case: 528 | Input/Output: [(37 56 75 34) 34]
Test Case: 529 | Input/Output: [(57 97 -67 3) -67]
Test Case: 530 | Input/Output: [(63 82 -58 -8) -58]
Test Case: 531 | Input/Output: [(38 4 100 -96) -96]
Test Case: 532 | Input/Output: [(49 20 -35 66) -35]
Test Case: 533 | Input/Output: [(52 87 87 31) 31]
Test Case: 534 | Input/Output: [(58 58 -13 24) -13]
Test Case: 535 | Input/Output: [(-83 -52 40 94) -83]
Test Case: 536 | Input/Output: [(-3 12 -34 22) -34]
Test Case: 537 | Input/Output: [(81 14 23 20) 14]
Test Case: 538 | Input/Output: [(-15 -22 -76 -23) -76]
Test Case: 539 | Input/Output: [(35 14 15 -85) -85]
Test Case: 540 | Input/Output: [(26 -16 -31 48) -31]
Test Case: 541 | Input/Output: [(-58 -52 -48 63) -58]
Test Case: 542 | Input/Output: [(4 53 49 -74) -74]
Test Case: 543 | Input/Output: [(34 -14 62 -30) -30]
Test Case: 544 | Input/Output: [(-83 -99 95 48) -99]
Test Case: 545 | Input/Output: [(-91 87 -28 16) -91]
Test Case: 546 | Input/Output: [(-18 6 34 44) -18]
Test Case: 547 | Input/Output: [(78 -72 -40 -72) -72]
Test Case: 548 | Input/Output: [(9 18 -6 73) -6]
Test Case: 549 | Input/Output: [(-59 53 -99 51) -99]
Test Case: 550 | Input/Output: [(-99 -64 -59 -13) -99]
Test Case: 551 | Input/Output: [(-30 62 87 18) -30]
Test Case: 552 | Input/Output: [(65 9 -74 74) -74]
Test Case: 553 | Input/Output: [(-3 -84 -35 -73) -84]
Test Case: 554 | Input/Output: [(69 65 -23 67) -23]
Test Case: 555 | Input/Output: [(46 -30 -27 81) -30]
Test Case: 556 | Input/Output: [(94 12 -10 -6) -10]
Test Case: 557 | Input/Output: [(55 -67 -17 80) -67]
Test Case: 558 | Input/Output: [(-88 -29 9 -22) -88]
Test Case: 559 | Input/Output: [(13 39 -30 22) -30]
Test Case: 560 | Input/Output: [(-87 85 -94 -1) -94]
Test Case: 561 | Input/Output: [(-56 -64 -77 -61) -77]
Test Case: 562 | Input/Output: [(-32 63 12 -2) -32]
Test Case: 563 | Input/Output: [(-69 -70 -77 92) -77]
Test Case: 564 | Input/Output: [(17 -98 -74 -42) -98]
Test Case: 565 | Input/Output: [(-80 -55 93 55) -80]
Test Case: 566 | Input/Output: [(51 -35 -53 -80) -80]
Test Case: 567 | Input/Output: [(-89 91 87 13) -89]
Test Case: 568 | Input/Output: [(70 29 -97 82) -97]
Test Case: 569 | Input/Output: [(-6 -70 -61 0) -70]
Test Case: 570 | Input/Output: [(-2 -60 -61 69) -61]
Test Case: 571 | Input/Output: [(-21 10 -42 -97) -97]
Test Case: 572 | Input/Output: [(26 -26 -30 -40) -40]
Test Case: 573 | Input/Output: [(-65 -12 96 66) -65]
Test Case: 574 | Input/Output: [(56 -83 -26 94) -83]
Test Case: 575 | Input/Output: [(79 -61 -88 20) -88]
Test Case: 576 | Input/Output: [(-27 57 -72 7) -72]
Test Case: 577 | Input/Output: [(-6 -31 13 -64) -64]
Test Case: 578 | Input/Output: [(-90 -90 -95 -49) -95]
Test Case: 579 | Input/Output: [(-76 -34 20 78) -76]
Test Case: 580 | Input/Output: [(-35 81 -65 25) -65]
Test Case: 581 | Input/Output: [(-37 -96 46 83) -96]
Test Case: 582 | Input/Output: [(-21 -37 -97 32) -97]
Test Case: 583 | Input/Output: [(-12 -28 64 -51) -51]
Test Case: 584 | Input/Output: [(19 97 52 -25) -25]
Test Case: 585 | Input/Output: [(54 100 31 29) 29]
Test Case: 586 | Input/Output: [(-1 7 -100 -91) -100]
Test Case: 587 | Input/Output: [(43 -19 100 -42) -42]
Test Case: 588 | Input/Output: [(-23 83 37 4) -23]
Test Case: 589 | Input/Output: [(-49 -73 -32 -76) -76]
Test Case: 590 | Input/Output: [(19 98 -45 92) -45]
Test Case: 591 | Input/Output: [(52 -94 52 -71) -94]
Test Case: 592 | Input/Output: [(20 -74 -25 -63) -74]
Test Case: 593 | Input/Output: [(-49 62 -96 -71) -96]
Test Case: 594 | Input/Output: [(-99 27 73 92) -99]
Test Case: 595 | Input/Output: [(99 -97 46 50) -97]
Test Case: 596 | Input/Output: [(-6 -83 5 36) -83]
Test Case: 597 | Input/Output: [(1 85 -82 -36) -82]
Test Case: 598 | Input/Output: [(-62 -18 24 96) -62]
Test Case: 599 | Input/Output: [(19 -40 23 82) -40]
Test Case: 600 | Input/Output: [(-42 -66 -19 -4) -66]
Test Case: 601 | Input/Output: [(86 -99 64 -56) -99]
Test Case: 602 | Input/Output: [(39 67 13 71) 13]
Test Case: 603 | Input/Output: [(12 -40 32 -84) -84]
Test Case: 604 | Input/Output: [(1 -2 71 73) -2]
Test Case: 605 | Input/Output: [(-23 50 -2 -13) -23]
Test Case: 606 | Input/Output: [(-57 -7 32 -91) -91]
Test Case: 607 | Input/Output: [(85 11 9 -71) -71]
Test Case: 608 | Input/Output: [(51 -10 94 -59) -59]
Test Case: 609 | Input/Output: [(22 -49 25 -93) -93]
Test Case: 610 | Input/Output: [(-12 67 34 -59) -59]
Test Case: 611 | Input/Output: [(36 31 8 -32) -32]
Test Case: 612 | Input/Output: [(76 20 19 0) 0]
Test Case: 613 | Input/Output: [(43 37 11 69) 11]
Test Case: 614 | Input/Output: [(83 4 98 -94) -94]
Test Case: 615 | Input/Output: [(63 23 88 -26) -26]
Test Case: 616 | Input/Output: [(78 12 36 5) 5]
Test Case: 617 | Input/Output: [(-41 19 -42 74) -42]
Test Case: 618 | Input/Output: [(-62 91 -86 8) -86]
Test Case: 619 | Input/Output: [(-60 -77 -87 -32) -87]
Test Case: 620 | Input/Output: [(29 -95 90 -32) -95]
Test Case: 621 | Input/Output: [(-34 -28 -46 -61) -61]
Test Case: 622 | Input/Output: [(-94 -63 46 28) -94]
Test Case: 623 | Input/Output: [(16 65 -74 4) -74]
Test Case: 624 | Input/Output: [(0 76 7 82) 0]
Test Case: 625 | Input/Output: [(60 -25 -85 42) -85]
Test Case: 626 | Input/Output: [(54 -74 -29 38) -74]
Test Case: 627 | Input/Output: [(17 48 -95 41) -95]
Test Case: 628 | Input/Output: [(-44 77 16 36) -44]
Test Case: 629 | Input/Output: [(-54 89 87 18) -54]
Test Case: 630 | Input/Output: [(26 24 26 8) 8]
Test Case: 631 | Input/Output: [(19 -75 81 -67) -75]
Test Case: 632 | Input/Output: [(8 98 -77 -82) -82]
Test Case: 633 | Input/Output: [(-64 61 40 -57) -64]
Test Case: 634 | Input/Output: [(-16 -16 0 -94) -94]
Test Case: 635 | Input/Output: [(-77 -32 1 -86) -86]
Test Case: 636 | Input/Output: [(-56 -32 14 -13) -56]
Test Case: 637 | Input/Output: [(-17 69 -61 82) -61]
Test Case: 638 | Input/Output: [(-35 -36 57 -38) -38]
Test Case: 639 | Input/Output: [(-97 17 49 -63) -97]
Test Case: 640 | Input/Output: [(-27 -97 84 14) -97]
Test Case: 641 | Input/Output: [(-12 -18 45 -88) -88]
Test Case: 642 | Input/Output: [(-14 34 81 53) -14]
Test Case: 643 | Input/Output: [(-64 -84 46 -75) -84]
Test Case: 644 | Input/Output: [(77 -57 -12 22) -57]
Test Case: 645 | Input/Output: [(87 -16 -52 -6) -52]
Test Case: 646 | Input/Output: [(-23 -78 51 55) -78]
Test Case: 647 | Input/Output: [(-70 -15 35 0) -70]
Test Case: 648 | Input/Output: [(88 76 73 -71) -71]
Test Case: 649 | Input/Output: [(-27 41 26 -17) -27]
Test Case: 650 | Input/Output: [(-62 -62 -68 35) -68]
Test Case: 651 | Input/Output: [(-61 -72 41 -70) -72]
Test Case: 652 | Input/Output: [(49 37 86 33) 33]
Test Case: 653 | Input/Output: [(-36 -74 9 -95) -95]
Test Case: 654 | Input/Output: [(-18 -92 35 -96) -96]
Test Case: 655 | Input/Output: [(55 64 54 80) 54]
Test Case: 656 | Input/Output: [(5 -87 35 26) -87]
Test Case: 657 | Input/Output: [(-29 96 42 13) -29]
Test Case: 658 | Input/Output: [(45 89 -10 -49) -49]
Test Case: 659 | Input/Output: [(-65 -16 19 29) -65]
Test Case: 660 | Input/Output: [(71 -44 95 -55) -55]
Test Case: 661 | Input/Output: [(0 -59 45 -1) -59]
Test Case: 662 | Input/Output: [(-85 -73 -67 77) -85]
Test Case: 663 | Input/Output: [(-12 12 -11 -94) -94]
Test Case: 664 | Input/Output: [(95 -48 -46 -25) -48]
Test Case: 665 | Input/Output: [(-33 59 59 -73) -73]
Test Case: 666 | Input/Output: [(18 -81 -61 21) -81]
Test Case: 667 | Input/Output: [(7 99 -51 -28) -51]
Test Case: 668 | Input/Output: [(83 83 87 60) 60]
Test Case: 669 | Input/Output: [(13 -39 49 -87) -87]
Test Case: 670 | Input/Output: [(30 -34 40 15) -34]
Test Case: 671 | Input/Output: [(38 -17 -63 59) -63]
Test Case: 672 | Input/Output: [(2 -32 -8 85) -32]
Test Case: 673 | Input/Output: [(-83 -8 -99 -13) -99]
Test Case: 674 | Input/Output: [(-58 -70 44 -7) -70]
Test Case: 675 | Input/Output: [(99 -7 -24 24) -24]
Test Case: 676 | Input/Output: [(-57 -86 76 70) -86]
Test Case: 677 | Input/Output: [(-18 58 49 36) -18]
Test Case: 678 | Input/Output: [(-38 61 86 -30) -38]
Test Case: 679 | Input/Output: [(-78 -7 -6 64) -78]
Test Case: 680 | Input/Output: [(-50 86 -94 -51) -94]
Test Case: 681 | Input/Output: [(68 -6 -16 -93) -93]
Test Case: 682 | Input/Output: [(-73 -41 -11 -75) -75]
Test Case: 683 | Input/Output: [(41 71 -72 21) -72]
Test Case: 684 | Input/Output: [(-32 85 -25 -40) -40]
Test Case: 685 | Input/Output: [(86 37 -55 -73) -73]
Test Case: 686 | Input/Output: [(-94 -27 -50 40) -94]
Test Case: 687 | Input/Output: [(-96 -95 70 47) -96]
Test Case: 688 | Input/Output: [(35 -100 16 -93) -100]
Test Case: 689 | Input/Output: [(-70 23 73 95) -70]
Test Case: 690 | Input/Output: [(-71 30 39 -93) -93]
Test Case: 691 | Input/Output: [(-57 -32 -21 100) -57]
Test Case: 692 | Input/Output: [(-17 49 25 10) -17]
Test Case: 693 | Input/Output: [(88 2 -75 -16) -75]
Test Case: 694 | Input/Output: [(43 -43 -76 0) -76]
Test Case: 695 | Input/Output: [(-59 -97 18 -23) -97]
Test Case: 696 | Input/Output: [(49 85 -23 -67) -67]
Test Case: 697 | Input/Output: [(-100 -26 -82 -9) -100]
Test Case: 698 | Input/Output: [(73 -25 94 37) -25]
Test Case: 699 | Input/Output: [(-49 -27 100 -85) -85]
Test Case: 700 | Input/Output: [(48 -40 -47 71) -47]
Test Case: 701 | Input/Output: [(-91 -62 -86 84) -91]
Test Case: 702 | Input/Output: [(24 -93 -78 71) -93]
Test Case: 703 | Input/Output: [(67 -67 12 -79) -79]
Test Case: 704 | Input/Output: [(83 -3 -1 87) -3]
Test Case: 705 | Input/Output: [(-53 -52 91 -60) -60]
Test Case: 706 | Input/Output: [(3 -48 -85 53) -85]
Test Case: 707 | Input/Output: [(-75 2 -18 -64) -75]
Test Case: 708 | Input/Output: [(-8 4 6 48) -8]
Test Case: 709 | Input/Output: [(-26 -23 4 -29) -29]
Test Case: 710 | Input/Output: [(-71 -92 68 46) -92]
Test Case: 711 | Input/Output: [(42 82 63 -4) -4]
Test Case: 712 | Input/Output: [(31 82 57 -88) -88]
Test Case: 713 | Input/Output: [(73 84 -68 47) -68]
Test Case: 714 | Input/Output: [(33 -71 -100 -56) -100]
Test Case: 715 | Input/Output: [(60 37 99 16) 16]
Test Case: 716 | Input/Output: [(35 58 -20 -89) -89]
Test Case: 717 | Input/Output: [(21 -2 -69 -69) -69]
Test Case: 718 | Input/Output: [(-71 -44 -44 -26) -71]
Test Case: 719 | Input/Output: [(-24 -95 99 58) -95]
Test Case: 720 | Input/Output: [(60 47 1 -32) -32]
Test Case: 721 | Input/Output: [(-73 -27 13 10) -73]
Test Case: 722 | Input/Output: [(-87 65 24 89) -87]
Test Case: 723 | Input/Output: [(6 -97 -91 -57) -97]
Test Case: 724 | Input/Output: [(-21 78 87 -65) -65]
Test Case: 725 | Input/Output: [(-79 86 7 91) -79]
Test Case: 726 | Input/Output: [(-83 -97 52 -84) -97]
Test Case: 727 | Input/Output: [(-46 -51 -35 77) -51]
Test Case: 728 | Input/Output: [(-68 -8 -83 -76) -83]
Test Case: 729 | Input/Output: [(-90 51 -29 37) -90]
Test Case: 730 | Input/Output: [(9 -81 59 -90) -90]
Test Case: 731 | Input/Output: [(-69 -8 20 -87) -87]
Test Case: 732 | Input/Output: [(28 -12 81 48) -12]
Test Case: 733 | Input/Output: [(10 -13 12 13) -13]
Test Case: 734 | Input/Output: [(8 -22 93 -7) -22]
Test Case: 735 | Input/Output: [(27 -10 48 8) -10]
Test Case: 736 | Input/Output: [(27 64 -18 15) -18]
Test Case: 737 | Input/Output: [(-78 40 -15 -38) -78]
Test Case: 738 | Input/Output: [(66 -99 29 -76) -99]
Test Case: 739 | Input/Output: [(-5 -43 93 93) -43]
Test Case: 740 | Input/Output: [(31 -76 -56 -34) -76]
Test Case: 741 | Input/Output: [(-40 49 -67 96) -67]
Test Case: 742 | Input/Output: [(46 42 -88 33) -88]
Test Case: 743 | Input/Output: [(-59 70 -100 -63) -100]
Test Case: 744 | Input/Output: [(0 -8 5 66) -8]
Test Case: 745 | Input/Output: [(60 -4 59 -50) -50]
Test Case: 746 | Input/Output: [(32 63 -82 -17) -82]
Test Case: 747 | Input/Output: [(36 17 63 47) 17]
Test Case: 748 | Input/Output: [(93 90 51 1) 1]
Test Case: 749 | Input/Output: [(80 -39 64 0) -39]
Test Case: 750 | Input/Output: [(-15 -11 -1 -49) -49]
Test Case: 751 | Input/Output: [(-45 59 68 3) -45]
Test Case: 752 | Input/Output: [(40 -92 44 93) -92]
Test Case: 753 | Input/Output: [(-58 -74 -93 -68) -93]
Test Case: 754 | Input/Output: [(-70 -48 -70 -95) -95]
Test Case: 755 | Input/Output: [(30 1 -88 -27) -88]
Test Case: 756 | Input/Output: [(-72 -16 39 -51) -72]
Test Case: 757 | Input/Output: [(-82 23 74 -52) -82]
Test Case: 758 | Input/Output: [(-93 -75 68 -70) -93]
Test Case: 759 | Input/Output: [(49 -95 -71 93) -95]
Test Case: 760 | Input/Output: [(-59 -58 -29 33) -59]
Test Case: 761 | Input/Output: [(94 41 -71 -89) -89]
Test Case: 762 | Input/Output: [(-76 -42 28 -16) -76]
Test Case: 763 | Input/Output: [(94 28 43 39) 28]
Test Case: 764 | Input/Output: [(36 -47 -62 -97) -97]
Test Case: 765 | Input/Output: [(58 54 98 61) 54]
Test Case: 766 | Input/Output: [(28 17 40 97) 17]
Test Case: 767 | Input/Output: [(84 96 43 -92) -92]
Test Case: 768 | Input/Output: [(33 16 14 99) 14]
Test Case: 769 | Input/Output: [(-82 -42 -100 86) -100]
Test Case: 770 | Input/Output: [(92 16 -20 -17) -20]
Test Case: 771 | Input/Output: [(-53 -18 -80 -86) -86]
Test Case: 772 | Input/Output: [(-74 -21 67 64) -74]
Test Case: 773 | Input/Output: [(23 42 12 -85) -85]
Test Case: 774 | Input/Output: [(-7 -67 -77 55) -77]
Test Case: 775 | Input/Output: [(-44 35 -33 -55) -55]
Test Case: 776 | Input/Output: [(13 -16 98 8) -16]
Test Case: 777 | Input/Output: [(100 22 -54 -51) -54]
Test Case: 778 | Input/Output: [(-83 -79 55 42) -83]
Test Case: 779 | Input/Output: [(-13 -83 37 74) -83]
Test Case: 780 | Input/Output: [(-64 -8 -43 -44) -64]
Test Case: 781 | Input/Output: [(0 57 -38 -58) -58]
Test Case: 782 | Input/Output: [(-19 91 68 41) -19]
Test Case: 783 | Input/Output: [(82 -99 -67 82) -99]
Test Case: 784 | Input/Output: [(-15 -81 94 78) -81]
Test Case: 785 | Input/Output: [(52 -33 -85 31) -85]
Test Case: 786 | Input/Output: [(51 99 -82 -90) -90]
Test Case: 787 | Input/Output: [(31 -88 11 -7) -88]
Test Case: 788 | Input/Output: [(78 52 35 -66) -66]
Test Case: 789 | Input/Output: [(-49 18 -82 -100) -100]
Test Case: 790 | Input/Output: [(64 10 98 19) 10]
Test Case: 791 | Input/Output: [(90 -47 -70 34) -70]
Test Case: 792 | Input/Output: [(-31 88 3 -67) -67]
Test Case: 793 | Input/Output: [(-86 25 63 80) -86]
Test Case: 794 | Input/Output: [(30 70 73 91) 30]
Test Case: 795 | Input/Output: [(-97 38 70 24) -97]
Test Case: 796 | Input/Output: [(-50 59 -82 -17) -82]
Test Case: 797 | Input/Output: [(18 -83 -63 22) -83]
Test Case: 798 | Input/Output: [(95 7 -95 88) -95]
Test Case: 799 | Input/Output: [(-55 76 54 62) -55]
Test Case: 800 | Input/Output: [(-4 85 81 70) -4]
Test Case: 801 | Input/Output: [(12 -20 -10 62) -20]
Test Case: 802 | Input/Output: [(-29 64 51 39) -29]
Test Case: 803 | Input/Output: [(-65 -76 55 -19) -76]
Test Case: 804 | Input/Output: [(-25 97 2 -72) -72]
Test Case: 805 | Input/Output: [(-43 -99 -29 -86) -99]
Test Case: 806 | Input/Output: [(48 -50 44 82) -50]
Test Case: 807 | Input/Output: [(-67 17 -15 92) -67]
Test Case: 808 | Input/Output: [(17 71 74 88) 17]
Test Case: 809 | Input/Output: [(-77 77 -53 29) -77]
Test Case: 810 | Input/Output: [(57 97 -7 20) -7]
Test Case: 811 | Input/Output: [(18 -100 9 -24) -100]
Test Case: 812 | Input/Output: [(95 33 -65 -11) -65]
Test Case: 813 | Input/Output: [(-23 -41 -12 -100) -100]
Test Case: 814 | Input/Output: [(-55 -26 26 8) -55]
Test Case: 815 | Input/Output: [(-86 -5 97 57) -86]
Test Case: 816 | Input/Output: [(25 -17 69 12) -17]
Test Case: 817 | Input/Output: [(-88 -29 -53 72) -88]
Test Case: 818 | Input/Output: [(34 79 59 9) 9]
Test Case: 819 | Input/Output: [(92 -74 75 -42) -74]
Test Case: 820 | Input/Output: [(-65 0 -42 -8) -65]
Test Case: 821 | Input/Output: [(49 79 -32 48) -32]
Test Case: 822 | Input/Output: [(40 48 -11 -77) -77]
Test Case: 823 | Input/Output: [(-86 49 70 58) -86]
Test Case: 824 | Input/Output: [(74 96 -33 -53) -53]
Test Case: 825 | Input/Output: [(-98 -70 -58 -52) -98]
Test Case: 826 | Input/Output: [(17 21 20 81) 17]
Test Case: 827 | Input/Output: [(2 33 32 -89) -89]
Test Case: 828 | Input/Output: [(-47 90 -89 35) -89]
Test Case: 829 | Input/Output: [(89 13 -6 -23) -23]
Test Case: 830 | Input/Output: [(-44 -60 -46 -40) -60]
Test Case: 831 | Input/Output: [(-4 88 90 92) -4]
Test Case: 832 | Input/Output: [(31 72 97 35) 31]
Test Case: 833 | Input/Output: [(-77 40 98 -6) -77]
Test Case: 834 | Input/Output: [(77 -62 -50 -75) -75]
Test Case: 835 | Input/Output: [(40 25 -67 21) -67]
Test Case: 836 | Input/Output: [(56 76 89 -83) -83]
Test Case: 837 | Input/Output: [(2 85 -54 72) -54]
Test Case: 838 | Input/Output: [(95 -5 -95 48) -95]
Test Case: 839 | Input/Output: [(44 28 10 70) 10]
Test Case: 840 | Input/Output: [(-74 85 41 43) -74]
Test Case: 841 | Input/Output: [(69 -6 -59 75) -59]
Test Case: 842 | Input/Output: [(26 -61 -58 -40) -61]
Test Case: 843 | Input/Output: [(84 -57 14 85) -57]
Test Case: 844 | Input/Output: [(49 58 -20 44) -20]
Test Case: 845 | Input/Output: [(-88 74 24 66) -88]
Test Case: 846 | Input/Output: [(-37 -65 -87 -91) -91]
Test Case: 847 | Input/Output: [(-48 -80 18 -14) -80]
Test Case: 848 | Input/Output: [(97 -66 87 -37) -66]
Test Case: 849 | Input/Output: [(-70 75 -50 -68) -70]
Test Case: 850 | Input/Output: [(-70 -28 93 91) -70]
Test Case: 851 | Input/Output: [(21 -41 41 92) -41]
Test Case: 852 | Input/Output: [(-15 -58 45 -94) -94]
Test Case: 853 | Input/Output: [(-37 -93 1 92) -93]
Test Case: 854 | Input/Output: [(36 -59 50 17) -59]
Test Case: 855 | Input/Output: [(-11 -53 39 -18) -53]
Test Case: 856 | Input/Output: [(-5 -93 -73 97) -93]
Test Case: 857 | Input/Output: [(11 -48 -92 18) -92]
Test Case: 858 | Input/Output: [(76 5 -9 36) -9]
Test Case: 859 | Input/Output: [(48 -20 96 -68) -68]
Test Case: 860 | Input/Output: [(42 -55 34 39) -55]
Test Case: 861 | Input/Output: [(27 56 99 36) 27]
Test Case: 862 | Input/Output: [(15 -99 -100 15) -100]
Test Case: 863 | Input/Output: [(-42 -65 -64 -68) -68]
Test Case: 864 | Input/Output: [(-82 29 67 17) -82]
Test Case: 865 | Input/Output: [(85 -48 -10 -99) -99]
Test Case: 866 | Input/Output: [(-63 90 -88 85) -88]
Test Case: 867 | Input/Output: [(-15 -18 29 -16) -18]
Test Case: 868 | Input/Output: [(-20 -6 -91 61) -91]
Test Case: 869 | Input/Output: [(-55 20 99 -23) -55]
Test Case: 870 | Input/Output: [(-78 24 26 -81) -81]
Test Case: 871 | Input/Output: [(-51 46 70 -50) -51]
Test Case: 872 | Input/Output: [(-78 -76 -97 71) -97]
Test Case: 873 | Input/Output: [(82 21 34 -91) -91]
Test Case: 874 | Input/Output: [(-57 -2 14 39) -57]
Test Case: 875 | Input/Output: [(72 19 7 -14) -14]
Test Case: 876 | Input/Output: [(98 -82 26 -74) -82]
Test Case: 877 | Input/Output: [(75 -74 -35 5) -74]
Test Case: 878 | Input/Output: [(16 76 -91 51) -91]
Test Case: 879 | Input/Output: [(44 -25 22 84) -25]
Test Case: 880 | Input/Output: [(38 -24 -49 -66) -66]
Test Case: 881 | Input/Output: [(30 -3 59 39) -3]
Test Case: 882 | Input/Output: [(-63 -90 15 -25) -90]
Test Case: 883 | Input/Output: [(75 -73 69 -31) -73]
Test Case: 884 | Input/Output: [(-70 -14 -18 -69) -70]
Test Case: 885 | Input/Output: [(-5 -47 8 -89) -89]
Test Case: 886 | Input/Output: [(14 -79 45 -8) -79]
Test Case: 887 | Input/Output: [(88 36 -21 -6) -21]
Test Case: 888 | Input/Output: [(72 -11 46 -79) -79]
Test Case: 889 | Input/Output: [(1 66 73 -4) -4]
Test Case: 890 | Input/Output: [(0 89 -66 -5) -66]
Test Case: 891 | Input/Output: [(-48 44 -37 2) -48]
Test Case: 892 | Input/Output: [(9 -87 40 -41) -87]
Test Case: 893 | Input/Output: [(-66 65 8 33) -66]
Test Case: 894 | Input/Output: [(66 -8 10 48) -8]
Test Case: 895 | Input/Output: [(56 -22 23 -85) -85]
Test Case: 896 | Input/Output: [(44 -32 6 43) -32]
Test Case: 897 | Input/Output: [(-8 -64 23 54) -64]
Test Case: 898 | Input/Output: [(31 27 41 -62) -62]
Test Case: 899 | Input/Output: [(36 -63 -51 -84) -84]
Test Case: 900 | Input/Output: [(36 87 -64 40) -64]
Test Case: 901 | Input/Output: [(32 17 -67 4) -67]
Test Case: 902 | Input/Output: [(-93 64 -9 64) -93]
Test Case: 903 | Input/Output: [(25 -14 -55 89) -55]
Test Case: 904 | Input/Output: [(44 66 -94 35) -94]
Test Case: 905 | Input/Output: [(-97 69 58 -23) -97]
Test Case: 906 | Input/Output: [(-70 14 2 -58) -70]
Test Case: 907 | Input/Output: [(1 -7 -93 -26) -93]
Test Case: 908 | Input/Output: [(64 -26 -44 -40) -44]
Test Case: 909 | Input/Output: [(26 -67 89 -53) -67]
Test Case: 910 | Input/Output: [(34 54 95 -6) -6]
Test Case: 911 | Input/Output: [(0 40 -90 -17) -90]
Test Case: 912 | Input/Output: [(21 69 -14 64) -14]
Test Case: 913 | Input/Output: [(-81 -13 13 11) -81]
Test Case: 914 | Input/Output: [(-31 38 -2 -59) -59]
Test Case: 915 | Input/Output: [(-59 -87 98 -99) -99]
Test Case: 916 | Input/Output: [(-6 33 -27 33) -27]
Test Case: 917 | Input/Output: [(93 -61 -24 1) -61]
Test Case: 918 | Input/Output: [(74 48 70 59) 48]
Test Case: 919 | Input/Output: [(-81 -2 -28 -16) -81]
Test Case: 920 | Input/Output: [(-20 -95 51 84) -95]
Test Case: 921 | Input/Output: [(48 -99 69 -51) -99]
Test Case: 922 | Input/Output: [(-35 26 -60 9) -60]
Test Case: 923 | Input/Output: [(10 75 72 -95) -95]
Test Case: 924 | Input/Output: [(89 52 6 12) 6]
Test Case: 925 | Input/Output: [(-42 23 1 -95) -95]
Test Case: 926 | Input/Output: [(-54 49 34 -82) -82]
Test Case: 927 | Input/Output: [(98 56 20 36) 20]
Test Case: 928 | Input/Output: [(20 34 -67 32) -67]
Test Case: 929 | Input/Output: [(-88 -55 73 -82) -88]
Test Case: 930 | Input/Output: [(-48 72 61 -54) -54]
Test Case: 931 | Input/Output: [(-17 96 -48 5) -48]
Test Case: 932 | Input/Output: [(-56 -78 -33 -83) -83]
Test Case: 933 | Input/Output: [(49 51 -88 58) -88]
Test Case: 934 | Input/Output: [(86 37 -43 28) -43]
Test Case: 935 | Input/Output: [(-59 -69 45 -82) -82]
Test Case: 936 | Input/Output: [(2 -97 12 -98) -98]
Test Case: 937 | Input/Output: [(21 2 7 99) 2]
Test Case: 938 | Input/Output: [(84 11 -3 71) -3]
Test Case: 939 | Input/Output: [(-75 -6 28 -51) -75]
Test Case: 940 | Input/Output: [(69 -92 9 -47) -92]
Test Case: 941 | Input/Output: [(-48 61 -99 47) -99]
Test Case: 942 | Input/Output: [(-1 -99 22 99) -99]
Test Case: 943 | Input/Output: [(54 -98 41 2) -98]
Test Case: 944 | Input/Output: [(34 -75 -5 -15) -75]
Test Case: 945 | Input/Output: [(98 -68 -43 -17) -68]
Test Case: 946 | Input/Output: [(52 82 -18 49) -18]
Test Case: 947 | Input/Output: [(-81 0 39 61) -81]
Test Case: 948 | Input/Output: [(47 -49 -15 -96) -96]
Test Case: 949 | Input/Output: [(-31 53 -15 67) -31]
Test Case: 950 | Input/Output: [(-72 60 72 -43) -72]
Test Case: 951 | Input/Output: [(-86 39 30 88) -86]
Test Case: 952 | Input/Output: [(31 69 33 -61) -61]
Test Case: 953 | Input/Output: [(67 -48 93 98) -48]
Test Case: 954 | Input/Output: [(-26 -17 -23 -65) -65]
Test Case: 955 | Input/Output: [(-53 -61 -78 100) -78]
Test Case: 956 | Input/Output: [(61 9 -54 -57) -57]
Test Case: 957 | Input/Output: [(40 76 9 -67) -67]
Test Case: 958 | Input/Output: [(-6 -34 -30 -47) -47]
Test Case: 959 | Input/Output: [(98 13 -28 -66) -66]
Test Case: 960 | Input/Output: [(-80 -24 63 25) -80]
Test Case: 961 | Input/Output: [(-25 -2 -51 -87) -87]
Test Case: 962 | Input/Output: [(29 46 -97 44) -97]
Test Case: 963 | Input/Output: [(3 38 -40 50) -40]
Test Case: 964 | Input/Output: [(-83 51 -23 -91) -91]
Test Case: 965 | Input/Output: [(-16 -44 59 -61) -61]
Test Case: 966 | Input/Output: [(83 17 12 30) 12]
Test Case: 967 | Input/Output: [(-58 44 -88 -27) -88]
Test Case: 968 | Input/Output: [(54 -33 13 -32) -33]
Test Case: 969 | Input/Output: [(-64 -10 39 -39) -64]
Test Case: 970 | Input/Output: [(69 -79 29 -70) -79]
Test Case: 971 | Input/Output: [(1 -82 19 40) -82]
Test Case: 972 | Input/Output: [(-12 29 -33 -35) -35]
Test Case: 973 | Input/Output: [(99 78 -59 -43) -59]
Test Case: 974 | Input/Output: [(2 14 88 31) 2]
Test Case: 975 | Input/Output: [(81 -50 -96 26) -96]
Test Case: 976 | Input/Output: [(-32 -74 94 20) -74]
Test Case: 977 | Input/Output: [(22 89 65 31) 22]
Test Case: 978 | Input/Output: [(-70 -76 -42 63) -76]
Test Case: 979 | Input/Output: [(10 57 35 -51) -51]
Test Case: 980 | Input/Output: [(-42 -93 65 -8) -93]
Test Case: 981 | Input/Output: [(-69 -61 -86 60) -86]
Test Case: 982 | Input/Output: [(89 -26 -49 -25) -49]
Test Case: 983 | Input/Output: [(-70 -87 -28 5) -87]
Test Case: 984 | Input/Output: [(24 -88 58 -49) -88]
Test Case: 985 | Input/Output: [(24 -85 -83 76) -85]
Test Case: 986 | Input/Output: [(91 -28 -58 -28) -58]
Test Case: 987 | Input/Output: [(-36 -25 61 16) -36]
Test Case: 988 | Input/Output: [(-96 -32 66 -11) -96]
Test Case: 989 | Input/Output: [(21 -40 -21 28) -40]
Test Case: 990 | Input/Output: [(-19 82 -50 40) -50]
Test Case: 991 | Input/Output: [(24 33 -17 34) -17]
Test Case: 992 | Input/Output: [(-44 67 37 94) -44]
Test Case: 993 | Input/Output: [(43 -72 -82 32) -82]
Test Case: 994 | Input/Output: [(-16 -47 -82 -10) -82]
Test Case: 995 | Input/Output: [(65 -16 -35 31) -35]
Test Case: 996 | Input/Output: [(58 23 -41 -63) -63]
Test Case: 997 | Input/Output: [(-63 96 -76 44) -76]
Test Case: 998 | Input/Output: [(81 -42 -58 -77) -77]
Test Case: 999 | Input/Output: [(-82 -92 -49 41) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -36 101 108 46 70 23 -45 68 -47 -108 -63 9 92 -89 120 75
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-61 -61 -98 -61] -98] [[-98 -63 -98 -98] -98] [[-80 -79 -79 -79] -80] [[28 1 28 28] 1] [[-70 -70 40 -70] -70] [[52 52 11 52] 11] [[37 37 37 49] 37] [[-77 -42 -42 -42] -77] [[78 78 78 -68] -68] [[22 22 52 22] 22] [(23 23 23 23) 23] [(-74 -74 -74 -74) -74] [(13 13 13 13) 13] [(2 2 2 2) 2] [(8 8 8 8) 8] [(24 22 35 13) 13] [(95 71 75 10) 10] [(45 81 70 24) 24] [(68 26 40 38) 26] [(92 58 45 43) 43] [(37 67 92 50) 37] [(2 90 85 18) 2] [(90 74 20 55) 20] [(90 50 83 67) 50] [(22 18 61 21) 18] [(49 36 5 0) 0] [(54 63 51 34) 34] [(96 49 57 44) 44] [(65 67 95 73) 65] [(54 62 9 69) 9] [(53 99 27 13) 13] [(82 37 63 66) 37] [(25 8 79 19) 8] [(14 38 24 89) 14] [(30 82 53 27) 27] [(3 -89 9 48) -89] [(78 -98 93 32) -98] [(-68 -91 -24 -26) -91] [(-89 -50 46 -82) -89] [(-2 53 -91 -16) -91] [(82 86 32 -7) -7] [(23 65 -22 51) -22] [(-76 -81 -96 0) -96] [(-12 -61 -68 -79) -79] [(72 48 -95 -53) -95] [(96 -87 49 -16) -87] [(47 -62 75 -32) -62] [(-53 57 -48 -43) -53] [(50 -3 -72 28) -72] [(66 92 24 82) 24] [(-56 -50 -19 -93) -93] [(74 12 14 13) 12] [(70 -96 -28 -68) -96] [(62 -98 -93 -28) -98] [(47 -12 -57 21) -57] [(-15 -52 -29 -64) -64] [(48 -67 -2 -52) -67] [(74 -7 -94 93) -94] [(38 -57 -53 -48) -57] [(76 26 43 32) 26] [(72 59 -23 40) -23] [(52 96 23 -21) -21] [(11 52 -24 32) -24] [(-77 -12 -78 11) -78] [(30 -87 -59 -1) -87] [(89 -74 66 82) -74] [(40 84 26 19) 19] [(33 -42 -92 37) -92] [(46 40 -46 -55) -55] [(24 -13 -7 -24) -24] [(12 89 22 -81) -81] [(-89 52 10 -94) -94] [(37 -85 -43 10) -85] [(46 -76 48 -77) -77] [(86 -10 27 -30) -30] [(-95 54 9 -42) -95] [(95 -40 -85 -2) -85] [(-5 15 -74 -82) -82] [(-93 -62 -57 49) -93] [(-41 -62 27 17) -62] [(-92 15 -6 0) -92] [(-37 20 -66 1) -66] [(-17 -87 -75 -71) -87] [(54 21 -6 54) -6] [(-42 71 -95 -74) -95] [(-69 93 -18 -44) -69] [(39 -33 -88 -84) -88] [(55 57 -15 84) -15] [(-80 64 44 -54) -80] [(-95 51 92 93) -95] [(62 33 -97 39) -97] [(-30 -82 64 68) -82] [(-52 -45 11 -62) -62] [(-80 41 -92 -48) -92] [(85 -44 80 37) -44])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_341} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_353} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_sub boolean_yank boolean_yankdup boolean_or in3 integer_mult print_integer exec_dup (boolean_yankdup exec_dup_times (integer_swap exec_when (integer_empty boolean_and tagged_341 integer_add boolean_yank boolean_not integer_eq integer_swap integer_shove boolean_or integer_inc exec_y_when_autoconstructing () boolean_yankdup) boolean_swap) exec_flush in3 boolean_empty) boolean_empty exec_when (print_integer) boolean_flush integer_yank boolean_frominteger exec_y () integer_mult integer_dup_times exec_do*range (exec_shove (tagged_353 in3) exec_do*while (integer_pop integer_add exec_yankdup exec_rot (integer_stackdepth integer_add exec_dup_items) () ())))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_341} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction in3} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_353} {:close 1, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_sub boolean_yank boolean_yankdup boolean_or in3 integer_mult print_integer exec_dup (boolean_yankdup exec_dup_times (integer_swap exec_when (integer_empty boolean_and tagged_341 integer_add boolean_yank boolean_not integer_eq integer_swap integer_shove boolean_or integer_inc exec_y_when_autoconstructing () boolean_yankdup) boolean_swap) exec_flush in3 boolean_empty) boolean_empty exec_when (print_integer) boolean_flush integer_yank boolean_frominteger exec_y () integer_mult integer_dup_times exec_do*range (exec_shove (tagged_353 in3) exec_do*while (integer_pop integer_add exec_yankdup exec_rot (integer_stackdepth integer_add exec_dup_items) () ())))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 7 2 4 7 7 17 2 7 11)
Population mean number of elite cases: 0.08
Count of perfect (error zero) individuals by case: (15 7 2 4 7 7 17 2 7 11)
Population mean number of perfect (error zero) cases: 0.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction print_exec} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_eq} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_not} {:close 1, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq})
Best program: (integer_yank exec_if () (integer_gt integer_lt integer_rot integer_div integer_min exec_yankdup) boolean_dup boolean_or boolean_pop boolean_or boolean_stackdepth integer_rot integer_flush integer_mod integer_dup_items integer_pop integer_yank exec_noop exec_if () (in3) boolean_not exec_do*while () integer_gt print_boolean print_integer boolean_not boolean_dup_items boolean_dup integer_yank exec_shove () exec_flush integer_add integer_shove integer_rot integer_max boolean_dup in4 integer_add exec_k_when_autoconstructing (integer_gt exec_empty print_boolean) (boolean_and exec_do*count (boolean_invert_second_then_and) boolean_yankdup) integer_eq integer_yankdup integer_swap boolean_eq exec_do*count (boolean_swap) exec_if () (integer_dup_items boolean_and in4 boolean_dup_times integer_gte integer_stackdepth exec_shove (exec_noop integer_dec) exec_noop) print_exec (exec_y_when_autoconstructing ()) in1 print_exec () integer_yankdup integer_dup exec_k_when_autoconstructing (integer_eq) () exec_flush boolean_not in3 exec_k () (boolean_xor integer_pop integer_yankdup boolean_xor exec_when (in4 boolean_eq print_boolean integer_eq)))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 86
Size: 108
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 9.921
Median total errors in population: 10
Error averages by case: (0.985 0.993 0.998 0.996 0.993 0.993 0.983 0.998 0.993 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.662
Average program size in population (points): 69.602
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 460702
--- Timings ---
Current time: 1559314635323 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 26.9%
Fitness Testing:      1.8 seconds, 69.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_598} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_572} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_invert_first_then_and exec_while (exec_yankdup) integer_dup_items in3 print_boolean integer_dup_items print_boolean tag_exec_428 (boolean_invert_second_then_and integer_max in4 exec_do*while (tagged_598 integer_swap exec_yankdup boolean_and) boolean_rot integer_flush boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor boolean_dup)) exec_yank boolean_invert_second_then_and tag_integer_572 exec_dup_times (integer_stackdepth) integer_pop exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_416 boolean_frominteger print_boolean boolean_yankdup boolean_dup_items) exec_dup_items exec_flush))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_598} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_572} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_invert_first_then_and exec_while (exec_yankdup) integer_dup_items in3 print_boolean integer_dup_items print_boolean tag_exec_428 (boolean_invert_second_then_and integer_max in4 exec_do*while (tagged_598 integer_swap exec_yankdup boolean_and) boolean_rot integer_flush boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor boolean_dup)) exec_yank boolean_invert_second_then_and tag_integer_572 exec_dup_times (integer_stackdepth) integer_pop exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_416 boolean_frominteger print_boolean boolean_yankdup boolean_dup_items) exec_dup_items exec_flush))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 764 100 220 1000 545 863 545 217 100)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (0 764 100 220 0 545 863 545 217 100)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_598} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_572} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Best program: (boolean_invert_first_then_and exec_while (exec_yankdup) integer_dup_items in3 print_boolean integer_dup_items print_boolean tag_exec_428 (boolean_invert_second_then_and integer_max in4 exec_do*while (tagged_598 integer_swap exec_yankdup boolean_and) boolean_rot integer_flush boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor boolean_dup)) exec_yank boolean_invert_second_then_and tag_integer_572 exec_dup_times (integer_stackdepth) integer_pop exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_416 boolean_frominteger print_boolean boolean_yankdup boolean_dup_items) exec_dup_items exec_flush))
Errors: [1 0 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 53
Size: 64
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.646
Median total errors in population: 6
Error averages by case: (1.0 0.236 0.9 0.78 1.0 0.455 0.137 0.455 0.783 0.9)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 46.463
Average program size in population (points): 61.279
Average percent parens in population: 0.227
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.492
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 936704
--- Timings ---
Current time: 1559314638461 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.3 seconds, 43.3%
Fitness Testing:      2.5 seconds, 47.4%
Report:               0.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -63                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 22                 
Correct output: 10                  | Program output: 71                 
Correct output: 24                  | Program output: 81                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 58                 
Correct output: 37                  | Program output: 67                 
Correct output: 2                   | Program output: 90                 
Correct output: 20                  | Program output: 74                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 36                 
Correct output: 34                  | Program output: 63                 
Correct output: 44                  | Program output: 49                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 62                 
Correct output: 13                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 38                 
Correct output: 27                  | Program output: 82                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -50                
Correct output: -91                 | Program output: 53                 
Correct output: -7                  | Program output: 86                 
Correct output: -22                 | Program output: 65                 
Correct output: -96                 | Program output: -81                
Correct output: -79                 | Program output: -61                
Correct output: -95                 | Program output: 48                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: 57                 
Correct output: -72                 | Program output: -3                 
Correct output: 24                  | Program output: 92                 
Correct output: -93                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -12                
Correct output: -64                 | Program output: -52                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: 59                 
Correct output: -21                 | Program output: 96                 
Correct output: -24                 | Program output: 52                 
Correct output: -78                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 84                 
Correct output: -92                 | Program output: -42                
Correct output: -55                 | Program output: 40                 
Correct output: -24                 | Program output: -13                
Correct output: -81                 | Program output: 89                 
Correct output: -94                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -76                
Correct output: -30                 | Program output: -10                
Correct output: -95                 | Program output: 54                 
Correct output: -85                 | Program output: -40                
Correct output: -82                 | Program output: 15                 
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 15                 
Correct output: -66                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: 21                 
Correct output: -95                 | Program output: 71                 
Correct output: -69                 | Program output: 93                 
Correct output: -88                 | Program output: -33                
Correct output: -15                 | Program output: 57                 
Correct output: -80                 | Program output: 64                 
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -45                
Correct output: -92                 | Program output: 41                 
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction 72} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yankdup exec_yankdup in2 print_integer 72 boolean_invert_first_then_and integer_dup_times boolean_rot integer_gt exec_do*count (boolean_invert_second_then_and exec_dup_items boolean_not integer_stackdepth integer_mult boolean_empty) boolean_empty integer_eq print_newline boolean_or exec_do*range (print_integer) integer_fromboolean integer_fromboolean boolean_dup_times boolean_xor in4 integer_mult exec_dup_times (print_integer exec_s (print_boolean exec_when () integer_dup_items exec_stackdepth) (boolean_yankdup) (integer_yank exec_dup_times () exec_shove (boolean_xor integer_mult exec_swap (exec_k_when_autoconstructing () ()) ()))))
Lexicase best errors: [1 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction 72} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yankdup exec_yankdup in2 print_integer 72 boolean_invert_first_then_and integer_dup_times boolean_rot integer_gt exec_do*count (boolean_invert_second_then_and exec_dup_items boolean_not integer_stackdepth integer_mult boolean_empty) boolean_empty integer_eq print_newline boolean_or exec_do*range (print_integer) integer_fromboolean integer_fromboolean boolean_dup_times boolean_xor in4 integer_mult exec_dup_times (print_integer exec_s (print_boolean exec_when () integer_dup_items exec_stackdepth) (boolean_yankdup) (integer_yank exec_dup_times () exec_shove (boolean_xor integer_mult exec_swap (exec_k_when_autoconstructing () ()) ()))))
Zero cases best errors: [1 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 314 312 312 238 551 1 869 239 238)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (313 314 312 312 238 551 1 869 239 238)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 1, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_893} {:close 0, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction tagged_591})
Best program: (integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove boolean_or exec_dup_times (boolean_dup boolean_and exec_yank) integer_add boolean_not integer_max integer_pop integer_pop boolean_or boolean_dup boolean_invert_second_then_and integer_eq exec_dup (exec_dup (boolean_rot exec_dup (integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup in2) exec_do*while (exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_lt) exec_s_when_autoconstructing () () (boolean_rot integer_add integer_gte) boolean_pop boolean_invert_first_then_and exec_s (exec_stackdepth) (boolean_invert_second_then_and in2) (boolean_not boolean_xor integer_fromboolean print_boolean boolean_frominteger exec_do*count (integer_add exec_while () integer_flush) integer_max exec_rot () (exec_y_when_autoconstructing (boolean_invert_first_then_and tag_integer_893) exec_while (integer_swap) boolean_dup_items) (tagged_591))) () ()))))
Errors: [1 1 1 1 0 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 70
Size: 95
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.613
Median total errors in population: 6
Error averages by case: (0.687 0.686 0.688 0.688 0.762 0.449 0.999 0.131 0.761 0.762)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.953
Average program size in population (points): 71.052
Average percent parens in population: 0.240
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9405
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1581603
--- Timings ---
Current time: 1559314641935 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.7 seconds, 50.3%
Fitness Testing:      3.3 seconds, 35.0%
Report:               1.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -94} {:close 0, :instruction -82} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub})
Lexicase best program: (integer_yank boolean_or in3 exec_do*range (print_integer integer_add integer_dup_items) boolean_swap boolean_invert_second_then_and boolean_dup_items exec_dup_times () integer_min exec_dup_times (-94 -82 exec_swap (integer_max integer_mult exec_k () (exec_yank print_newline print_newline) boolean_dup_times exec_if () (integer_gt) integer_sub) ()))
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -94} {:close 0, :instruction -82} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_sub})
Zero cases best program: (integer_yank boolean_or in3 exec_do*range (print_integer integer_add integer_dup_items) boolean_swap boolean_invert_second_then_and boolean_dup_items exec_dup_times () integer_min exec_dup_times (-94 -82 exec_swap (integer_max integer_mult exec_k () (exec_yank print_newline print_newline) boolean_dup_times exec_if () (integer_gt) integer_sub) ()))
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 227 329 188 226 108 226 107 188 226)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (226 227 329 188 226 108 226 107 188 226)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items})
Best program: (integer_add exec_noop integer_dup_items integer_inc integer_lt boolean_dup integer_dec exec_dup (integer_dec integer_max boolean_pop integer_sub) integer_fromboolean in3 boolean_swap integer_gt boolean_shove integer_lt integer_fromboolean print_integer integer_empty exec_do*range (integer_yankdup exec_while () integer_mult) exec_pop () integer_shove exec_when (integer_empty exec_when (integer_yankdup integer_yank) exec_flush print_newline integer_pop exec_do*while (integer_eq integer_dup_items)))
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 46
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 7.949
Median total errors in population: 8
Error averages by case: (0.774 0.773 0.671 0.812 0.774 0.892 0.774 0.893 0.812 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.084
Average program size in population (points): 74.107
Average percent parens in population: 0.244
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5495
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2257349
--- Timings ---
Current time: 1559314644941 milliseconds
Total Time:          12.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 54.3%
Fitness Testing:      4.0 seconds, 32.0%
Report:               1.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction 100} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 1, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_893} {:close 0, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction tagged_591})
Lexicase best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if () (boolean_invert_first_then_and exec_noop exec_yank print_integer exec_do*times () exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range () boolean_empty boolean_and) (in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or) exec_flush exec_k_when_autoconstructing (boolean_empty integer_lt) (print_newline exec_do*count () integer_dup_times boolean_dup exec_empty exec_k () (100) exec_dup_times (boolean_invert_first_then_and integer_dec exec_stackdepth exec_while (print_boolean) print_newline exec_do*count (integer_add exec_while () integer_flush) integer_dec exec_rot () (exec_y_when_autoconstructing (boolean_invert_second_then_and tag_integer_893) exec_while (integer_swap) boolean_dup_items) (tagged_591)))))))))) () ()) ())) () ())
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 111
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 1, :instruction 100} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction print_boolean} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 1, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_893} {:close 0, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction tagged_591})
Zero cases best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if () (boolean_invert_first_then_and exec_noop exec_yank print_integer exec_do*times () exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range () boolean_empty boolean_and) (in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or) exec_flush exec_k_when_autoconstructing (boolean_empty integer_lt) (print_newline exec_do*count () integer_dup_times boolean_dup exec_empty exec_k () (100) exec_dup_times (boolean_invert_first_then_and integer_dec exec_stackdepth exec_while (print_boolean) print_newline exec_do*count (integer_add exec_while () integer_flush) integer_dec exec_rot () (exec_y_when_autoconstructing (boolean_invert_second_then_and tag_integer_893) exec_while (integer_swap) boolean_dup_items) (tagged_591)))))))))) () ()) ())) () ())
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 111
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 848 175 174 432 171 165 855 165 431)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (432 848 175 174 432 171 165 855 165 431)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_598} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_integer_572} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_138} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup})
Best program: (boolean_invert_first_then_and exec_while (exec_yankdup) integer_dup_items in3 integer_mod integer_dup_items print_boolean integer_dup_items in3 print_boolean integer_dup_items print_boolean tag_exec_428 (boolean_invert_second_then_and integer_max in4 exec_do*while (tagged_598 integer_swap exec_yankdup boolean_and) boolean_dup_items print_exec (boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor boolean_dup)) exec_yank) boolean_invert_second_then_and tag_integer_572 exec_dup_times (integer_stackdepth) integer_pop exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_138 print_newline exec_do*times (exec_dup_items boolean_dup_items exec_rot (integer_min integer_inc) (exec_pop () boolean_dup_times integer_gt) (exec_y () boolean_yankdup exec_noop boolean_shove exec_yankdup)))))
Errors: [1 0 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 67
Size: 85
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.152
Median total errors in population: 5
Error averages by case: (0.568 0.152 0.825 0.826 0.568 0.829 0.835 0.145 0.835 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.301
Average program size in population (points): 63.454
Average percent parens in population: 0.241
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.11325
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2698274
--- Timings ---
Current time: 1559314648437 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 58.2%
Fitness Testing:      4.4 seconds, 28.8%
Report:               1.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_xor exec_rot (integer_fromboolean integer_pop exec_dup_items exec_pop (boolean_stackdepth) integer_inc in3 boolean_not integer_sub print_integer in3 integer_add) (exec_when (exec_flush in1 boolean_invert_second_then_and)) ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_xor exec_rot (integer_fromboolean integer_pop exec_dup_items exec_pop (boolean_stackdepth) integer_inc in3 boolean_not integer_sub print_integer in3 integer_add) (exec_when (exec_flush in1 boolean_invert_second_then_and)) ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (874 328 336 1000 329 335 336 1000 208 540)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (874 328 336 0 329 335 336 0 208 540)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_598} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor})
Best program: (boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times tag_exec_428 (boolean_invert_second_then_and integer_max in4 exec_do*while (tagged_598 integer_swap exec_yankdup boolean_and) boolean_dup_items print_exec (boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor))))
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 6.714
Median total errors in population: 7
Error averages by case: (0.126 0.672 0.664 1.0 0.671 0.665 0.664 1.0 0.792 0.46)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 48.657
Average program size in population (points): 66.192
Average percent parens in population: 0.255
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.5743125
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3168188
--- Timings ---
Current time: 1559314651550 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.4 seconds, 59.5%
Fitness Testing:      4.9 seconds, 25.6%
Report:               2.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Lexicase best program: (boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 boolean_eq exec_k_when_autoconstructing (in1) ())
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Zero cases best program: (boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 boolean_eq exec_k_when_autoconstructing (in1) ())
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 463 155 155 246 2 463 248 865 463)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (463 463 155 155 246 2 463 248 865 463)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_341} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap})
Best program: (integer_sub boolean_yank boolean_yankdup boolean_or in3 integer_mult print_integer exec_dup () boolean_yankdup exec_dup_times (integer_swap exec_when (integer_empty boolean_and tagged_341 integer_add boolean_yank boolean_not integer_flush integer_swap integer_shove boolean_or integer_stackdepth exec_y_when_autoconstructing () boolean_yankdup) boolean_swap))
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.477
Median total errors in population: 7
Error averages by case: (0.537 0.537 0.845 0.845 0.754 0.998 0.537 0.752 0.135 0.537)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.284
Average program size in population (points): 58.532
Average percent parens in population: 0.246
Minimum age in population: 6.0
Maximum age in population: 11.0
Average age in population: 9.06828125
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3556326
--- Timings ---
Current time: 1559314654328 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 62.0%
Fitness Testing:      5.3 seconds, 24.1%
Report:               2.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty})
Lexicase best program: (in4 exec_swap () (print_integer exec_while (integer_eq)) exec_stackdepth boolean_not boolean_rot boolean_swap integer_shove exec_s (integer_swap exec_if () (boolean_invert_first_then_and exec_noop exec_yank print_integer exec_do*times () exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range () boolean_empty boolean_and) (in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or) exec_flush exec_k_when_autoconstructing (boolean_empty) ()))))))) () ()) ())) () ())
Lexicase best errors: [0 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty})
Zero cases best program: (in4 exec_swap () (print_integer exec_while (integer_eq)) exec_stackdepth boolean_not boolean_rot boolean_swap integer_shove exec_s (integer_swap exec_if () (boolean_invert_first_then_and exec_noop exec_yank print_integer exec_do*times () exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range () boolean_empty boolean_and) (in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or) exec_flush exec_k_when_autoconstructing (boolean_empty) ()))))))) () ()) ())) () ())
Zero cases best errors: [0 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 428 1000 149 191 1000 431 428 149 149)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (149 428 0 149 191 0 431 428 149 149)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_598} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_572} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_138} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup})
Best program: (boolean_invert_first_then_and exec_while (exec_yankdup) integer_dup_items in3 print_boolean integer_dup_items print_boolean tag_exec_428 (boolean_invert_second_then_and integer_max in4 exec_do*while (tagged_598 integer_swap exec_yankdup boolean_and) boolean_rot integer_flush boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor boolean_dup)) exec_yank boolean_invert_second_then_and tag_integer_572 exec_dup_times (integer_stackdepth) integer_pop exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items boolean_dup_items exec_y (integer_add exec_y (tagged_138 print_newline exec_do*times (exec_dup_items boolean_dup_items exec_rot (integer_min integer_inc exec_pop () boolean_dup_times integer_gt) (exec_y () boolean_yankdup exec_noop boolean_shove exec_yankdup) ()))))
Errors: [0 1 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 63
Size: 80
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.926
Median total errors in population: 7
Error averages by case: (0.851 0.572 1.0 0.851 0.809 1.0 0.569 0.572 0.851 0.851)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 43.316
Average program size in population (points): 58.076
Average percent parens in population: 0.241
Minimum age in population: 7.0
Maximum age in population: 12.578125
Average age in population: 10.748109375
Median age in population: 10.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3976577
--- Timings ---
Current time: 1559314657537 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 63.4%
Fitness Testing:      5.7 seconds, 23.2%
Report:               3.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank})
Lexicase best program: (boolean_xor exec_rot (integer_fromboolean integer_pop exec_dup_items exec_pop (boolean_stackdepth) exec_do*while (in3 boolean_not print_integer) print_integer in3 integer_add) (exec_when (exec_flush in1 exec_yank)) ())
Lexicase best errors: [1 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yank})
Zero cases best program: (boolean_xor exec_rot (integer_fromboolean integer_pop exec_dup_items exec_pop (boolean_stackdepth) exec_do*while (in3 boolean_not print_integer) print_integer in3 integer_add) (exec_when (exec_flush in1 exec_yank)) ())
Zero cases best errors: [1 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 90 314 314 313 314 476 477 2 480)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (2 90 314 314 313 314 476 477 2 480)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_xor exec_rot (integer_fromboolean integer_pop exec_dup_items exec_pop (boolean_stackdepth) integer_inc in3 boolean_not integer_sub print_integer in3 integer_add) (exec_when (exec_flush in1 boolean_invert_second_then_and)) ())
Errors: [1 1 0 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 24
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.218
Median total errors in population: 7
Error averages by case: (0.998 0.91 0.686 0.686 0.687 0.686 0.524 0.523 0.998 0.52)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.137
Average program size in population (points): 61.706
Average percent parens in population: 0.271
Minimum age in population: 8.0
Maximum age in population: 14.078125
Average age in population: 12.0090703125
Median age in population: 12.1015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4384848
--- Timings ---
Current time: 1559314660095 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.4 seconds, 63.0%
Fitness Testing:      6.1 seconds, 22.1%
Report:               4.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction tag_exec_18} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_598} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_572} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_invert_first_then_and exec_while (tag_exec_18 () integer_dup_items in3 print_boolean) integer_dup_items print_boolean tag_exec_428 (boolean_invert_second_then_and integer_max in4 integer_dec tagged_598 boolean_flush exec_yankdup boolean_and) boolean_rot integer_flush boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor boolean_dup) exec_yank boolean_invert_second_then_and tag_integer_572 exec_dup_times (integer_stackdepth) integer_pop exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items print_integer boolean_dup_items boolean_shove integer_add exec_y (tagged_416 boolean_frominteger print_boolean boolean_yankdup exec_y (tagged_416 boolean_frominteger print_boolean boolean_yankdup boolean_dup_items) exec_dup_items exec_flush))
Lexicase best errors: [1 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.155
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction tag_exec_18} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_598} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction 72} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 2, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tag_integer_572} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_invert_first_then_and exec_while (tag_exec_18 () integer_dup_items in3 print_boolean) integer_dup_items print_boolean tag_exec_428 (boolean_invert_second_then_and integer_max in4 integer_dec tagged_598 boolean_flush exec_yankdup boolean_and) boolean_rot integer_flush boolean_or 72 boolean_yank exec_s_when_autoconstructing (integer_rot integer_shove boolean_stackdepth) (integer_eq) (boolean_flush print_integer boolean_xor boolean_dup) exec_yank boolean_invert_second_then_and tag_integer_572 exec_dup_times (integer_stackdepth) integer_pop exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items print_integer boolean_dup_items boolean_shove integer_add exec_y (tagged_416 boolean_frominteger print_boolean boolean_yankdup exec_y (tagged_416 boolean_frominteger print_boolean boolean_yankdup boolean_dup_items) exec_dup_items exec_flush))
Zero cases best errors: [1 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.155
--- Lexicase Population Statistics ---
Count of elite individuals by case: (369 74 280 177 284 178 281 74 281 728)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (369 74 280 177 284 178 281 74 281 728)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot exec_yank boolean_invert_second_then_and exec_s (integer_swap exec_if () (boolean_invert_first_then_and exec_noop exec_yank integer_empty exec_do*times () integer_stackdepth boolean_invert_second_then_and)) () ())
Errors: [1 1 0 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.274
Median total errors in population: 8
Error averages by case: (0.631 0.926 0.72 0.823 0.716 0.822 0.719 0.926 0.719 0.272)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.651
Average program size in population (points): 54.303
Average percent parens in population: 0.291
Minimum age in population: 10.875
Maximum age in population: 15.38671875
Average age in population: 13.643625
Median age in population: 13.6953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4708511
--- Timings ---
Current time: 1559314663187 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.9 seconds, 65.0%
Fitness Testing:      6.4 seconds, 21.0%
Report:               4.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_empty)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if () (boolean_invert_first_then_and exec_noop exec_yank print_integer exec_do*times (exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range () boolean_empty boolean_and) (in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or)))))))) () ()) ()))) () ())
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.394
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_empty)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if () (boolean_invert_first_then_and exec_noop exec_yank print_integer exec_do*times (exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range () boolean_empty boolean_and) (in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or)))))))) () ()) ()))) () ())
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.394
--- Lexicase Population Statistics ---
Count of elite individuals by case: (875 121 390 390 874 172 192 171 753 121)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (875 121 390 390 874 172 192 171 753 121)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty})
Best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if () (exec_s (integer_swap boolean_and) (boolean_invert_first_then_and exec_noop exec_yank print_integer exec_do*times (exec_swap (exec_rot (exec_k (boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_y_when_autoconstructing (exec_do*times (exec_k (exec_do*range () boolean_empty) ())))))) ()) () ()) ())) ())) () ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 63
Percent parens: 0.444
--- Population Statistics ---
Average total errors in population: 5.941
Median total errors in population: 5
Error averages by case: (0.125 0.879 0.61 0.61 0.126 0.828 0.808 0.829 0.247 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.065
Average program size in population (points): 62.546
Average percent parens in population: 0.309
Minimum age in population: 11.953125
Maximum age in population: 17.099609375
Average age in population: 15.07975390625
Median age in population: 15.134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5106538
--- Timings ---
Current time: 1559314665802 milliseconds
Total Time:          33.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 65.8%
Fitness Testing:      6.8 seconds, 20.6%
Report:               4.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Lexicase best program: (integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 boolean_eq exec_k_when_autoconstructing (in1) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Zero cases best program: (integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 boolean_eq exec_k_when_autoconstructing (in1) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 130 132 247 247 229 229 229 247 229)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (274 130 132 247 247 229 229 229 247 229)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_xor exec_rot (integer_fromboolean integer_pop exec_dup_items exec_pop (integer_min) integer_inc in3 boolean_not integer_sub print_integer in3 integer_add) (exec_when (exec_flush in1 boolean_invert_second_then_and)) ())
Errors: [1 1 1 1 1 0 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 24
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.807
Median total errors in population: 8
Error averages by case: (0.726 0.87 0.868 0.753 0.753 0.771 0.771 0.771 0.753 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.884
Average program size in population (points): 55.778
Average percent parens in population: 0.312
Minimum age in population: 13.8125
Maximum age in population: 18.634765625
Average age in population: 16.6862646484375
Median age in population: 16.77001953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5441036
--- Timings ---
Current time: 1559314668492 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.0 seconds, 66.7%
Fitness Testing:      7.2 seconds, 20.0%
Report:               4.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -63                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 22                 
Correct output: 10                  | Program output: 71                 
Correct output: 24                  | Program output: 81                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 58                 
Correct output: 37                  | Program output: 67                 
Correct output: 2                   | Program output: 90                 
Correct output: 20                  | Program output: 74                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 36                 
Correct output: 34                  | Program output: 63                 
Correct output: 44                  | Program output: 49                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 62                 
Correct output: 13                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 38                 
Correct output: 27                  | Program output: 82                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -50                
Correct output: -91                 | Program output: 53                 
Correct output: -7                  | Program output: 86                 
Correct output: -22                 | Program output: 65                 
Correct output: -96                 | Program output: -81                
Correct output: -79                 | Program output: -61                
Correct output: -95                 | Program output: 48                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: 57                 
Correct output: -72                 | Program output: -3                 
Correct output: 24                  | Program output: 92                 
Correct output: -93                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -12                
Correct output: -64                 | Program output: -52                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: 59                 
Correct output: -21                 | Program output: 96                 
Correct output: -24                 | Program output: 52                 
Correct output: -78                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 84                 
Correct output: -92                 | Program output: -42                
Correct output: -55                 | Program output: 40                 
Correct output: -24                 | Program output: -13                
Correct output: -81                 | Program output: 89                 
Correct output: -94                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -76                
Correct output: -30                 | Program output: -10                
Correct output: -95                 | Program output: 54                 
Correct output: -85                 | Program output: -40                
Correct output: -82                 | Program output: 15                 
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 15                 
Correct output: -66                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: 21                 
Correct output: -95                 | Program output: 71                 
Correct output: -69                 | Program output: 93                 
Correct output: -88                 | Program output: -33                
Correct output: -15                 | Program output: 57                 
Correct output: -80                 | Program output: 64                 
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -45                
Correct output: -92                 | Program output: 41                 
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_dup_times exec_while (exec_yankdup) integer_dup_items in3 print_boolean integer_dup_items print_boolean integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if () (boolean_invert_first_then_and boolean_yankdup exec_yank print_integer integer_rot) exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not)) () ()) ()) () ())
Lexicase best errors: [0 1 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_dup_times exec_while (exec_yankdup) integer_dup_items in3 print_boolean integer_dup_items print_boolean integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if () (boolean_invert_first_then_and boolean_yankdup exec_yank print_integer integer_rot) exec_swap (exec_rot (in2 boolean_swap exec_pop (boolean_not)) () ()) ()) () ())
Zero cases best errors: [0 1 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 83 508 83 371 156 271 83 271 371)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (271 83 508 83 371 156 271 83 271 371)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and})
Best program: (integer_mod integer_dup_items boolean_shove boolean_rot boolean_swap boolean_invert_second_then_and exec_s (integer_swap exec_if (integer_dup_times exec_noop exec_yank print_integer exec_do*times () exec_swap (exec_rot (boolean_empty boolean_swap exec_rot (in2 boolean_swap exec_pop (boolean_not exec_y (in4 boolean_dup) integer_lte boolean_yankdup in1)) (exec_do*while (exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_dup_times exec_k (exec_do*range () boolean_empty boolean_and) ())) () ())) ()) () ()) ()) ()) () ())
Errors: [1 0 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 66
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 7.532
Median total errors in population: 8
Error averages by case: (0.729 0.917 0.492 0.917 0.629 0.844 0.729 0.917 0.729 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.155
Average program size in population (points): 52.31
Average percent parens in population: 0.274
Minimum age in population: 15.25
Maximum age in population: 20.13232421875
Average age in population: 18.08520751953125
Median age in population: 18.13232421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5769148
--- Timings ---
Current time: 1559314671672 milliseconds
Total Time:          39.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 68.0%
Fitness Testing:      7.5 seconds, 19.2%
Report:               4.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -94} {:close 0, :instruction -82} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Lexicase best program: (integer_add in3 exec_do*range (print_integer integer_add integer_dup_items) boolean_swap exec_flush boolean_dup_items exec_dup_times () integer_min exec_dup_times (-94 -82 exec_swap (integer_add boolean_and exec_k () (exec_yank print_newline print_newline boolean_dup_times exec_if () (boolean_yank in1))) ()))
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -94} {:close 0, :instruction -82} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Zero cases best program: (integer_add in3 exec_do*range (print_integer integer_add integer_dup_items) boolean_swap exec_flush boolean_dup_items exec_dup_times () integer_min exec_dup_times (-94 -82 exec_swap (integer_add boolean_and exec_k () (exec_yank print_newline print_newline boolean_dup_times exec_if () (boolean_yank in1))) ()))
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 106 296 176 105 312 296 175 890 178)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (176 106 296 176 105 312 296 175 890 178)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -94} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub})
Best program: (boolean_yankdup boolean_or in3 exec_do*range (print_integer integer_add integer_dup_items) boolean_swap boolean_invert_second_then_and boolean_dup_items exec_dup_times () integer_min exec_dup_times (-94 exec_k (exec_swap (integer_max integer_mult exec_k () (exec_yank integer_dup_times print_newline boolean_dup_times exec_if () (integer_gt integer_sub))) ()) ()))
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.29
Median total errors in population: 7
Error averages by case: (0.824 0.894 0.704 0.824 0.895 0.688 0.704 0.825 0.11 0.822)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.041
Average program size in population (points): 55.23
Average percent parens in population: 0.322
Minimum age in population: 16.94921875
Maximum age in population: 21.66015625
Average age in population: 19.60510034179688
Median age in population: 19.6541748046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6106739
--- Timings ---
Current time: 1559314674603 milliseconds
Total Time:          42.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.0 seconds, 68.9%
Fitness Testing:      7.9 seconds, 18.7%
Report:               5.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 3, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_847} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_swap (integer_swap integer_dup_times) (integer_max integer_pop tag_boolean_847) boolean_or boolean_dup boolean_invert_second_then_and integer_eq boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range (boolean_empty boolean_and) in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or) exec_empty print_boolean) boolean_and exec_do*count (boolean_invert_second_then_and) in2) integer_eq integer_yankdup integer_lt) (exec_s_when_autoconstructing () () (boolean_rot integer_add integer_gte) boolean_pop)))))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 3, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction tag_boolean_847} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and exec_swap (integer_swap integer_dup_times) (integer_max integer_pop tag_boolean_847) boolean_or boolean_dup boolean_invert_second_then_and integer_eq boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (exec_do*range (boolean_empty boolean_and) in4 exec_y (exec_rot (boolean_swap integer_lte) (boolean_xor) (print_exec (in1 boolean_or) exec_empty print_boolean) boolean_and exec_do*count (boolean_invert_second_then_and) in2) integer_eq integer_yankdup integer_lt) (exec_s_when_autoconstructing () () (boolean_rot integer_add integer_gte) boolean_pop)))))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 891 887 890 100 414 100 176 414 102)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (177 891 887 890 100 414 100 176 414 102)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_428} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction 51} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction in3})
Best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) tag_exec_428 (boolean_invert_second_then_and integer_max in4 exec_do*while (boolean_invert_second_then_and exec_s (integer_rot) (integer_pop integer_pop) (boolean_or) boolean_dup boolean_frominteger integer_eq exec_dup (exec_dup (boolean_rot exec_dup_items integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (exec_yank) boolean_invert_second_then_and 51) integer_lte boolean_yankdup in1)) exec_do*while (exec_empty print_integer exec_s (exec_flush exec_flush boolean_or integer_lt) (exec_s_when_autoconstructing () () (integer_lt integer_add boolean_empty) boolean_pop boolean_invert_first_then_and exec_s (in3) () ()) ())))
Errors: [1 0 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 73
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 5.849
Median total errors in population: 5
Error averages by case: (0.823 0.109 0.113 0.11 0.9 0.586 0.9 0.824 0.586 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.438
Average program size in population (points): 50.119
Average percent parens in population: 0.275
Minimum age in population: 18.3173828125
Maximum age in population: 22.8885498046875
Average age in population: 21.08545056152344
Median age in population: 21.1444091796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6438149
--- Timings ---
Current time: 1559314677382 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.3 seconds, 69.6%
Fitness Testing:      8.2 seconds, 18.2%
Report:               5.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte})
Lexicase best program: (integer_sub in2 exec_swap () (exec_dup_times () boolean_dup boolean_and integer_rot) integer_add integer_dup_times exec_when (integer_pop integer_pop) boolean_or integer_rot integer_add integer_dup_times integer_max integer_pop integer_pop boolean_or boolean_dup boolean_invert_second_then_and integer_eq exec_dup (exec_dup (boolean_rot exec_dup (integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup in1)) exec_do*while (exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_lt) exec_s_when_autoconstructing () () (boolean_rot integer_add integer_gte)) () ())))
Lexicase best errors: [1 1 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte})
Zero cases best program: (integer_sub in2 exec_swap () (exec_dup_times () boolean_dup boolean_and integer_rot) integer_add integer_dup_times exec_when (integer_pop integer_pop) boolean_or integer_rot integer_add integer_dup_times integer_max integer_pop integer_pop boolean_or boolean_dup boolean_invert_second_then_and integer_eq exec_dup (exec_dup (boolean_rot exec_dup (integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup in1)) exec_do*while (exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_lt) exec_s_when_autoconstructing () () (boolean_rot integer_add integer_gte)) () ())))
Zero cases best errors: [1 1 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 374 1000 271 1000 216 216 373 270 216)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (374 374 0 271 0 216 216 373 270 216)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub})
Best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not integer_dec boolean_swap boolean_invert_second_then_and exec_noop integer_swap exec_if () (exec_swap (integer_max integer_mult exec_k () (exec_yank integer_dup_times print_newline boolean_dup_times exec_if () (integer_gt integer_sub))) ()))
Errors: [0 0 1 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 25
Size: 37
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.69
Median total errors in population: 7
Error averages by case: (0.626 0.626 1.0 0.729 1.0 0.784 0.784 0.627 0.73 0.784)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 38.057
Average program size in population (points): 52.991
Average percent parens in population: 0.269
Minimum age in population: 19.685546875
Maximum age in population: 24.33612060546875
Average age in population: 22.59542779541016
Median age in population: 22.65216064453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6804920
--- Timings ---
Current time: 1559314680023 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 70.2%
Fitness Testing:      8.6 seconds, 18.0%
Report:               5.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 24                 
Correct output: 10                  | Program output: 95                 
Correct output: 24                  | Program output: 45                 
Correct output: 26                  | Program output: 68                 
Correct output: 43                  | Program output: 92                 
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 20                  | Program output: 90                 
Correct output: 50                  | Program output: 90                 
Correct output: 18                  | Program output: 22                 
Correct output: 0                   | Program output: 49                 
Correct output: 34                  | Program output: 54                 
Correct output: 44                  | Program output: 96                 
Correct output: 65                  | Program output: 65                 
Correct output: 9                   | Program output: 54                 
Correct output: 13                  | Program output: 53                 
Correct output: 37                  | Program output: 82                 
Correct output: 8                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 30                 
Correct output: -89                 | Program output: 3                  
Correct output: -98                 | Program output: 78                 
Correct output: -91                 | Program output: -68                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -2                 
Correct output: -7                  | Program output: 82                 
Correct output: -22                 | Program output: 23                 
Correct output: -96                 | Program output: -76                
Correct output: -79                 | Program output: -12                
Correct output: -95                 | Program output: 72                 
Correct output: -87                 | Program output: 96                 
Correct output: -62                 | Program output: 47                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 50                 
Correct output: 24                  | Program output: 66                 
Correct output: -93                 | Program output: -56                
Correct output: 12                  | Program output: 74                 
Correct output: -96                 | Program output: 70                 
Correct output: -98                 | Program output: 62                 
Correct output: -57                 | Program output: 47                 
Correct output: -64                 | Program output: -15                
Correct output: -67                 | Program output: 48                 
Correct output: -94                 | Program output: 74                 
Correct output: -57                 | Program output: 38                 
Correct output: 26                  | Program output: 76                 
Correct output: -23                 | Program output: 72                 
Correct output: -21                 | Program output: 52                 
Correct output: -24                 | Program output: 11                 
Correct output: -78                 | Program output: -77                
Correct output: -87                 | Program output: 30                 
Correct output: -74                 | Program output: 89                 
Correct output: 19                  | Program output: 40                 
Correct output: -92                 | Program output: 33                 
Correct output: -55                 | Program output: 46                 
Correct output: -24                 | Program output: 24                 
Correct output: -81                 | Program output: 12                 
Correct output: -94                 | Program output: -89                
Correct output: -85                 | Program output: 37                 
Correct output: -77                 | Program output: 46                 
Correct output: -30                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: 95                 
Correct output: -82                 | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -66                 | Program output: -37                
Correct output: -87                 | Program output: -17                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -42                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 39                 
Correct output: -15                 | Program output: 55                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 62                 
Correct output: -82                 | Program output: -30                
Correct output: -62                 | Program output: -52                
Correct output: -92                 | Program output: -80                
Correct output: -44                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_mod boolean_yankdup exec_when () boolean_swap integer_dup integer_gte boolean_or exec_dup_times (boolean_dup boolean_and exec_yank) integer_add boolean_not integer_max boolean_and boolean_dup boolean_invert_second_then_and integer_eq exec_dup (exec_dup (boolean_rot exec_dup (integer_yankdup boolean_dup_items) boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup in1)) exec_do*while (exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_lt) integer_stackdepth) (integer_pop) (exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_416 exec_swap (print_boolean exec_dup (boolean_dup_items) exec_dup_items exec_flush) ())))))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_mod boolean_yankdup exec_when () boolean_swap integer_dup integer_gte boolean_or exec_dup_times (boolean_dup boolean_and exec_yank) integer_add boolean_not integer_max boolean_and boolean_dup boolean_invert_second_then_and integer_eq exec_dup (exec_dup (boolean_rot exec_dup (integer_yankdup boolean_dup_items) boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup in1)) exec_do*while (exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_lt) integer_stackdepth) (integer_pop) (exec_dup_times () in4 boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_416 exec_swap (print_boolean exec_dup (boolean_dup_items) exec_dup_items exec_flush) ())))))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (559 1 328 890 330 330 1 659 233 328)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (559 1 328 890 330 330 1 659 233 328)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup})
Best program: (integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove boolean_or exec_dup_times (boolean_dup boolean_and integer_rot) boolean_invert_first_then_and integer_dup_times integer_max integer_pop integer_pop boolean_or boolean_dup boolean_invert_second_then_and integer_eq exec_dup (exec_dup (boolean_rot exec_dup (integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup in1) exec_do*while (exec_empty print_integer exec_s (exec_flush exec_rot (exec_dup_times () integer_lt exec_s_when_autoconstructing () () (boolean_rot integer_add) integer_gte) (boolean_pop boolean_invert_first_then_and exec_s (exec_stackdepth) (boolean_invert_second_then_and in2) (boolean_not boolean_xor exec_yankdup)) ()) () ()))))
Errors: [0 1 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 76
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.341
Median total errors in population: 6
Error averages by case: (0.441 0.999 0.672 0.11 0.67 0.67 0.999 0.341 0.767 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.605
Average program size in population (points): 54.884
Average percent parens in population: 0.268
Minimum age in population: 20.80712890625
Maximum age in population: 25.91629028320312
Average age in population: 24.04698309326172
Median age in population: 24.10540771484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7186692
--- Timings ---
Current time: 1559314682785 milliseconds
Total Time:          50.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.5 seconds, 70.7%
Fitness Testing:      8.9 seconds, 17.8%
Report:               5.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 24                 
Correct output: 10                  | Program output: 95                 
Correct output: 24                  | Program output: 45                 
Correct output: 26                  | Program output: 68                 
Correct output: 43                  | Program output: 92                 
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 20                  | Program output: 90                 
Correct output: 50                  | Program output: 90                 
Correct output: 18                  | Program output: 22                 
Correct output: 0                   | Program output: 49                 
Correct output: 34                  | Program output: 54                 
Correct output: 44                  | Program output: 96                 
Correct output: 65                  | Program output: 65                 
Correct output: 9                   | Program output: 54                 
Correct output: 13                  | Program output: 53                 
Correct output: 37                  | Program output: 82                 
Correct output: 8                   | Program output: 25                 
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 30                 
Correct output: -89                 | Program output: 3                  
Correct output: -98                 | Program output: 78                 
Correct output: -91                 | Program output: -68                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -2                 
Correct output: -7                  | Program output: 82                 
Correct output: -22                 | Program output: 23                 
Correct output: -96                 | Program output: -76                
Correct output: -79                 | Program output: -12                
Correct output: -95                 | Program output: 72                 
Correct output: -87                 | Program output: 96                 
Correct output: -62                 | Program output: 47                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 50                 
Correct output: 24                  | Program output: 66                 
Correct output: -93                 | Program output: -56                
Correct output: 12                  | Program output: 74                 
Correct output: -96                 | Program output: 70                 
Correct output: -98                 | Program output: 62                 
Correct output: -57                 | Program output: 47                 
Correct output: -64                 | Program output: -15                
Correct output: -67                 | Program output: 48                 
Correct output: -94                 | Program output: 74                 
Correct output: -57                 | Program output: 38                 
Correct output: 26                  | Program output: 76                 
Correct output: -23                 | Program output: 72                 
Correct output: -21                 | Program output: 52                 
Correct output: -24                 | Program output: 11                 
Correct output: -78                 | Program output: -77                
Correct output: -87                 | Program output: 30                 
Correct output: -74                 | Program output: 89                 
Correct output: 19                  | Program output: 40                 
Correct output: -92                 | Program output: 33                 
Correct output: -55                 | Program output: 46                 
Correct output: -24                 | Program output: 24                 
Correct output: -81                 | Program output: 12                 
Correct output: -94                 | Program output: -89                
Correct output: -85                 | Program output: 37                 
Correct output: -77                 | Program output: 46                 
Correct output: -30                 | Program output: 86                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: 95                 
Correct output: -82                 | Program output: -5                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -66                 | Program output: -37                
Correct output: -87                 | Program output: -17                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -42                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 39                 
Correct output: -15                 | Program output: 55                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 62                 
Correct output: -82                 | Program output: -30                
Correct output: -62                 | Program output: -52                
Correct output: -92                 | Program output: -80                
Correct output: -44                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s})
Lexicase best program: (integer_mod boolean_yankdup exec_when () integer_mod integer_min exec_when () boolean_swap integer_dup boolean_shove exec_do*range (exec_dup_times (boolean_dup boolean_and exec_yank) integer_add) boolean_not integer_max boolean_and boolean_dup in3 integer_pop boolean_or boolean_dup exec_eq integer_eq exec_dup (exec_dup (boolean_rot integer_empty integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup boolean_yankdup in1)) exec_do*while (exec_empty print_integer exec_s () () ()))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s})
Zero cases best program: (integer_mod boolean_yankdup exec_when () integer_mod integer_min exec_when () boolean_swap integer_dup boolean_shove exec_do*range (exec_dup_times (boolean_dup boolean_and exec_yank) integer_add) boolean_not integer_max boolean_and boolean_dup in3 integer_pop boolean_or boolean_dup exec_eq integer_eq exec_dup (exec_dup (boolean_rot integer_empty integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 boolean_dup) integer_lte boolean_yankdup boolean_yankdup in1)) exec_do*while (exec_empty print_integer exec_s () () ()))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 328 142 196 206 328 534 872 328 196)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (196 328 142 196 206 328 534 872 328 196)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer})
Best program: (integer_mod boolean_shove boolean_or integer_max exec_dup_items integer_pop boolean_or boolean_dup boolean_invert_second_then_and integer_eq exec_dup (exec_dup (boolean_rot exec_dup (integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 integer_rot) integer_lte boolean_yankdup in1)) exec_do*while (exec_empty exec_do*while (exec_empty print_integer exec_s (exec_flush exec_y_when_autoconstructing (print_integer)) () ()))))
Errors: [1 0 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 44
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.674
Median total errors in population: 6
Error averages by case: (0.804 0.672 0.858 0.804 0.794 0.672 0.466 0.128 0.672 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.662
Average program size in population (points): 62.942
Average percent parens in population: 0.255
Minimum age in population: 22.13427734375
Maximum age in population: 27.24516296386719
Average age in population: 25.50869104003906
Median age in population: 25.57715606689453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7592590
--- Timings ---
Current time: 1559314685720 milliseconds
Total Time:          53.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.7 seconds, 71.0%
Fitness Testing:      9.3 seconds, 17.5%
Report:               6.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -63                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 22                 
Correct output: 10                  | Program output: 71                 
Correct output: 24                  | Program output: 81                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 58                 
Correct output: 37                  | Program output: 67                 
Correct output: 2                   | Program output: 90                 
Correct output: 20                  | Program output: 74                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 36                 
Correct output: 34                  | Program output: 63                 
Correct output: 44                  | Program output: 49                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 62                 
Correct output: 13                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 38                 
Correct output: 27                  | Program output: 82                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -50                
Correct output: -91                 | Program output: 53                 
Correct output: -7                  | Program output: 86                 
Correct output: -22                 | Program output: 65                 
Correct output: -96                 | Program output: -81                
Correct output: -79                 | Program output: -61                
Correct output: -95                 | Program output: 48                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: 57                 
Correct output: -72                 | Program output: -3                 
Correct output: 24                  | Program output: 92                 
Correct output: -93                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -12                
Correct output: -64                 | Program output: -52                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: 59                 
Correct output: -21                 | Program output: 96                 
Correct output: -24                 | Program output: 52                 
Correct output: -78                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 84                 
Correct output: -92                 | Program output: -42                
Correct output: -55                 | Program output: 40                 
Correct output: -24                 | Program output: -13                
Correct output: -81                 | Program output: 89                 
Correct output: -94                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -76                
Correct output: -30                 | Program output: -10                
Correct output: -95                 | Program output: 54                 
Correct output: -85                 | Program output: -40                
Correct output: -82                 | Program output: 15                 
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 15                 
Correct output: -66                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: 21                 
Correct output: -95                 | Program output: 71                 
Correct output: -69                 | Program output: 93                 
Correct output: -88                 | Program output: -33                
Correct output: -15                 | Program output: 57                 
Correct output: -80                 | Program output: 64                 
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -45                
Correct output: -92                 | Program output: 41                 
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1})
Lexicase best program: (print_integer integer_dec integer_inc in3 boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Lexicase best errors: [0 1 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 19
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1})
Zero cases best program: (print_integer integer_dec integer_inc in3 boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Zero cases best errors: [0 1 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 19
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 342 342 111 278 277 136 136 111 136)
Population mean number of elite cases: 1.98
Count of perfect (error zero) individuals by case: (111 342 342 111 278 277 136 136 111 136)
Population mean number of perfect (error zero) cases: 1.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Best program: (boolean_flush boolean_yankdup exec_when () integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove boolean_or exec_dup_times (boolean_dup boolean_and exec_yank) integer_add boolean_not integer_max boolean_and boolean_dup boolean_invert_second_then_and integer_pop boolean_or boolean_dup boolean_xor integer_eq exec_dup (exec_s_when_autoconstructing (boolean_rot boolean_dup integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (integer_shove integer_stackdepth) integer_lte boolean_yankdup boolean_yankdup in1) () (in2 exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_lt) integer_stackdepth) (integer_pop) (exec_dup_times () integer_lt boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_416 exec_swap (print_boolean boolean_yankdup boolean_dup_items) (exec_dup_items exec_flush)))))))
Errors: [1 1 1 1 1 1 0 0 1 0]
Total: 7
Mean: 0.7
Genome size: 66
Size: 84
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 8.02
Median total errors in population: 8
Error averages by case: (0.889 0.658 0.658 0.889 0.722 0.723 0.864 0.864 0.889 0.864)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.497
Average program size in population (points): 59.058
Average percent parens in population: 0.259
Minimum age in population: 24.02734375
Maximum age in population: 28.82935333251953
Average age in population: 26.96626734161377
Median age in population: 27.01220703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7994763
--- Timings ---
Current time: 1559314688733 milliseconds
Total Time:          56.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.1 seconds, 71.4%
Fitness Testing:      9.7 seconds, 17.2%
Report:               6.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -63                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 22                 
Correct output: 10                  | Program output: 71                 
Correct output: 24                  | Program output: 81                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 58                 
Correct output: 37                  | Program output: 67                 
Correct output: 2                   | Program output: 90                 
Correct output: 20                  | Program output: 74                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 36                 
Correct output: 34                  | Program output: 63                 
Correct output: 44                  | Program output: 49                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 62                 
Correct output: 13                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 38                 
Correct output: 27                  | Program output: 82                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -50                
Correct output: -91                 | Program output: 53                 
Correct output: -7                  | Program output: 86                 
Correct output: -22                 | Program output: 65                 
Correct output: -96                 | Program output: -81                
Correct output: -79                 | Program output: -61                
Correct output: -95                 | Program output: 48                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: 57                 
Correct output: -72                 | Program output: -3                 
Correct output: 24                  | Program output: 92                 
Correct output: -93                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -12                
Correct output: -64                 | Program output: -52                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: 59                 
Correct output: -21                 | Program output: 96                 
Correct output: -24                 | Program output: 52                 
Correct output: -78                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 84                 
Correct output: -92                 | Program output: -42                
Correct output: -55                 | Program output: 40                 
Correct output: -24                 | Program output: -13                
Correct output: -81                 | Program output: 89                 
Correct output: -94                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -76                
Correct output: -30                 | Program output: -10                
Correct output: -95                 | Program output: 54                 
Correct output: -85                 | Program output: -40                
Correct output: -82                 | Program output: 15                 
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 15                 
Correct output: -66                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: 21                 
Correct output: -95                 | Program output: 71                 
Correct output: -69                 | Program output: 93                 
Correct output: -88                 | Program output: -33                
Correct output: -15                 | Program output: 57                 
Correct output: -80                 | Program output: 64                 
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -45                
Correct output: -92                 | Program output: 41                 
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction tagged_390} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (print_integer integer_dec integer_inc in4 tagged_390 integer_shove integer_add exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_pop) (boolean_dup_items))
Lexicase best errors: [1 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 15
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction tagged_390} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (print_integer integer_dec integer_inc in4 tagged_390 integer_shove integer_add exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_pop) (boolean_dup_items))
Zero cases best errors: [1 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 15
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 433 169 264 275 169 275 168 169 165)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (264 433 169 264 275 169 275 168 169 165)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_416} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Best program: (boolean_flush boolean_yankdup exec_when () integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove boolean_or exec_dup_times (boolean_dup boolean_and exec_yank) integer_add boolean_not integer_max boolean_and boolean_dup boolean_invert_second_then_and integer_pop boolean_or boolean_dup boolean_xor integer_eq exec_dup (exec_s_when_autoconstructing (boolean_rot boolean_dup integer_yankdup boolean_dup boolean_rot boolean_or exec_pop (in4 integer_stackdepth) integer_lte boolean_yankdup boolean_yankdup in1) () (in2 exec_empty print_integer exec_s (exec_flush exec_flush exec_dup_times (integer_lt) integer_stackdepth) (integer_pop) (exec_dup_times () integer_lt boolean_yank integer_dup print_integer boolean_dup_items exec_y (integer_add exec_y (tagged_416 exec_swap (print_boolean boolean_yankdup boolean_dup_items) (exec_dup_items exec_flush)))))))
Errors: [0 0 1 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 66
Size: 84
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.649
Median total errors in population: 7
Error averages by case: (0.736 0.567 0.831 0.736 0.725 0.831 0.725 0.832 0.831 0.835)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.325
Average program size in population (points): 56.018
Average percent parens in population: 0.237
Minimum age in population: 25.22265625
Maximum age in population: 30.34884643554688
Average age in population: 28.38632399749756
Median age in population: 28.44432640075684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8364296
--- Timings ---
Current time: 1559314691551 milliseconds
Total Time:          59.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.3 seconds, 71.7%
Fitness Testing:     10.0 seconds, 17.0%
Report:               6.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_98} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_xor exec_rot (tagged_98 exec_dup_items exec_pop (boolean_stackdepth) integer_inc in3 boolean_not integer_sub print_integer exec_eq integer_add exec_when ()) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_98} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_xor exec_rot (tagged_98 exec_dup_items exec_pop (boolean_stackdepth) integer_inc in3 boolean_not integer_sub print_integer exec_eq integer_add exec_when ()) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 216 887 271 271 681 888 217 216 194)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (215 216 887 271 271 681 888 217 216 194)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Best program: (in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 7
Size: 8
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 5.944
Median total errors in population: 6
Error averages by case: (0.785 0.784 0.113 0.729 0.729 0.319 0.112 0.783 0.784 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.794
Average program size in population (points): 54.72
Average percent parens in population: 0.248
Minimum age in population: 27.27252197265625
Maximum age in population: 31.7794075012207
Average age in population: 29.86002278327942
Median age in population: 29.90202713012695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8733588
--- Timings ---
Current time: 1559314694436 milliseconds
Total Time:          62.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.7 seconds, 72.0%
Fitness Testing:     10.4 seconds, 16.7%
Report:               6.9 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_mod boolean_yankdup exec_when () in4 tagged_390 print_boolean integer_add exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_pop) (boolean_dup_items))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 1, :instruction in4} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_mod boolean_yankdup exec_when () in4 tagged_390 print_boolean integer_add exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_pop) (boolean_dup_items))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 270 269 1000 532 531 270 531 270 270)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (0 270 269 0 532 531 270 531 270 270)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction tagged_390} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items})
Best program: (print_integer integer_dec integer_inc in4 tagged_390 integer_shove integer_add exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_pop) (boolean_dup_items))
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 15
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.057
Median total errors in population: 7
Error averages by case: (1.0 0.73 0.731 1.0 0.468 0.469 0.73 0.469 0.73 0.73)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 29.506
Average program size in population (points): 40.676
Average percent parens in population: 0.249
Minimum age in population: 28.58962249755859
Maximum age in population: 33.12491703033447
Average age in population: 31.42537413215637
Median age in population: 31.48581409454346
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9017692
--- Timings ---
Current time: 1559314697239 milliseconds
Total Time:          64.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.0 seconds, 72.5%
Fitness Testing:     10.7 seconds, 16.5%
Report:               7.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_sub in4 exec_swap () (print_integer exec_while (exec_shove ()) exec_stackdepth boolean_not boolean_rot boolean_swap) boolean_not exec_s (integer_swap exec_if () (boolean_invert_first_then_and boolean_and exec_yank print_integer exec_do*times () exec_swap () ())) () ())
Lexicase best errors: [0 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.394
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_sub in4 exec_swap () (print_integer exec_while (exec_shove ()) exec_stackdepth boolean_not boolean_rot boolean_swap) boolean_not exec_s (integer_swap exec_if () (boolean_invert_first_then_and boolean_and exec_yank print_integer exec_do*times () exec_swap () ())) () ())
Zero cases best errors: [0 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.394
--- Lexicase Population Statistics ---
Count of elite individuals by case: (600 599 598 336 598 336 1000 1000 939 1)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (600 599 598 336 598 336 0 0 939 1)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items})
Best program: (print_integer integer_dec integer_inc in4 tagged_390 print_boolean integer_add exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_pop) (boolean_dup_items))
Errors: [0 0 0 1 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 12
Size: 15
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.993
Median total errors in population: 5
Error averages by case: (0.4 0.401 0.402 0.664 0.402 0.664 1.0 1.0 0.061 0.999)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 27.99
Average program size in population (points): 39.755
Average percent parens in population: 0.271
Minimum age in population: 30.12798118591309
Maximum age in population: 34.85421752929688
Average age in population: 32.89372802591324
Median age in population: 32.95817852020264
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9310619
--- Timings ---
Current time: 1559314699347 milliseconds
Total Time:          66.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.7 seconds, 72.7%
Fitness Testing:     11.0 seconds, 16.4%
Report:               7.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_sub exec_s_when_autoconstructing (exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not integer_mod) (boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove boolean_or boolean_yank boolean_dup boolean_and integer_max) (exec_do*times () integer_dup_times) integer_max integer_pop integer_yank exec_noop boolean_dup_items in3 boolean_not exec_do*while (integer_gt) print_boolean print_integer boolean_not boolean_dup_items boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (integer_max boolean_dup) () in4) integer_dec exec_k_when_autoconstructing (integer_gt exec_empty exec_do*times (exec_k (exec_do*times (boolean_empty integer_min in4 exec_y (exec_flush boolean_swap integer_lte) boolean_xor) print_exec (in1 boolean_or) exec_flush) ())) ())))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_max} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_sub exec_s_when_autoconstructing (exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not integer_mod) (boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove boolean_or boolean_yank boolean_dup boolean_and integer_max) (exec_do*times () integer_dup_times) integer_max integer_pop integer_yank exec_noop boolean_dup_items in3 boolean_not exec_do*while (integer_gt) print_boolean print_integer boolean_not boolean_dup_items boolean_swap exec_pop (boolean_not exec_y (exec_do*times (exec_k (integer_max boolean_dup) () in4) integer_dec exec_k_when_autoconstructing (integer_gt exec_empty exec_do*times (exec_k (exec_do*times (boolean_empty integer_min in4 exec_y (exec_flush boolean_swap integer_lte) boolean_xor) print_exec (in1 boolean_or) exec_flush) ())) ())))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 272 938 272 943 483 269 187 269 483)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (272 272 938 272 943 483 269 187 269 483)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -40} {:close 1, :instruction in1})
Best program: (boolean_shove integer_inc exec_eq integer_sub exec_pop (integer_lt in3 print_integer integer_swap in3 integer_dup_times -40 in1))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 5.612
Median total errors in population: 6
Error averages by case: (0.728 0.728 0.062 0.728 0.057 0.517 0.731 0.813 0.731 0.517)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.072
Average program size in population (points): 33.823
Average percent parens in population: 0.258
Minimum age in population: 31.2579402923584
Maximum age in population: 36.30802607536316
Average age in population: 34.2309912302494
Median age in population: 34.3016654253006
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9569522
--- Timings ---
Current time: 1559314701497 milliseconds
Total Time:          69.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.4 seconds, 73.0%
Fitness Testing:     11.2 seconds, 16.3%
Report:               7.3 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (print_integer integer_dec in4 exec_swap () (print_integer exec_swap () (exec_dup_times (exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot exec_yank) boolean_invert_second_then_and exec_s (boolean_and exec_if () (boolean_invert_first_then_and exec_noop exec_yank integer_empty exec_do*times () integer_stackdepth)) () ()))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (print_integer integer_dec in4 exec_swap () (print_integer exec_swap () (exec_dup_times (exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot exec_yank) boolean_invert_second_then_and exec_s (boolean_and exec_if () (boolean_invert_first_then_and exec_noop exec_yank integer_empty exec_do*times () integer_stackdepth)) () ()))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 580 256 1000 1000 933 256 580 256 99)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (0 580 256 0 0 933 256 580 256 99)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap})
Best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_do*range (exec_do*count (boolean_rot boolean_swap)))
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 16
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 7.04
Median total errors in population: 7
Error averages by case: (1.0 0.42 0.744 1.0 1.0 0.067 0.744 0.42 0.744 0.901)
Error minima by case: (1 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 23.221
Average program size in population (points): 32.162
Average percent parens in population: 0.244
Minimum age in population: 32.49785614013672
Maximum age in population: 37.73241150379181
Average age in population: 35.77132404279709
Median age in population: 35.82692921161652
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9811563
--- Timings ---
Current time: 1559314703650 milliseconds
Total Time:          71.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.2 seconds, 73.3%
Fitness Testing:     11.5 seconds, 16.1%
Report:               7.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Lexicase best program: (boolean_shove integer_max print_boolean integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Zero cases best program: (boolean_shove integer_max print_boolean integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 1000 943 942 470 1000 1000 1000 1000 315)
Population mean number of elite cases: 7.99
Count of perfect (error zero) individuals by case: (316 0 943 942 470 0 0 0 0 315)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -40} {:close 1, :instruction in1})
Best program: (boolean_shove integer_inc exec_eq integer_sub exec_pop (integer_lt in3 print_integer integer_swap in3 integer_dup_times -40 in1))
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 7.014
Median total errors in population: 7
Error averages by case: (0.684 1.0 0.057 0.058 0.53 1.0 1.0 1.0 1.0 0.685)
Error minima by case: (0 1 0 0 0 1 1 1 1 0)
Average genome size in population (length): 22.384
Average program size in population (points): 31.363
Average percent parens in population: 0.258
Minimum age in population: 33.49785614013672
Maximum age in population: 39.17507946491241
Average age in population: 37.21764737415314
Median age in population: 37.26432314515114
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10084063
--- Timings ---
Current time: 1559314705738 milliseconds
Total Time:          73.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.9 seconds, 73.5%
Fitness Testing:     11.8 seconds, 16.1%
Report:               7.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 49                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 38                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 67                 
Correct output: 18                  | Program output: 21                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 73                 
Correct output: 9                   | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 66                 
Correct output: 8                   | Program output: 19                 
Correct output: 14                  | Program output: 89                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: 48                 
Correct output: -98                 | Program output: 32                 
Correct output: -91                 | Program output: -26                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -16                
Correct output: -62                 | Program output: -32                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: 28                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 13                 
Correct output: -96                 | Program output: -68                
Correct output: -98                 | Program output: -28                
Correct output: -57                 | Program output: 21                 
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -52                
Correct output: -94                 | Program output: 93                 
Correct output: -57                 | Program output: -48                
Correct output: 26                  | Program output: 32                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: 11                 
Correct output: -87                 | Program output: -1                 
Correct output: -74                 | Program output: 82                 
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -2                 
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: 49                 
Correct output: -62                 | Program output: 17                 
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -71                
Correct output: -6                  | Program output: 54                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 84                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 93                 
Correct output: -97                 | Program output: 39                 
Correct output: -82                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_while (exec_shove ()) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_not exec_s (integer_swap exec_if () (boolean_invert_first_then_and boolean_and exec_yank print_integer exec_do*times () exec_swap () ())) () ())
Lexicase best errors: [1 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.389
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_sub in4 exec_swap () (print_integer exec_while (boolean_dup_times)) exec_while (exec_shove ()) exec_stackdepth boolean_not boolean_rot boolean_swap boolean_not exec_s (integer_swap exec_if () (boolean_invert_first_then_and boolean_and exec_yank print_integer exec_do*times () exec_swap () ())) () ())
Zero cases best errors: [1 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.389
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 315 315 1 315 616 616 1000 932)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (0 0 315 315 1 315 616 616 0 932)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_sub integer_sub in4 exec_swap () (print_integer exec_swap () (print_integer exec_while (boolean_dup_times)) exec_stackdepth boolean_not boolean_rot exec_yank) boolean_invert_second_then_and integer_empty boolean_not exec_if (boolean_invert_first_then_and exec_noop exec_yank integer_empty exec_do*times () integer_stackdepth boolean_invert_second_then_and) ())
Errors: [1 1 0 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.89
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.685 0.685 0.999 0.685 0.384 0.384 1.0 0.068)
Error minima by case: (1 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 24.065
Average program size in population (points): 33.492
Average percent parens in population: 0.253
Minimum age in population: 35.74958801269531
Maximum age in population: 40.5674994289875
Average age in population: 38.6612445974946
Median age in population: 38.7561878412962
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10360378
--- Timings ---
Current time: 1559314708198 milliseconds
Total Time:          75.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 73.8%
Fitness Testing:     12.1 seconds, 15.9%
Report:               7.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction in3})
Lexicase best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_dup_items) (exec_dup_times () integer_min integer_lt print_boolean) exec_swap (integer_swap) (in3))
Lexicase best errors: [0 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction in3})
Zero cases best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_dup_items) (exec_dup_times () integer_min integer_lt print_boolean) exec_swap (integer_swap) (in3))
Zero cases best errors: [0 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (321 1 150 321 321 151 457 321 929 929)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (321 1 150 321 321 151 457 321 929 929)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction 57} {:close 0, :instruction boolean_and})
Best program: (boolean_yankdup boolean_or in3 print_integer exec_while (boolean_dup_times) exec_do*range (exec_do*count (boolean_rot boolean_swap print_integer integer_eq boolean_dup_times)) in3 integer_mult integer_dup_items exec_dup (boolean_yankdup exec_dup_times (integer_swap exec_when (57 boolean_and))))
Errors: [0 1 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.099
Median total errors in population: 7
Error averages by case: (0.679 0.999 0.85 0.679 0.679 0.849 0.543 0.679 0.071 0.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.831
Average program size in population (points): 31.715
Average percent parens in population: 0.261
Minimum age in population: 36.74958801269531
Maximum age in population: 42.40926045179367
Average age in population: 40.40071058277786
Median age in population: 40.46037442982197
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10632149
--- Timings ---
Current time: 1559314710737 milliseconds
Total Time:          77.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 73.9%
Fitness Testing:     12.3 seconds, 15.8%
Report:               7.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot})
Lexicase best program: (boolean_yankdup integer_div in3 exec_do*range (print_integer boolean_yank integer_eq) exec_while (boolean_dup_times) boolean_empty boolean_not boolean_rot)
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot})
Zero cases best program: (boolean_yankdup integer_div in3 exec_do*range (print_integer boolean_yank integer_eq) exec_while (boolean_dup_times) boolean_empty boolean_not boolean_rot)
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 941 457 106 127 457 457 127 106 106)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (457 941 457 106 127 457 457 127 106 106)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -94} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 1, :instruction tagged_371})
Best program: (integer_add in3 exec_do*range (print_integer integer_stackdepth integer_dup_items boolean_swap exec_flush) boolean_dup_items exec_dup_times (integer_min exec_dup_times (-94 exec_rot (exec_swap (integer_add integer_mult exec_k () (exec_yank print_newline print_newline boolean_dup_times exec_if (boolean_yank tagged_371) ())) ()) () ())))
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 38
Percent parens: 0.342
--- Population Statistics ---
Average total errors in population: 6.659
Median total errors in population: 6
Error averages by case: (0.543 0.059 0.543 0.894 0.873 0.543 0.543 0.873 0.894 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.814
Average program size in population (points): 31.473
Average percent parens in population: 0.253
Minimum age in population: 38.90767598152161
Maximum age in population: 43.79168189316988
Average age in population: 41.93886693695188
Median age in population: 42.04127248749137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10858931
--- Timings ---
Current time: 1559314712895 milliseconds
Total Time:          80.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 73.8%
Fitness Testing:     12.6 seconds, 15.6%
Report:               8.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -63                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 22                 
Correct output: 10                  | Program output: 71                 
Correct output: 24                  | Program output: 81                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 58                 
Correct output: 37                  | Program output: 67                 
Correct output: 2                   | Program output: 90                 
Correct output: 20                  | Program output: 74                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 36                 
Correct output: 34                  | Program output: 63                 
Correct output: 44                  | Program output: 49                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 62                 
Correct output: 13                  | Program output: 99                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 38                 
Correct output: 27                  | Program output: 82                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -50                
Correct output: -91                 | Program output: 53                 
Correct output: -7                  | Program output: 86                 
Correct output: -22                 | Program output: 65                 
Correct output: -96                 | Program output: -81                
Correct output: -79                 | Program output: -61                
Correct output: -95                 | Program output: 48                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: 57                 
Correct output: -72                 | Program output: -3                 
Correct output: 24                  | Program output: 92                 
Correct output: -93                 | Program output: -50                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -12                
Correct output: -64                 | Program output: -52                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: 59                 
Correct output: -21                 | Program output: 96                 
Correct output: -24                 | Program output: 52                 
Correct output: -78                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 84                 
Correct output: -92                 | Program output: -42                
Correct output: -55                 | Program output: 40                 
Correct output: -24                 | Program output: -13                
Correct output: -81                 | Program output: 89                 
Correct output: -94                 | Program output: 52                 
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -76                
Correct output: -30                 | Program output: -10                
Correct output: -95                 | Program output: 54                 
Correct output: -85                 | Program output: -40                
Correct output: -82                 | Program output: 15                 
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 15                 
Correct output: -66                 | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: 21                 
Correct output: -95                 | Program output: 71                 
Correct output: -69                 | Program output: 93                 
Correct output: -88                 | Program output: -33                
Correct output: -15                 | Program output: 57                 
Correct output: -80                 | Program output: 64                 
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -45                
Correct output: -92                 | Program output: 41                 
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1})
Lexicase best program: (integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 boolean_or exec_pop (boolean_not exec_yank exec_do*times (exec_pop (exec_do*range (boolean_empty boolean_and) in4 exec_y (exec_rot () (boolean_swap integer_lte) (boolean_xor) print_exec (in1)))))) () ()))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1})
Zero cases best program: (integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 boolean_or exec_pop (boolean_not exec_yank exec_do*times (exec_pop (exec_do*range (boolean_empty boolean_and) in4 exec_y (exec_rot () (boolean_swap integer_lte) (boolean_xor) print_exec (in1)))))) () ()))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 912 1000 281 500 219 1000 282 281 913)
Population mean number of elite cases: 5.80
Count of perfect (error zero) individuals by case: (408 912 0 281 500 219 0 282 281 913)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in1})
Best program: (integer_stackdepth in4 exec_swap (print_integer exec_while (boolean_dup_times)) (exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 boolean_or exec_pop (boolean_not exec_yank exec_do*times (exec_pop (exec_do*range (boolean_empty boolean_and) in4 exec_y (exec_rot () (boolean_swap integer_lte) (boolean_xor) print_exec (in1)))))) () ()))
Errors: [1 0 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 47
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 6.204
Median total errors in population: 7
Error averages by case: (0.592 0.088 1.0 0.719 0.5 0.781 1.0 0.718 0.719 0.087)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 24.911
Average program size in population (points): 35.96
Average percent parens in population: 0.285
Minimum age in population: 39.95433473587036
Maximum age in population: 45.29984962940216
Average age in population: 43.30731157822907
Median age in population: 43.38582186773419
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 11079538
--- Timings ---
Current time: 1559314715828 milliseconds
Total Time:          83.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.9 seconds, 74.3%
Fitness Testing:     12.8 seconds, 15.4%
Report:               8.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1})
Lexicase best program: (boolean_flush boolean_yankdup in3 integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1})
Zero cases best program: (boolean_flush boolean_yankdup in3 integer_mod boolean_yankdup exec_when () boolean_swap integer_dup boolean_shove integer_max exec_eq integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (153 152 931 152 152 2 152 558 227 558)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (153 152 931 152 152 2 152 558 227 558)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Best program: (boolean_shove integer_stackdepth print_boolean integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 6.963
Median total errors in population: 7
Error averages by case: (0.847 0.848 0.069 0.848 0.848 0.998 0.848 0.442 0.773 0.442)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.198
Average program size in population (points): 40.427
Average percent parens in population: 0.316
Minimum age in population: 42.21491937339306
Maximum age in population: 47.02203146182001
Average age in population: 44.78350497829169
Median age in population: 44.85499068163335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11285669
--- Timings ---
Current time: 1559314718109 milliseconds
Total Time:          85.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.8 seconds, 74.5%
Fitness Testing:     13.1 seconds, 15.2%
Report:               8.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 28                 
Correct output: -70                 | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: 78                 
Correct output: 22                  | Program output: 52                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 35                 
Correct output: 10                  | Program output: 75                 
Correct output: 24                  | Program output: 70                 
Correct output: 26                  | Program output: 40                 
Correct output: 43                  | Program output: 45                 
Correct output: 37                  | Program output: 92                 
Correct output: 2                   | Program output: 85                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 83                 
Correct output: 18                  | Program output: 61                 
Correct output: 0                   | Program output: 5                  
Correct output: 34                  | Program output: 51                 
Correct output: 44                  | Program output: 57                 
Correct output: 65                  | Program output: 95                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 27                 
Correct output: 37                  | Program output: 63                 
Correct output: 8                   | Program output: 79                 
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 53                 
Correct output: -89                 | Program output: 9                  
Correct output: -98                 | Program output: 93                 
Correct output: -91                 | Program output: -24                
Correct output: -89                 | Program output: 46                 
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: 49                 
Correct output: -62                 | Program output: 75                 
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -19                
Correct output: 12                  | Program output: 14                 
Correct output: -96                 | Program output: -28                
Correct output: -98                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -29                
Correct output: -67                 | Program output: -2                 
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -53                
Correct output: 26                  | Program output: 43                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: 23                 
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -59                
Correct output: -74                 | Program output: 66                 
Correct output: 19                  | Program output: 26                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -46                
Correct output: -24                 | Program output: -7                 
Correct output: -81                 | Program output: 22                 
Correct output: -94                 | Program output: 10                 
Correct output: -85                 | Program output: -43                
Correct output: -77                 | Program output: 48                 
Correct output: -30                 | Program output: 27                 
Correct output: -95                 | Program output: 9                  
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -74                
Correct output: -93                 | Program output: -57                
Correct output: -62                 | Program output: 27                 
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -75                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -18                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: 44                 
Correct output: -95                 | Program output: 92                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 64                 
Correct output: -62                 | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 80                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Lexicase best program: (boolean_shove integer_stackdepth print_boolean integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Lexicase best errors: [0 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1})
Zero cases best program: (boolean_shove integer_stackdepth print_boolean integer_sub exec_pop () integer_lt in3 print_integer integer_swap in3 integer_dup_times boolean_yank in1)
Zero cases best errors: [0 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (500 304 310 923 500 500 925 500 914 500)
Population mean number of elite cases: 5.88
Count of perfect (error zero) individuals by case: (500 304 310 923 500 500 925 500 914 500)
Population mean number of perfect (error zero) cases: 5.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items})
Best program: (integer_add in3 exec_do*range (print_integer integer_stackdepth integer_dup_items boolean_swap exec_flush) boolean_dup_items exec_dup_times (exec_k_when_autoconstructing (print_integer integer_fromboolean boolean_pop boolean_dup_items) ()))
Errors: [0 1 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.124
Median total errors in population: 4
Error averages by case: (0.5 0.696 0.69 0.077 0.5 0.5 0.075 0.5 0.086 0.5)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.991
Average program size in population (points): 30.698
Average percent parens in population: 0.266
Minimum age in population: 43.30498884618282
Maximum age in population: 48.49676161911339
Average age in population: 46.71805731832422
Median age in population: 46.85166349122301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.401
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11515659
--- Timings ---
Current time: 1559314720283 milliseconds
Total Time:          87.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 74.7%
Fitness Testing:     13.3 seconds, 15.1%
Report:               8.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 62                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: -3                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: -42                
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: 21                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 57                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Lexicase best program: (integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (in1 boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Zero cases best program: (integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (in1 boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 3 248 252 271 245 245 934 659 248)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (249 3 248 252 271 245 245 934 659 248)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times})
Best program: (integer_sub in4 integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 integer_min exec_pop (boolean_not exec_yank exec_do*times ())) () ()))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 30
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.646
Median total errors in population: 8
Error averages by case: (0.751 0.997 0.752 0.748 0.729 0.755 0.755 0.066 0.341 0.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.532
Average program size in population (points): 29.82
Average percent parens in population: 0.257
Minimum age in population: 44.30498884618282
Maximum age in population: 50.03699143882841
Average age in population: 48.14424300546804
Median age in population: 48.17718049930409
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11731085
--- Timings ---
Current time: 1559314722612 milliseconds
Total Time:          90.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 74.9%
Fitness Testing:     13.5 seconds, 15.0%
Report:               9.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 52                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 55                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 62                 
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 38                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -16                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: 51                 
Correct output: -96                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: -43                
Correct output: -72                 | Program output: -3                 
Correct output: 24                  | Program output: 82                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -7                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: 40                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 32                 
Correct output: -78                 | Program output: -12                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: -42                
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -40                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 0                  
Correct output: -66                 | Program output: 1                  
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: 21                 
Correct output: -95                 | Program output: -74                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -84                
Correct output: -15                 | Program output: 57                 
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: 33                 
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -48                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Lexicase best program: (integer_sub in4 integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))) () ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Zero cases best program: (integer_sub in4 integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))) () ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 114 427 426 424 754 756 421 753 362)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (361 114 427 426 424 754 756 421 753 362)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Best program: (integer_sub in4 integer_sub in4 exec_swap (print_integer exec_while (boolean_dup_times)) (exec_stackdepth boolean_not boolean_rot boolean_swap boolean_invert_second_then_and integer_swap exec_rot (in2 integer_min exec_pop (boolean_not integer_sub exec_do*times (exec_pop (tagged_371)))) () ()))
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 5.202
Median total errors in population: 5
Error averages by case: (0.639 0.886 0.573 0.574 0.576 0.246 0.244 0.579 0.247 0.638)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.186
Average program size in population (points): 31.535
Average percent parens in population: 0.294
Minimum age in population: 47.68241399154067
Maximum age in population: 51.6520561336074
Average age in population: 50.0508029510749
Median age in population: 50.10261161183007
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.322
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.302
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11912654
--- Timings ---
Current time: 1559314724763 milliseconds
Total Time:          92.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.3 seconds, 75.1%
Fitness Testing:     13.8 seconds, 14.9%
Report:               9.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 190
Test mean error for best: 0.19000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Lexicase best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Zero cases best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (410 536 541 526 661 528 89 931 670 539)
Population mean number of elite cases: 5.43
Count of perfect (error zero) individuals by case: (410 536 541 526 661 528 89 931 670 539)
Population mean number of perfect (error zero) cases: 5.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 4.569
Median total errors in population: 3
Error averages by case: (0.59 0.464 0.459 0.474 0.339 0.472 0.911 0.069 0.33 0.461)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.703
Average program size in population (points): 30.307
Average percent parens in population: 0.280
Minimum age in population: 49.10179465822875
Maximum age in population: 53.47512675647158
Average age in population: 51.4654460461284
Median age in population: 51.51901709951926
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.365
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.337
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12082831
--- Timings ---
Current time: 1559314726988 milliseconds
Total Time:          94.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.2 seconds, 75.3%
Fitness Testing:     14.0 seconds, 14.8%
Report:               9.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 190
Test mean error for best: 0.19000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Lexicase best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Zero cases best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (814 770 780 113 777 785 773 784 773 113)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (814 770 780 113 777 785 773 784 773 113)
Population mean number of perfect (error zero) cases: 6.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap exec_noop integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 3.518
Median total errors in population: 2
Error averages by case: (0.186 0.23 0.22 0.887 0.223 0.215 0.227 0.216 0.227 0.887)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.8
Average program size in population (points): 29.541
Average percent parens in population: 0.229
Minimum age in population: 50.95466934517026
Maximum age in population: 54.35518183809472
Average age in population: 53.05843913208111
Median age in population: 52.82654704348533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 629
Genome diversity (% unique genomes):	 0.262
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 655
Syntactic diversity (% unique Push programs):	 0.234
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12264231
--- Timings ---
Current time: 1559314729221 milliseconds
Total Time:          96.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 75.5%
Fitness Testing:     14.2 seconds, 14.6%
Report:               9.5 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 190
Test mean error for best: 0.19000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -79                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -42                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 50                 
Correct output: 2                   | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 67                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 24                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -62                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -44                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -54                
Correct output: -95                 | Program output: 51                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Lexicase best program: (boolean_dup_times in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Zero cases best program: (boolean_dup_times in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 949 885 365 884 923 524 915 523 887)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (522 949 885 365 884 923 524 915 523 887)
Population mean number of perfect (error zero) cases: 7.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Best program: (integer_sub in4 integer_inc in3 tagged_390 print_boolean boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 2.623
Median total errors in population: 2
Error averages by case: (0.478 0.051 0.115 0.635 0.116 0.077 0.476 0.085 0.477 0.113)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.094
Average program size in population (points): 31.109
Average percent parens in population: 0.225
Minimum age in population: 53.58489278552588
Maximum age in population: 55.87564006375032
Average age in population: 54.79040816508647
Median age in population: 54.58489278552588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 340
Genome diversity (% unique genomes):	 0.338
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 366
Syntactic diversity (% unique Push programs):	 0.304
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 12462463
--- Timings ---
Current time: 1559314731415 milliseconds
Total Time:          99.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.9 seconds, 75.6%
Fitness Testing:     14.4 seconds, 14.5%
Report:               9.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 65                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Lexicase best program: (integer_sub exec_do*times (exec_shove (in3) tagged_390) in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Zero cases best program: (integer_sub exec_do*times (exec_shove (in3) tagged_390) in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (779 478 745 788 738 865 745 779 788 679)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (779 478 745 788 738 865 745 779 788 679)
Population mean number of perfect (error zero) cases: 7.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 1, :instruction in3} {:close 1, :instruction tagged_390} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_371})
Best program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 2.616
Median total errors in population: 1
Error averages by case: (0.221 0.522 0.255 0.212 0.262 0.135 0.255 0.221 0.212 0.321)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.582
Average program size in population (points): 31.957
Average percent parens in population: 0.230
Minimum age in population: 54.58489278552588
Maximum age in population: 57.58933636563597
Average age in population: 56.54056389223241
Median age in population: 56.58489278552588
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.368
Total error diversity:				 0.011
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 12652338
--- Timings ---
Current time: 1559314733657 milliseconds
Total Time:         101.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.7 seconds, 75.8%
Fitness Testing:     14.6 seconds, 14.4%
Report:               9.8 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 37
Successful program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 31


Auto-simplifying with starting size: 31
step: 0
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 500
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 1000
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 1500
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 2000
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 2500
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 3000
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 3500
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 4000
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 4500
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

step: 5000
program: (integer_sub in4 in3 tagged_390 in1 boolean_eq in4 exec_swap (print_integer exec_while (boolean_dup_times)) (boolean_rot boolean_swap boolean_invert_second_then_and integer_min in2 integer_min integer_min exec_pop (boolean_not exec_yank exec_do*times (exec_pop (tagged_371)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 31

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 11                  | Program output: 11                 
Correct output: 37                  | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -68                 | Program output: -68                
Correct output: 22                  | Program output: 22                 
Correct output: 23                  | Program output: 23                 
Correct output: -74                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 13                  | Program output: 13                 
Correct output: 10                  | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 43                  | Program output: 43                 
Correct output: 37                  | Program output: 37                 
Correct output: 2                   | Program output: 2                  
Correct output: 20                  | Program output: 20                 
Correct output: 50                  | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 34                  | Program output: 34                 
Correct output: 44                  | Program output: 44                 
Correct output: 65                  | Program output: 65                 
Correct output: 9                   | Program output: 9                  
Correct output: 13                  | Program output: 13                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 14                  | Program output: 14                 
Correct output: 27                  | Program output: 27                 
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -7                  | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -72                
Correct output: 24                  | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -98                
Correct output: -57                 | Program output: -57                
Correct output: -64                 | Program output: -64                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: 19                  | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -55                 | Program output: -55                
Correct output: -24                 | Program output: -24                
Correct output: -81                 | Program output: -81                
Correct output: -94                 | Program output: -94                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -82                 | Program output: -82                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: -6                  | Program output: -6                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -15                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
;;******************************
