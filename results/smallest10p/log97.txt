Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[36 -74 -74 -74] -74] [[-23 -23 -23 14] -23] [[-21 -21 -11 -21] -21] [[75 -24 -24 -24] -24] [[-58 -58 -58 39] -58] [[-50 -50 43 -50] -50] [[14 33 33 33] 14] [[0 -9 -9 -9] -9] [[98 18 98 98] 18] [[47 47 47 -5] -5] [(100 100 100 100) 100] [(-19 -19 -19 -19) -19] [(-31 -31 -31 -31) -31] [(10 10 10 10) 10] [(47 47 47 47) 47] [(17 34 87 75) 17] [(8 1 29 73) 1] [(0 20 67 97) 0] [(35 57 40 14) 14] [(58 28 60 7) 7] [(87 46 1 8) 1] [(69 36 44 58) 36] [(69 59 30 14) 14] [(22 13 57 29) 13] [(38 1 76 52) 1] [(20 61 56 70) 20] [(92 41 66 28) 28] [(88 22 22 61) 22] [(77 45 19 75) 19] [(87 73 33 94) 33] [(95 14 44 72) 14] [(93 23 27 38) 23] [(60 20 0 85) 0] [(86 85 16 52) 16] [(74 74 30 4) 4] [(-87 78 15 63) -87] [(6 -21 10 41) -21] [(-31 -94 -48 92) -94] [(-12 -99 72 75) -99] [(-39 -65 -60 -25) -65] [(-35 52 -65 -8) -65] [(37 -52 -81 46) -81] [(50 36 -16 -99) -99] [(93 -86 -81 -39) -86] [(29 -30 25 12) -30] [(23 53 15 56) 15] [(-46 57 -7 -16) -46] [(23 36 42 8) 8] [(55 52 16 33) 16] [(80 73 22 -48) -48] [(88 -1 -79 80) -79] [(58 -91 52 78) -91] [(-82 -46 -80 -31) -82] [(-55 -9 37 -52) -55] [(-51 35 -9 54) -51] [(-40 -9 -24 53) -40] [(-26 82 14 9) -26] [(-65 -41 -21 50) -65] [(-71 -51 31 38) -71] [(12 -40 54 39) -40] [(-84 -43 69 27) -84] [(100 21 22 -87) -87] [(-33 -56 -22 -29) -56] [(29 -9 -43 18) -43] [(-15 75 -61 62) -61] [(-25 75 84 -6) -25] [(-43 -67 92 69) -67] [(46 86 69 90) 46] [(52 85 -53 49) -53] [(-55 -33 72 1) -55] [(93 41 15 63) 15] [(-78 -30 69 0) -78] [(-78 -36 -99 -83) -99] [(24 7 64 11) 7] [(-13 -43 -52 -18) -52] [(7 37 -21 90) -21] [(-39 35 28 -48) -48] [(92 -89 47 -50) -89] [(83 28 48 42) 28] [(26 65 51 93) 26] [(96 -42 -88 34) -88] [(21 -54 -99 18) -99] [(16 58 -83 -71) -83] [(61 26 48 -89) -89] [(-66 10 11 -88) -88] [(19 59 -57 28) -57] [(-74 -65 -50 -55) -74] [(20 -64 14 -1) -64] [(81 69 7 -93) -93] [(67 22 -9 -73) -73] [(2 73 -88 -61) -88] [(31 29 16 -39) -39] [(-45 -48 86 -36) -48] [(-79 -74 25 -69) -79] [(13 57 87 95) 13])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[36 -74 -74 -74] -74]
Train Case:   6 | Input/Output: [[-23 -23 -23 14] -23]
Train Case:   7 | Input/Output: [[-21 -21 -11 -21] -21]
Train Case:   8 | Input/Output: [[75 -24 -24 -24] -24]
Train Case:   9 | Input/Output: [[-58 -58 -58 39] -58]
Train Case:  10 | Input/Output: [[-50 -50 43 -50] -50]
Train Case:  11 | Input/Output: [[14 33 33 33] 14]
Train Case:  12 | Input/Output: [[0 -9 -9 -9] -9]
Train Case:  13 | Input/Output: [[98 18 98 98] 18]
Train Case:  14 | Input/Output: [[47 47 47 -5] -5]
Train Case:  15 | Input/Output: [(100 100 100 100) 100]
Train Case:  16 | Input/Output: [(-19 -19 -19 -19) -19]
Train Case:  17 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  18 | Input/Output: [(10 10 10 10) 10]
Train Case:  19 | Input/Output: [(47 47 47 47) 47]
Train Case:  20 | Input/Output: [(17 34 87 75) 17]
Train Case:  21 | Input/Output: [(8 1 29 73) 1]
Train Case:  22 | Input/Output: [(0 20 67 97) 0]
Train Case:  23 | Input/Output: [(35 57 40 14) 14]
Train Case:  24 | Input/Output: [(58 28 60 7) 7]
Train Case:  25 | Input/Output: [(87 46 1 8) 1]
Train Case:  26 | Input/Output: [(69 36 44 58) 36]
Train Case:  27 | Input/Output: [(69 59 30 14) 14]
Train Case:  28 | Input/Output: [(22 13 57 29) 13]
Train Case:  29 | Input/Output: [(38 1 76 52) 1]
Train Case:  30 | Input/Output: [(20 61 56 70) 20]
Train Case:  31 | Input/Output: [(92 41 66 28) 28]
Train Case:  32 | Input/Output: [(88 22 22 61) 22]
Train Case:  33 | Input/Output: [(77 45 19 75) 19]
Train Case:  34 | Input/Output: [(87 73 33 94) 33]
Train Case:  35 | Input/Output: [(95 14 44 72) 14]
Train Case:  36 | Input/Output: [(93 23 27 38) 23]
Train Case:  37 | Input/Output: [(60 20 0 85) 0]
Train Case:  38 | Input/Output: [(86 85 16 52) 16]
Train Case:  39 | Input/Output: [(74 74 30 4) 4]
Train Case:  40 | Input/Output: [(-87 78 15 63) -87]
Train Case:  41 | Input/Output: [(6 -21 10 41) -21]
Train Case:  42 | Input/Output: [(-31 -94 -48 92) -94]
Train Case:  43 | Input/Output: [(-12 -99 72 75) -99]
Train Case:  44 | Input/Output: [(-39 -65 -60 -25) -65]
Train Case:  45 | Input/Output: [(-35 52 -65 -8) -65]
Train Case:  46 | Input/Output: [(37 -52 -81 46) -81]
Train Case:  47 | Input/Output: [(50 36 -16 -99) -99]
Train Case:  48 | Input/Output: [(93 -86 -81 -39) -86]
Train Case:  49 | Input/Output: [(29 -30 25 12) -30]
Train Case:  50 | Input/Output: [(23 53 15 56) 15]
Train Case:  51 | Input/Output: [(-46 57 -7 -16) -46]
Train Case:  52 | Input/Output: [(23 36 42 8) 8]
Train Case:  53 | Input/Output: [(55 52 16 33) 16]
Train Case:  54 | Input/Output: [(80 73 22 -48) -48]
Train Case:  55 | Input/Output: [(88 -1 -79 80) -79]
Train Case:  56 | Input/Output: [(58 -91 52 78) -91]
Train Case:  57 | Input/Output: [(-82 -46 -80 -31) -82]
Train Case:  58 | Input/Output: [(-55 -9 37 -52) -55]
Train Case:  59 | Input/Output: [(-51 35 -9 54) -51]
Train Case:  60 | Input/Output: [(-40 -9 -24 53) -40]
Train Case:  61 | Input/Output: [(-26 82 14 9) -26]
Train Case:  62 | Input/Output: [(-65 -41 -21 50) -65]
Train Case:  63 | Input/Output: [(-71 -51 31 38) -71]
Train Case:  64 | Input/Output: [(12 -40 54 39) -40]
Train Case:  65 | Input/Output: [(-84 -43 69 27) -84]
Train Case:  66 | Input/Output: [(100 21 22 -87) -87]
Train Case:  67 | Input/Output: [(-33 -56 -22 -29) -56]
Train Case:  68 | Input/Output: [(29 -9 -43 18) -43]
Train Case:  69 | Input/Output: [(-15 75 -61 62) -61]
Train Case:  70 | Input/Output: [(-25 75 84 -6) -25]
Train Case:  71 | Input/Output: [(-43 -67 92 69) -67]
Train Case:  72 | Input/Output: [(46 86 69 90) 46]
Train Case:  73 | Input/Output: [(52 85 -53 49) -53]
Train Case:  74 | Input/Output: [(-55 -33 72 1) -55]
Train Case:  75 | Input/Output: [(93 41 15 63) 15]
Train Case:  76 | Input/Output: [(-78 -30 69 0) -78]
Train Case:  77 | Input/Output: [(-78 -36 -99 -83) -99]
Train Case:  78 | Input/Output: [(24 7 64 11) 7]
Train Case:  79 | Input/Output: [(-13 -43 -52 -18) -52]
Train Case:  80 | Input/Output: [(7 37 -21 90) -21]
Train Case:  81 | Input/Output: [(-39 35 28 -48) -48]
Train Case:  82 | Input/Output: [(92 -89 47 -50) -89]
Train Case:  83 | Input/Output: [(83 28 48 42) 28]
Train Case:  84 | Input/Output: [(26 65 51 93) 26]
Train Case:  85 | Input/Output: [(96 -42 -88 34) -88]
Train Case:  86 | Input/Output: [(21 -54 -99 18) -99]
Train Case:  87 | Input/Output: [(16 58 -83 -71) -83]
Train Case:  88 | Input/Output: [(61 26 48 -89) -89]
Train Case:  89 | Input/Output: [(-66 10 11 -88) -88]
Train Case:  90 | Input/Output: [(19 59 -57 28) -57]
Train Case:  91 | Input/Output: [(-74 -65 -50 -55) -74]
Train Case:  92 | Input/Output: [(20 -64 14 -1) -64]
Train Case:  93 | Input/Output: [(81 69 7 -93) -93]
Train Case:  94 | Input/Output: [(67 22 -9 -73) -73]
Train Case:  95 | Input/Output: [(2 73 -88 -61) -88]
Train Case:  96 | Input/Output: [(31 29 16 -39) -39]
Train Case:  97 | Input/Output: [(-45 -48 86 -36) -48]
Train Case:  98 | Input/Output: [(-79 -74 25 -69) -79]
Train Case:  99 | Input/Output: [(13 57 87 95) 13]
Test Case:   0 | Input/Output: [[-29 7 -29 -29] -29]
Test Case:   1 | Input/Output: [[46 86 86 86] 46]
Test Case:   2 | Input/Output: [[56 56 56 73] 56]
Test Case:   3 | Input/Output: [[-9 -26 -9 -9] -26]
Test Case:   4 | Input/Output: [[41 41 41 88] 41]
Test Case:   5 | Input/Output: [[-60 -60 100 -60] -60]
Test Case:   6 | Input/Output: [[82 82 -9 82] -9]
Test Case:   7 | Input/Output: [[-94 -34 -94 -94] -94]
Test Case:   8 | Input/Output: [[69 69 6 69] 6]
Test Case:   9 | Input/Output: [[74 74 49 74] 49]
Test Case:  10 | Input/Output: [[-98 -47 -47 -47] -98]
Test Case:  11 | Input/Output: [[-53 -7 -53 -53] -53]
Test Case:  12 | Input/Output: [[43 43 -17 43] -17]
Test Case:  13 | Input/Output: [[-36 -36 -77 -36] -77]
Test Case:  14 | Input/Output: [[51 -63 51 51] -63]
Test Case:  15 | Input/Output: [[-67 -15 -15 -15] -67]
Test Case:  16 | Input/Output: [[98 98 -26 98] -26]
Test Case:  17 | Input/Output: [[9 9 9 71] 9]
Test Case:  18 | Input/Output: [[80 80 -32 80] -32]
Test Case:  19 | Input/Output: [[-46 -46 -46 -66] -66]
Test Case:  20 | Input/Output: [[91 -72 -72 -72] -72]
Test Case:  21 | Input/Output: [[-11 -20 -20 -20] -20]
Test Case:  22 | Input/Output: [[-44 -44 -13 -44] -44]
Test Case:  23 | Input/Output: [[11 11 94 11] 11]
Test Case:  24 | Input/Output: [[71 4 4 4] 4]
Test Case:  25 | Input/Output: [[-49 -49 -61 -49] -61]
Test Case:  26 | Input/Output: [[-48 -48 -65 -48] -65]
Test Case:  27 | Input/Output: [[25 25 25 36] 25]
Test Case:  28 | Input/Output: [[-68 -47 -68 -68] -68]
Test Case:  29 | Input/Output: [[-53 -53 -53 -30] -53]
Test Case:  30 | Input/Output: [[2 2 2 -18] -18]
Test Case:  31 | Input/Output: [[-2 -50 -2 -2] -50]
Test Case:  32 | Input/Output: [[-5 -5 -5 -21] -21]
Test Case:  33 | Input/Output: [[1 1 48 1] 1]
Test Case:  34 | Input/Output: [[-54 -54 -54 -82] -82]
Test Case:  35 | Input/Output: [[-39 -39 44 -39] -39]
Test Case:  36 | Input/Output: [[95 95 -63 95] -63]
Test Case:  37 | Input/Output: [[70 70 70 -72] -72]
Test Case:  38 | Input/Output: [[63 7 63 63] 7]
Test Case:  39 | Input/Output: [[89 89 -26 89] -26]
Test Case:  40 | Input/Output: [[64 91 91 91] 64]
Test Case:  41 | Input/Output: [[54 54 40 54] 40]
Test Case:  42 | Input/Output: [[-57 -57 -57 -89] -89]
Test Case:  43 | Input/Output: [[-19 -19 -19 -13] -19]
Test Case:  44 | Input/Output: [[26 26 27 26] 26]
Test Case:  45 | Input/Output: [[50 50 50 3] 3]
Test Case:  46 | Input/Output: [[91 -94 91 91] -94]
Test Case:  47 | Input/Output: [[70 76 76 76] 70]
Test Case:  48 | Input/Output: [[53 53 53 97] 53]
Test Case:  49 | Input/Output: [[32 57 57 57] 32]
Test Case:  50 | Input/Output: [[51 51 51 59] 51]
Test Case:  51 | Input/Output: [[52 52 52 -86] -86]
Test Case:  52 | Input/Output: [[-24 -24 -24 92] -24]
Test Case:  53 | Input/Output: [[37 -47 -47 -47] -47]
Test Case:  54 | Input/Output: [[-88 59 59 59] -88]
Test Case:  55 | Input/Output: [[-18 -99 -18 -18] -99]
Test Case:  56 | Input/Output: [[56 56 56 5] 5]
Test Case:  57 | Input/Output: [[59 59 -51 59] -51]
Test Case:  58 | Input/Output: [[-37 -37 -83 -37] -83]
Test Case:  59 | Input/Output: [[25 84 84 84] 25]
Test Case:  60 | Input/Output: [[-85 -85 -85 7] -85]
Test Case:  61 | Input/Output: [[-79 58 58 58] -79]
Test Case:  62 | Input/Output: [[-92 -92 -92 3] -92]
Test Case:  63 | Input/Output: [[-97 -97 39 -97] -97]
Test Case:  64 | Input/Output: [[17 17 -99 17] -99]
Test Case:  65 | Input/Output: [[86 86 86 23] 23]
Test Case:  66 | Input/Output: [[-74 94 -74 -74] -74]
Test Case:  67 | Input/Output: [[-10 89 -10 -10] -10]
Test Case:  68 | Input/Output: [[-47 -47 -47 -61] -61]
Test Case:  69 | Input/Output: [[15 15 -50 15] -50]
Test Case:  70 | Input/Output: [[-44 -35 -35 -35] -44]
Test Case:  71 | Input/Output: [[34 34 65 34] 34]
Test Case:  72 | Input/Output: [[4 64 64 64] 4]
Test Case:  73 | Input/Output: [[48 48 -98 48] -98]
Test Case:  74 | Input/Output: [[73 73 73 62] 62]
Test Case:  75 | Input/Output: [[-97 13 13 13] -97]
Test Case:  76 | Input/Output: [[56 56 56 81] 56]
Test Case:  77 | Input/Output: [[-14 -42 -14 -14] -42]
Test Case:  78 | Input/Output: [[-93 -93 -93 -23] -93]
Test Case:  79 | Input/Output: [[-49 -49 -49 -3] -49]
Test Case:  80 | Input/Output: [[95 24 95 95] 24]
Test Case:  81 | Input/Output: [[6 6 6 -51] -51]
Test Case:  82 | Input/Output: [[-26 -64 -64 -64] -64]
Test Case:  83 | Input/Output: [[86 97 97 97] 86]
Test Case:  84 | Input/Output: [[52 8 52 52] 8]
Test Case:  85 | Input/Output: [[-65 -65 -65 -32] -65]
Test Case:  86 | Input/Output: [[10 -14 10 10] -14]
Test Case:  87 | Input/Output: [[2 -53 -53 -53] -53]
Test Case:  88 | Input/Output: [[-97 -97 28 -97] -97]
Test Case:  89 | Input/Output: [[65 65 65 -47] -47]
Test Case:  90 | Input/Output: [[29 29 29 -1] -1]
Test Case:  91 | Input/Output: [[73 73 -22 73] -22]
Test Case:  92 | Input/Output: [[-10 -6 -6 -6] -10]
Test Case:  93 | Input/Output: [[-90 -90 -90 74] -90]
Test Case:  94 | Input/Output: [[-94 -94 64 -94] -94]
Test Case:  95 | Input/Output: [[95 -55 95 95] -55]
Test Case:  96 | Input/Output: [[3 20 20 20] 3]
Test Case:  97 | Input/Output: [[-44 -82 -44 -44] -82]
Test Case:  98 | Input/Output: [[18 27 18 18] 18]
Test Case:  99 | Input/Output: [[57 59 59 59] 57]
Test Case: 100 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 101 | Input/Output: [(52 52 52 52) 52]
Test Case: 102 | Input/Output: [(31 31 31 31) 31]
Test Case: 103 | Input/Output: [(34 34 34 34) 34]
Test Case: 104 | Input/Output: [(72 72 72 72) 72]
Test Case: 105 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 106 | Input/Output: [(87 87 87 87) 87]
Test Case: 107 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 108 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 109 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 110 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 111 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 112 | Input/Output: [(100 100 100 100) 100]
Test Case: 113 | Input/Output: [(62 62 62 62) 62]
Test Case: 114 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 115 | Input/Output: [(89 89 89 89) 89]
Test Case: 116 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 117 | Input/Output: [(22 22 22 22) 22]
Test Case: 118 | Input/Output: [(53 53 53 53) 53]
Test Case: 119 | Input/Output: [(29 29 29 29) 29]
Test Case: 120 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 121 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 122 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 123 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 124 | Input/Output: [(30 30 30 30) 30]
Test Case: 125 | Input/Output: [(49 49 49 49) 49]
Test Case: 126 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 127 | Input/Output: [(11 11 11 11) 11]
Test Case: 128 | Input/Output: [(32 32 32 32) 32]
Test Case: 129 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 130 | Input/Output: [(25 25 25 25) 25]
Test Case: 131 | Input/Output: [(89 89 89 89) 89]
Test Case: 132 | Input/Output: [(83 83 83 83) 83]
Test Case: 133 | Input/Output: [(21 21 21 21) 21]
Test Case: 134 | Input/Output: [(88 88 88 88) 88]
Test Case: 135 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 136 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 137 | Input/Output: [(95 95 95 95) 95]
Test Case: 138 | Input/Output: [(21 21 21 21) 21]
Test Case: 139 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 140 | Input/Output: [(49 49 49 49) 49]
Test Case: 141 | Input/Output: [(45 45 45 45) 45]
Test Case: 142 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 143 | Input/Output: [(27 27 27 27) 27]
Test Case: 144 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 145 | Input/Output: [(72 72 72 72) 72]
Test Case: 146 | Input/Output: [(38 38 38 38) 38]
Test Case: 147 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 148 | Input/Output: [(86 86 86 86) 86]
Test Case: 149 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 150 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 151 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 152 | Input/Output: [(23 23 23 23) 23]
Test Case: 153 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 154 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 155 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 156 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 157 | Input/Output: [(11 11 11 11) 11]
Test Case: 158 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 159 | Input/Output: [(94 94 94 94) 94]
Test Case: 160 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 161 | Input/Output: [(36 36 36 36) 36]
Test Case: 162 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 163 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 164 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 165 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 166 | Input/Output: [(59 59 59 59) 59]
Test Case: 167 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 168 | Input/Output: [(59 59 59 59) 59]
Test Case: 169 | Input/Output: [(85 85 85 85) 85]
Test Case: 170 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 171 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 172 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 173 | Input/Output: [(92 92 92 92) 92]
Test Case: 174 | Input/Output: [(48 48 48 48) 48]
Test Case: 175 | Input/Output: [(74 74 74 74) 74]
Test Case: 176 | Input/Output: [(89 89 89 89) 89]
Test Case: 177 | Input/Output: [(37 37 37 37) 37]
Test Case: 178 | Input/Output: [(27 27 27 27) 27]
Test Case: 179 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 180 | Input/Output: [(27 27 27 27) 27]
Test Case: 181 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 182 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 183 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 184 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 185 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 186 | Input/Output: [(21 21 21 21) 21]
Test Case: 187 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 188 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 189 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 190 | Input/Output: [(35 35 35 35) 35]
Test Case: 191 | Input/Output: [(67 67 67 67) 67]
Test Case: 192 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 193 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 194 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 195 | Input/Output: [(90 90 90 90) 90]
Test Case: 196 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 197 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 198 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 199 | Input/Output: [(95 95 95 95) 95]
Test Case: 200 | Input/Output: [(58 27 50 35) 27]
Test Case: 201 | Input/Output: [(73 40 69 63) 40]
Test Case: 202 | Input/Output: [(70 26 57 93) 26]
Test Case: 203 | Input/Output: [(64 74 86 58) 58]
Test Case: 204 | Input/Output: [(71 24 92 39) 24]
Test Case: 205 | Input/Output: [(38 65 62 20) 20]
Test Case: 206 | Input/Output: [(76 69 5 47) 5]
Test Case: 207 | Input/Output: [(6 85 28 46) 6]
Test Case: 208 | Input/Output: [(82 48 5 93) 5]
Test Case: 209 | Input/Output: [(85 31 82 89) 31]
Test Case: 210 | Input/Output: [(27 25 5 30) 5]
Test Case: 211 | Input/Output: [(5 74 70 43) 5]
Test Case: 212 | Input/Output: [(17 94 14 65) 14]
Test Case: 213 | Input/Output: [(63 82 76 47) 47]
Test Case: 214 | Input/Output: [(33 23 79 14) 14]
Test Case: 215 | Input/Output: [(79 83 29 38) 29]
Test Case: 216 | Input/Output: [(63 57 88 81) 57]
Test Case: 217 | Input/Output: [(22 16 30 92) 16]
Test Case: 218 | Input/Output: [(82 80 30 22) 22]
Test Case: 219 | Input/Output: [(23 18 12 91) 12]
Test Case: 220 | Input/Output: [(18 83 7 60) 7]
Test Case: 221 | Input/Output: [(17 43 99 22) 17]
Test Case: 222 | Input/Output: [(72 81 1 3) 1]
Test Case: 223 | Input/Output: [(45 52 23 73) 23]
Test Case: 224 | Input/Output: [(94 50 2 14) 2]
Test Case: 225 | Input/Output: [(83 41 55 61) 41]
Test Case: 226 | Input/Output: [(27 77 75 3) 3]
Test Case: 227 | Input/Output: [(11 19 81 73) 11]
Test Case: 228 | Input/Output: [(12 4 25 8) 4]
Test Case: 229 | Input/Output: [(98 17 51 82) 17]
Test Case: 230 | Input/Output: [(54 21 97 56) 21]
Test Case: 231 | Input/Output: [(22 27 59 54) 22]
Test Case: 232 | Input/Output: [(53 60 67 91) 53]
Test Case: 233 | Input/Output: [(60 64 17 4) 4]
Test Case: 234 | Input/Output: [(90 20 93 9) 9]
Test Case: 235 | Input/Output: [(97 20 46 60) 20]
Test Case: 236 | Input/Output: [(50 90 73 22) 22]
Test Case: 237 | Input/Output: [(54 13 15 79) 13]
Test Case: 238 | Input/Output: [(67 2 17 41) 2]
Test Case: 239 | Input/Output: [(34 12 65 5) 5]
Test Case: 240 | Input/Output: [(26 54 72 50) 26]
Test Case: 241 | Input/Output: [(87 61 91 94) 61]
Test Case: 242 | Input/Output: [(1 77 21 45) 1]
Test Case: 243 | Input/Output: [(22 63 96 48) 22]
Test Case: 244 | Input/Output: [(33 76 35 25) 25]
Test Case: 245 | Input/Output: [(67 65 16 95) 16]
Test Case: 246 | Input/Output: [(79 34 41 46) 34]
Test Case: 247 | Input/Output: [(77 36 41 39) 36]
Test Case: 248 | Input/Output: [(22 63 26 6) 6]
Test Case: 249 | Input/Output: [(95 65 91 100) 65]
Test Case: 250 | Input/Output: [(43 81 4 92) 4]
Test Case: 251 | Input/Output: [(41 72 73 25) 25]
Test Case: 252 | Input/Output: [(3 72 26 42) 3]
Test Case: 253 | Input/Output: [(10 46 93 59) 10]
Test Case: 254 | Input/Output: [(86 69 46 40) 40]
Test Case: 255 | Input/Output: [(20 13 63 12) 12]
Test Case: 256 | Input/Output: [(88 46 71 19) 19]
Test Case: 257 | Input/Output: [(3 0 50 83) 0]
Test Case: 258 | Input/Output: [(10 67 81 14) 10]
Test Case: 259 | Input/Output: [(55 13 50 90) 13]
Test Case: 260 | Input/Output: [(28 7 75 79) 7]
Test Case: 261 | Input/Output: [(56 33 41 10) 10]
Test Case: 262 | Input/Output: [(98 36 96 0) 0]
Test Case: 263 | Input/Output: [(19 29 5 5) 5]
Test Case: 264 | Input/Output: [(65 18 94 40) 18]
Test Case: 265 | Input/Output: [(60 66 92 25) 25]
Test Case: 266 | Input/Output: [(24 71 20 91) 20]
Test Case: 267 | Input/Output: [(59 53 100 80) 53]
Test Case: 268 | Input/Output: [(16 29 25 66) 16]
Test Case: 269 | Input/Output: [(49 43 63 30) 30]
Test Case: 270 | Input/Output: [(82 46 22 76) 22]
Test Case: 271 | Input/Output: [(56 31 49 95) 31]
Test Case: 272 | Input/Output: [(26 45 33 1) 1]
Test Case: 273 | Input/Output: [(50 13 6 39) 6]
Test Case: 274 | Input/Output: [(78 91 55 38) 38]
Test Case: 275 | Input/Output: [(96 80 40 55) 40]
Test Case: 276 | Input/Output: [(53 97 30 48) 30]
Test Case: 277 | Input/Output: [(8 20 21 71) 8]
Test Case: 278 | Input/Output: [(22 35 6 89) 6]
Test Case: 279 | Input/Output: [(96 77 55 5) 5]
Test Case: 280 | Input/Output: [(53 38 98 40) 38]
Test Case: 281 | Input/Output: [(80 94 24 49) 24]
Test Case: 282 | Input/Output: [(95 89 24 81) 24]
Test Case: 283 | Input/Output: [(76 21 81 33) 21]
Test Case: 284 | Input/Output: [(53 96 97 20) 20]
Test Case: 285 | Input/Output: [(32 69 79 78) 32]
Test Case: 286 | Input/Output: [(69 92 75 42) 42]
Test Case: 287 | Input/Output: [(41 17 45 95) 17]
Test Case: 288 | Input/Output: [(36 42 34 90) 34]
Test Case: 289 | Input/Output: [(10 97 23 99) 10]
Test Case: 290 | Input/Output: [(63 53 42 87) 42]
Test Case: 291 | Input/Output: [(84 80 0 69) 0]
Test Case: 292 | Input/Output: [(15 45 14 5) 5]
Test Case: 293 | Input/Output: [(87 1 82 46) 1]
Test Case: 294 | Input/Output: [(37 7 36 87) 7]
Test Case: 295 | Input/Output: [(96 56 46 28) 28]
Test Case: 296 | Input/Output: [(69 49 95 9) 9]
Test Case: 297 | Input/Output: [(59 32 99 79) 32]
Test Case: 298 | Input/Output: [(37 57 11 13) 11]
Test Case: 299 | Input/Output: [(29 28 30 25) 25]
Test Case: 300 | Input/Output: [(46 25 47 8) 8]
Test Case: 301 | Input/Output: [(46 22 86 75) 22]
Test Case: 302 | Input/Output: [(82 6 75 18) 6]
Test Case: 303 | Input/Output: [(72 5 41 73) 5]
Test Case: 304 | Input/Output: [(98 0 4 35) 0]
Test Case: 305 | Input/Output: [(39 82 54 81) 39]
Test Case: 306 | Input/Output: [(32 26 52 47) 26]
Test Case: 307 | Input/Output: [(43 40 26 14) 14]
Test Case: 308 | Input/Output: [(18 84 0 90) 0]
Test Case: 309 | Input/Output: [(100 84 55 9) 9]
Test Case: 310 | Input/Output: [(48 46 83 79) 46]
Test Case: 311 | Input/Output: [(96 38 99 7) 7]
Test Case: 312 | Input/Output: [(2 61 86 99) 2]
Test Case: 313 | Input/Output: [(20 35 41 22) 20]
Test Case: 314 | Input/Output: [(73 10 42 97) 10]
Test Case: 315 | Input/Output: [(34 56 48 26) 26]
Test Case: 316 | Input/Output: [(2 19 59 79) 2]
Test Case: 317 | Input/Output: [(56 43 36 41) 36]
Test Case: 318 | Input/Output: [(56 56 4 67) 4]
Test Case: 319 | Input/Output: [(83 43 55 24) 24]
Test Case: 320 | Input/Output: [(76 3 26 44) 3]
Test Case: 321 | Input/Output: [(0 75 83 83) 0]
Test Case: 322 | Input/Output: [(86 81 49 34) 34]
Test Case: 323 | Input/Output: [(56 67 28 73) 28]
Test Case: 324 | Input/Output: [(44 29 66 85) 29]
Test Case: 325 | Input/Output: [(36 40 58 28) 28]
Test Case: 326 | Input/Output: [(39 20 56 57) 20]
Test Case: 327 | Input/Output: [(20 59 84 67) 20]
Test Case: 328 | Input/Output: [(49 90 3 72) 3]
Test Case: 329 | Input/Output: [(26 26 69 51) 26]
Test Case: 330 | Input/Output: [(93 29 57 41) 29]
Test Case: 331 | Input/Output: [(49 100 84 56) 49]
Test Case: 332 | Input/Output: [(2 80 78 17) 2]
Test Case: 333 | Input/Output: [(57 73 67 77) 57]
Test Case: 334 | Input/Output: [(90 6 48 100) 6]
Test Case: 335 | Input/Output: [(52 54 66 87) 52]
Test Case: 336 | Input/Output: [(48 69 54 18) 18]
Test Case: 337 | Input/Output: [(5 4 51 28) 4]
Test Case: 338 | Input/Output: [(33 4 14 17) 4]
Test Case: 339 | Input/Output: [(51 23 13 71) 13]
Test Case: 340 | Input/Output: [(0 31 38 4) 0]
Test Case: 341 | Input/Output: [(19 100 42 40) 19]
Test Case: 342 | Input/Output: [(31 35 5 58) 5]
Test Case: 343 | Input/Output: [(79 24 36 87) 24]
Test Case: 344 | Input/Output: [(8 7 93 52) 7]
Test Case: 345 | Input/Output: [(78 76 10 96) 10]
Test Case: 346 | Input/Output: [(76 24 9 75) 9]
Test Case: 347 | Input/Output: [(58 74 10 14) 10]
Test Case: 348 | Input/Output: [(31 22 85 77) 22]
Test Case: 349 | Input/Output: [(32 20 84 100) 20]
Test Case: 350 | Input/Output: [(66 21 82 96) 21]
Test Case: 351 | Input/Output: [(24 43 74 82) 24]
Test Case: 352 | Input/Output: [(83 72 18 57) 18]
Test Case: 353 | Input/Output: [(61 18 41 30) 18]
Test Case: 354 | Input/Output: [(71 60 78 56) 56]
Test Case: 355 | Input/Output: [(1 56 69 7) 1]
Test Case: 356 | Input/Output: [(27 6 63 82) 6]
Test Case: 357 | Input/Output: [(26 29 62 54) 26]
Test Case: 358 | Input/Output: [(63 32 99 59) 32]
Test Case: 359 | Input/Output: [(27 0 61 32) 0]
Test Case: 360 | Input/Output: [(62 68 47 30) 30]
Test Case: 361 | Input/Output: [(76 70 81 22) 22]
Test Case: 362 | Input/Output: [(65 31 68 16) 16]
Test Case: 363 | Input/Output: [(53 65 11 21) 11]
Test Case: 364 | Input/Output: [(15 6 81 9) 6]
Test Case: 365 | Input/Output: [(62 5 95 72) 5]
Test Case: 366 | Input/Output: [(55 52 44 84) 44]
Test Case: 367 | Input/Output: [(36 42 32 89) 32]
Test Case: 368 | Input/Output: [(43 97 28 45) 28]
Test Case: 369 | Input/Output: [(41 90 13 59) 13]
Test Case: 370 | Input/Output: [(24 36 11 32) 11]
Test Case: 371 | Input/Output: [(3 41 33 38) 3]
Test Case: 372 | Input/Output: [(57 58 86 31) 31]
Test Case: 373 | Input/Output: [(45 23 45 98) 23]
Test Case: 374 | Input/Output: [(45 34 52 62) 34]
Test Case: 375 | Input/Output: [(19 24 15 41) 15]
Test Case: 376 | Input/Output: [(73 12 57 87) 12]
Test Case: 377 | Input/Output: [(12 49 98 48) 12]
Test Case: 378 | Input/Output: [(55 26 76 76) 26]
Test Case: 379 | Input/Output: [(11 93 49 75) 11]
Test Case: 380 | Input/Output: [(40 24 16 37) 16]
Test Case: 381 | Input/Output: [(35 77 90 96) 35]
Test Case: 382 | Input/Output: [(19 100 37 9) 9]
Test Case: 383 | Input/Output: [(11 62 45 92) 11]
Test Case: 384 | Input/Output: [(47 47 85 88) 47]
Test Case: 385 | Input/Output: [(99 6 80 60) 6]
Test Case: 386 | Input/Output: [(47 31 43 99) 31]
Test Case: 387 | Input/Output: [(62 22 62 86) 22]
Test Case: 388 | Input/Output: [(80 48 70 55) 48]
Test Case: 389 | Input/Output: [(55 100 91 47) 47]
Test Case: 390 | Input/Output: [(37 25 64 95) 25]
Test Case: 391 | Input/Output: [(82 51 49 30) 30]
Test Case: 392 | Input/Output: [(28 68 9 16) 9]
Test Case: 393 | Input/Output: [(86 74 88 97) 74]
Test Case: 394 | Input/Output: [(77 70 91 73) 70]
Test Case: 395 | Input/Output: [(60 90 24 62) 24]
Test Case: 396 | Input/Output: [(64 9 3 9) 3]
Test Case: 397 | Input/Output: [(98 62 43 66) 43]
Test Case: 398 | Input/Output: [(69 6 61 25) 6]
Test Case: 399 | Input/Output: [(64 38 5 27) 5]
Test Case: 400 | Input/Output: [(59 -34 -66 68) -66]
Test Case: 401 | Input/Output: [(-65 63 26 -64) -65]
Test Case: 402 | Input/Output: [(-36 30 33 -14) -36]
Test Case: 403 | Input/Output: [(75 -21 -98 -39) -98]
Test Case: 404 | Input/Output: [(79 -91 25 5) -91]
Test Case: 405 | Input/Output: [(-2 97 -49 14) -49]
Test Case: 406 | Input/Output: [(39 -38 8 -65) -65]
Test Case: 407 | Input/Output: [(-78 -47 -75 -64) -78]
Test Case: 408 | Input/Output: [(-72 -98 56 23) -98]
Test Case: 409 | Input/Output: [(-44 12 62 -33) -44]
Test Case: 410 | Input/Output: [(5 -33 -55 80) -55]
Test Case: 411 | Input/Output: [(-87 -69 -42 -77) -87]
Test Case: 412 | Input/Output: [(-89 4 28 -95) -95]
Test Case: 413 | Input/Output: [(-81 -4 -20 90) -81]
Test Case: 414 | Input/Output: [(-58 -60 57 23) -60]
Test Case: 415 | Input/Output: [(-51 -49 -80 12) -80]
Test Case: 416 | Input/Output: [(19 89 47 -56) -56]
Test Case: 417 | Input/Output: [(52 66 -90 -41) -90]
Test Case: 418 | Input/Output: [(45 4 44 99) 4]
Test Case: 419 | Input/Output: [(52 -26 67 9) -26]
Test Case: 420 | Input/Output: [(57 -94 -5 88) -94]
Test Case: 421 | Input/Output: [(87 -25 35 -23) -25]
Test Case: 422 | Input/Output: [(-93 18 35 92) -93]
Test Case: 423 | Input/Output: [(-89 9 -57 -80) -89]
Test Case: 424 | Input/Output: [(9 -57 29 -96) -96]
Test Case: 425 | Input/Output: [(-68 100 -1 52) -68]
Test Case: 426 | Input/Output: [(99 -98 23 3) -98]
Test Case: 427 | Input/Output: [(96 14 59 45) 14]
Test Case: 428 | Input/Output: [(89 -26 14 -42) -42]
Test Case: 429 | Input/Output: [(-48 -59 -34 -95) -95]
Test Case: 430 | Input/Output: [(93 56 -24 20) -24]
Test Case: 431 | Input/Output: [(-12 3 12 93) -12]
Test Case: 432 | Input/Output: [(-42 89 -57 -60) -60]
Test Case: 433 | Input/Output: [(-11 42 -89 -73) -89]
Test Case: 434 | Input/Output: [(87 6 78 -77) -77]
Test Case: 435 | Input/Output: [(81 75 87 84) 75]
Test Case: 436 | Input/Output: [(59 -56 5 -58) -58]
Test Case: 437 | Input/Output: [(82 9 -43 -75) -75]
Test Case: 438 | Input/Output: [(-68 -15 -6 -29) -68]
Test Case: 439 | Input/Output: [(-46 -3 -10 15) -46]
Test Case: 440 | Input/Output: [(-13 -89 -29 -100) -100]
Test Case: 441 | Input/Output: [(-62 69 -84 54) -84]
Test Case: 442 | Input/Output: [(45 -30 -19 -39) -39]
Test Case: 443 | Input/Output: [(16 64 45 57) 16]
Test Case: 444 | Input/Output: [(9 47 60 -92) -92]
Test Case: 445 | Input/Output: [(-13 88 -4 16) -13]
Test Case: 446 | Input/Output: [(34 24 66 77) 24]
Test Case: 447 | Input/Output: [(73 -48 -67 25) -67]
Test Case: 448 | Input/Output: [(88 55 -95 66) -95]
Test Case: 449 | Input/Output: [(49 -60 6 76) -60]
Test Case: 450 | Input/Output: [(37 16 -43 -86) -86]
Test Case: 451 | Input/Output: [(62 0 -71 -78) -78]
Test Case: 452 | Input/Output: [(16 -22 -97 -65) -97]
Test Case: 453 | Input/Output: [(-81 18 64 -85) -85]
Test Case: 454 | Input/Output: [(76 69 -61 -97) -97]
Test Case: 455 | Input/Output: [(-84 49 23 -18) -84]
Test Case: 456 | Input/Output: [(-96 69 24 -7) -96]
Test Case: 457 | Input/Output: [(5 -90 97 58) -90]
Test Case: 458 | Input/Output: [(-6 33 -22 -59) -59]
Test Case: 459 | Input/Output: [(-49 -34 82 -1) -49]
Test Case: 460 | Input/Output: [(-94 -56 28 23) -94]
Test Case: 461 | Input/Output: [(-23 -62 41 14) -62]
Test Case: 462 | Input/Output: [(-79 -24 -61 -57) -79]
Test Case: 463 | Input/Output: [(1 -27 93 -5) -27]
Test Case: 464 | Input/Output: [(40 10 63 81) 10]
Test Case: 465 | Input/Output: [(79 -53 -90 49) -90]
Test Case: 466 | Input/Output: [(80 -54 99 -17) -54]
Test Case: 467 | Input/Output: [(-95 -73 -32 -95) -95]
Test Case: 468 | Input/Output: [(20 -35 14 93) -35]
Test Case: 469 | Input/Output: [(-81 71 87 55) -81]
Test Case: 470 | Input/Output: [(97 -28 1 -35) -35]
Test Case: 471 | Input/Output: [(21 14 -40 -34) -40]
Test Case: 472 | Input/Output: [(-85 81 25 -25) -85]
Test Case: 473 | Input/Output: [(66 -76 -40 14) -76]
Test Case: 474 | Input/Output: [(67 77 -50 -98) -98]
Test Case: 475 | Input/Output: [(4 -73 64 -93) -93]
Test Case: 476 | Input/Output: [(72 38 94 21) 21]
Test Case: 477 | Input/Output: [(-69 -84 60 -25) -84]
Test Case: 478 | Input/Output: [(35 7 28 98) 7]
Test Case: 479 | Input/Output: [(-95 -99 6 84) -99]
Test Case: 480 | Input/Output: [(36 -80 17 -16) -80]
Test Case: 481 | Input/Output: [(69 41 -62 41) -62]
Test Case: 482 | Input/Output: [(48 7 -96 40) -96]
Test Case: 483 | Input/Output: [(63 14 -36 -93) -93]
Test Case: 484 | Input/Output: [(5 -49 1 32) -49]
Test Case: 485 | Input/Output: [(51 -23 -58 4) -58]
Test Case: 486 | Input/Output: [(56 48 83 -24) -24]
Test Case: 487 | Input/Output: [(-33 20 -96 77) -96]
Test Case: 488 | Input/Output: [(30 -83 -87 45) -87]
Test Case: 489 | Input/Output: [(6 75 3 80) 3]
Test Case: 490 | Input/Output: [(29 -52 72 6) -52]
Test Case: 491 | Input/Output: [(85 26 97 -23) -23]
Test Case: 492 | Input/Output: [(-60 -84 76 -85) -85]
Test Case: 493 | Input/Output: [(64 54 79 14) 14]
Test Case: 494 | Input/Output: [(92 33 -21 82) -21]
Test Case: 495 | Input/Output: [(-41 97 -30 72) -41]
Test Case: 496 | Input/Output: [(90 47 -20 -40) -40]
Test Case: 497 | Input/Output: [(-16 -33 -73 -52) -73]
Test Case: 498 | Input/Output: [(-80 -47 34 93) -80]
Test Case: 499 | Input/Output: [(6 -37 98 -63) -63]
Test Case: 500 | Input/Output: [(-55 87 -1 64) -55]
Test Case: 501 | Input/Output: [(-13 75 -51 62) -51]
Test Case: 502 | Input/Output: [(75 6 58 79) 6]
Test Case: 503 | Input/Output: [(-7 76 -88 -93) -93]
Test Case: 504 | Input/Output: [(-32 25 -50 48) -50]
Test Case: 505 | Input/Output: [(-63 -40 -4 33) -63]
Test Case: 506 | Input/Output: [(-81 -41 -22 61) -81]
Test Case: 507 | Input/Output: [(13 13 -26 -51) -51]
Test Case: 508 | Input/Output: [(-31 83 43 -93) -93]
Test Case: 509 | Input/Output: [(83 -57 -6 36) -57]
Test Case: 510 | Input/Output: [(-88 41 -54 -40) -88]
Test Case: 511 | Input/Output: [(74 70 82 -95) -95]
Test Case: 512 | Input/Output: [(36 6 -26 16) -26]
Test Case: 513 | Input/Output: [(-84 14 91 39) -84]
Test Case: 514 | Input/Output: [(-41 -89 -44 77) -89]
Test Case: 515 | Input/Output: [(-30 -71 43 -88) -88]
Test Case: 516 | Input/Output: [(16 59 37 79) 16]
Test Case: 517 | Input/Output: [(59 -12 57 -85) -85]
Test Case: 518 | Input/Output: [(-65 -46 -71 -77) -77]
Test Case: 519 | Input/Output: [(-56 79 -40 -10) -56]
Test Case: 520 | Input/Output: [(-80 -90 57 5) -90]
Test Case: 521 | Input/Output: [(77 14 -83 49) -83]
Test Case: 522 | Input/Output: [(-77 79 35 -83) -83]
Test Case: 523 | Input/Output: [(-3 27 -35 -22) -35]
Test Case: 524 | Input/Output: [(-98 -52 -71 26) -98]
Test Case: 525 | Input/Output: [(-85 -10 -99 31) -99]
Test Case: 526 | Input/Output: [(-64 -19 93 15) -64]
Test Case: 527 | Input/Output: [(60 81 -55 33) -55]
Test Case: 528 | Input/Output: [(95 -77 98 19) -77]
Test Case: 529 | Input/Output: [(25 -9 100 -15) -15]
Test Case: 530 | Input/Output: [(-23 -65 42 91) -65]
Test Case: 531 | Input/Output: [(-7 37 62 -37) -37]
Test Case: 532 | Input/Output: [(31 38 -80 77) -80]
Test Case: 533 | Input/Output: [(-84 33 16 69) -84]
Test Case: 534 | Input/Output: [(30 -20 -6 50) -20]
Test Case: 535 | Input/Output: [(-24 -28 22 -32) -32]
Test Case: 536 | Input/Output: [(-27 -64 62 69) -64]
Test Case: 537 | Input/Output: [(-65 92 4 81) -65]
Test Case: 538 | Input/Output: [(-93 91 52 9) -93]
Test Case: 539 | Input/Output: [(91 8 -90 73) -90]
Test Case: 540 | Input/Output: [(37 -25 19 -82) -82]
Test Case: 541 | Input/Output: [(37 51 -1 -76) -76]
Test Case: 542 | Input/Output: [(-21 -15 65 83) -21]
Test Case: 543 | Input/Output: [(-30 -38 -16 -89) -89]
Test Case: 544 | Input/Output: [(72 6 -39 79) -39]
Test Case: 545 | Input/Output: [(91 74 63 -73) -73]
Test Case: 546 | Input/Output: [(69 96 37 -95) -95]
Test Case: 547 | Input/Output: [(-24 83 69 -20) -24]
Test Case: 548 | Input/Output: [(3 27 52 43) 3]
Test Case: 549 | Input/Output: [(34 -41 -75 32) -75]
Test Case: 550 | Input/Output: [(-92 -68 -66 -96) -96]
Test Case: 551 | Input/Output: [(-25 90 -87 27) -87]
Test Case: 552 | Input/Output: [(-24 49 -49 -56) -56]
Test Case: 553 | Input/Output: [(89 -66 32 40) -66]
Test Case: 554 | Input/Output: [(-36 21 -1 27) -36]
Test Case: 555 | Input/Output: [(94 57 46 68) 46]
Test Case: 556 | Input/Output: [(99 38 80 98) 38]
Test Case: 557 | Input/Output: [(85 4 -3 93) -3]
Test Case: 558 | Input/Output: [(20 7 87 12) 7]
Test Case: 559 | Input/Output: [(-5 -3 87 -64) -64]
Test Case: 560 | Input/Output: [(35 -95 76 24) -95]
Test Case: 561 | Input/Output: [(10 71 -64 89) -64]
Test Case: 562 | Input/Output: [(-94 -61 25 76) -94]
Test Case: 563 | Input/Output: [(49 77 70 35) 35]
Test Case: 564 | Input/Output: [(29 33 36 -46) -46]
Test Case: 565 | Input/Output: [(-7 69 -50 33) -50]
Test Case: 566 | Input/Output: [(-20 -24 -46 -56) -56]
Test Case: 567 | Input/Output: [(4 100 60 -45) -45]
Test Case: 568 | Input/Output: [(89 27 93 -19) -19]
Test Case: 569 | Input/Output: [(5 63 -3 -67) -67]
Test Case: 570 | Input/Output: [(5 7 36 57) 5]
Test Case: 571 | Input/Output: [(-28 49 -30 -62) -62]
Test Case: 572 | Input/Output: [(97 -91 -77 49) -91]
Test Case: 573 | Input/Output: [(-75 -1 -31 -48) -75]
Test Case: 574 | Input/Output: [(11 -86 13 5) -86]
Test Case: 575 | Input/Output: [(-71 43 88 91) -71]
Test Case: 576 | Input/Output: [(37 -97 7 70) -97]
Test Case: 577 | Input/Output: [(62 -60 35 -10) -60]
Test Case: 578 | Input/Output: [(-88 -100 64 -39) -100]
Test Case: 579 | Input/Output: [(40 -15 75 -43) -43]
Test Case: 580 | Input/Output: [(94 -35 99 81) -35]
Test Case: 581 | Input/Output: [(31 -83 -70 -23) -83]
Test Case: 582 | Input/Output: [(-65 -56 -7 -31) -65]
Test Case: 583 | Input/Output: [(72 7 46 -97) -97]
Test Case: 584 | Input/Output: [(85 96 38 -92) -92]
Test Case: 585 | Input/Output: [(-36 -81 -69 -6) -81]
Test Case: 586 | Input/Output: [(-29 51 -39 -76) -76]
Test Case: 587 | Input/Output: [(21 -81 64 -32) -81]
Test Case: 588 | Input/Output: [(19 11 69 90) 11]
Test Case: 589 | Input/Output: [(-53 -64 -69 22) -69]
Test Case: 590 | Input/Output: [(-19 -78 -77 -44) -78]
Test Case: 591 | Input/Output: [(56 49 -83 70) -83]
Test Case: 592 | Input/Output: [(53 -7 -96 -36) -96]
Test Case: 593 | Input/Output: [(4 -57 -44 95) -57]
Test Case: 594 | Input/Output: [(-13 92 60 -43) -43]
Test Case: 595 | Input/Output: [(42 69 38 -95) -95]
Test Case: 596 | Input/Output: [(-87 -16 -76 -53) -87]
Test Case: 597 | Input/Output: [(-3 -69 -51 -97) -97]
Test Case: 598 | Input/Output: [(3 -12 52 33) -12]
Test Case: 599 | Input/Output: [(-11 44 21 8) -11]
Test Case: 600 | Input/Output: [(47 42 -20 -35) -35]
Test Case: 601 | Input/Output: [(-94 94 41 -97) -97]
Test Case: 602 | Input/Output: [(38 42 47 28) 28]
Test Case: 603 | Input/Output: [(-74 64 2 -6) -74]
Test Case: 604 | Input/Output: [(36 39 -54 5) -54]
Test Case: 605 | Input/Output: [(62 37 17 33) 17]
Test Case: 606 | Input/Output: [(-10 24 59 96) -10]
Test Case: 607 | Input/Output: [(-65 4 1 -5) -65]
Test Case: 608 | Input/Output: [(12 -85 -64 75) -85]
Test Case: 609 | Input/Output: [(-38 -95 89 -100) -100]
Test Case: 610 | Input/Output: [(-91 -5 44 -68) -91]
Test Case: 611 | Input/Output: [(26 -14 -18 -58) -58]
Test Case: 612 | Input/Output: [(-21 53 73 -29) -29]
Test Case: 613 | Input/Output: [(-93 -31 61 78) -93]
Test Case: 614 | Input/Output: [(-3 -7 2 -91) -91]
Test Case: 615 | Input/Output: [(-60 -60 49 -6) -60]
Test Case: 616 | Input/Output: [(15 -100 35 -59) -100]
Test Case: 617 | Input/Output: [(50 -43 -43 -6) -43]
Test Case: 618 | Input/Output: [(-93 -87 79 -43) -93]
Test Case: 619 | Input/Output: [(8 91 -28 -1) -28]
Test Case: 620 | Input/Output: [(-10 -59 -23 55) -59]
Test Case: 621 | Input/Output: [(44 81 -76 98) -76]
Test Case: 622 | Input/Output: [(-28 -44 49 59) -44]
Test Case: 623 | Input/Output: [(16 -55 84 0) -55]
Test Case: 624 | Input/Output: [(49 -62 -98 20) -98]
Test Case: 625 | Input/Output: [(39 -88 56 15) -88]
Test Case: 626 | Input/Output: [(14 -70 -40 43) -70]
Test Case: 627 | Input/Output: [(25 19 -18 -99) -99]
Test Case: 628 | Input/Output: [(57 3 49 -69) -69]
Test Case: 629 | Input/Output: [(-4 42 -20 88) -20]
Test Case: 630 | Input/Output: [(89 51 37 44) 37]
Test Case: 631 | Input/Output: [(28 -43 88 -52) -52]
Test Case: 632 | Input/Output: [(51 -91 45 31) -91]
Test Case: 633 | Input/Output: [(0 -6 35 73) -6]
Test Case: 634 | Input/Output: [(75 -100 -48 35) -100]
Test Case: 635 | Input/Output: [(-71 -14 19 82) -71]
Test Case: 636 | Input/Output: [(30 -94 -88 -52) -94]
Test Case: 637 | Input/Output: [(-28 -35 -66 -83) -83]
Test Case: 638 | Input/Output: [(-12 82 -3 52) -12]
Test Case: 639 | Input/Output: [(-21 17 54 37) -21]
Test Case: 640 | Input/Output: [(-71 12 7 8) -71]
Test Case: 641 | Input/Output: [(49 -59 25 -71) -71]
Test Case: 642 | Input/Output: [(-44 -46 70 48) -46]
Test Case: 643 | Input/Output: [(-15 -67 -94 99) -94]
Test Case: 644 | Input/Output: [(9 -49 -8 -99) -99]
Test Case: 645 | Input/Output: [(11 -1 -13 3) -13]
Test Case: 646 | Input/Output: [(-79 19 -21 -65) -79]
Test Case: 647 | Input/Output: [(-70 78 89 31) -70]
Test Case: 648 | Input/Output: [(-81 1 54 61) -81]
Test Case: 649 | Input/Output: [(1 -55 -7 61) -55]
Test Case: 650 | Input/Output: [(-44 -8 -90 -53) -90]
Test Case: 651 | Input/Output: [(60 -86 -92 -18) -92]
Test Case: 652 | Input/Output: [(-74 -100 29 24) -100]
Test Case: 653 | Input/Output: [(-20 -22 87 -34) -34]
Test Case: 654 | Input/Output: [(65 40 -50 31) -50]
Test Case: 655 | Input/Output: [(46 41 -96 -44) -96]
Test Case: 656 | Input/Output: [(34 76 -83 -96) -96]
Test Case: 657 | Input/Output: [(-96 85 10 10) -96]
Test Case: 658 | Input/Output: [(63 -92 -19 -46) -92]
Test Case: 659 | Input/Output: [(50 6 -89 23) -89]
Test Case: 660 | Input/Output: [(61 47 67 100) 47]
Test Case: 661 | Input/Output: [(-57 67 -32 -98) -98]
Test Case: 662 | Input/Output: [(12 50 -65 88) -65]
Test Case: 663 | Input/Output: [(95 67 18 89) 18]
Test Case: 664 | Input/Output: [(-63 24 -11 75) -63]
Test Case: 665 | Input/Output: [(-13 -73 23 25) -73]
Test Case: 666 | Input/Output: [(-59 -4 -47 12) -59]
Test Case: 667 | Input/Output: [(-13 39 100 -64) -64]
Test Case: 668 | Input/Output: [(64 -29 -12 -17) -29]
Test Case: 669 | Input/Output: [(-95 69 91 95) -95]
Test Case: 670 | Input/Output: [(-2 -68 97 10) -68]
Test Case: 671 | Input/Output: [(-76 -41 57 -22) -76]
Test Case: 672 | Input/Output: [(-89 -92 61 82) -92]
Test Case: 673 | Input/Output: [(-48 71 27 73) -48]
Test Case: 674 | Input/Output: [(-16 2 47 3) -16]
Test Case: 675 | Input/Output: [(25 -46 62 -64) -64]
Test Case: 676 | Input/Output: [(-12 44 -41 81) -41]
Test Case: 677 | Input/Output: [(80 -34 -62 19) -62]
Test Case: 678 | Input/Output: [(64 40 -11 84) -11]
Test Case: 679 | Input/Output: [(-51 -34 93 25) -51]
Test Case: 680 | Input/Output: [(57 96 -11 50) -11]
Test Case: 681 | Input/Output: [(-45 41 90 -10) -45]
Test Case: 682 | Input/Output: [(81 41 48 -46) -46]
Test Case: 683 | Input/Output: [(64 41 -100 -18) -100]
Test Case: 684 | Input/Output: [(-46 85 -70 -28) -70]
Test Case: 685 | Input/Output: [(-42 -34 -4 32) -42]
Test Case: 686 | Input/Output: [(58 15 50 85) 15]
Test Case: 687 | Input/Output: [(96 99 7 -66) -66]
Test Case: 688 | Input/Output: [(-30 88 45 98) -30]
Test Case: 689 | Input/Output: [(93 43 1 49) 1]
Test Case: 690 | Input/Output: [(52 91 -12 97) -12]
Test Case: 691 | Input/Output: [(-75 -77 -37 38) -77]
Test Case: 692 | Input/Output: [(-77 62 -5 -78) -78]
Test Case: 693 | Input/Output: [(83 -69 -80 -41) -80]
Test Case: 694 | Input/Output: [(-62 -99 -25 -78) -99]
Test Case: 695 | Input/Output: [(-80 90 7 64) -80]
Test Case: 696 | Input/Output: [(-63 -24 29 61) -63]
Test Case: 697 | Input/Output: [(70 47 38 43) 38]
Test Case: 698 | Input/Output: [(71 86 91 -19) -19]
Test Case: 699 | Input/Output: [(-68 31 -10 -22) -68]
Test Case: 700 | Input/Output: [(-100 -9 53 47) -100]
Test Case: 701 | Input/Output: [(23 1 14 -66) -66]
Test Case: 702 | Input/Output: [(-56 95 26 68) -56]
Test Case: 703 | Input/Output: [(-9 37 -2 -11) -11]
Test Case: 704 | Input/Output: [(52 84 -67 -28) -67]
Test Case: 705 | Input/Output: [(-12 42 61 74) -12]
Test Case: 706 | Input/Output: [(-60 62 -55 -79) -79]
Test Case: 707 | Input/Output: [(76 -6 90 -73) -73]
Test Case: 708 | Input/Output: [(-10 -91 95 5) -91]
Test Case: 709 | Input/Output: [(-38 70 -24 -25) -38]
Test Case: 710 | Input/Output: [(-71 -45 -23 -19) -71]
Test Case: 711 | Input/Output: [(35 -42 54 78) -42]
Test Case: 712 | Input/Output: [(-38 68 -10 41) -38]
Test Case: 713 | Input/Output: [(-62 -69 80 -99) -99]
Test Case: 714 | Input/Output: [(15 18 5 -67) -67]
Test Case: 715 | Input/Output: [(-36 6 -48 -96) -96]
Test Case: 716 | Input/Output: [(84 -7 -95 -61) -95]
Test Case: 717 | Input/Output: [(-70 -58 1 -34) -70]
Test Case: 718 | Input/Output: [(82 -70 16 27) -70]
Test Case: 719 | Input/Output: [(-10 -12 -18 72) -18]
Test Case: 720 | Input/Output: [(72 -74 38 18) -74]
Test Case: 721 | Input/Output: [(4 -12 60 -58) -58]
Test Case: 722 | Input/Output: [(96 24 1 -80) -80]
Test Case: 723 | Input/Output: [(66 -85 13 51) -85]
Test Case: 724 | Input/Output: [(49 -26 85 -24) -26]
Test Case: 725 | Input/Output: [(85 -15 -3 69) -15]
Test Case: 726 | Input/Output: [(45 15 77 51) 15]
Test Case: 727 | Input/Output: [(-57 -37 -59 14) -59]
Test Case: 728 | Input/Output: [(-83 17 1 39) -83]
Test Case: 729 | Input/Output: [(39 93 37 42) 37]
Test Case: 730 | Input/Output: [(-90 24 -85 -85) -90]
Test Case: 731 | Input/Output: [(77 15 -24 17) -24]
Test Case: 732 | Input/Output: [(73 -86 -3 78) -86]
Test Case: 733 | Input/Output: [(98 90 4 74) 4]
Test Case: 734 | Input/Output: [(-7 -38 -81 85) -81]
Test Case: 735 | Input/Output: [(-35 -71 74 89) -71]
Test Case: 736 | Input/Output: [(68 42 23 -72) -72]
Test Case: 737 | Input/Output: [(12 83 53 62) 12]
Test Case: 738 | Input/Output: [(-25 -67 79 -36) -67]
Test Case: 739 | Input/Output: [(36 -38 -11 -13) -38]
Test Case: 740 | Input/Output: [(1 -96 -29 -91) -96]
Test Case: 741 | Input/Output: [(37 -12 -62 -59) -62]
Test Case: 742 | Input/Output: [(-3 -98 25 10) -98]
Test Case: 743 | Input/Output: [(-37 54 -98 -36) -98]
Test Case: 744 | Input/Output: [(45 -71 -43 -59) -71]
Test Case: 745 | Input/Output: [(44 -76 -17 -30) -76]
Test Case: 746 | Input/Output: [(59 -74 -46 31) -74]
Test Case: 747 | Input/Output: [(-10 15 13 9) -10]
Test Case: 748 | Input/Output: [(46 47 -72 -11) -72]
Test Case: 749 | Input/Output: [(88 -61 -59 54) -61]
Test Case: 750 | Input/Output: [(36 -74 34 17) -74]
Test Case: 751 | Input/Output: [(31 71 -41 15) -41]
Test Case: 752 | Input/Output: [(91 94 -3 66) -3]
Test Case: 753 | Input/Output: [(99 -13 -84 25) -84]
Test Case: 754 | Input/Output: [(64 -37 75 -14) -37]
Test Case: 755 | Input/Output: [(96 -36 -85 -74) -85]
Test Case: 756 | Input/Output: [(-55 -16 -37 -47) -55]
Test Case: 757 | Input/Output: [(-99 -72 78 -4) -99]
Test Case: 758 | Input/Output: [(45 23 79 -39) -39]
Test Case: 759 | Input/Output: [(-86 95 89 -72) -86]
Test Case: 760 | Input/Output: [(43 -61 -41 20) -61]
Test Case: 761 | Input/Output: [(-13 -1 53 -69) -69]
Test Case: 762 | Input/Output: [(-71 44 -28 87) -71]
Test Case: 763 | Input/Output: [(89 -47 1 -12) -47]
Test Case: 764 | Input/Output: [(5 -2 -85 -88) -88]
Test Case: 765 | Input/Output: [(-43 63 74 31) -43]
Test Case: 766 | Input/Output: [(-3 -63 91 50) -63]
Test Case: 767 | Input/Output: [(38 -92 -12 22) -92]
Test Case: 768 | Input/Output: [(63 -88 87 -44) -88]
Test Case: 769 | Input/Output: [(-21 30 19 -57) -57]
Test Case: 770 | Input/Output: [(-56 -56 79 -13) -56]
Test Case: 771 | Input/Output: [(15 45 -57 27) -57]
Test Case: 772 | Input/Output: [(8 43 39 91) 8]
Test Case: 773 | Input/Output: [(-37 50 0 91) -37]
Test Case: 774 | Input/Output: [(4 43 -18 -83) -83]
Test Case: 775 | Input/Output: [(19 18 -49 -70) -70]
Test Case: 776 | Input/Output: [(-94 51 15 -84) -94]
Test Case: 777 | Input/Output: [(61 76 8 -71) -71]
Test Case: 778 | Input/Output: [(-86 -86 -36 -79) -86]
Test Case: 779 | Input/Output: [(83 -33 40 -63) -63]
Test Case: 780 | Input/Output: [(-52 44 -25 -89) -89]
Test Case: 781 | Input/Output: [(30 83 53 -59) -59]
Test Case: 782 | Input/Output: [(26 8 -35 41) -35]
Test Case: 783 | Input/Output: [(27 -16 -74 30) -74]
Test Case: 784 | Input/Output: [(-98 0 -52 72) -98]
Test Case: 785 | Input/Output: [(-12 -47 -18 -26) -47]
Test Case: 786 | Input/Output: [(13 -63 -64 37) -64]
Test Case: 787 | Input/Output: [(-10 19 94 -100) -100]
Test Case: 788 | Input/Output: [(5 83 -1 -36) -36]
Test Case: 789 | Input/Output: [(54 58 -18 -62) -62]
Test Case: 790 | Input/Output: [(-58 -32 -50 96) -58]
Test Case: 791 | Input/Output: [(69 -2 28 -46) -46]
Test Case: 792 | Input/Output: [(-25 -20 87 -68) -68]
Test Case: 793 | Input/Output: [(-84 100 -98 7) -98]
Test Case: 794 | Input/Output: [(-31 100 6 -74) -74]
Test Case: 795 | Input/Output: [(75 98 14 41) 14]
Test Case: 796 | Input/Output: [(49 -22 52 85) -22]
Test Case: 797 | Input/Output: [(-7 -91 -87 -84) -91]
Test Case: 798 | Input/Output: [(80 -81 53 -87) -87]
Test Case: 799 | Input/Output: [(69 86 -82 32) -82]
Test Case: 800 | Input/Output: [(-52 72 -36 84) -52]
Test Case: 801 | Input/Output: [(-13 37 54 74) -13]
Test Case: 802 | Input/Output: [(26 82 -85 -18) -85]
Test Case: 803 | Input/Output: [(23 86 -2 99) -2]
Test Case: 804 | Input/Output: [(31 -49 3 41) -49]
Test Case: 805 | Input/Output: [(76 -99 -78 20) -99]
Test Case: 806 | Input/Output: [(53 -38 16 3) -38]
Test Case: 807 | Input/Output: [(2 -16 31 81) -16]
Test Case: 808 | Input/Output: [(1 81 63 -2) -2]
Test Case: 809 | Input/Output: [(26 -70 51 -94) -94]
Test Case: 810 | Input/Output: [(-32 -58 -91 -58) -91]
Test Case: 811 | Input/Output: [(86 39 69 7) 7]
Test Case: 812 | Input/Output: [(76 -4 -58 16) -58]
Test Case: 813 | Input/Output: [(-47 75 59 58) -47]
Test Case: 814 | Input/Output: [(-38 -54 -65 -78) -78]
Test Case: 815 | Input/Output: [(96 88 -100 -2) -100]
Test Case: 816 | Input/Output: [(-18 -73 25 44) -73]
Test Case: 817 | Input/Output: [(8 21 -72 -22) -72]
Test Case: 818 | Input/Output: [(30 32 -54 9) -54]
Test Case: 819 | Input/Output: [(-6 90 -99 -27) -99]
Test Case: 820 | Input/Output: [(-11 52 85 -42) -42]
Test Case: 821 | Input/Output: [(75 -16 97 -39) -39]
Test Case: 822 | Input/Output: [(11 20 90 -38) -38]
Test Case: 823 | Input/Output: [(9 -20 -52 81) -52]
Test Case: 824 | Input/Output: [(-81 -80 32 80) -81]
Test Case: 825 | Input/Output: [(-88 -90 -63 39) -90]
Test Case: 826 | Input/Output: [(32 35 -48 -15) -48]
Test Case: 827 | Input/Output: [(-7 83 82 -17) -17]
Test Case: 828 | Input/Output: [(-88 88 -26 -31) -88]
Test Case: 829 | Input/Output: [(45 72 -27 95) -27]
Test Case: 830 | Input/Output: [(19 -46 -68 70) -68]
Test Case: 831 | Input/Output: [(70 -49 55 -51) -51]
Test Case: 832 | Input/Output: [(-97 42 3 -52) -97]
Test Case: 833 | Input/Output: [(74 -30 -69 83) -69]
Test Case: 834 | Input/Output: [(-33 5 69 38) -33]
Test Case: 835 | Input/Output: [(66 -18 68 19) -18]
Test Case: 836 | Input/Output: [(96 17 -55 -76) -76]
Test Case: 837 | Input/Output: [(-13 58 -91 -20) -91]
Test Case: 838 | Input/Output: [(86 -40 -72 -57) -72]
Test Case: 839 | Input/Output: [(43 74 35 -48) -48]
Test Case: 840 | Input/Output: [(-48 64 -87 -38) -87]
Test Case: 841 | Input/Output: [(-80 -89 49 -85) -89]
Test Case: 842 | Input/Output: [(71 -41 97 20) -41]
Test Case: 843 | Input/Output: [(-82 -6 -88 67) -88]
Test Case: 844 | Input/Output: [(16 91 -7 -87) -87]
Test Case: 845 | Input/Output: [(-69 -87 38 -46) -87]
Test Case: 846 | Input/Output: [(-34 2 51 20) -34]
Test Case: 847 | Input/Output: [(-38 -97 -34 -20) -97]
Test Case: 848 | Input/Output: [(-3 -21 70 -35) -35]
Test Case: 849 | Input/Output: [(13 -5 59 68) -5]
Test Case: 850 | Input/Output: [(32 -46 58 69) -46]
Test Case: 851 | Input/Output: [(-72 49 61 22) -72]
Test Case: 852 | Input/Output: [(40 30 21 16) 16]
Test Case: 853 | Input/Output: [(62 -77 84 -10) -77]
Test Case: 854 | Input/Output: [(-28 -58 89 27) -58]
Test Case: 855 | Input/Output: [(100 -62 -10 -47) -62]
Test Case: 856 | Input/Output: [(10 -70 58 -47) -70]
Test Case: 857 | Input/Output: [(71 -73 24 61) -73]
Test Case: 858 | Input/Output: [(96 50 51 -59) -59]
Test Case: 859 | Input/Output: [(11 36 -29 -78) -78]
Test Case: 860 | Input/Output: [(-32 -56 47 100) -56]
Test Case: 861 | Input/Output: [(-29 -16 94 14) -29]
Test Case: 862 | Input/Output: [(6 49 83 4) 4]
Test Case: 863 | Input/Output: [(-94 48 -99 49) -99]
Test Case: 864 | Input/Output: [(-61 -38 -12 60) -61]
Test Case: 865 | Input/Output: [(-16 98 -33 -85) -85]
Test Case: 866 | Input/Output: [(64 21 2 27) 2]
Test Case: 867 | Input/Output: [(21 -12 -64 57) -64]
Test Case: 868 | Input/Output: [(97 -48 -73 55) -73]
Test Case: 869 | Input/Output: [(86 -71 9 33) -71]
Test Case: 870 | Input/Output: [(22 11 14 -13) -13]
Test Case: 871 | Input/Output: [(-66 27 -2 21) -66]
Test Case: 872 | Input/Output: [(89 17 61 -88) -88]
Test Case: 873 | Input/Output: [(73 -97 -72 39) -97]
Test Case: 874 | Input/Output: [(-36 -64 65 -92) -92]
Test Case: 875 | Input/Output: [(93 92 94 56) 56]
Test Case: 876 | Input/Output: [(21 7 -24 32) -24]
Test Case: 877 | Input/Output: [(-35 -24 -44 44) -44]
Test Case: 878 | Input/Output: [(-25 -15 -36 7) -36]
Test Case: 879 | Input/Output: [(91 65 14 -36) -36]
Test Case: 880 | Input/Output: [(-70 -31 88 -27) -70]
Test Case: 881 | Input/Output: [(-11 -27 56 29) -27]
Test Case: 882 | Input/Output: [(-64 10 71 -9) -64]
Test Case: 883 | Input/Output: [(-80 -48 64 12) -80]
Test Case: 884 | Input/Output: [(35 -9 -73 91) -73]
Test Case: 885 | Input/Output: [(94 36 90 -97) -97]
Test Case: 886 | Input/Output: [(-63 25 -34 74) -63]
Test Case: 887 | Input/Output: [(-58 57 -4 76) -58]
Test Case: 888 | Input/Output: [(-13 -13 99 -29) -29]
Test Case: 889 | Input/Output: [(-100 -94 -90 -78) -100]
Test Case: 890 | Input/Output: [(-58 81 -96 25) -96]
Test Case: 891 | Input/Output: [(-80 99 -87 85) -87]
Test Case: 892 | Input/Output: [(-11 -5 37 70) -11]
Test Case: 893 | Input/Output: [(98 -10 51 1) -10]
Test Case: 894 | Input/Output: [(8 87 -68 7) -68]
Test Case: 895 | Input/Output: [(-55 41 -28 -63) -63]
Test Case: 896 | Input/Output: [(-24 91 -12 40) -24]
Test Case: 897 | Input/Output: [(-97 -59 29 -30) -97]
Test Case: 898 | Input/Output: [(89 5 14 93) 5]
Test Case: 899 | Input/Output: [(-38 -28 -90 -86) -90]
Test Case: 900 | Input/Output: [(-27 -45 24 30) -45]
Test Case: 901 | Input/Output: [(-8 36 -34 26) -34]
Test Case: 902 | Input/Output: [(40 -14 -48 34) -48]
Test Case: 903 | Input/Output: [(-86 95 -8 55) -86]
Test Case: 904 | Input/Output: [(-88 26 -77 -81) -88]
Test Case: 905 | Input/Output: [(87 30 89 95) 30]
Test Case: 906 | Input/Output: [(-73 35 -10 -39) -73]
Test Case: 907 | Input/Output: [(-59 -77 -87 -82) -87]
Test Case: 908 | Input/Output: [(-66 20 -39 -95) -95]
Test Case: 909 | Input/Output: [(-8 -28 79 -6) -28]
Test Case: 910 | Input/Output: [(-85 29 -62 33) -85]
Test Case: 911 | Input/Output: [(-20 -8 54 -41) -41]
Test Case: 912 | Input/Output: [(-89 8 65 -33) -89]
Test Case: 913 | Input/Output: [(-55 5 72 -24) -55]
Test Case: 914 | Input/Output: [(-38 56 38 10) -38]
Test Case: 915 | Input/Output: [(-18 -74 -74 20) -74]
Test Case: 916 | Input/Output: [(32 -18 -60 20) -60]
Test Case: 917 | Input/Output: [(12 -68 -6 -42) -68]
Test Case: 918 | Input/Output: [(12 30 88 57) 12]
Test Case: 919 | Input/Output: [(-8 74 -69 41) -69]
Test Case: 920 | Input/Output: [(50 48 -30 85) -30]
Test Case: 921 | Input/Output: [(-71 77 -6 67) -71]
Test Case: 922 | Input/Output: [(9 -46 -2 -50) -50]
Test Case: 923 | Input/Output: [(1 -8 56 -47) -47]
Test Case: 924 | Input/Output: [(-35 -25 -26 23) -35]
Test Case: 925 | Input/Output: [(74 71 94 -90) -90]
Test Case: 926 | Input/Output: [(97 58 -79 -13) -79]
Test Case: 927 | Input/Output: [(-85 16 74 -26) -85]
Test Case: 928 | Input/Output: [(56 -64 55 -23) -64]
Test Case: 929 | Input/Output: [(35 72 -46 24) -46]
Test Case: 930 | Input/Output: [(42 -70 -48 -12) -70]
Test Case: 931 | Input/Output: [(46 -33 -63 -54) -63]
Test Case: 932 | Input/Output: [(16 60 -30 -30) -30]
Test Case: 933 | Input/Output: [(-69 -14 39 -29) -69]
Test Case: 934 | Input/Output: [(10 0 22 -97) -97]
Test Case: 935 | Input/Output: [(100 -92 -57 -24) -92]
Test Case: 936 | Input/Output: [(-58 24 -81 88) -81]
Test Case: 937 | Input/Output: [(95 30 -21 68) -21]
Test Case: 938 | Input/Output: [(-2 -73 -2 -42) -73]
Test Case: 939 | Input/Output: [(-62 -21 54 26) -62]
Test Case: 940 | Input/Output: [(-91 -87 -67 20) -91]
Test Case: 941 | Input/Output: [(-47 -7 89 -25) -47]
Test Case: 942 | Input/Output: [(0 77 -32 81) -32]
Test Case: 943 | Input/Output: [(-88 -44 60 38) -88]
Test Case: 944 | Input/Output: [(-72 99 -83 99) -83]
Test Case: 945 | Input/Output: [(4 -42 -44 -24) -44]
Test Case: 946 | Input/Output: [(48 -64 70 -39) -64]
Test Case: 947 | Input/Output: [(13 97 49 -92) -92]
Test Case: 948 | Input/Output: [(90 -90 -40 78) -90]
Test Case: 949 | Input/Output: [(-87 0 83 -15) -87]
Test Case: 950 | Input/Output: [(92 -31 71 -37) -37]
Test Case: 951 | Input/Output: [(87 -4 -16 99) -16]
Test Case: 952 | Input/Output: [(-60 28 92 -44) -60]
Test Case: 953 | Input/Output: [(6 0 17 40) 0]
Test Case: 954 | Input/Output: [(-24 24 -36 -80) -80]
Test Case: 955 | Input/Output: [(42 -96 -24 -3) -96]
Test Case: 956 | Input/Output: [(16 9 25 14) 9]
Test Case: 957 | Input/Output: [(-34 -94 -12 -23) -94]
Test Case: 958 | Input/Output: [(16 -64 -64 -57) -64]
Test Case: 959 | Input/Output: [(46 23 40 33) 23]
Test Case: 960 | Input/Output: [(96 -6 -85 -45) -85]
Test Case: 961 | Input/Output: [(-52 -58 67 31) -58]
Test Case: 962 | Input/Output: [(-88 -82 -26 -93) -93]
Test Case: 963 | Input/Output: [(-58 15 69 0) -58]
Test Case: 964 | Input/Output: [(-98 19 -7 -21) -98]
Test Case: 965 | Input/Output: [(70 86 -68 -69) -69]
Test Case: 966 | Input/Output: [(40 17 68 -99) -99]
Test Case: 967 | Input/Output: [(-25 59 -75 -40) -75]
Test Case: 968 | Input/Output: [(56 8 -15 -36) -36]
Test Case: 969 | Input/Output: [(61 -71 27 67) -71]
Test Case: 970 | Input/Output: [(-84 16 53 16) -84]
Test Case: 971 | Input/Output: [(68 -41 64 90) -41]
Test Case: 972 | Input/Output: [(-74 -31 -58 89) -74]
Test Case: 973 | Input/Output: [(26 -17 62 -85) -85]
Test Case: 974 | Input/Output: [(41 -50 92 87) -50]
Test Case: 975 | Input/Output: [(67 -24 -92 74) -92]
Test Case: 976 | Input/Output: [(67 -64 17 17) -64]
Test Case: 977 | Input/Output: [(-41 -89 88 -74) -89]
Test Case: 978 | Input/Output: [(-15 -37 14 98) -37]
Test Case: 979 | Input/Output: [(-1 55 -36 100) -36]
Test Case: 980 | Input/Output: [(80 -41 32 -56) -56]
Test Case: 981 | Input/Output: [(92 -96 89 25) -96]
Test Case: 982 | Input/Output: [(21 47 -2 -9) -9]
Test Case: 983 | Input/Output: [(3 82 -3 -78) -78]
Test Case: 984 | Input/Output: [(47 -58 -93 -96) -96]
Test Case: 985 | Input/Output: [(37 -66 -38 -100) -100]
Test Case: 986 | Input/Output: [(61 1 -23 5) -23]
Test Case: 987 | Input/Output: [(75 -83 48 -20) -83]
Test Case: 988 | Input/Output: [(-74 11 -48 -47) -74]
Test Case: 989 | Input/Output: [(-15 -95 35 68) -95]
Test Case: 990 | Input/Output: [(64 52 91 57) 52]
Test Case: 991 | Input/Output: [(-10 -87 73 10) -87]
Test Case: 992 | Input/Output: [(-73 32 93 -36) -73]
Test Case: 993 | Input/Output: [(-53 45 83 21) -53]
Test Case: 994 | Input/Output: [(78 -95 -31 -9) -95]
Test Case: 995 | Input/Output: [(-26 20 61 -12) -26]
Test Case: 996 | Input/Output: [(34 85 1 84) 1]
Test Case: 997 | Input/Output: [(-97 23 65 -95) -97]
Test Case: 998 | Input/Output: [(-9 -5 -48 -94) -94]
Test Case: 999 | Input/Output: [(-21 -63 81 34) -63]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 101 54 46 -86 67 -61 84 -1 -28 107 -30 -83 -87 -41 123 76
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[36 -74 -74 -74] -74] [[-23 -23 -23 14] -23] [[-21 -21 -11 -21] -21] [[75 -24 -24 -24] -24] [[-58 -58 -58 39] -58] [[-50 -50 43 -50] -50] [[14 33 33 33] 14] [[0 -9 -9 -9] -9] [[98 18 98 98] 18] [[47 47 47 -5] -5] [(100 100 100 100) 100] [(-19 -19 -19 -19) -19] [(-31 -31 -31 -31) -31] [(10 10 10 10) 10] [(47 47 47 47) 47] [(17 34 87 75) 17] [(8 1 29 73) 1] [(0 20 67 97) 0] [(35 57 40 14) 14] [(58 28 60 7) 7] [(87 46 1 8) 1] [(69 36 44 58) 36] [(69 59 30 14) 14] [(22 13 57 29) 13] [(38 1 76 52) 1] [(20 61 56 70) 20] [(92 41 66 28) 28] [(88 22 22 61) 22] [(77 45 19 75) 19] [(87 73 33 94) 33] [(95 14 44 72) 14] [(93 23 27 38) 23] [(60 20 0 85) 0] [(86 85 16 52) 16] [(74 74 30 4) 4] [(-87 78 15 63) -87] [(6 -21 10 41) -21] [(-31 -94 -48 92) -94] [(-12 -99 72 75) -99] [(-39 -65 -60 -25) -65] [(-35 52 -65 -8) -65] [(37 -52 -81 46) -81] [(50 36 -16 -99) -99] [(93 -86 -81 -39) -86] [(29 -30 25 12) -30] [(23 53 15 56) 15] [(-46 57 -7 -16) -46] [(23 36 42 8) 8] [(55 52 16 33) 16] [(80 73 22 -48) -48] [(88 -1 -79 80) -79] [(58 -91 52 78) -91] [(-82 -46 -80 -31) -82] [(-55 -9 37 -52) -55] [(-51 35 -9 54) -51] [(-40 -9 -24 53) -40] [(-26 82 14 9) -26] [(-65 -41 -21 50) -65] [(-71 -51 31 38) -71] [(12 -40 54 39) -40] [(-84 -43 69 27) -84] [(100 21 22 -87) -87] [(-33 -56 -22 -29) -56] [(29 -9 -43 18) -43] [(-15 75 -61 62) -61] [(-25 75 84 -6) -25] [(-43 -67 92 69) -67] [(46 86 69 90) 46] [(52 85 -53 49) -53] [(-55 -33 72 1) -55] [(93 41 15 63) 15] [(-78 -30 69 0) -78] [(-78 -36 -99 -83) -99] [(24 7 64 11) 7] [(-13 -43 -52 -18) -52] [(7 37 -21 90) -21] [(-39 35 28 -48) -48] [(92 -89 47 -50) -89] [(83 28 48 42) 28] [(26 65 51 93) 26] [(96 -42 -88 34) -88] [(21 -54 -99 18) -99] [(16 58 -83 -71) -83] [(61 26 48 -89) -89] [(-66 10 11 -88) -88] [(19 59 -57 28) -57] [(-74 -65 -50 -55) -74] [(20 -64 14 -1) -64] [(81 69 7 -93) -93] [(67 22 -9 -73) -73] [(2 73 -88 -61) -88] [(31 29 16 -39) -39] [(-45 -48 86 -36) -48] [(-79 -74 25 -69) -79] [(13 57 87 95) 13])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction -60} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_exec_298} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction 92} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y})
Lexicase best program: (integer_gt in2 exec_shove () exec_pop (-60) exec_if (integer_dup_times integer_dup exec_do*times (integer_empty exec_s (exec_shove (integer_gte) boolean_invert_first_then_and) (boolean_xor boolean_yankdup integer_fromboolean in2 exec_s_when_autoconstructing (exec_shove (integer_dup_times) boolean_invert_second_then_and in4 integer_pop in1 boolean_shove) () (tag_exec_298 (integer_lt tagged_145 in3 boolean_invert_second_then_and exec_y_when_autoconstructing (integer_sub) exec_do*range (integer_inc in4 in4) boolean_frominteger) exec_k (exec_when (integer_eq boolean_rot boolean_pop exec_k_when_autoconstructing (integer_yank in3 exec_y (exec_eq) exec_y_when_autoconstructing (exec_when () exec_if (print_integer integer_min 92) (integer_fromboolean exec_y (exec_shove (integer_lt exec_dup ()) integer_swap exec_s_when_autoconstructing (exec_y ()) () ())))) ())) ())) ())) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 96
Percent parens: 0.354
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction -60} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_exec_298} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction 92} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y})
Zero cases best program: (integer_gt in2 exec_shove () exec_pop (-60) exec_if (integer_dup_times integer_dup exec_do*times (integer_empty exec_s (exec_shove (integer_gte) boolean_invert_first_then_and) (boolean_xor boolean_yankdup integer_fromboolean in2 exec_s_when_autoconstructing (exec_shove (integer_dup_times) boolean_invert_second_then_and in4 integer_pop in1 boolean_shove) () (tag_exec_298 (integer_lt tagged_145 in3 boolean_invert_second_then_and exec_y_when_autoconstructing (integer_sub) exec_do*range (integer_inc in4 in4) boolean_frominteger) exec_k (exec_when (integer_eq boolean_rot boolean_pop exec_k_when_autoconstructing (integer_yank in3 exec_y (exec_eq) exec_y_when_autoconstructing (exec_when () exec_if (print_integer integer_min 92) (integer_fromboolean exec_y (exec_shove (integer_lt exec_dup ()) integer_swap exec_s_when_autoconstructing (exec_y ()) () ())))) ())) ())) ())) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 96
Percent parens: 0.354
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1000 8 3 1000 5 1 4 3 3)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (3 0 8 3 0 5 1 4 3 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2 integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if (exec_do*count (49 in1) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot (integer_lt boolean_invert_second_then_and) (exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) (exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)) ()) ())))) () ()))) ())) ())
Errors: [1 1 0 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 78
Size: 114
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 9.97
Median total errors in population: 10
Error averages by case: (0.997 1.0 0.992 0.997 1.0 0.995 0.999 0.996 0.997 0.997)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 50.093
Average program size in population (points): 69.058
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 448710
--- Timings ---
Current time: 1559314774810 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.7%
Reproduction:         0.8 seconds, 33.9%
Fitness Testing:      1.5 seconds, 61.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: 0                  
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction -9} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction tag_boolean_279} {:close 0, :instruction integer_rot} {:close 1, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times})
Lexicase best program: (exec_pop (boolean_and boolean_dup_items integer_shove) integer_max in1 integer_yankdup print_integer boolean_stackdepth boolean_flush exec_while (exec_swap (exec_do*while (integer_eq) boolean_dup_times integer_div integer_stackdepth) (print_exec (integer_eq -9 print_boolean boolean_yank exec_shove (integer_min in3)) exec_when (exec_do*count () boolean_dup integer_shove boolean_yankdup exec_k (exec_k (exec_flush exec_if (boolean_yankdup exec_while (exec_stackdepth boolean_swap integer_empty boolean_dup exec_y_when_autoconstructing ()) integer_yank integer_min exec_yank) () integer_add boolean_eq exec_yankdup integer_max) (boolean_empty integer_shove) boolean_stackdepth boolean_rot) (boolean_stackdepth integer_gte boolean_stackdepth in3 exec_yank exec_noop exec_pop (integer_lt integer_lte exec_rot () (in2 integer_yank integer_shove integer_gte exec_y (integer_min boolean_or boolean_not) integer_dup integer_max integer_pop in2 exec_flush) (tag_boolean_279 integer_rot print_newline) exec_y (exec_swap (integer_add integer_mult exec_k () () boolean_yankdup exec_swap () (integer_lt integer_min exec_s (boolean_rot boolean_dup_times integer_rot) (integer_fromboolean integer_max) (integer_max) exec_dup_times ())) ())))))))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 129
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction -9} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 0, :instruction tag_boolean_279} {:close 0, :instruction integer_rot} {:close 1, :instruction print_newline} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_times})
Zero cases best program: (exec_pop (boolean_and boolean_dup_items integer_shove) integer_max in1 integer_yankdup print_integer boolean_stackdepth boolean_flush exec_while (exec_swap (exec_do*while (integer_eq) boolean_dup_times integer_div integer_stackdepth) (print_exec (integer_eq -9 print_boolean boolean_yank exec_shove (integer_min in3)) exec_when (exec_do*count () boolean_dup integer_shove boolean_yankdup exec_k (exec_k (exec_flush exec_if (boolean_yankdup exec_while (exec_stackdepth boolean_swap integer_empty boolean_dup exec_y_when_autoconstructing ()) integer_yank integer_min exec_yank) () integer_add boolean_eq exec_yankdup integer_max) (boolean_empty integer_shove) boolean_stackdepth boolean_rot) (boolean_stackdepth integer_gte boolean_stackdepth in3 exec_yank exec_noop exec_pop (integer_lt integer_lte exec_rot () (in2 integer_yank integer_shove integer_gte exec_y (integer_min boolean_or boolean_not) integer_dup integer_max integer_pop in2 exec_flush) (tag_boolean_279 integer_rot print_newline) exec_y (exec_swap (integer_add integer_mult exec_k () () boolean_yankdup exec_swap () (integer_lt integer_min exec_s (boolean_rot boolean_dup_times integer_rot) (integer_fromboolean integer_max) (integer_max) exec_dup_times ())) ())))))))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 129
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 262 262 1000 271 532 1000 308 263 270)
Population mean number of elite cases: 5.17
Count of perfect (error zero) individuals by case: (0 262 262 0 271 532 0 308 263 270)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction -22} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_215} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when})
Best program: (exec_s (exec_pop () exec_shove (boolean_and) exec_pop () print_integer exec_if (-22 integer_flush) (exec_do*count (boolean_invert_first_then_and) boolean_empty exec_dup_items) exec_do*count (integer_dec boolean_pop integer_stackdepth) boolean_eq) (boolean_invert_first_then_and in1 boolean_rot boolean_dup integer_fromboolean print_integer tagged_215 boolean_swap integer_div) (exec_pop (exec_when ())))
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.832
Median total errors in population: 7
Error averages by case: (1.0 0.738 0.738 1.0 0.729 0.468 1.0 0.692 0.737 0.73)
Error minima by case: (1 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 50.469
Average program size in population (points): 72.092
Average percent parens in population: 0.310
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.504
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 246
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 860073
--- Timings ---
Current time: 1559314777318 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.4 seconds, 43.4%
Fitness Testing:      2.1 seconds, 38.9%
Report:               0.9 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: 14                 
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 75                 
Correct output: 1                   | Program output: 73                 
Correct output: 0                   | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 8                  
Correct output: 36                  | Program output: 58                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 29                 
Correct output: 1                   | Program output: 52                 
Correct output: 20                  | Program output: 70                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 61                 
Correct output: 19                  | Program output: 75                 
Correct output: 33                  | Program output: 94                 
Correct output: 14                  | Program output: 72                 
Correct output: 23                  | Program output: 38                 
Correct output: 0                   | Program output: 85                 
Correct output: 16                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: 63                 
Correct output: -21                 | Program output: 41                 
Correct output: -94                 | Program output: 92                 
Correct output: -99                 | Program output: 75                 
Correct output: -65                 | Program output: -25                
Correct output: -65                 | Program output: -8                 
Correct output: -81                 | Program output: 46                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -39                
Correct output: -30                 | Program output: 12                 
Correct output: 15                  | Program output: 56                 
Correct output: -46                 | Program output: -16                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: 80                 
Correct output: -91                 | Program output: 78                 
Correct output: -82                 | Program output: -31                
Correct output: -55                 | Program output: -52                
Correct output: -51                 | Program output: 54                 
Correct output: -40                 | Program output: 53                 
Correct output: -26                 | Program output: 9                  
Correct output: -65                 | Program output: 50                 
Correct output: -71                 | Program output: 38                 
Correct output: -40                 | Program output: 39                 
Correct output: -84                 | Program output: 27                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -29                
Correct output: -43                 | Program output: 18                 
Correct output: -61                 | Program output: 62                 
Correct output: -25                 | Program output: -6                 
Correct output: -67                 | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: -53                 | Program output: 49                 
Correct output: -55                 | Program output: 1                  
Correct output: 15                  | Program output: 63                 
Correct output: -78                 | Program output: 0                  
Correct output: -99                 | Program output: -83                
Correct output: 7                   | Program output: 11                 
Correct output: -52                 | Program output: -18                
Correct output: -21                 | Program output: 90                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -50                
Correct output: 28                  | Program output: 42                 
Correct output: 26                  | Program output: 93                 
Correct output: -88                 | Program output: 34                 
Correct output: -99                 | Program output: 18                 
Correct output: -83                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: 28                 
Correct output: -74                 | Program output: -55                
Correct output: -64                 | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -36                
Correct output: -79                 | Program output: -69                
Correct output: 13                  | Program output: 95                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_exec_624} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte})
Lexicase best program: (integer_empty exec_rot (exec_empty exec_swap (integer_div boolean_yankdup) (print_integer in4 boolean_flush integer_gte exec_if () () boolean_or exec_when (integer_lte print_integer boolean_yankdup boolean_stackdepth exec_dup (tag_exec_624 (exec_yankdup integer_gte))))) () ())
Lexicase best errors: [0 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_exec_624} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte})
Zero cases best program: (integer_empty exec_rot (exec_empty exec_swap (integer_div boolean_yankdup) (print_integer in4 boolean_flush integer_gte exec_if () () boolean_or exec_when (integer_lte print_integer boolean_yankdup boolean_stackdepth exec_dup (tag_exec_624 (exec_yankdup integer_gte))))) () ())
Zero cases best errors: [0 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 136 1 1 136 136 2 136 448 268)
Population mean number of elite cases: 1.40
Count of perfect (error zero) individuals by case: (136 136 1 1 136 136 2 136 448 268)
Population mean number of perfect (error zero) cases: 1.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_exec_624} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte})
Best program: (exec_pop (boolean_and boolean_empty integer_div boolean_yankdup) print_integer in4 boolean_flush integer_gte exec_if () () boolean_or exec_when (integer_lte print_integer boolean_yankdup boolean_stackdepth exec_dup (tag_exec_624 (exec_yankdup integer_gte))))
Errors: [0 0 1 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 8.6
Median total errors in population: 9
Error averages by case: (0.864 0.864 0.999 0.999 0.864 0.864 0.998 0.864 0.552 0.732)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.357
Average program size in population (points): 81.486
Average percent parens in population: 0.290
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.961
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1279337
--- Timings ---
Current time: 1559314780525 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.8 seconds, 54.4%
Fitness Testing:      2.7 seconds, 30.4%
Report:               1.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: 0                  
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 48} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor})
Lexicase best program: (integer_gt integer_min integer_gte in1 print_integer integer_mod integer_stackdepth boolean_empty integer_dec integer_yankdup boolean_invert_first_then_and in1 integer_dup_times boolean_invert_first_then_and exec_when (boolean_empty in1 integer_gt boolean_frominteger integer_yank boolean_invert_second_then_and in2 integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if (exec_do*count (48 in1) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot (integer_lt boolean_invert_second_then_and) (exec_do*while (exec_eq boolean_not integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank integer_swap exec_swap (boolean_xor) ()) ()) ()) ())))))
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 79
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 48} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor})
Zero cases best program: (integer_gt integer_min integer_gte in1 print_integer integer_mod integer_stackdepth boolean_empty integer_dec integer_yankdup boolean_invert_first_then_and in1 integer_dup_times boolean_invert_first_then_and exec_when (boolean_empty in1 integer_gt boolean_frominteger integer_yank boolean_invert_second_then_and in2 integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if (exec_do*count (48 in1) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot (integer_lt boolean_invert_second_then_and) (exec_do*while (exec_eq boolean_not integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank integer_swap exec_swap (boolean_xor) ()) ()) ()) ())))))
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 79
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (426 426 105 96 95 106 426 95 463 106)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (426 426 105 96 95 106 426 95 463 106)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction -22} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_215} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when})
Best program: (exec_s (exec_pop () exec_shove (boolean_and) exec_pop () print_integer exec_if (-22 integer_flush) (exec_do*count (boolean_invert_first_then_and) boolean_empty exec_dup_items) exec_do*count (integer_dec boolean_pop integer_stackdepth) boolean_eq) (boolean_invert_first_then_and in1 boolean_rot boolean_dup integer_fromboolean print_integer tagged_215 boolean_swap integer_div) (exec_pop (exec_when ())))
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.656
Median total errors in population: 7
Error averages by case: (0.574 0.574 0.895 0.904 0.905 0.894 0.574 0.905 0.537 0.894)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.422
Average program size in population (points): 62.769
Average percent parens in population: 0.307
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.3965
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1586194
--- Timings ---
Current time: 1559314783326 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.9 seconds, 59.8%
Fitness Testing:      3.0 seconds, 26.1%
Report:               1.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: 0                  
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction in1})
Lexicase best program: (exec_pop (boolean_and boolean_dup_items integer_shove) integer_max in1 integer_yankdup print_integer boolean_stackdepth boolean_flush exec_while (exec_swap (exec_do*while (in3 in2) exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_swap) integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if (exec_do*count (49 in1)) ()))) ()))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction in1})
Zero cases best program: (exec_pop (boolean_and boolean_dup_items integer_shove) integer_max in1 integer_yankdup print_integer boolean_stackdepth boolean_flush exec_while (exec_swap (exec_do*while (in3 in2) exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_swap) integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if (exec_do*count (49 in1)) ()))) ()))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 295 295 295 284 1 266 280 295 1)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (266 295 295 295 284 1 266 280 295 1)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_687} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_310} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_exec_517} {:close 1, :instruction boolean_dup})
Best program: (integer_gt integer_min boolean_rot in1 print_integer integer_mod integer_stackdepth boolean_empty integer_dec integer_yankdup boolean_invert_first_then_and in1 integer_dup_times boolean_invert_first_then_and exec_when (boolean_empty in1 integer_gt boolean_frominteger integer_yank boolean_invert_second_then_and exec_if () () integer_gte exec_shove (boolean_yankdup boolean_dup exec_flush boolean_yankdup) boolean_invert_second_then_and integer_mod boolean_pop boolean_invert_first_then_and exec_y_when_autoconstructing (integer_dup exec_do*times (exec_dup () exec_yankdup integer_mult integer_dup_items integer_inc tag_integer_687 exec_do*count (boolean_xor boolean_dup_times integer_dup_items exec_flush boolean_stackdepth integer_swap exec_dup_items) exec_dup_items exec_pop (integer_mult boolean_dup)) integer_swap)) boolean_yankdup integer_dup_times boolean_yankdup integer_pop exec_y () print_boolean tag_boolean_310 integer_dup_items exec_yank boolean_invert_first_then_and exec_y () boolean_yank exec_dup_items exec_yank integer_yankdup boolean_dup_items print_integer integer_add exec_dup_items integer_mod print_integer exec_do*range (exec_do*times (boolean_eq print_integer boolean_rot boolean_or tag_exec_517 (boolean_dup))))
Errors: [1 0 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 83
Size: 98
Percent parens: 0.153
--- Population Statistics ---
Average total errors in population: 7.722
Median total errors in population: 8
Error averages by case: (0.734 0.705 0.705 0.705 0.716 0.999 0.734 0.72 0.705 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.522
Average program size in population (points): 65.691
Average percent parens in population: 0.314
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.850125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1991353
--- Timings ---
Current time: 1559314786031 milliseconds
Total Time:          14.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.8 seconds, 62.0%
Fitness Testing:      3.5 seconds, 24.5%
Report:               1.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 in2) exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_swap) integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if () (exec_do*count (49 in1) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot () (integer_lt) (boolean_invert_second_then_and)) exec_do*while (exec_eq boolean_dup_items integer_gt in1 integer_fromboolean exec_rot () (integer_lt) (boolean_invert_second_then_and)) exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank) (integer_swap exec_swap (boolean_xor) (29 boolean_eq boolean_not boolean_and)) exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)))) ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 109
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 in2) exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_swap) integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if () (exec_do*count (49 in1) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot () (integer_lt) (boolean_invert_second_then_and)) exec_do*while (exec_eq boolean_dup_items integer_gt in1 integer_fromboolean exec_rot () (integer_lt) (boolean_invert_second_then_and)) exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank) (integer_swap exec_swap (boolean_xor) (29 boolean_eq boolean_not boolean_and)) exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)))) ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 109
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 529 162 187 187 187 187 161 512 162)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (187 529 162 187 187 187 187 161 512 162)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte})
Best program: (integer_empty exec_rot (exec_empty exec_swap (integer_div boolean_yankdup) (print_integer in4 boolean_flush exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 in2) exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_gte))) () ())
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 26
Size: 37
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.539
Median total errors in population: 9
Error averages by case: (0.813 0.471 0.838 0.813 0.813 0.813 0.813 0.839 0.488 0.838)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.123
Average program size in population (points): 68.893
Average percent parens in population: 0.294
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.1784375
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2338429
--- Timings ---
Current time: 1559314788798 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.9 seconds, 64.2%
Fitness Testing:      3.9 seconds, 22.7%
Report:               2.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction -60} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_exec_298} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction 92})
Lexicase best program: (integer_gt in2 exec_shove () exec_pop (-60) exec_if (integer_dup_times integer_dup exec_do*times (integer_empty exec_s (exec_shove (integer_gte) boolean_invert_first_then_and boolean_xor boolean_yankdup integer_mod in2 exec_s_when_autoconstructing (exec_shove (integer_dup_times boolean_invert_second_then_and in4 integer_pop in1 boolean_shove)) (tag_exec_298 (integer_lt tagged_145 in3 boolean_invert_second_then_and exec_y_when_autoconstructing (integer_sub) exec_do*range (integer_inc in4 in4) boolean_frominteger) exec_k (exec_when (integer_eq boolean_rot boolean_pop exec_k_when_autoconstructing (integer_yank in3 exec_y (exec_eq) exec_y_when_autoconstructing (exec_when () exec_if (print_integer integer_min 92) ())) ())) ()) ()) () ())) ())
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 81
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction -60} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_exec_298} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction 92})
Zero cases best program: (integer_gt in2 exec_shove () exec_pop (-60) exec_if (integer_dup_times integer_dup exec_do*times (integer_empty exec_s (exec_shove (integer_gte) boolean_invert_first_then_and boolean_xor boolean_yankdup integer_mod in2 exec_s_when_autoconstructing (exec_shove (integer_dup_times boolean_invert_second_then_and in4 integer_pop in1 boolean_shove)) (tag_exec_298 (integer_lt tagged_145 in3 boolean_invert_second_then_and exec_y_when_autoconstructing (integer_sub) exec_do*range (integer_inc in4 in4) boolean_frominteger) exec_k (exec_when (integer_eq boolean_rot boolean_pop exec_k_when_autoconstructing (integer_yank in3 exec_y (exec_eq) exec_y_when_autoconstructing (exec_when () exec_if (print_integer integer_min 92) ())) ())) ()) ()) () ())) ())
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 81
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (567 286 1 1000 283 1000 282 849 285 283)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (567 286 1 0 283 0 282 849 285 283)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_exec_624} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte})
Best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (integer_gte exec_if () () boolean_or exec_when (integer_lte print_integer boolean_yankdup boolean_stackdepth exec_dup (tag_exec_624 (exec_yankdup integer_gte))))) ())) ())
Errors: [1 0 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 43
Percent parens: 0.372
--- Population Statistics ---
Average total errors in population: 7.164
Median total errors in population: 8
Error averages by case: (0.433 0.714 0.999 1.0 0.717 1.0 0.718 0.151 0.715 0.717)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 61.385
Average program size in population (points): 86.146
Average percent parens in population: 0.292
Minimum age in population: 6.5
Maximum age in population: 11.0
Average age in population: 8.42303125
Median age in population: 8.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2834614
--- Timings ---
Current time: 1559314792222 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.5 seconds, 66.3%
Fitness Testing:      4.4 seconds, 21.5%
Report:               2.4 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 in2) exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_swap) integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if () (exec_do*count (49 in1) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot () (integer_lt) (boolean_invert_second_then_and)) exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank) (integer_swap exec_swap (boolean_xor) (29 boolean_eq boolean_not boolean_and)) exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)))) ())
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 96
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 in2) exec_if (exec_dup_times (boolean_and boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_swap) integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if () (exec_do*count (49 in1) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot () (integer_lt) (boolean_invert_second_then_and)) exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank) (integer_swap exec_swap (boolean_xor) (29 boolean_eq boolean_not boolean_and)) exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)))) ())
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 96
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 130 130 839 131 574 83 130 834 131)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (82 130 130 839 131 574 83 130 834 131)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items integer_max) (integer_lt in3 in2) exec_if (exec_dup_times (exec_eq boolean_frominteger) integer_shove) (print_integer integer_gte boolean_shove integer_swap) integer_gte exec_if (integer_gt integer_div) (integer_eq integer_add integer_empty integer_gt exec_dup_items exec_dup (in2 exec_if () (exec_do*count (49 integer_flush) in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot () (integer_lt) (boolean_invert_second_then_and)) exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k (integer_yank) (integer_swap exec_swap (boolean_xor) (29 boolean_eq boolean_not boolean_and)) exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 exec_s (exec_eq integer_stackdepth exec_yank) (integer_div boolean_invert_first_then_and) ()) ()))) ())
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 70
Size: 98
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.936
Median total errors in population: 7
Error averages by case: (0.918 0.87 0.87 0.161 0.869 0.426 0.917 0.87 0.166 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.119
Average program size in population (points): 85.513
Average percent parens in population: 0.338
Minimum age in population: 7.5
Maximum age in population: 12.109375
Average age in population: 10.02459375
Median age in population: 10.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3492591
--- Timings ---
Current time: 1559314795101 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.4 seconds, 65.8%
Fitness Testing:      5.1 seconds, 22.1%
Report:               2.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: 0                  
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_687} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer exec_yankdup boolean_shove exec_do*times (exec_if () (exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte integer_yank boolean_invert_second_then_and exec_if () () integer_gte exec_shove (boolean_yankdup boolean_dup exec_flush boolean_yankdup) boolean_invert_second_then_and integer_mod boolean_pop boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*times (exec_k_when_autoconstructing (exec_dup () exec_yankdup) (integer_mult integer_dup_items integer_inc tag_integer_687 exec_do*count (boolean_xor boolean_dup_times integer_dup_items exec_flush boolean_stackdepth integer_swap exec_dup_items) exec_dup_items exec_pop (integer_mult boolean_dup)) integer_swap) boolean_yankdup integer_dup_times boolean_yankdup) integer_pop print_exec () integer_yankdup) boolean_dup_items) ()))) ())) ())
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 100
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_687} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer exec_yankdup boolean_shove exec_do*times (exec_if () (exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte integer_yank boolean_invert_second_then_and exec_if () () integer_gte exec_shove (boolean_yankdup boolean_dup exec_flush boolean_yankdup) boolean_invert_second_then_and integer_mod boolean_pop boolean_invert_first_then_and exec_y_when_autoconstructing (exec_do*times (exec_k_when_autoconstructing (exec_dup () exec_yankdup) (integer_mult integer_dup_items integer_inc tag_integer_687 exec_do*count (boolean_xor boolean_dup_times integer_dup_items exec_flush boolean_stackdepth integer_swap exec_dup_items) exec_dup_items exec_pop (integer_mult boolean_dup)) integer_swap) boolean_yankdup integer_dup_times boolean_yankdup) integer_pop print_exec () integer_yankdup) boolean_dup_items) ()))) ())) ())
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 100
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (513 197 198 198 185 31 711 511 514 194)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (513 197 198 198 185 31 711 511 514 194)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 integer_empty exec_do*count (49 in1 in1 boolean_empty boolean_xor integer_pop integer_fromboolean exec_rot () (integer_lt boolean_swap) (exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k () (integer_yank integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ()))))) ())) ())) ())
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 71
Size: 105
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.748
Median total errors in population: 6
Error averages by case: (0.487 0.803 0.802 0.802 0.815 0.969 0.289 0.489 0.486 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.548
Average program size in population (points): 89.902
Average percent parens in population: 0.282
Minimum age in population: 9.0
Maximum age in population: 13.1875
Average age in population: 11.0028984375
Median age in population: 11.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3931907
--- Timings ---
Current time: 1559314798322 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.4 seconds, 66.6%
Fitness Testing:      5.6 seconds, 21.5%
Report:               3.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: 0                  
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_exec_298} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction 92} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (boolean_invert_second_then_and in4 integer_pop in1 boolean_shove) () tag_exec_298 (integer_lt tagged_145 in3 boolean_invert_second_then_and exec_y_when_autoconstructing (integer_sub) exec_do*range (integer_inc in4 in4) boolean_frominteger) exec_k (exec_when (integer_eq boolean_rot boolean_pop integer_mult integer_yank integer_shove exec_y (exec_eq) exec_y_when_autoconstructing (exec_when () exec_if (print_integer integer_min 92) (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)))) ())) ())) ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction tag_exec_298} {:close 0, :instruction integer_lt} {:close 0, :instruction tagged_145} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction 92} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (boolean_invert_second_then_and in4 integer_pop in1 boolean_shove) () tag_exec_298 (integer_lt tagged_145 in3 boolean_invert_second_then_and exec_y_when_autoconstructing (integer_sub) exec_do*range (integer_inc in4 in4) boolean_frominteger) exec_k (exec_when (integer_eq boolean_rot boolean_pop integer_mult integer_yank integer_shove exec_y (exec_eq) exec_y_when_autoconstructing (exec_when () exec_if (print_integer integer_min 92) (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)))) ())) ())) ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 511 386 386 388 386 384 190 203 911)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (309 511 386 386 388 386 384 190 203 911)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction -33} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_dup_items in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_swap () (exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_eq exec_yank integer_empty integer_gt exec_dup_items boolean_shove in2 integer_empty exec_do*count (49 in1 in1 boolean_empty -33 integer_pop integer_fromboolean exec_rot () (integer_lt boolean_swap) (exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k () (integer_yank integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ())))) ()))) ())) ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 105
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 5.946
Median total errors in population: 6
Error averages by case: (0.691 0.489 0.614 0.614 0.612 0.614 0.616 0.81 0.797 0.089)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.663
Average program size in population (points): 93.572
Average percent parens in population: 0.298
Minimum age in population: 10.0
Maximum age in population: 14.73046875
Average age in population: 12.66923828125
Median age in population: 12.734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4531493
--- Timings ---
Current time: 1559314801231 milliseconds
Total Time:          29.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.3 seconds, 65.7%
Fitness Testing:      6.3 seconds, 21.5%
Report:               3.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 0                  
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 0                  
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 0                  
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 0                  
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 0                  
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: 0                  
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 0                  
Correct output: -67                 | Program output: 0                  
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 0                  
Correct output: -79                 | Program output: 0                  
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) exec_do*while (exec_eq boolean_dup_items 29 boolean_eq boolean_not boolean_and)) (exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)) ())))) ())) ()) ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) exec_do*while (exec_eq boolean_dup_items 29 boolean_eq boolean_not boolean_and)) (exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)) ())))) ())) ()) ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (43 930 756 328 1000 467 43 1000 43 481)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (43 930 756 328 0 467 43 0 43 481)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 integer_gte boolean_swap) exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k () (integer_yank integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) exec_dup_times (integer_sub) integer_pop) (boolean_frominteger exec_k (-73) ()) ())))) ())) ()) ())
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 105
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.909
Median total errors in population: 6
Error averages by case: (0.957 0.07 0.244 0.672 1.0 0.533 0.957 1.0 0.957 0.519)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 66.983
Average program size in population (points): 98.667
Average percent parens in population: 0.321
Minimum age in population: 11.0
Maximum age in population: 16.22265625
Average age in population: 14.37510546875
Median age in population: 14.328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5258408
--- Timings ---
Current time: 1559314804611 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.1 seconds, 65.0%
Fitness Testing:      7.2 seconds, 22.1%
Report:               4.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 574
Test mean error for best: 0.57400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Lexicase best program: (boolean_empty exec_do*while (in1) integer_max integer_lt in3 boolean_empty integer_dup_items in1 integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing () (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (boolean_invert_second_then_and 49 in1 boolean_swap) (exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k () (integer_yank integer_swap exec_dup_times (integer_sub integer_pop) boolean_frominteger integer_fromboolean -73 integer_dup exec_eq integer_stackdepth boolean_yankdup) integer_div boolean_invert_first_then_and tagged_602) ())))))) ())
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Zero cases best program: (boolean_empty exec_do*while (in1) integer_max integer_lt in3 boolean_empty integer_dup_items in1 integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing () (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (boolean_invert_second_then_and 49 in1 boolean_swap) (exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k () (integer_yank integer_swap exec_dup_times (integer_sub integer_pop) boolean_frominteger integer_fromboolean -73 integer_dup exec_eq integer_stackdepth boolean_yankdup) integer_div boolean_invert_first_then_and tagged_602) ())))))) ())
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 2 1 844 857 808 884 2 336 22)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (336 2 1 844 857 808 884 2 336 22)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_if (boolean_empty integer_dup_items in1) (integer_max) integer_lt in3 boolean_empty integer_dup_items in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) exec_do*while (exec_eq boolean_dup_items integer_gt boolean_pop integer_shove integer_stackdepth) exec_k () (integer_yank integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) exec_dup_times (integer_sub) integer_pop) (boolean_frominteger exec_k (-73) ()) ())))) ())) ())) ())
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 106
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 5.908
Median total errors in population: 6
Error averages by case: (0.664 0.998 0.999 0.156 0.143 0.192 0.116 0.998 0.664 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.887
Average program size in population (points): 101.786
Average percent parens in population: 0.323
Minimum age in population: 14.34375
Maximum age in population: 17.66796875
Average age in population: 15.9635732421875
Median age in population: 16.2099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6088694
--- Timings ---
Current time: 1559314808073 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.9 seconds, 63.8%
Fitness Testing:      8.1 seconds, 22.6%
Report:               4.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 754
Test mean error for best: 0.75400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: 0                  
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_yankdup in1) (integer_max integer_lt in3 boolean_empty integer_dup_items boolean_swap) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times () exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (integer_div) integer_inc) exec_yank integer_empty integer_gt exec_dup_items exec_dup (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) (exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ()) ()) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_yankdup in1) (integer_max integer_lt in3 boolean_empty integer_dup_items boolean_swap) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times () exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (integer_div) integer_inc) exec_yank integer_empty integer_gt exec_dup_items exec_dup (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) (exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ()) ()) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (501 1000 919 1000 919 1000 49 419 208 589)
Population mean number of elite cases: 6.60
Count of perfect (error zero) individuals by case: (501 0 919 0 919 0 49 419 208 589)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_yankdup in1) (integer_max integer_lt in3 boolean_empty integer_dup_items boolean_swap) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times () exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (integer_div) integer_inc) exec_yank integer_empty integer_gt exec_dup_items exec_dup (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) (exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ()) ()) ()) () ())
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 92
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.396
Median total errors in population: 6
Error averages by case: (0.499 1.0 0.081 1.0 0.081 1.0 0.951 0.581 0.792 0.411)
Error minima by case: (0 1 0 1 0 1 0 0 0 0)
Average genome size in population (length): 67.862
Average program size in population (points): 101.264
Average percent parens in population: 0.329
Minimum age in population: 15.34375
Maximum age in population: 19.072265625
Average age in population: 17.67671044921875
Median age in population: 17.66650390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6883029
--- Timings ---
Current time: 1559314811551 milliseconds
Total Time:          39.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.7 seconds, 62.8%
Fitness Testing:      9.1 seconds, 23.0%
Report:               5.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: 0                  
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_yankdup in1) (integer_max integer_lt in3 boolean_empty integer_dup_items boolean_swap) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (integer_div) integer_inc) exec_yank integer_empty integer_gt exec_dup_items exec_dup (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) exec_dup_times (integer_sub) integer_pop) (boolean_frominteger exec_k (-73) ())) () ())
Lexicase best errors: [1 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_yankdup in1) (integer_max integer_lt in3 boolean_empty integer_dup_items boolean_swap) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (integer_div) integer_inc) exec_yank integer_empty integer_gt exec_dup_items exec_dup (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) exec_dup_times (integer_sub) integer_pop) (boolean_frominteger exec_k (-73) ())) () ())
Zero cases best errors: [1 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (820 4 111 1000 895 1000 536 111 1000 536)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (820 4 111 0 895 0 536 111 0 536)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction -61} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_yankdup in1) (integer_max integer_lt in3 boolean_empty integer_dup_items boolean_swap) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times () exec_y () integer_shove boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (-61) integer_inc) exec_yank integer_empty integer_gt exec_dup_items exec_dup (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq) boolean_not boolean_and) exec_dup_times (integer_sub) integer_pop) (boolean_frominteger exec_k (-73) ())) () ())
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.987
Median total errors in population: 6
Error averages by case: (0.18 0.996 0.889 1.0 0.105 1.0 0.464 0.889 1.0 0.464)
Error minima by case: (0 0 0 1 0 1 0 0 1 0)
Average genome size in population (length): 64.211
Average program size in population (points): 95.078
Average percent parens in population: 0.324
Minimum age in population: 17.25
Maximum age in population: 20.36083984375
Average age in population: 19.2886396484375
Median age in population: 19.237548828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7685064
--- Timings ---
Current time: 1559314815028 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.5 seconds, 61.9%
Fitness Testing:     10.0 seconds, 23.4%
Report:               6.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty integer_flush exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap integer_gte exec_if (integer_gt boolean_swap) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap exec_do*while () exec_eq boolean_dup_items 29 boolean_eq boolean_not boolean_and)) (exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)) ()))) ()) ())) ()) ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty integer_flush exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap integer_gte exec_if (integer_gt boolean_swap) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap exec_do*while () exec_eq boolean_dup_items 29 boolean_eq boolean_not boolean_and)) (exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_yankdup) (integer_div boolean_invert_first_then_and tagged_602)) ()))) ()) ())) ()) ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 496 861 244 470 861 1000 1000 242)
Population mean number of elite cases: 7.17
Count of perfect (error zero) individuals by case: (0 0 496 861 244 470 861 0 0 242)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction -73} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_602})
Best program: (integer_pop exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items boolean_eq 29 boolean_eq boolean_not boolean_and)) exec_dup_times (integer_sub integer_pop) boolean_frominteger exec_k (exec_k (exec_k (-73 integer_dup exec_eq integer_stackdepth boolean_empty) (integer_div boolean_invert_first_then_and tagged_602)) ()) ()) ())) ())) ()) ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 104
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 6.826
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.504 0.139 0.756 0.53 0.139 1.0 1.0 0.758)
Error minima by case: (1 1 0 0 0 0 0 1 1 0)
Average genome size in population (length): 65.245
Average program size in population (points): 96.333
Average percent parens in population: 0.322
Minimum age in population: 18.25
Maximum age in population: 22.25439453125
Average age in population: 21.00664013671875
Median age in population: 21.0126953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8577774
--- Timings ---
Current time: 1559314818520 milliseconds
Total Time:          46.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.3 seconds, 61.1%
Fitness Testing:     10.9 seconds, 23.6%
Report:               7.0 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 511
Test mean error for best: 0.51100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ()) () ()))))) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in1) integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) integer_dup_items exec_eq boolean_dup_items integer_swap exec_swap (boolean_xor) (29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ()) () ()))))) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (818 796 840 82 7 4 926 816 841 1000)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (818 796 840 82 7 4 926 816 841 0)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank) integer_empty integer_gt) exec_dup_items boolean_eq) (in2 exec_s_when_autoconstructing (exec_k (-73) ()) () ()))) ())) ())) () ())
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 94
Percent parens: 0.383
--- Population Statistics ---
Average total errors in population: 4.87
Median total errors in population: 4
Error averages by case: (0.182 0.204 0.16 0.918 0.993 0.996 0.074 0.184 0.159 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 67.139
Average program size in population (points): 99.376
Average percent parens in population: 0.324
Minimum age in population: 19.25
Maximum age in population: 23.85589599609375
Average age in population: 22.27813018798828
Median age in population: 22.36087036132812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9457739
--- Timings ---
Current time: 1559314822078 milliseconds
Total Time:          49.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 60.5%
Fitness Testing:     11.9 seconds, 23.8%
Report:               7.7 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 597
Test mean error for best: 0.59700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -25                
Correct output: -65                 | Program output: -8                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -39                
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -16                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -31                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -29                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -83                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -18                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -71                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -55                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -61                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 29} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (integer_pop exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4) exec_do*times (in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte integer_mult exec_do*times () exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (boolean_pop) integer_inc) exec_yank integer_empty exec_dup_items exec_if (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_pop exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 boolean_dup_items 29 integer_yank boolean_not boolean_and)) (boolean_dup_items integer_swap exec_swap (integer_min) (29 boolean_eq) boolean_not boolean_and) (exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ())))) ()) ())) ())
Lexicase best errors: [0 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 112
Percent parens: 0.330
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 29} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (integer_pop exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4) exec_do*times (in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte integer_mult exec_do*times () exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (boolean_pop) integer_inc) exec_yank integer_empty exec_dup_items exec_if (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_pop exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 boolean_dup_items 29 integer_yank boolean_not boolean_and)) (boolean_dup_items integer_swap exec_swap (integer_min) (29 boolean_eq) boolean_not boolean_and) (exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ())))) ()) ())) ())
Zero cases best errors: [0 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 112
Percent parens: 0.330
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 841 34 36 498 183 507 512 686 6)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (183 841 34 36 498 183 507 512 686 6)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 29} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction 29} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_pop exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4) exec_do*times (in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte integer_mult exec_do*times () exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_if (integer_gt) (boolean_pop) integer_inc) exec_yank integer_empty exec_dup_items exec_if (integer_swap) (integer_gte exec_if (integer_gt integer_div) (integer_pop exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 boolean_dup_items 29 integer_yank boolean_not boolean_and)) (boolean_dup_items integer_swap exec_swap (integer_min) (29 boolean_eq) boolean_not boolean_and) (exec_dup_times (integer_sub) integer_pop) boolean_frominteger exec_k (-73) ())))) ()) ())) ())
Errors: [0 0 1 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 75
Size: 112
Percent parens: 0.330
--- Population Statistics ---
Average total errors in population: 6.514
Median total errors in population: 6
Error averages by case: (0.817 0.159 0.966 0.964 0.502 0.817 0.493 0.488 0.314 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.841
Average program size in population (points): 92.827
Average percent parens in population: 0.343
Minimum age in population: 23.00927734375
Maximum age in population: 25.193359375
Average age in population: 23.99319396972656
Median age in population: 24.193359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10246137
--- Timings ---
Current time: 1559314825447 milliseconds
Total Time:          53.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 60.0%
Fitness Testing:     12.7 seconds, 23.9%
Report:               8.4 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 608
Test mean error for best: 0.60800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: 36                 
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in1) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) integer_dup_items boolean_xor) (29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min exec_k (-73) ()))))) ())
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in1) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) integer_dup_items boolean_xor) (29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min exec_k (-73) ()))))) ())
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 910 634 916 910 1 1 1 1000 1)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (329 910 634 916 910 1 1 1 0 1)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction 49} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in1) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt exec_dup_items exec_dup (in2 exec_s_when_autoconstructing (exec_do*count (49 in1 boolean_swap) integer_dup_items boolean_xor) (29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min exec_k (-73) ()))))) ())
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.297
Median total errors in population: 6
Error averages by case: (0.671 0.09 0.366 0.084 0.09 0.999 0.999 0.999 1.0 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 65.223
Average program size in population (points): 97.413
Average percent parens in population: 0.328
Minimum age in population: 24.00927734375
Maximum age in population: 27.02154541015625
Average age in population: 25.90212603759766
Median age in population: 25.8497314453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 11217270
--- Timings ---
Current time: 1559314829051 milliseconds
Total Time:          56.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 59.6%
Fitness Testing:     13.7 seconds, 24.1%
Report:               9.1 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 511
Test mean error for best: 0.51100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (integer_pop exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_s_when_autoconstructing (boolean_and) (in2) (integer_flush exec_rot () (integer_swap integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank) integer_empty integer_gt) (exec_dup_items boolean_eq) in2 exec_s_when_autoconstructing (exec_k (-73) ()) () ()))) ())) ())) ()) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 99
Percent parens: 0.374
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (integer_pop exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_empty boolean_empty integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte exec_s_when_autoconstructing (boolean_and) (in2) (integer_flush exec_rot () (integer_swap integer_gte exec_if (integer_gt integer_div) (integer_inc exec_yank) integer_empty integer_gt) (exec_dup_items boolean_eq) in2 exec_s_when_autoconstructing (exec_k (-73) ()) () ()))) ())) ())) ()) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 99
Percent parens: 0.374
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 170 892 146 444 911 6 274 99 10)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (161 170 892 146 444 911 6 274 99 10)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (exec_s_when_autoconstructing (integer_stackdepth exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in4 in1) integer_lt in3 in1) (integer_lt in3 exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_y () exec_s_when_autoconstructing (boolean_and in2) (integer_flush exec_rot () (integer_swap) (integer_gte 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) integer_min exec_k (-73) ()) ())) ())) () ())
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 74
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.887
Median total errors in population: 7
Error averages by case: (0.839 0.83 0.108 0.854 0.556 0.089 0.994 0.726 0.901 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.496
Average program size in population (points): 81.144
Average percent parens in population: 0.326
Minimum age in population: 25.00927734375
Maximum age in population: 28.76797485351562
Average age in population: 27.46794122314453
Median age in population: 27.4471435546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 12341821
--- Timings ---
Current time: 1559314832761 milliseconds
Total Time:          60.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.9 seconds, 59.2%
Fitness Testing:     14.7 seconds, 24.2%
Report:               9.9 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 459
Test mean error for best: 0.45900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min exec_k (-73) ()))
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min exec_k (-73) ()))
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 163 207 307 166 498 117 899 498 841)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (167 163 207 307 166 498 117 899 498 841)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min exec_k (-73) ()))
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 60
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.137
Median total errors in population: 6
Error averages by case: (0.833 0.837 0.793 0.693 0.834 0.502 0.883 0.101 0.502 0.159)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.127
Average program size in population (points): 93.289
Average percent parens in population: 0.354
Minimum age in population: 26.00927734375
Maximum age in population: 30.48747253417969
Average age in population: 29.07368301391602
Median age in population: 29.25833892822266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 13337724
--- Timings ---
Current time: 1559314836060 milliseconds
Total Time:          64.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 58.8%
Fitness Testing:     15.7 seconds, 24.5%
Report:              10.6 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 399
Test mean error for best: 0.39900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: 63                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -8                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: -16                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -52                
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 9                  
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 62                 
Correct output: -25                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 49                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -83                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: 28                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Lexicase best errors: [1 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Zero cases best errors: [1 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 457 356 577 221 184 203 287 324 201)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (191 457 356 577 221 184 203 287 324 201)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) exec_y_when_autoconstructing () exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min exec_k (-73) ()))
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 61
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.999
Median total errors in population: 7
Error averages by case: (0.809 0.543 0.644 0.423 0.779 0.816 0.797 0.713 0.676 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.788
Average program size in population (points): 85.97
Average percent parens in population: 0.333
Minimum age in population: 28.72380065917969
Maximum age in population: 32.43832397460938
Average age in population: 31.21485922241211
Median age in population: 31.15855407714844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.008
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 14284957
--- Timings ---
Current time: 1559314839254 milliseconds
Total Time:          67.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.4 seconds, 58.6%
Fitness Testing:     16.5 seconds, 24.6%
Report:              11.2 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (877 548 348 306 432 273 456 890 452 454)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (877 548 348 306 432 273 456 890 452 454)
Population mean number of perfect (error zero) cases: 5.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 58
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 4.964
Median total errors in population: 5
Error averages by case: (0.123 0.452 0.652 0.694 0.568 0.727 0.544 0.11 0.548 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.007
Average program size in population (points): 68.433
Average percent parens in population: 0.292
Minimum age in population: 31.43832397460938
Maximum age in population: 34.08964157104492
Average age in population: 33.22855091094971
Median age in population: 32.96574401855469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 15072302
--- Timings ---
Current time: 1559314842249 milliseconds
Total Time:          70.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.2 seconds, 58.6%
Fitness Testing:     17.3 seconds, 24.6%
Report:              11.7 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 194
Test mean error for best: 0.19400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -16                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: -52                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 9                  
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) exec_y_when_autoconstructing () exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not exec_dup_times (integer_sub) integer_pop) (integer_min integer_min exec_k (-73) ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 61
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction -73})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) exec_y_when_autoconstructing () exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) 29 boolean_eq boolean_not exec_dup_times (integer_sub) integer_pop) (integer_min integer_min exec_k (-73) ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 61
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (730 726 356 410 731 627 634 738 637 788)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (730 726 356 410 731 627 634 738 637 788)
Population mean number of perfect (error zero) cases: 6.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) exec_y_when_autoconstructing () exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_eq boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 3.623
Median total errors in population: 1
Error averages by case: (0.27 0.274 0.644 0.59 0.269 0.373 0.366 0.262 0.363 0.212)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.421
Average program size in population (points): 60.302
Average percent parens in population: 0.278
Minimum age in population: 32.46133422851562
Maximum age in population: 36.0276927947998
Average age in population: 34.77404501342773
Median age in population: 34.96574401855469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.01
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 15778564
--- Timings ---
Current time: 1559314845102 milliseconds
Total Time:          73.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.9 seconds, 58.7%
Fitness Testing:     17.9 seconds, 24.4%
Report:              12.2 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 264
Test mean error for best: 0.26400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -8                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -16                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 49                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -83                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Lexicase best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) exec_y_when_autoconstructing () exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items integer_yankdup) 29 boolean_eq boolean_not boolean_and boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 61
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction 29} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Zero cases best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 boolean_empty in2 in4) exec_y_when_autoconstructing () exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items integer_yankdup) 29 boolean_eq boolean_not boolean_and boolean_not boolean_and exec_dup_times (integer_sub) integer_pop) (integer_min integer_min -73))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 61
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 388 797 385 851 814 387 701 393 686)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (387 388 797 385 851 814 387 701 393 686)
Population mean number of perfect (error zero) cases: 5.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_max} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction -73})
Best program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 4.211
Median total errors in population: 5
Error averages by case: (0.613 0.612 0.203 0.615 0.149 0.186 0.613 0.299 0.607 0.314)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.071
Average program size in population (points): 57.512
Average percent parens in population: 0.268
Minimum age in population: 34.34539413452148
Maximum age in population: 37.96574401855469
Average age in population: 36.34399726867676
Median age in population: 36.46574401855469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 16495647
--- Timings ---
Current time: 1559314848069 milliseconds
Total Time:          76.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.7 seconds, 58.8%
Fitness Testing:     18.5 seconds, 24.3%
Report:              12.7 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 23
Successful program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 53


Auto-simplifying with starting size: 53
step: 0
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 500
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 1000
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 1500
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 2000
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 2500
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 3000
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 3500
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 4000
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 4500
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 5000
program: (integer_stackdepth exec_k_when_autoconstructing (boolean_dup_items boolean_empty boolean_empty exec_do*while (in1) integer_max) (integer_lt in3 integer_shove in2 in4) in2 in4 integer_shove exec_s () (exec_if (exec_dup_times (boolean_and boolean_not)) (integer_shove) print_integer integer_gte boolean_shove exec_do*times (exec_rot () (integer_swap) (integer_gte exec_yank integer_empty integer_gt boolean_swap) integer_dup_items boolean_xor) integer_pop) (integer_min integer_min -73))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 264
Test mean error for best: 0.26400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 8                  
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -8                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -16                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -6                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 49                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -83                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
;;******************************
