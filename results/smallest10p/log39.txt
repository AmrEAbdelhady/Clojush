Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-41 -5 -41 -41] -41] [[-46 -2 -46 -46] -46] [[-70 1 1 1] -70] [[100 100 100 -61] -61] [[50 50 50 3] 3] [[9 9 9 32] 9] [[48 48 48 10] 10] [[-77 -81 -77 -77] -81] [[30 30 66 30] 30] [[-92 -92 -92 18] -92] [(10 10 10 10) 10] [(27 27 27 27) 27] [(-67 -67 -67 -67) -67] [(85 85 85 85) 85] [(-87 -87 -87 -87) -87] [(36 10 81 33) 10] [(97 83 53 9) 9] [(73 58 92 96) 58] [(76 68 41 44) 41] [(58 4 28 49) 4] [(36 95 14 93) 14] [(48 58 24 92) 24] [(24 38 77 42) 24] [(11 89 87 65) 11] [(96 38 43 13) 13] [(62 89 13 30) 13] [(31 86 69 52) 31] [(35 54 96 24) 24] [(76 54 2 90) 2] [(47 64 3 57) 3] [(66 41 47 81) 41] [(6 35 95 26) 6] [(40 86 68 80) 40] [(32 75 62 56) 32] [(29 86 31 79) 29] [(70 100 43 47) 43] [(26 -45 -5 -48) -48] [(64 -47 1 33) -47] [(-33 52 -18 42) -33] [(19 -47 -60 31) -60] [(32 89 95 -73) -73] [(-19 57 65 -51) -51] [(-87 14 92 -73) -87] [(48 -79 -66 4) -79] [(50 39 66 -35) -35] [(-19 -7 -90 71) -90] [(60 -48 -26 4) -48] [(-17 -63 37 78) -63] [(-39 78 70 20) -39] [(64 54 -47 3) -47] [(16 76 42 -54) -54] [(-17 5 93 -32) -32] [(-39 48 15 16) -39] [(7 35 -13 -23) -23] [(20 16 -77 40) -77] [(-47 -47 78 -54) -54] [(76 51 20 21) 20] [(-84 -72 -37 -14) -84] [(75 34 -41 73) -41] [(-63 3 55 -34) -63] [(15 81 -6 -55) -55] [(-76 39 -14 -92) -92] [(66 -99 41 99) -99] [(16 74 61 -84) -84] [(51 51 96 -1) -1] [(47 16 74 -41) -41] [(80 -74 -66 -11) -74] [(35 82 42 -94) -94] [(93 -35 -34 59) -35] [(-98 -92 -7 93) -98] [(43 -76 98 -46) -76] [(23 -31 100 94) -31] [(-19 -84 -36 0) -84] [(97 4 4 -33) -33] [(56 -73 31 70) -73] [(-8 7 26 57) -8] [(41 -70 33 -78) -78] [(76 57 -27 29) -27] [(20 -93 -58 70) -93] [(68 68 -70 -19) -70] [(31 28 -56 3) -56] [(-60 28 -61 47) -61] [(-37 -73 -72 -31) -73] [(51 5 -4 -59) -59] [(75 -24 24 -84) -84] [(-93 95 68 -74) -93] [(85 -28 -61 42) -61] [(-57 -99 -52 76) -99] [(-21 39 49 46) -21] [(-34 -67 -30 79) -67] [(-1 -45 -48 3) -48] [(15 -12 -44 -37) -44] [(-63 28 8 -48) -63] [(-45 -41 41 -38) -45] [(-28 -25 -61 -3) -61])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-41 -5 -41 -41] -41]
Train Case:   6 | Input/Output: [[-46 -2 -46 -46] -46]
Train Case:   7 | Input/Output: [[-70 1 1 1] -70]
Train Case:   8 | Input/Output: [[100 100 100 -61] -61]
Train Case:   9 | Input/Output: [[50 50 50 3] 3]
Train Case:  10 | Input/Output: [[9 9 9 32] 9]
Train Case:  11 | Input/Output: [[48 48 48 10] 10]
Train Case:  12 | Input/Output: [[-77 -81 -77 -77] -81]
Train Case:  13 | Input/Output: [[30 30 66 30] 30]
Train Case:  14 | Input/Output: [[-92 -92 -92 18] -92]
Train Case:  15 | Input/Output: [(10 10 10 10) 10]
Train Case:  16 | Input/Output: [(27 27 27 27) 27]
Train Case:  17 | Input/Output: [(-67 -67 -67 -67) -67]
Train Case:  18 | Input/Output: [(85 85 85 85) 85]
Train Case:  19 | Input/Output: [(-87 -87 -87 -87) -87]
Train Case:  20 | Input/Output: [(36 10 81 33) 10]
Train Case:  21 | Input/Output: [(97 83 53 9) 9]
Train Case:  22 | Input/Output: [(73 58 92 96) 58]
Train Case:  23 | Input/Output: [(76 68 41 44) 41]
Train Case:  24 | Input/Output: [(58 4 28 49) 4]
Train Case:  25 | Input/Output: [(36 95 14 93) 14]
Train Case:  26 | Input/Output: [(48 58 24 92) 24]
Train Case:  27 | Input/Output: [(24 38 77 42) 24]
Train Case:  28 | Input/Output: [(11 89 87 65) 11]
Train Case:  29 | Input/Output: [(96 38 43 13) 13]
Train Case:  30 | Input/Output: [(62 89 13 30) 13]
Train Case:  31 | Input/Output: [(31 86 69 52) 31]
Train Case:  32 | Input/Output: [(35 54 96 24) 24]
Train Case:  33 | Input/Output: [(76 54 2 90) 2]
Train Case:  34 | Input/Output: [(47 64 3 57) 3]
Train Case:  35 | Input/Output: [(66 41 47 81) 41]
Train Case:  36 | Input/Output: [(6 35 95 26) 6]
Train Case:  37 | Input/Output: [(40 86 68 80) 40]
Train Case:  38 | Input/Output: [(32 75 62 56) 32]
Train Case:  39 | Input/Output: [(29 86 31 79) 29]
Train Case:  40 | Input/Output: [(70 100 43 47) 43]
Train Case:  41 | Input/Output: [(26 -45 -5 -48) -48]
Train Case:  42 | Input/Output: [(64 -47 1 33) -47]
Train Case:  43 | Input/Output: [(-33 52 -18 42) -33]
Train Case:  44 | Input/Output: [(19 -47 -60 31) -60]
Train Case:  45 | Input/Output: [(32 89 95 -73) -73]
Train Case:  46 | Input/Output: [(-19 57 65 -51) -51]
Train Case:  47 | Input/Output: [(-87 14 92 -73) -87]
Train Case:  48 | Input/Output: [(48 -79 -66 4) -79]
Train Case:  49 | Input/Output: [(50 39 66 -35) -35]
Train Case:  50 | Input/Output: [(-19 -7 -90 71) -90]
Train Case:  51 | Input/Output: [(60 -48 -26 4) -48]
Train Case:  52 | Input/Output: [(-17 -63 37 78) -63]
Train Case:  53 | Input/Output: [(-39 78 70 20) -39]
Train Case:  54 | Input/Output: [(64 54 -47 3) -47]
Train Case:  55 | Input/Output: [(16 76 42 -54) -54]
Train Case:  56 | Input/Output: [(-17 5 93 -32) -32]
Train Case:  57 | Input/Output: [(-39 48 15 16) -39]
Train Case:  58 | Input/Output: [(7 35 -13 -23) -23]
Train Case:  59 | Input/Output: [(20 16 -77 40) -77]
Train Case:  60 | Input/Output: [(-47 -47 78 -54) -54]
Train Case:  61 | Input/Output: [(76 51 20 21) 20]
Train Case:  62 | Input/Output: [(-84 -72 -37 -14) -84]
Train Case:  63 | Input/Output: [(75 34 -41 73) -41]
Train Case:  64 | Input/Output: [(-63 3 55 -34) -63]
Train Case:  65 | Input/Output: [(15 81 -6 -55) -55]
Train Case:  66 | Input/Output: [(-76 39 -14 -92) -92]
Train Case:  67 | Input/Output: [(66 -99 41 99) -99]
Train Case:  68 | Input/Output: [(16 74 61 -84) -84]
Train Case:  69 | Input/Output: [(51 51 96 -1) -1]
Train Case:  70 | Input/Output: [(47 16 74 -41) -41]
Train Case:  71 | Input/Output: [(80 -74 -66 -11) -74]
Train Case:  72 | Input/Output: [(35 82 42 -94) -94]
Train Case:  73 | Input/Output: [(93 -35 -34 59) -35]
Train Case:  74 | Input/Output: [(-98 -92 -7 93) -98]
Train Case:  75 | Input/Output: [(43 -76 98 -46) -76]
Train Case:  76 | Input/Output: [(23 -31 100 94) -31]
Train Case:  77 | Input/Output: [(-19 -84 -36 0) -84]
Train Case:  78 | Input/Output: [(97 4 4 -33) -33]
Train Case:  79 | Input/Output: [(56 -73 31 70) -73]
Train Case:  80 | Input/Output: [(-8 7 26 57) -8]
Train Case:  81 | Input/Output: [(41 -70 33 -78) -78]
Train Case:  82 | Input/Output: [(76 57 -27 29) -27]
Train Case:  83 | Input/Output: [(20 -93 -58 70) -93]
Train Case:  84 | Input/Output: [(68 68 -70 -19) -70]
Train Case:  85 | Input/Output: [(31 28 -56 3) -56]
Train Case:  86 | Input/Output: [(-60 28 -61 47) -61]
Train Case:  87 | Input/Output: [(-37 -73 -72 -31) -73]
Train Case:  88 | Input/Output: [(51 5 -4 -59) -59]
Train Case:  89 | Input/Output: [(75 -24 24 -84) -84]
Train Case:  90 | Input/Output: [(-93 95 68 -74) -93]
Train Case:  91 | Input/Output: [(85 -28 -61 42) -61]
Train Case:  92 | Input/Output: [(-57 -99 -52 76) -99]
Train Case:  93 | Input/Output: [(-21 39 49 46) -21]
Train Case:  94 | Input/Output: [(-34 -67 -30 79) -67]
Train Case:  95 | Input/Output: [(-1 -45 -48 3) -48]
Train Case:  96 | Input/Output: [(15 -12 -44 -37) -44]
Train Case:  97 | Input/Output: [(-63 28 8 -48) -63]
Train Case:  98 | Input/Output: [(-45 -41 41 -38) -45]
Train Case:  99 | Input/Output: [(-28 -25 -61 -3) -61]
Test Case:   0 | Input/Output: [[-39 -89 -89 -89] -89]
Test Case:   1 | Input/Output: [[-57 -57 -60 -57] -60]
Test Case:   2 | Input/Output: [[-48 -48 -48 51] -48]
Test Case:   3 | Input/Output: [[42 43 43 43] 42]
Test Case:   4 | Input/Output: [[-21 -21 -34 -21] -34]
Test Case:   5 | Input/Output: [[47 47 47 92] 47]
Test Case:   6 | Input/Output: [[10 10 -54 10] -54]
Test Case:   7 | Input/Output: [[-84 -15 -15 -15] -84]
Test Case:   8 | Input/Output: [[26 26 -28 26] -28]
Test Case:   9 | Input/Output: [[89 89 -14 89] -14]
Test Case:  10 | Input/Output: [[37 37 69 37] 37]
Test Case:  11 | Input/Output: [[98 98 98 89] 89]
Test Case:  12 | Input/Output: [[-66 -66 -63 -66] -66]
Test Case:  13 | Input/Output: [[52 -80 52 52] -80]
Test Case:  14 | Input/Output: [[-52 46 46 46] -52]
Test Case:  15 | Input/Output: [[-58 -58 -58 -92] -92]
Test Case:  16 | Input/Output: [[-38 -38 -38 90] -38]
Test Case:  17 | Input/Output: [[77 85 77 77] 77]
Test Case:  18 | Input/Output: [[-63 -63 41 -63] -63]
Test Case:  19 | Input/Output: [[49 49 49 74] 49]
Test Case:  20 | Input/Output: [[-58 -58 -58 -28] -58]
Test Case:  21 | Input/Output: [[92 92 -8 92] -8]
Test Case:  22 | Input/Output: [[-36 -72 -72 -72] -72]
Test Case:  23 | Input/Output: [[85 59 85 85] 59]
Test Case:  24 | Input/Output: [[-32 -81 -81 -81] -81]
Test Case:  25 | Input/Output: [[79 -97 79 79] -97]
Test Case:  26 | Input/Output: [[-51 -49 -49 -49] -51]
Test Case:  27 | Input/Output: [[34 42 34 34] 34]
Test Case:  28 | Input/Output: [[29 -13 29 29] -13]
Test Case:  29 | Input/Output: [[-95 21 -95 -95] -95]
Test Case:  30 | Input/Output: [[84 -29 84 84] -29]
Test Case:  31 | Input/Output: [[-100 -100 86 -100] -100]
Test Case:  32 | Input/Output: [[-73 42 -73 -73] -73]
Test Case:  33 | Input/Output: [[-53 -10 -53 -53] -53]
Test Case:  34 | Input/Output: [[36 36 76 36] 36]
Test Case:  35 | Input/Output: [[-79 -59 -79 -79] -79]
Test Case:  36 | Input/Output: [[-55 -74 -55 -55] -74]
Test Case:  37 | Input/Output: [[-13 -13 -48 -13] -48]
Test Case:  38 | Input/Output: [[87 87 47 87] 47]
Test Case:  39 | Input/Output: [[83 83 83 8] 8]
Test Case:  40 | Input/Output: [[-12 -6 -6 -6] -12]
Test Case:  41 | Input/Output: [[-56 -100 -100 -100] -100]
Test Case:  42 | Input/Output: [[63 63 -37 63] -37]
Test Case:  43 | Input/Output: [[63 63 91 63] 63]
Test Case:  44 | Input/Output: [[-51 -51 -51 -78] -78]
Test Case:  45 | Input/Output: [[69 69 69 -1] -1]
Test Case:  46 | Input/Output: [[-4 -4 92 -4] -4]
Test Case:  47 | Input/Output: [[44 44 44 -54] -54]
Test Case:  48 | Input/Output: [[12 89 89 89] 12]
Test Case:  49 | Input/Output: [[-16 66 66 66] -16]
Test Case:  50 | Input/Output: [[-44 -44 83 -44] -44]
Test Case:  51 | Input/Output: [[25 25 -18 25] -18]
Test Case:  52 | Input/Output: [[-99 85 -99 -99] -99]
Test Case:  53 | Input/Output: [[52 52 52 79] 52]
Test Case:  54 | Input/Output: [[-88 -98 -98 -98] -98]
Test Case:  55 | Input/Output: [[-71 25 -71 -71] -71]
Test Case:  56 | Input/Output: [[33 5 33 33] 5]
Test Case:  57 | Input/Output: [[29 39 39 39] 29]
Test Case:  58 | Input/Output: [[-11 -11 -11 70] -11]
Test Case:  59 | Input/Output: [[-76 27 -76 -76] -76]
Test Case:  60 | Input/Output: [[67 -61 -61 -61] -61]
Test Case:  61 | Input/Output: [[-39 68 68 68] -39]
Test Case:  62 | Input/Output: [[-62 -62 -62 -75] -75]
Test Case:  63 | Input/Output: [[63 17 17 17] 17]
Test Case:  64 | Input/Output: [[76 76 76 -4] -4]
Test Case:  65 | Input/Output: [[89 89 89 87] 87]
Test Case:  66 | Input/Output: [[-30 16 -30 -30] -30]
Test Case:  67 | Input/Output: [[-81 56 56 56] -81]
Test Case:  68 | Input/Output: [[19 -58 -58 -58] -58]
Test Case:  69 | Input/Output: [[-47 -47 -47 61] -47]
Test Case:  70 | Input/Output: [[-9 -9 -15 -9] -15]
Test Case:  71 | Input/Output: [[-23 -23 -23 35] -23]
Test Case:  72 | Input/Output: [[19 19 -47 19] -47]
Test Case:  73 | Input/Output: [[-99 -99 -99 -32] -99]
Test Case:  74 | Input/Output: [[76 76 76 6] 6]
Test Case:  75 | Input/Output: [[54 -2 54 54] -2]
Test Case:  76 | Input/Output: [[-66 -44 -66 -66] -66]
Test Case:  77 | Input/Output: [[74 27 27 27] 27]
Test Case:  78 | Input/Output: [[36 36 96 36] 36]
Test Case:  79 | Input/Output: [[-70 -70 -31 -70] -70]
Test Case:  80 | Input/Output: [[-8 77 77 77] -8]
Test Case:  81 | Input/Output: [[-4 -4 -10 -4] -10]
Test Case:  82 | Input/Output: [[-50 -50 -50 37] -50]
Test Case:  83 | Input/Output: [[-40 -59 -59 -59] -59]
Test Case:  84 | Input/Output: [[70 70 90 70] 70]
Test Case:  85 | Input/Output: [[96 96 96 40] 40]
Test Case:  86 | Input/Output: [[6 6 6 18] 6]
Test Case:  87 | Input/Output: [[-55 -55 96 -55] -55]
Test Case:  88 | Input/Output: [[42 42 43 42] 42]
Test Case:  89 | Input/Output: [[19 19 2 19] 2]
Test Case:  90 | Input/Output: [[-21 40 -21 -21] -21]
Test Case:  91 | Input/Output: [[-73 -73 -57 -73] -73]
Test Case:  92 | Input/Output: [[-9 -92 -92 -92] -92]
Test Case:  93 | Input/Output: [[100 100 16 100] 16]
Test Case:  94 | Input/Output: [[-42 -42 30 -42] -42]
Test Case:  95 | Input/Output: [[-8 -10 -10 -10] -10]
Test Case:  96 | Input/Output: [[74 -68 74 74] -68]
Test Case:  97 | Input/Output: [[-74 -54 -74 -74] -74]
Test Case:  98 | Input/Output: [[-2 -2 -2 -6] -6]
Test Case:  99 | Input/Output: [[-29 -29 -29 -9] -29]
Test Case: 100 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 101 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 102 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 103 | Input/Output: [(97 97 97 97) 97]
Test Case: 104 | Input/Output: [(98 98 98 98) 98]
Test Case: 105 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 106 | Input/Output: [(0 0 0 0) 0]
Test Case: 107 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 108 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 109 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 110 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 111 | Input/Output: [(19 19 19 19) 19]
Test Case: 112 | Input/Output: [(40 40 40 40) 40]
Test Case: 113 | Input/Output: [(90 90 90 90) 90]
Test Case: 114 | Input/Output: [(18 18 18 18) 18]
Test Case: 115 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 116 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 117 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 118 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 119 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 120 | Input/Output: [(1 1 1 1) 1]
Test Case: 121 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 122 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 123 | Input/Output: [(33 33 33 33) 33]
Test Case: 124 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 125 | Input/Output: [(86 86 86 86) 86]
Test Case: 126 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 127 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 128 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 129 | Input/Output: [(59 59 59 59) 59]
Test Case: 130 | Input/Output: [(44 44 44 44) 44]
Test Case: 131 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 132 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 133 | Input/Output: [(51 51 51 51) 51]
Test Case: 134 | Input/Output: [(58 58 58 58) 58]
Test Case: 135 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 136 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 137 | Input/Output: [(62 62 62 62) 62]
Test Case: 138 | Input/Output: [(52 52 52 52) 52]
Test Case: 139 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 140 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 141 | Input/Output: [(29 29 29 29) 29]
Test Case: 142 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 143 | Input/Output: [(4 4 4 4) 4]
Test Case: 144 | Input/Output: [(3 3 3 3) 3]
Test Case: 145 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 146 | Input/Output: [(97 97 97 97) 97]
Test Case: 147 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 148 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 149 | Input/Output: [(27 27 27 27) 27]
Test Case: 150 | Input/Output: [(5 5 5 5) 5]
Test Case: 151 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 152 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 153 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 154 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 155 | Input/Output: [(38 38 38 38) 38]
Test Case: 156 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 157 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 158 | Input/Output: [(71 71 71 71) 71]
Test Case: 159 | Input/Output: [(98 98 98 98) 98]
Test Case: 160 | Input/Output: [(14 14 14 14) 14]
Test Case: 161 | Input/Output: [(62 62 62 62) 62]
Test Case: 162 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 163 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 164 | Input/Output: [(33 33 33 33) 33]
Test Case: 165 | Input/Output: [(59 59 59 59) 59]
Test Case: 166 | Input/Output: [(18 18 18 18) 18]
Test Case: 167 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 168 | Input/Output: [(61 61 61 61) 61]
Test Case: 169 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 170 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 171 | Input/Output: [(99 99 99 99) 99]
Test Case: 172 | Input/Output: [(93 93 93 93) 93]
Test Case: 173 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 174 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 175 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 176 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 177 | Input/Output: [(68 68 68 68) 68]
Test Case: 178 | Input/Output: [(23 23 23 23) 23]
Test Case: 179 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 180 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 181 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 182 | Input/Output: [(21 21 21 21) 21]
Test Case: 183 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 184 | Input/Output: [(22 22 22 22) 22]
Test Case: 185 | Input/Output: [(57 57 57 57) 57]
Test Case: 186 | Input/Output: [(32 32 32 32) 32]
Test Case: 187 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 188 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 189 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 190 | Input/Output: [(73 73 73 73) 73]
Test Case: 191 | Input/Output: [(60 60 60 60) 60]
Test Case: 192 | Input/Output: [(12 12 12 12) 12]
Test Case: 193 | Input/Output: [(15 15 15 15) 15]
Test Case: 194 | Input/Output: [(60 60 60 60) 60]
Test Case: 195 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 196 | Input/Output: [(32 32 32 32) 32]
Test Case: 197 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 198 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 199 | Input/Output: [(4 4 4 4) 4]
Test Case: 200 | Input/Output: [(80 61 39 53) 39]
Test Case: 201 | Input/Output: [(92 58 41 62) 41]
Test Case: 202 | Input/Output: [(73 32 89 69) 32]
Test Case: 203 | Input/Output: [(95 16 1 99) 1]
Test Case: 204 | Input/Output: [(54 60 66 28) 28]
Test Case: 205 | Input/Output: [(71 74 72 85) 71]
Test Case: 206 | Input/Output: [(90 97 90 67) 67]
Test Case: 207 | Input/Output: [(3 11 30 31) 3]
Test Case: 208 | Input/Output: [(63 20 4 82) 4]
Test Case: 209 | Input/Output: [(59 67 21 69) 21]
Test Case: 210 | Input/Output: [(24 1 38 86) 1]
Test Case: 211 | Input/Output: [(84 13 61 52) 13]
Test Case: 212 | Input/Output: [(57 59 1 34) 1]
Test Case: 213 | Input/Output: [(1 77 26 11) 1]
Test Case: 214 | Input/Output: [(8 82 40 16) 8]
Test Case: 215 | Input/Output: [(92 30 85 80) 30]
Test Case: 216 | Input/Output: [(80 58 31 58) 31]
Test Case: 217 | Input/Output: [(44 24 3 33) 3]
Test Case: 218 | Input/Output: [(22 34 92 21) 21]
Test Case: 219 | Input/Output: [(40 74 47 80) 40]
Test Case: 220 | Input/Output: [(29 39 75 43) 29]
Test Case: 221 | Input/Output: [(12 12 78 78) 12]
Test Case: 222 | Input/Output: [(51 44 43 51) 43]
Test Case: 223 | Input/Output: [(87 50 27 0) 0]
Test Case: 224 | Input/Output: [(35 55 34 11) 11]
Test Case: 225 | Input/Output: [(67 13 11 42) 11]
Test Case: 226 | Input/Output: [(10 2 23 13) 2]
Test Case: 227 | Input/Output: [(9 22 60 36) 9]
Test Case: 228 | Input/Output: [(32 46 14 41) 14]
Test Case: 229 | Input/Output: [(35 42 96 29) 29]
Test Case: 230 | Input/Output: [(40 41 51 26) 26]
Test Case: 231 | Input/Output: [(46 40 96 14) 14]
Test Case: 232 | Input/Output: [(58 88 11 91) 11]
Test Case: 233 | Input/Output: [(91 5 55 64) 5]
Test Case: 234 | Input/Output: [(13 64 18 86) 13]
Test Case: 235 | Input/Output: [(57 52 13 77) 13]
Test Case: 236 | Input/Output: [(89 60 10 52) 10]
Test Case: 237 | Input/Output: [(6 88 82 64) 6]
Test Case: 238 | Input/Output: [(1 4 44 36) 1]
Test Case: 239 | Input/Output: [(80 59 0 98) 0]
Test Case: 240 | Input/Output: [(82 53 46 4) 4]
Test Case: 241 | Input/Output: [(21 82 99 14) 14]
Test Case: 242 | Input/Output: [(59 6 31 47) 6]
Test Case: 243 | Input/Output: [(29 20 61 42) 20]
Test Case: 244 | Input/Output: [(87 64 16 85) 16]
Test Case: 245 | Input/Output: [(60 33 57 86) 33]
Test Case: 246 | Input/Output: [(81 13 52 90) 13]
Test Case: 247 | Input/Output: [(63 3 95 24) 3]
Test Case: 248 | Input/Output: [(22 43 99 86) 22]
Test Case: 249 | Input/Output: [(16 55 14 1) 1]
Test Case: 250 | Input/Output: [(90 93 41 60) 41]
Test Case: 251 | Input/Output: [(25 44 66 40) 25]
Test Case: 252 | Input/Output: [(24 79 87 58) 24]
Test Case: 253 | Input/Output: [(49 59 86 5) 5]
Test Case: 254 | Input/Output: [(20 50 87 11) 11]
Test Case: 255 | Input/Output: [(24 63 23 86) 23]
Test Case: 256 | Input/Output: [(86 67 29 7) 7]
Test Case: 257 | Input/Output: [(20 73 78 93) 20]
Test Case: 258 | Input/Output: [(100 42 22 41) 22]
Test Case: 259 | Input/Output: [(37 10 8 29) 8]
Test Case: 260 | Input/Output: [(97 89 88 78) 78]
Test Case: 261 | Input/Output: [(69 19 76 98) 19]
Test Case: 262 | Input/Output: [(28 53 74 63) 28]
Test Case: 263 | Input/Output: [(86 44 85 21) 21]
Test Case: 264 | Input/Output: [(66 57 83 0) 0]
Test Case: 265 | Input/Output: [(64 93 61 99) 61]
Test Case: 266 | Input/Output: [(83 94 83 12) 12]
Test Case: 267 | Input/Output: [(43 67 64 2) 2]
Test Case: 268 | Input/Output: [(60 20 94 2) 2]
Test Case: 269 | Input/Output: [(26 97 35 84) 26]
Test Case: 270 | Input/Output: [(55 95 89 59) 55]
Test Case: 271 | Input/Output: [(48 42 99 87) 42]
Test Case: 272 | Input/Output: [(71 54 96 29) 29]
Test Case: 273 | Input/Output: [(36 73 65 21) 21]
Test Case: 274 | Input/Output: [(70 21 23 16) 16]
Test Case: 275 | Input/Output: [(21 40 34 29) 21]
Test Case: 276 | Input/Output: [(73 33 31 88) 31]
Test Case: 277 | Input/Output: [(100 51 5 78) 5]
Test Case: 278 | Input/Output: [(77 22 46 43) 22]
Test Case: 279 | Input/Output: [(57 29 0 50) 0]
Test Case: 280 | Input/Output: [(59 61 74 16) 16]
Test Case: 281 | Input/Output: [(80 55 46 54) 46]
Test Case: 282 | Input/Output: [(58 83 46 72) 46]
Test Case: 283 | Input/Output: [(10 90 50 93) 10]
Test Case: 284 | Input/Output: [(86 15 61 88) 15]
Test Case: 285 | Input/Output: [(26 53 48 82) 26]
Test Case: 286 | Input/Output: [(5 38 5 1) 1]
Test Case: 287 | Input/Output: [(72 3 67 68) 3]
Test Case: 288 | Input/Output: [(12 8 99 92) 8]
Test Case: 289 | Input/Output: [(5 55 17 65) 5]
Test Case: 290 | Input/Output: [(55 99 98 82) 55]
Test Case: 291 | Input/Output: [(67 79 12 83) 12]
Test Case: 292 | Input/Output: [(17 86 39 63) 17]
Test Case: 293 | Input/Output: [(89 28 24 62) 24]
Test Case: 294 | Input/Output: [(27 11 69 3) 3]
Test Case: 295 | Input/Output: [(31 51 38 61) 31]
Test Case: 296 | Input/Output: [(26 43 41 36) 26]
Test Case: 297 | Input/Output: [(63 78 12 79) 12]
Test Case: 298 | Input/Output: [(58 20 37 58) 20]
Test Case: 299 | Input/Output: [(15 55 45 24) 15]
Test Case: 300 | Input/Output: [(29 24 44 90) 24]
Test Case: 301 | Input/Output: [(82 43 24 99) 24]
Test Case: 302 | Input/Output: [(52 99 2 59) 2]
Test Case: 303 | Input/Output: [(25 10 96 16) 10]
Test Case: 304 | Input/Output: [(34 80 7 15) 7]
Test Case: 305 | Input/Output: [(100 43 59 33) 33]
Test Case: 306 | Input/Output: [(1 42 46 14) 1]
Test Case: 307 | Input/Output: [(90 4 57 76) 4]
Test Case: 308 | Input/Output: [(73 88 40 97) 40]
Test Case: 309 | Input/Output: [(73 97 85 57) 57]
Test Case: 310 | Input/Output: [(24 74 41 13) 13]
Test Case: 311 | Input/Output: [(88 10 58 88) 10]
Test Case: 312 | Input/Output: [(66 82 73 41) 41]
Test Case: 313 | Input/Output: [(11 2 83 6) 2]
Test Case: 314 | Input/Output: [(98 95 84 94) 84]
Test Case: 315 | Input/Output: [(6 84 53 4) 4]
Test Case: 316 | Input/Output: [(4 48 23 68) 4]
Test Case: 317 | Input/Output: [(1 39 77 72) 1]
Test Case: 318 | Input/Output: [(40 24 55 49) 24]
Test Case: 319 | Input/Output: [(4 50 61 90) 4]
Test Case: 320 | Input/Output: [(88 41 79 64) 41]
Test Case: 321 | Input/Output: [(77 10 85 98) 10]
Test Case: 322 | Input/Output: [(73 5 26 65) 5]
Test Case: 323 | Input/Output: [(66 96 17 21) 17]
Test Case: 324 | Input/Output: [(92 41 82 62) 41]
Test Case: 325 | Input/Output: [(37 21 29 12) 12]
Test Case: 326 | Input/Output: [(77 65 62 22) 22]
Test Case: 327 | Input/Output: [(21 25 81 45) 21]
Test Case: 328 | Input/Output: [(17 45 56 62) 17]
Test Case: 329 | Input/Output: [(26 12 88 49) 12]
Test Case: 330 | Input/Output: [(52 31 14 8) 8]
Test Case: 331 | Input/Output: [(66 19 43 46) 19]
Test Case: 332 | Input/Output: [(93 58 44 7) 7]
Test Case: 333 | Input/Output: [(88 30 58 21) 21]
Test Case: 334 | Input/Output: [(71 6 29 37) 6]
Test Case: 335 | Input/Output: [(56 100 8 64) 8]
Test Case: 336 | Input/Output: [(91 55 32 15) 15]
Test Case: 337 | Input/Output: [(34 5 5 82) 5]
Test Case: 338 | Input/Output: [(66 81 13 1) 1]
Test Case: 339 | Input/Output: [(57 72 7 0) 0]
Test Case: 340 | Input/Output: [(78 39 31 82) 31]
Test Case: 341 | Input/Output: [(63 86 67 77) 63]
Test Case: 342 | Input/Output: [(27 69 72 37) 27]
Test Case: 343 | Input/Output: [(16 43 74 19) 16]
Test Case: 344 | Input/Output: [(90 85 25 92) 25]
Test Case: 345 | Input/Output: [(67 3 22 28) 3]
Test Case: 346 | Input/Output: [(60 9 92 34) 9]
Test Case: 347 | Input/Output: [(15 21 51 33) 15]
Test Case: 348 | Input/Output: [(24 99 70 49) 24]
Test Case: 349 | Input/Output: [(75 60 26 76) 26]
Test Case: 350 | Input/Output: [(90 98 32 33) 32]
Test Case: 351 | Input/Output: [(73 31 37 91) 31]
Test Case: 352 | Input/Output: [(6 29 12 86) 6]
Test Case: 353 | Input/Output: [(23 44 22 30) 22]
Test Case: 354 | Input/Output: [(19 32 10 50) 10]
Test Case: 355 | Input/Output: [(55 60 26 85) 26]
Test Case: 356 | Input/Output: [(12 27 43 23) 12]
Test Case: 357 | Input/Output: [(26 56 38 14) 14]
Test Case: 358 | Input/Output: [(19 34 29 15) 15]
Test Case: 359 | Input/Output: [(91 21 44 8) 8]
Test Case: 360 | Input/Output: [(86 18 55 2) 2]
Test Case: 361 | Input/Output: [(95 0 91 83) 0]
Test Case: 362 | Input/Output: [(6 87 15 77) 6]
Test Case: 363 | Input/Output: [(97 0 8 67) 0]
Test Case: 364 | Input/Output: [(89 55 50 88) 50]
Test Case: 365 | Input/Output: [(49 78 98 90) 49]
Test Case: 366 | Input/Output: [(51 33 94 35) 33]
Test Case: 367 | Input/Output: [(96 22 24 29) 22]
Test Case: 368 | Input/Output: [(44 93 59 97) 44]
Test Case: 369 | Input/Output: [(39 67 57 22) 22]
Test Case: 370 | Input/Output: [(45 84 96 46) 45]
Test Case: 371 | Input/Output: [(40 78 31 72) 31]
Test Case: 372 | Input/Output: [(84 7 39 2) 2]
Test Case: 373 | Input/Output: [(67 24 4 29) 4]
Test Case: 374 | Input/Output: [(53 58 13 55) 13]
Test Case: 375 | Input/Output: [(39 4 14 98) 4]
Test Case: 376 | Input/Output: [(58 55 65 76) 55]
Test Case: 377 | Input/Output: [(93 80 100 12) 12]
Test Case: 378 | Input/Output: [(83 1 6 45) 1]
Test Case: 379 | Input/Output: [(97 53 59 5) 5]
Test Case: 380 | Input/Output: [(16 1 90 71) 1]
Test Case: 381 | Input/Output: [(25 11 87 14) 11]
Test Case: 382 | Input/Output: [(58 29 58 5) 5]
Test Case: 383 | Input/Output: [(63 56 40 7) 7]
Test Case: 384 | Input/Output: [(14 34 38 51) 14]
Test Case: 385 | Input/Output: [(16 73 32 78) 16]
Test Case: 386 | Input/Output: [(85 1 26 78) 1]
Test Case: 387 | Input/Output: [(0 18 81 86) 0]
Test Case: 388 | Input/Output: [(16 73 86 33) 16]
Test Case: 389 | Input/Output: [(98 48 32 100) 32]
Test Case: 390 | Input/Output: [(66 92 44 86) 44]
Test Case: 391 | Input/Output: [(60 2 63 96) 2]
Test Case: 392 | Input/Output: [(75 94 1 8) 1]
Test Case: 393 | Input/Output: [(77 48 63 11) 11]
Test Case: 394 | Input/Output: [(86 50 20 49) 20]
Test Case: 395 | Input/Output: [(31 5 82 32) 5]
Test Case: 396 | Input/Output: [(13 53 61 23) 13]
Test Case: 397 | Input/Output: [(96 38 83 68) 38]
Test Case: 398 | Input/Output: [(77 43 39 35) 35]
Test Case: 399 | Input/Output: [(44 66 0 28) 0]
Test Case: 400 | Input/Output: [(63 -40 -15 74) -40]
Test Case: 401 | Input/Output: [(72 -41 -99 -69) -99]
Test Case: 402 | Input/Output: [(-94 12 26 43) -94]
Test Case: 403 | Input/Output: [(73 -97 13 -3) -97]
Test Case: 404 | Input/Output: [(-1 99 36 19) -1]
Test Case: 405 | Input/Output: [(-17 -45 -73 -29) -73]
Test Case: 406 | Input/Output: [(-100 -34 -80 -52) -100]
Test Case: 407 | Input/Output: [(24 43 -2 -53) -53]
Test Case: 408 | Input/Output: [(-9 11 -65 59) -65]
Test Case: 409 | Input/Output: [(56 8 47 -10) -10]
Test Case: 410 | Input/Output: [(56 58 -8 -50) -50]
Test Case: 411 | Input/Output: [(63 1 -38 -3) -38]
Test Case: 412 | Input/Output: [(-62 50 4 65) -62]
Test Case: 413 | Input/Output: [(-48 -5 -48 -52) -52]
Test Case: 414 | Input/Output: [(-42 -96 -100 66) -100]
Test Case: 415 | Input/Output: [(-40 0 -71 -30) -71]
Test Case: 416 | Input/Output: [(-33 57 87 -80) -80]
Test Case: 417 | Input/Output: [(-55 -23 54 -96) -96]
Test Case: 418 | Input/Output: [(86 41 63 -76) -76]
Test Case: 419 | Input/Output: [(-46 -70 -94 78) -94]
Test Case: 420 | Input/Output: [(86 90 72 -90) -90]
Test Case: 421 | Input/Output: [(-78 43 -96 66) -96]
Test Case: 422 | Input/Output: [(-25 -90 -98 -77) -98]
Test Case: 423 | Input/Output: [(0 -46 30 -69) -69]
Test Case: 424 | Input/Output: [(45 52 -80 24) -80]
Test Case: 425 | Input/Output: [(51 84 -25 -100) -100]
Test Case: 426 | Input/Output: [(-32 10 28 23) -32]
Test Case: 427 | Input/Output: [(-44 61 55 -1) -44]
Test Case: 428 | Input/Output: [(-47 35 26 -74) -74]
Test Case: 429 | Input/Output: [(91 -4 96 75) -4]
Test Case: 430 | Input/Output: [(-47 18 16 84) -47]
Test Case: 431 | Input/Output: [(-99 -37 52 -42) -99]
Test Case: 432 | Input/Output: [(8 48 68 -91) -91]
Test Case: 433 | Input/Output: [(95 29 41 37) 29]
Test Case: 434 | Input/Output: [(88 -31 -72 96) -72]
Test Case: 435 | Input/Output: [(83 97 71 -57) -57]
Test Case: 436 | Input/Output: [(54 -13 -11 -52) -52]
Test Case: 437 | Input/Output: [(68 20 -99 -46) -99]
Test Case: 438 | Input/Output: [(39 -34 48 -86) -86]
Test Case: 439 | Input/Output: [(-7 -47 27 43) -47]
Test Case: 440 | Input/Output: [(-81 -29 38 59) -81]
Test Case: 441 | Input/Output: [(-28 -49 -60 34) -60]
Test Case: 442 | Input/Output: [(-95 50 2 -85) -95]
Test Case: 443 | Input/Output: [(65 19 13 -15) -15]
Test Case: 444 | Input/Output: [(-95 18 40 52) -95]
Test Case: 445 | Input/Output: [(-56 -82 13 84) -82]
Test Case: 446 | Input/Output: [(53 10 -35 32) -35]
Test Case: 447 | Input/Output: [(-45 -82 36 71) -82]
Test Case: 448 | Input/Output: [(-8 -96 -66 -31) -96]
Test Case: 449 | Input/Output: [(-24 31 14 70) -24]
Test Case: 450 | Input/Output: [(-59 42 49 16) -59]
Test Case: 451 | Input/Output: [(-35 -36 -38 -4) -38]
Test Case: 452 | Input/Output: [(-23 -47 6 6) -47]
Test Case: 453 | Input/Output: [(-58 90 -4 -56) -58]
Test Case: 454 | Input/Output: [(-5 -71 90 -10) -71]
Test Case: 455 | Input/Output: [(62 28 -14 -97) -97]
Test Case: 456 | Input/Output: [(-45 -97 -45 -66) -97]
Test Case: 457 | Input/Output: [(1 87 39 -47) -47]
Test Case: 458 | Input/Output: [(-46 99 -96 95) -96]
Test Case: 459 | Input/Output: [(-83 -97 -87 74) -97]
Test Case: 460 | Input/Output: [(-46 61 -20 31) -46]
Test Case: 461 | Input/Output: [(15 80 -19 -43) -43]
Test Case: 462 | Input/Output: [(-77 23 -46 -82) -82]
Test Case: 463 | Input/Output: [(-11 -9 -70 -99) -99]
Test Case: 464 | Input/Output: [(98 -69 -34 -100) -100]
Test Case: 465 | Input/Output: [(-85 21 -23 -63) -85]
Test Case: 466 | Input/Output: [(-80 -58 69 -33) -80]
Test Case: 467 | Input/Output: [(2 -32 46 24) -32]
Test Case: 468 | Input/Output: [(74 -92 -3 -10) -92]
Test Case: 469 | Input/Output: [(50 66 -93 93) -93]
Test Case: 470 | Input/Output: [(-32 -62 12 55) -62]
Test Case: 471 | Input/Output: [(-90 70 -30 -61) -90]
Test Case: 472 | Input/Output: [(-73 -23 -97 58) -97]
Test Case: 473 | Input/Output: [(51 11 48 -48) -48]
Test Case: 474 | Input/Output: [(30 -77 -5 -81) -81]
Test Case: 475 | Input/Output: [(29 -81 0 73) -81]
Test Case: 476 | Input/Output: [(-81 -4 -24 39) -81]
Test Case: 477 | Input/Output: [(-9 -12 -57 -79) -79]
Test Case: 478 | Input/Output: [(33 -11 90 -11) -11]
Test Case: 479 | Input/Output: [(-21 -34 -99 -52) -99]
Test Case: 480 | Input/Output: [(-60 31 -95 -6) -95]
Test Case: 481 | Input/Output: [(41 -49 41 -22) -49]
Test Case: 482 | Input/Output: [(97 76 18 -34) -34]
Test Case: 483 | Input/Output: [(-15 81 59 3) -15]
Test Case: 484 | Input/Output: [(23 -26 41 21) -26]
Test Case: 485 | Input/Output: [(4 94 85 -34) -34]
Test Case: 486 | Input/Output: [(-37 -87 -91 85) -91]
Test Case: 487 | Input/Output: [(16 -2 62 -69) -69]
Test Case: 488 | Input/Output: [(-94 92 82 63) -94]
Test Case: 489 | Input/Output: [(-9 41 -58 -60) -60]
Test Case: 490 | Input/Output: [(-77 -17 -52 -18) -77]
Test Case: 491 | Input/Output: [(-71 -3 -100 -10) -100]
Test Case: 492 | Input/Output: [(12 75 78 50) 12]
Test Case: 493 | Input/Output: [(-5 -7 39 99) -7]
Test Case: 494 | Input/Output: [(-88 52 -34 -82) -88]
Test Case: 495 | Input/Output: [(-27 76 55 -100) -100]
Test Case: 496 | Input/Output: [(-77 41 -30 -68) -77]
Test Case: 497 | Input/Output: [(89 75 -59 12) -59]
Test Case: 498 | Input/Output: [(-15 -99 -60 17) -99]
Test Case: 499 | Input/Output: [(-98 -53 -7 13) -98]
Test Case: 500 | Input/Output: [(86 -37 -4 -19) -37]
Test Case: 501 | Input/Output: [(100 -63 96 -98) -98]
Test Case: 502 | Input/Output: [(-72 24 100 -43) -72]
Test Case: 503 | Input/Output: [(15 44 75 -99) -99]
Test Case: 504 | Input/Output: [(-100 28 41 -82) -100]
Test Case: 505 | Input/Output: [(-18 -9 43 -63) -63]
Test Case: 506 | Input/Output: [(35 -71 -62 -32) -71]
Test Case: 507 | Input/Output: [(21 -71 -43 -27) -71]
Test Case: 508 | Input/Output: [(77 66 -31 48) -31]
Test Case: 509 | Input/Output: [(-18 -52 -93 -85) -93]
Test Case: 510 | Input/Output: [(44 47 53 -96) -96]
Test Case: 511 | Input/Output: [(4 -86 -20 -56) -86]
Test Case: 512 | Input/Output: [(47 -40 -90 1) -90]
Test Case: 513 | Input/Output: [(-20 89 -51 -64) -64]
Test Case: 514 | Input/Output: [(13 100 32 -40) -40]
Test Case: 515 | Input/Output: [(28 -39 -82 61) -82]
Test Case: 516 | Input/Output: [(72 -82 28 22) -82]
Test Case: 517 | Input/Output: [(-100 -48 8 58) -100]
Test Case: 518 | Input/Output: [(23 -37 -89 -85) -89]
Test Case: 519 | Input/Output: [(-57 45 62 36) -57]
Test Case: 520 | Input/Output: [(-72 -83 -59 -63) -83]
Test Case: 521 | Input/Output: [(6 40 49 45) 6]
Test Case: 522 | Input/Output: [(-54 -37 18 22) -54]
Test Case: 523 | Input/Output: [(69 -50 -63 23) -63]
Test Case: 524 | Input/Output: [(13 -35 -73 57) -73]
Test Case: 525 | Input/Output: [(10 66 32 -65) -65]
Test Case: 526 | Input/Output: [(9 70 95 28) 9]
Test Case: 527 | Input/Output: [(-77 93 -90 5) -90]
Test Case: 528 | Input/Output: [(87 -56 21 100) -56]
Test Case: 529 | Input/Output: [(-10 100 -79 61) -79]
Test Case: 530 | Input/Output: [(-44 -32 -87 -89) -89]
Test Case: 531 | Input/Output: [(90 -98 -41 -64) -98]
Test Case: 532 | Input/Output: [(60 -48 -88 8) -88]
Test Case: 533 | Input/Output: [(-32 48 -29 49) -32]
Test Case: 534 | Input/Output: [(65 74 -85 -21) -85]
Test Case: 535 | Input/Output: [(29 16 36 -75) -75]
Test Case: 536 | Input/Output: [(99 84 -8 39) -8]
Test Case: 537 | Input/Output: [(73 47 -27 52) -27]
Test Case: 538 | Input/Output: [(-1 72 90 -36) -36]
Test Case: 539 | Input/Output: [(-4 57 -89 70) -89]
Test Case: 540 | Input/Output: [(59 -23 96 89) -23]
Test Case: 541 | Input/Output: [(-75 14 -83 -1) -83]
Test Case: 542 | Input/Output: [(-43 -72 -33 74) -72]
Test Case: 543 | Input/Output: [(39 -3 45 30) -3]
Test Case: 544 | Input/Output: [(84 61 -19 -70) -70]
Test Case: 545 | Input/Output: [(-33 -39 71 30) -39]
Test Case: 546 | Input/Output: [(75 -93 20 -61) -93]
Test Case: 547 | Input/Output: [(-74 54 13 -21) -74]
Test Case: 548 | Input/Output: [(-85 -77 58 -67) -85]
Test Case: 549 | Input/Output: [(-90 22 98 -62) -90]
Test Case: 550 | Input/Output: [(-93 -31 -5 -3) -93]
Test Case: 551 | Input/Output: [(-90 74 23 46) -90]
Test Case: 552 | Input/Output: [(14 26 -10 -3) -10]
Test Case: 553 | Input/Output: [(9 41 15 16) 9]
Test Case: 554 | Input/Output: [(99 -78 -58 43) -78]
Test Case: 555 | Input/Output: [(100 52 -78 94) -78]
Test Case: 556 | Input/Output: [(-96 -20 -56 57) -96]
Test Case: 557 | Input/Output: [(92 9 -13 1) -13]
Test Case: 558 | Input/Output: [(68 96 -17 85) -17]
Test Case: 559 | Input/Output: [(-76 47 -83 74) -83]
Test Case: 560 | Input/Output: [(-62 11 85 68) -62]
Test Case: 561 | Input/Output: [(-79 24 -80 -18) -80]
Test Case: 562 | Input/Output: [(91 -72 -64 18) -72]
Test Case: 563 | Input/Output: [(29 -8 -88 -63) -88]
Test Case: 564 | Input/Output: [(-74 -63 16 -62) -74]
Test Case: 565 | Input/Output: [(2 47 -41 -18) -41]
Test Case: 566 | Input/Output: [(-70 52 -67 34) -70]
Test Case: 567 | Input/Output: [(-44 98 -95 -34) -95]
Test Case: 568 | Input/Output: [(91 -58 50 64) -58]
Test Case: 569 | Input/Output: [(73 61 85 99) 61]
Test Case: 570 | Input/Output: [(48 90 17 64) 17]
Test Case: 571 | Input/Output: [(-5 -9 -75 40) -75]
Test Case: 572 | Input/Output: [(-44 -100 64 -51) -100]
Test Case: 573 | Input/Output: [(-89 -32 52 94) -89]
Test Case: 574 | Input/Output: [(-52 -98 87 -5) -98]
Test Case: 575 | Input/Output: [(16 -5 22 86) -5]
Test Case: 576 | Input/Output: [(27 38 -55 -56) -56]
Test Case: 577 | Input/Output: [(-45 -96 -4 92) -96]
Test Case: 578 | Input/Output: [(-48 -16 -69 0) -69]
Test Case: 579 | Input/Output: [(96 84 21 70) 21]
Test Case: 580 | Input/Output: [(74 -44 79 25) -44]
Test Case: 581 | Input/Output: [(-1 92 0 54) -1]
Test Case: 582 | Input/Output: [(14 -14 -32 -59) -59]
Test Case: 583 | Input/Output: [(-50 42 -85 -22) -85]
Test Case: 584 | Input/Output: [(-77 40 -56 -32) -77]
Test Case: 585 | Input/Output: [(-77 56 38 -68) -77]
Test Case: 586 | Input/Output: [(-94 -11 -65 -29) -94]
Test Case: 587 | Input/Output: [(96 28 -87 -70) -87]
Test Case: 588 | Input/Output: [(-50 19 -76 9) -76]
Test Case: 589 | Input/Output: [(-56 -91 -76 37) -91]
Test Case: 590 | Input/Output: [(-9 -91 -45 -35) -91]
Test Case: 591 | Input/Output: [(-5 20 -28 33) -28]
Test Case: 592 | Input/Output: [(14 41 34 -83) -83]
Test Case: 593 | Input/Output: [(89 -53 85 -16) -53]
Test Case: 594 | Input/Output: [(-12 -6 19 84) -12]
Test Case: 595 | Input/Output: [(-40 -22 -95 -74) -95]
Test Case: 596 | Input/Output: [(19 -30 9 5) -30]
Test Case: 597 | Input/Output: [(-82 -1 -54 -94) -94]
Test Case: 598 | Input/Output: [(-3 34 -34 51) -34]
Test Case: 599 | Input/Output: [(76 98 90 6) 6]
Test Case: 600 | Input/Output: [(-23 11 75 7) -23]
Test Case: 601 | Input/Output: [(24 -24 -45 91) -45]
Test Case: 602 | Input/Output: [(55 -46 14 -76) -76]
Test Case: 603 | Input/Output: [(-70 83 -30 88) -70]
Test Case: 604 | Input/Output: [(27 39 -57 -92) -92]
Test Case: 605 | Input/Output: [(-9 -73 48 -92) -92]
Test Case: 606 | Input/Output: [(94 8 -30 -76) -76]
Test Case: 607 | Input/Output: [(75 -3 91 96) -3]
Test Case: 608 | Input/Output: [(8 -22 13 75) -22]
Test Case: 609 | Input/Output: [(8 85 21 -74) -74]
Test Case: 610 | Input/Output: [(-11 70 -38 57) -38]
Test Case: 611 | Input/Output: [(-13 47 -93 -70) -93]
Test Case: 612 | Input/Output: [(-68 -82 -52 55) -82]
Test Case: 613 | Input/Output: [(-1 -86 -89 62) -89]
Test Case: 614 | Input/Output: [(95 -41 -12 -50) -50]
Test Case: 615 | Input/Output: [(-46 83 -98 50) -98]
Test Case: 616 | Input/Output: [(-84 -17 53 75) -84]
Test Case: 617 | Input/Output: [(12 61 -66 -76) -76]
Test Case: 618 | Input/Output: [(-2 47 84 -41) -41]
Test Case: 619 | Input/Output: [(8 -73 35 -86) -86]
Test Case: 620 | Input/Output: [(49 11 73 32) 11]
Test Case: 621 | Input/Output: [(10 -86 51 68) -86]
Test Case: 622 | Input/Output: [(-22 -88 95 82) -88]
Test Case: 623 | Input/Output: [(80 -13 -74 90) -74]
Test Case: 624 | Input/Output: [(78 76 82 -75) -75]
Test Case: 625 | Input/Output: [(43 -14 43 -28) -28]
Test Case: 626 | Input/Output: [(43 -77 -99 -24) -99]
Test Case: 627 | Input/Output: [(-54 -13 -38 -49) -54]
Test Case: 628 | Input/Output: [(68 -42 -63 -3) -63]
Test Case: 629 | Input/Output: [(67 83 -25 -60) -60]
Test Case: 630 | Input/Output: [(53 27 88 -72) -72]
Test Case: 631 | Input/Output: [(-43 -7 -98 -87) -98]
Test Case: 632 | Input/Output: [(98 -38 51 28) -38]
Test Case: 633 | Input/Output: [(37 97 -44 12) -44]
Test Case: 634 | Input/Output: [(72 4 -64 -93) -93]
Test Case: 635 | Input/Output: [(-13 91 -94 32) -94]
Test Case: 636 | Input/Output: [(15 23 16 23) 15]
Test Case: 637 | Input/Output: [(-65 60 -19 -82) -82]
Test Case: 638 | Input/Output: [(33 99 -68 -55) -68]
Test Case: 639 | Input/Output: [(-8 85 -96 -99) -99]
Test Case: 640 | Input/Output: [(0 89 -25 4) -25]
Test Case: 641 | Input/Output: [(70 11 -39 40) -39]
Test Case: 642 | Input/Output: [(-94 27 -14 41) -94]
Test Case: 643 | Input/Output: [(13 -84 -57 5) -84]
Test Case: 644 | Input/Output: [(-97 16 -20 1) -97]
Test Case: 645 | Input/Output: [(-42 13 -48 -72) -72]
Test Case: 646 | Input/Output: [(98 -55 -55 34) -55]
Test Case: 647 | Input/Output: [(-76 55 53 19) -76]
Test Case: 648 | Input/Output: [(-27 -96 -42 43) -96]
Test Case: 649 | Input/Output: [(-21 -18 -76 -70) -76]
Test Case: 650 | Input/Output: [(-74 -55 -95 29) -95]
Test Case: 651 | Input/Output: [(34 -72 99 86) -72]
Test Case: 652 | Input/Output: [(93 -47 -25 97) -47]
Test Case: 653 | Input/Output: [(-57 -96 -21 89) -96]
Test Case: 654 | Input/Output: [(76 39 100 -73) -73]
Test Case: 655 | Input/Output: [(46 -71 -24 56) -71]
Test Case: 656 | Input/Output: [(-53 3 67 26) -53]
Test Case: 657 | Input/Output: [(-75 99 -41 39) -75]
Test Case: 658 | Input/Output: [(87 69 86 -81) -81]
Test Case: 659 | Input/Output: [(-12 -35 1 46) -35]
Test Case: 660 | Input/Output: [(99 27 -99 -76) -99]
Test Case: 661 | Input/Output: [(51 5 -96 -48) -96]
Test Case: 662 | Input/Output: [(-59 13 -18 -89) -89]
Test Case: 663 | Input/Output: [(-63 22 64 -37) -63]
Test Case: 664 | Input/Output: [(99 -12 96 -31) -31]
Test Case: 665 | Input/Output: [(32 98 4 -55) -55]
Test Case: 666 | Input/Output: [(-51 -38 -54 13) -54]
Test Case: 667 | Input/Output: [(-100 100 -57 98) -100]
Test Case: 668 | Input/Output: [(-51 -37 57 80) -51]
Test Case: 669 | Input/Output: [(-84 -63 -22 -52) -84]
Test Case: 670 | Input/Output: [(99 98 44 -76) -76]
Test Case: 671 | Input/Output: [(-99 100 -90 88) -99]
Test Case: 672 | Input/Output: [(25 -36 -53 11) -53]
Test Case: 673 | Input/Output: [(-89 15 -15 -22) -89]
Test Case: 674 | Input/Output: [(-73 -87 -74 34) -87]
Test Case: 675 | Input/Output: [(-38 -38 62 -46) -46]
Test Case: 676 | Input/Output: [(-55 -85 -76 15) -85]
Test Case: 677 | Input/Output: [(-80 6 37 67) -80]
Test Case: 678 | Input/Output: [(67 -89 -23 -1) -89]
Test Case: 679 | Input/Output: [(15 -18 -19 -16) -19]
Test Case: 680 | Input/Output: [(-48 -47 9 -56) -56]
Test Case: 681 | Input/Output: [(77 -91 73 90) -91]
Test Case: 682 | Input/Output: [(-91 94 -84 -23) -91]
Test Case: 683 | Input/Output: [(41 47 -7 -51) -51]
Test Case: 684 | Input/Output: [(-29 100 22 3) -29]
Test Case: 685 | Input/Output: [(-38 -10 61 12) -38]
Test Case: 686 | Input/Output: [(46 72 7 66) 7]
Test Case: 687 | Input/Output: [(-87 73 26 43) -87]
Test Case: 688 | Input/Output: [(-56 24 -62 -46) -62]
Test Case: 689 | Input/Output: [(-34 -58 -86 6) -86]
Test Case: 690 | Input/Output: [(-18 94 49 -33) -33]
Test Case: 691 | Input/Output: [(-26 -68 -14 36) -68]
Test Case: 692 | Input/Output: [(-77 32 -25 -84) -84]
Test Case: 693 | Input/Output: [(-34 89 -71 48) -71]
Test Case: 694 | Input/Output: [(-85 -85 67 -4) -85]
Test Case: 695 | Input/Output: [(22 22 -79 36) -79]
Test Case: 696 | Input/Output: [(-2 58 21 4) -2]
Test Case: 697 | Input/Output: [(84 -22 -28 20) -28]
Test Case: 698 | Input/Output: [(92 -9 60 -53) -53]
Test Case: 699 | Input/Output: [(-29 -66 98 36) -66]
Test Case: 700 | Input/Output: [(4 -47 7 -67) -67]
Test Case: 701 | Input/Output: [(18 84 -46 76) -46]
Test Case: 702 | Input/Output: [(-35 -19 83 -8) -35]
Test Case: 703 | Input/Output: [(12 49 -61 82) -61]
Test Case: 704 | Input/Output: [(98 -95 -89 -87) -95]
Test Case: 705 | Input/Output: [(38 -54 -91 -26) -91]
Test Case: 706 | Input/Output: [(57 -92 -88 95) -92]
Test Case: 707 | Input/Output: [(-25 78 57 10) -25]
Test Case: 708 | Input/Output: [(-72 34 -65 -61) -72]
Test Case: 709 | Input/Output: [(38 62 -22 -53) -53]
Test Case: 710 | Input/Output: [(49 24 -17 -52) -52]
Test Case: 711 | Input/Output: [(99 -90 88 -44) -90]
Test Case: 712 | Input/Output: [(-14 68 79 27) -14]
Test Case: 713 | Input/Output: [(-66 -47 -8 -4) -66]
Test Case: 714 | Input/Output: [(78 -18 60 10) -18]
Test Case: 715 | Input/Output: [(-61 -11 3 58) -61]
Test Case: 716 | Input/Output: [(28 94 53 27) 27]
Test Case: 717 | Input/Output: [(14 -32 18 18) -32]
Test Case: 718 | Input/Output: [(40 33 -25 74) -25]
Test Case: 719 | Input/Output: [(-41 -9 -9 77) -41]
Test Case: 720 | Input/Output: [(-38 -31 -97 42) -97]
Test Case: 721 | Input/Output: [(-52 -8 46 -4) -52]
Test Case: 722 | Input/Output: [(-71 -90 99 -51) -90]
Test Case: 723 | Input/Output: [(94 99 18 32) 18]
Test Case: 724 | Input/Output: [(-80 58 60 68) -80]
Test Case: 725 | Input/Output: [(-16 46 -20 -44) -44]
Test Case: 726 | Input/Output: [(-71 -26 -43 31) -71]
Test Case: 727 | Input/Output: [(-8 35 46 62) -8]
Test Case: 728 | Input/Output: [(16 -8 -65 -66) -66]
Test Case: 729 | Input/Output: [(-53 50 -28 31) -53]
Test Case: 730 | Input/Output: [(-96 -43 8 4) -96]
Test Case: 731 | Input/Output: [(-17 -50 -55 -35) -55]
Test Case: 732 | Input/Output: [(51 53 -47 -64) -64]
Test Case: 733 | Input/Output: [(-36 -53 -15 -22) -53]
Test Case: 734 | Input/Output: [(5 -48 -98 -86) -98]
Test Case: 735 | Input/Output: [(60 -35 -10 81) -35]
Test Case: 736 | Input/Output: [(77 71 -88 4) -88]
Test Case: 737 | Input/Output: [(74 1 57 93) 1]
Test Case: 738 | Input/Output: [(68 14 -28 -66) -66]
Test Case: 739 | Input/Output: [(-37 14 27 31) -37]
Test Case: 740 | Input/Output: [(-8 -70 69 0) -70]
Test Case: 741 | Input/Output: [(54 -66 23 18) -66]
Test Case: 742 | Input/Output: [(-36 -59 100 -31) -59]
Test Case: 743 | Input/Output: [(-28 40 35 -50) -50]
Test Case: 744 | Input/Output: [(36 79 55 80) 36]
Test Case: 745 | Input/Output: [(-43 94 83 -93) -93]
Test Case: 746 | Input/Output: [(-77 -57 -6 -79) -79]
Test Case: 747 | Input/Output: [(61 -77 92 -73) -77]
Test Case: 748 | Input/Output: [(54 -1 37 34) -1]
Test Case: 749 | Input/Output: [(52 77 -50 -72) -72]
Test Case: 750 | Input/Output: [(-11 6 82 15) -11]
Test Case: 751 | Input/Output: [(23 -17 -20 99) -20]
Test Case: 752 | Input/Output: [(74 -79 -8 46) -79]
Test Case: 753 | Input/Output: [(97 -30 94 -25) -30]
Test Case: 754 | Input/Output: [(-56 -87 -67 -6) -87]
Test Case: 755 | Input/Output: [(-33 -71 -53 -47) -71]
Test Case: 756 | Input/Output: [(47 65 -21 -47) -47]
Test Case: 757 | Input/Output: [(72 -77 -69 -14) -77]
Test Case: 758 | Input/Output: [(-66 68 -68 40) -68]
Test Case: 759 | Input/Output: [(-39 -28 70 -76) -76]
Test Case: 760 | Input/Output: [(79 60 -70 -48) -70]
Test Case: 761 | Input/Output: [(-10 83 -61 36) -61]
Test Case: 762 | Input/Output: [(17 -81 -30 -97) -97]
Test Case: 763 | Input/Output: [(-37 -86 78 -59) -86]
Test Case: 764 | Input/Output: [(37 15 57 -61) -61]
Test Case: 765 | Input/Output: [(-72 49 -79 -99) -99]
Test Case: 766 | Input/Output: [(62 -43 70 66) -43]
Test Case: 767 | Input/Output: [(-61 -88 31 15) -88]
Test Case: 768 | Input/Output: [(-66 82 83 -81) -81]
Test Case: 769 | Input/Output: [(39 95 76 -48) -48]
Test Case: 770 | Input/Output: [(-25 69 -89 -90) -90]
Test Case: 771 | Input/Output: [(26 -6 29 14) -6]
Test Case: 772 | Input/Output: [(99 -46 -74 -38) -74]
Test Case: 773 | Input/Output: [(-14 47 -37 86) -37]
Test Case: 774 | Input/Output: [(-74 73 78 13) -74]
Test Case: 775 | Input/Output: [(32 9 -28 16) -28]
Test Case: 776 | Input/Output: [(-40 38 100 100) -40]
Test Case: 777 | Input/Output: [(-62 33 10 65) -62]
Test Case: 778 | Input/Output: [(36 91 80 -34) -34]
Test Case: 779 | Input/Output: [(76 87 -3 -38) -38]
Test Case: 780 | Input/Output: [(96 85 65 -56) -56]
Test Case: 781 | Input/Output: [(-32 -47 -27 35) -47]
Test Case: 782 | Input/Output: [(-77 -41 80 91) -77]
Test Case: 783 | Input/Output: [(-35 97 -53 -34) -53]
Test Case: 784 | Input/Output: [(33 -32 -26 -9) -32]
Test Case: 785 | Input/Output: [(93 81 -36 66) -36]
Test Case: 786 | Input/Output: [(-72 72 36 17) -72]
Test Case: 787 | Input/Output: [(-66 72 -70 -96) -96]
Test Case: 788 | Input/Output: [(91 76 90 -42) -42]
Test Case: 789 | Input/Output: [(-37 -50 87 -18) -50]
Test Case: 790 | Input/Output: [(-19 8 96 90) -19]
Test Case: 791 | Input/Output: [(20 -18 78 -71) -71]
Test Case: 792 | Input/Output: [(33 0 18 -52) -52]
Test Case: 793 | Input/Output: [(-5 19 66 -44) -44]
Test Case: 794 | Input/Output: [(-64 87 -36 67) -64]
Test Case: 795 | Input/Output: [(28 18 30 -94) -94]
Test Case: 796 | Input/Output: [(90 -42 50 -50) -50]
Test Case: 797 | Input/Output: [(8 -58 91 -93) -93]
Test Case: 798 | Input/Output: [(-99 -8 64 -65) -99]
Test Case: 799 | Input/Output: [(98 -27 -54 -68) -68]
Test Case: 800 | Input/Output: [(-88 13 -26 90) -88]
Test Case: 801 | Input/Output: [(-6 -57 15 42) -57]
Test Case: 802 | Input/Output: [(73 39 10 55) 10]
Test Case: 803 | Input/Output: [(-41 -59 26 93) -59]
Test Case: 804 | Input/Output: [(-71 -14 37 46) -71]
Test Case: 805 | Input/Output: [(-66 58 67 -77) -77]
Test Case: 806 | Input/Output: [(76 16 67 -93) -93]
Test Case: 807 | Input/Output: [(-25 -100 3 -37) -100]
Test Case: 808 | Input/Output: [(13 -19 66 30) -19]
Test Case: 809 | Input/Output: [(51 0 -35 -59) -59]
Test Case: 810 | Input/Output: [(20 -32 57 15) -32]
Test Case: 811 | Input/Output: [(-22 -10 93 67) -22]
Test Case: 812 | Input/Output: [(65 69 84 -88) -88]
Test Case: 813 | Input/Output: [(-36 42 -43 -18) -43]
Test Case: 814 | Input/Output: [(83 -16 -39 -35) -39]
Test Case: 815 | Input/Output: [(-97 -75 22 56) -97]
Test Case: 816 | Input/Output: [(54 47 18 -56) -56]
Test Case: 817 | Input/Output: [(-43 -74 38 -39) -74]
Test Case: 818 | Input/Output: [(92 47 -91 92) -91]
Test Case: 819 | Input/Output: [(93 -94 44 -90) -94]
Test Case: 820 | Input/Output: [(58 -32 83 -11) -32]
Test Case: 821 | Input/Output: [(-65 96 81 98) -65]
Test Case: 822 | Input/Output: [(28 -29 -56 -36) -56]
Test Case: 823 | Input/Output: [(-23 -39 93 18) -39]
Test Case: 824 | Input/Output: [(66 -17 77 -96) -96]
Test Case: 825 | Input/Output: [(22 95 -12 -51) -51]
Test Case: 826 | Input/Output: [(-37 -79 -34 79) -79]
Test Case: 827 | Input/Output: [(-28 29 -36 -73) -73]
Test Case: 828 | Input/Output: [(-50 -10 -26 27) -50]
Test Case: 829 | Input/Output: [(-82 -92 70 67) -92]
Test Case: 830 | Input/Output: [(-68 32 66 41) -68]
Test Case: 831 | Input/Output: [(-53 -13 -12 10) -53]
Test Case: 832 | Input/Output: [(-37 9 -45 -48) -48]
Test Case: 833 | Input/Output: [(-65 73 -19 46) -65]
Test Case: 834 | Input/Output: [(12 59 -24 -92) -92]
Test Case: 835 | Input/Output: [(1 -33 -35 -33) -35]
Test Case: 836 | Input/Output: [(-17 10 74 16) -17]
Test Case: 837 | Input/Output: [(24 -57 -65 -62) -65]
Test Case: 838 | Input/Output: [(24 -6 -71 -18) -71]
Test Case: 839 | Input/Output: [(20 78 99 -58) -58]
Test Case: 840 | Input/Output: [(52 28 -71 -60) -71]
Test Case: 841 | Input/Output: [(4 6 -94 -99) -99]
Test Case: 842 | Input/Output: [(-89 74 -37 -80) -89]
Test Case: 843 | Input/Output: [(72 -27 34 37) -27]
Test Case: 844 | Input/Output: [(-5 18 -50 42) -50]
Test Case: 845 | Input/Output: [(87 52 37 58) 37]
Test Case: 846 | Input/Output: [(-93 80 -68 -44) -93]
Test Case: 847 | Input/Output: [(99 -56 26 -75) -75]
Test Case: 848 | Input/Output: [(37 -34 74 -71) -71]
Test Case: 849 | Input/Output: [(-57 34 -38 -86) -86]
Test Case: 850 | Input/Output: [(41 -2 -73 -95) -95]
Test Case: 851 | Input/Output: [(31 52 79 -77) -77]
Test Case: 852 | Input/Output: [(45 79 -51 72) -51]
Test Case: 853 | Input/Output: [(32 50 -90 68) -90]
Test Case: 854 | Input/Output: [(-39 4 76 3) -39]
Test Case: 855 | Input/Output: [(99 48 91 13) 13]
Test Case: 856 | Input/Output: [(-80 0 -27 86) -80]
Test Case: 857 | Input/Output: [(59 32 -29 -73) -73]
Test Case: 858 | Input/Output: [(65 -71 62 -37) -71]
Test Case: 859 | Input/Output: [(-40 -17 -16 16) -40]
Test Case: 860 | Input/Output: [(84 -48 55 -83) -83]
Test Case: 861 | Input/Output: [(-13 -64 -39 23) -64]
Test Case: 862 | Input/Output: [(63 59 14 -99) -99]
Test Case: 863 | Input/Output: [(-31 14 -63 51) -63]
Test Case: 864 | Input/Output: [(-21 100 -22 88) -22]
Test Case: 865 | Input/Output: [(-62 55 -46 44) -62]
Test Case: 866 | Input/Output: [(-57 17 -6 -52) -57]
Test Case: 867 | Input/Output: [(-54 -7 73 -32) -54]
Test Case: 868 | Input/Output: [(35 -95 -5 34) -95]
Test Case: 869 | Input/Output: [(-59 24 -6 -50) -59]
Test Case: 870 | Input/Output: [(46 7 29 -54) -54]
Test Case: 871 | Input/Output: [(60 -21 -71 -39) -71]
Test Case: 872 | Input/Output: [(50 -6 -80 38) -80]
Test Case: 873 | Input/Output: [(-24 -87 -40 74) -87]
Test Case: 874 | Input/Output: [(73 -42 3 -91) -91]
Test Case: 875 | Input/Output: [(-7 31 -96 -98) -98]
Test Case: 876 | Input/Output: [(55 55 64 11) 11]
Test Case: 877 | Input/Output: [(-18 3 -21 80) -21]
Test Case: 878 | Input/Output: [(98 74 24 -50) -50]
Test Case: 879 | Input/Output: [(4 66 -4 -95) -95]
Test Case: 880 | Input/Output: [(-34 74 -66 24) -66]
Test Case: 881 | Input/Output: [(40 9 -25 -87) -87]
Test Case: 882 | Input/Output: [(-42 45 -65 59) -65]
Test Case: 883 | Input/Output: [(20 5 83 -67) -67]
Test Case: 884 | Input/Output: [(-92 80 22 -18) -92]
Test Case: 885 | Input/Output: [(-21 -93 -73 76) -93]
Test Case: 886 | Input/Output: [(-95 1 -24 -96) -96]
Test Case: 887 | Input/Output: [(-36 3 -89 -49) -89]
Test Case: 888 | Input/Output: [(24 -23 10 55) -23]
Test Case: 889 | Input/Output: [(-78 33 -100 -90) -100]
Test Case: 890 | Input/Output: [(94 -48 -1 -78) -78]
Test Case: 891 | Input/Output: [(19 48 -93 33) -93]
Test Case: 892 | Input/Output: [(-30 69 67 -94) -94]
Test Case: 893 | Input/Output: [(-78 -11 -71 -23) -78]
Test Case: 894 | Input/Output: [(-34 -100 35 33) -100]
Test Case: 895 | Input/Output: [(90 99 -11 62) -11]
Test Case: 896 | Input/Output: [(-50 42 28 62) -50]
Test Case: 897 | Input/Output: [(-9 -68 41 31) -68]
Test Case: 898 | Input/Output: [(11 -84 -86 -96) -96]
Test Case: 899 | Input/Output: [(89 88 83 77) 77]
Test Case: 900 | Input/Output: [(-87 -80 -2 -64) -87]
Test Case: 901 | Input/Output: [(91 3 29 76) 3]
Test Case: 902 | Input/Output: [(6 15 -93 88) -93]
Test Case: 903 | Input/Output: [(57 91 31 49) 31]
Test Case: 904 | Input/Output: [(77 33 55 -96) -96]
Test Case: 905 | Input/Output: [(-35 0 -94 45) -94]
Test Case: 906 | Input/Output: [(34 -6 -20 -97) -97]
Test Case: 907 | Input/Output: [(3 -88 50 100) -88]
Test Case: 908 | Input/Output: [(32 -15 10 -38) -38]
Test Case: 909 | Input/Output: [(-19 -32 84 -15) -32]
Test Case: 910 | Input/Output: [(15 -32 36 38) -32]
Test Case: 911 | Input/Output: [(-15 -83 66 -23) -83]
Test Case: 912 | Input/Output: [(66 -67 34 6) -67]
Test Case: 913 | Input/Output: [(77 70 29 13) 13]
Test Case: 914 | Input/Output: [(16 -59 43 -83) -83]
Test Case: 915 | Input/Output: [(3 -19 -60 -70) -70]
Test Case: 916 | Input/Output: [(-77 -59 55 -62) -77]
Test Case: 917 | Input/Output: [(-38 51 -2 -93) -93]
Test Case: 918 | Input/Output: [(-74 66 94 40) -74]
Test Case: 919 | Input/Output: [(29 -43 39 -16) -43]
Test Case: 920 | Input/Output: [(99 46 38 -59) -59]
Test Case: 921 | Input/Output: [(-68 -64 56 -13) -68]
Test Case: 922 | Input/Output: [(39 -11 -50 -95) -95]
Test Case: 923 | Input/Output: [(-15 -49 -23 4) -49]
Test Case: 924 | Input/Output: [(-82 100 -35 -28) -82]
Test Case: 925 | Input/Output: [(1 8 -87 -38) -87]
Test Case: 926 | Input/Output: [(64 1 -56 -58) -58]
Test Case: 927 | Input/Output: [(18 -48 -76 69) -76]
Test Case: 928 | Input/Output: [(-78 9 -100 -57) -100]
Test Case: 929 | Input/Output: [(48 79 84 47) 47]
Test Case: 930 | Input/Output: [(-84 2 90 -15) -84]
Test Case: 931 | Input/Output: [(-41 95 -47 0) -47]
Test Case: 932 | Input/Output: [(-34 3 -40 -39) -40]
Test Case: 933 | Input/Output: [(70 -29 16 15) -29]
Test Case: 934 | Input/Output: [(61 94 -6 5) -6]
Test Case: 935 | Input/Output: [(18 39 -11 -21) -21]
Test Case: 936 | Input/Output: [(-81 44 39 1) -81]
Test Case: 937 | Input/Output: [(-56 -100 16 -20) -100]
Test Case: 938 | Input/Output: [(-99 64 99 45) -99]
Test Case: 939 | Input/Output: [(24 -37 82 90) -37]
Test Case: 940 | Input/Output: [(72 -41 -44 0) -44]
Test Case: 941 | Input/Output: [(88 -38 60 32) -38]
Test Case: 942 | Input/Output: [(-42 -88 -8 -41) -88]
Test Case: 943 | Input/Output: [(-66 -51 -93 -44) -93]
Test Case: 944 | Input/Output: [(89 44 -5 100) -5]
Test Case: 945 | Input/Output: [(-54 46 24 -2) -54]
Test Case: 946 | Input/Output: [(-89 -18 51 -56) -89]
Test Case: 947 | Input/Output: [(-98 0 57 -88) -98]
Test Case: 948 | Input/Output: [(-26 -48 -94 42) -94]
Test Case: 949 | Input/Output: [(-66 -90 99 -33) -90]
Test Case: 950 | Input/Output: [(76 41 59 -94) -94]
Test Case: 951 | Input/Output: [(-1 -28 -35 16) -35]
Test Case: 952 | Input/Output: [(50 -83 28 -31) -83]
Test Case: 953 | Input/Output: [(56 -53 60 67) -53]
Test Case: 954 | Input/Output: [(-99 51 64 -84) -99]
Test Case: 955 | Input/Output: [(-72 -14 29 -51) -72]
Test Case: 956 | Input/Output: [(-17 -99 66 -72) -99]
Test Case: 957 | Input/Output: [(61 -34 59 36) -34]
Test Case: 958 | Input/Output: [(-5 -99 59 59) -99]
Test Case: 959 | Input/Output: [(7 -44 -68 -34) -68]
Test Case: 960 | Input/Output: [(4 70 -81 -27) -81]
Test Case: 961 | Input/Output: [(62 -81 40 100) -81]
Test Case: 962 | Input/Output: [(-5 86 42 57) -5]
Test Case: 963 | Input/Output: [(-68 17 8 43) -68]
Test Case: 964 | Input/Output: [(28 43 -8 47) -8]
Test Case: 965 | Input/Output: [(35 -76 -91 71) -91]
Test Case: 966 | Input/Output: [(66 63 -90 59) -90]
Test Case: 967 | Input/Output: [(-47 52 -83 66) -83]
Test Case: 968 | Input/Output: [(61 -77 -6 40) -77]
Test Case: 969 | Input/Output: [(-9 -56 7 -52) -56]
Test Case: 970 | Input/Output: [(12 -19 -91 57) -91]
Test Case: 971 | Input/Output: [(-62 -39 -68 -62) -68]
Test Case: 972 | Input/Output: [(15 -30 86 -2) -30]
Test Case: 973 | Input/Output: [(77 -70 77 -76) -76]
Test Case: 974 | Input/Output: [(-45 -100 -10 35) -100]
Test Case: 975 | Input/Output: [(28 -11 79 7) -11]
Test Case: 976 | Input/Output: [(-12 -23 -9 92) -23]
Test Case: 977 | Input/Output: [(48 -1 36 -96) -96]
Test Case: 978 | Input/Output: [(-100 19 -71 -60) -100]
Test Case: 979 | Input/Output: [(53 -45 -37 65) -45]
Test Case: 980 | Input/Output: [(-76 59 81 -45) -76]
Test Case: 981 | Input/Output: [(-35 4 58 -66) -66]
Test Case: 982 | Input/Output: [(-63 43 -68 70) -68]
Test Case: 983 | Input/Output: [(-85 60 -95 -11) -95]
Test Case: 984 | Input/Output: [(56 18 4 -55) -55]
Test Case: 985 | Input/Output: [(91 -60 -10 -77) -77]
Test Case: 986 | Input/Output: [(-85 -5 -72 -67) -85]
Test Case: 987 | Input/Output: [(-90 37 34 68) -90]
Test Case: 988 | Input/Output: [(-70 -98 34 66) -98]
Test Case: 989 | Input/Output: [(-34 -9 60 50) -34]
Test Case: 990 | Input/Output: [(36 -51 34 84) -51]
Test Case: 991 | Input/Output: [(-93 -3 6 -24) -93]
Test Case: 992 | Input/Output: [(19 -82 16 72) -82]
Test Case: 993 | Input/Output: [(-100 38 92 -43) -100]
Test Case: 994 | Input/Output: [(-7 -64 -37 50) -64]
Test Case: 995 | Input/Output: [(-12 63 1 -32) -32]
Test Case: 996 | Input/Output: [(-89 40 -1 -6) -89]
Test Case: 997 | Input/Output: [(25 66 84 -25) -25]
Test Case: 998 | Input/Output: [(-76 80 56 62) -76]
Test Case: 999 | Input/Output: [(14 64 -49 -13) -49]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -2 -66 -119 108 -2 -125 -112 -41 -65 -77 70 -85 -34 -52 24 -92
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-41 -5 -41 -41] -41] [[-46 -2 -46 -46] -46] [[-70 1 1 1] -70] [[100 100 100 -61] -61] [[50 50 50 3] 3] [[9 9 9 32] 9] [[48 48 48 10] 10] [[-77 -81 -77 -77] -81] [[30 30 66 30] 30] [[-92 -92 -92 18] -92] [(10 10 10 10) 10] [(27 27 27 27) 27] [(-67 -67 -67 -67) -67] [(85 85 85 85) 85] [(-87 -87 -87 -87) -87] [(36 10 81 33) 10] [(97 83 53 9) 9] [(73 58 92 96) 58] [(76 68 41 44) 41] [(58 4 28 49) 4] [(36 95 14 93) 14] [(48 58 24 92) 24] [(24 38 77 42) 24] [(11 89 87 65) 11] [(96 38 43 13) 13] [(62 89 13 30) 13] [(31 86 69 52) 31] [(35 54 96 24) 24] [(76 54 2 90) 2] [(47 64 3 57) 3] [(66 41 47 81) 41] [(6 35 95 26) 6] [(40 86 68 80) 40] [(32 75 62 56) 32] [(29 86 31 79) 29] [(70 100 43 47) 43] [(26 -45 -5 -48) -48] [(64 -47 1 33) -47] [(-33 52 -18 42) -33] [(19 -47 -60 31) -60] [(32 89 95 -73) -73] [(-19 57 65 -51) -51] [(-87 14 92 -73) -87] [(48 -79 -66 4) -79] [(50 39 66 -35) -35] [(-19 -7 -90 71) -90] [(60 -48 -26 4) -48] [(-17 -63 37 78) -63] [(-39 78 70 20) -39] [(64 54 -47 3) -47] [(16 76 42 -54) -54] [(-17 5 93 -32) -32] [(-39 48 15 16) -39] [(7 35 -13 -23) -23] [(20 16 -77 40) -77] [(-47 -47 78 -54) -54] [(76 51 20 21) 20] [(-84 -72 -37 -14) -84] [(75 34 -41 73) -41] [(-63 3 55 -34) -63] [(15 81 -6 -55) -55] [(-76 39 -14 -92) -92] [(66 -99 41 99) -99] [(16 74 61 -84) -84] [(51 51 96 -1) -1] [(47 16 74 -41) -41] [(80 -74 -66 -11) -74] [(35 82 42 -94) -94] [(93 -35 -34 59) -35] [(-98 -92 -7 93) -98] [(43 -76 98 -46) -76] [(23 -31 100 94) -31] [(-19 -84 -36 0) -84] [(97 4 4 -33) -33] [(56 -73 31 70) -73] [(-8 7 26 57) -8] [(41 -70 33 -78) -78] [(76 57 -27 29) -27] [(20 -93 -58 70) -93] [(68 68 -70 -19) -70] [(31 28 -56 3) -56] [(-60 28 -61 47) -61] [(-37 -73 -72 -31) -73] [(51 5 -4 -59) -59] [(75 -24 24 -84) -84] [(-93 95 68 -74) -93] [(85 -28 -61 42) -61] [(-57 -99 -52 76) -99] [(-21 39 49 46) -21] [(-34 -67 -30 79) -67] [(-1 -45 -48 3) -48] [(15 -12 -44 -37) -44] [(-63 28 8 -48) -63] [(-45 -41 41 -38) -45] [(-28 -25 -61 -3) -61])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_min integer_swap integer_stackdepth integer_eq integer_gte in3 boolean_rot exec_rot (print_integer) (exec_stackdepth tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Lexicase best errors: [1 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_min integer_swap integer_stackdepth integer_eq integer_gte in3 boolean_rot exec_rot (print_integer) (exec_stackdepth tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Zero cases best errors: [1 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 1000 3 3 8 3 8 4 5 5)
Population mean number of elite cases: 1.05
Count of perfect (error zero) individuals by case: (7 0 3 3 8 3 8 4 5 5)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not})
Best program: (boolean_not in3 integer_mod boolean_yankdup boolean_xor print_integer integer_yankdup exec_dup_items integer_dec exec_flush boolean_invert_first_then_and exec_while () integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult integer_swap boolean_dup_times boolean_dup_items boolean_not)
Errors: [1 1 0 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 25
Percent parens: 0.080
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.993 1.0 0.997 0.997 0.992 0.997 0.992 0.996 0.995 0.995)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.609
Average program size in population (points): 69.64
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 491999
--- Timings ---
Current time: 1559314418450 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.0%
Fitness Testing:      1.7 seconds, 67.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_min integer_swap integer_stackdepth integer_eq integer_gte in3 boolean_rot exec_rot (print_integer) (exec_stackdepth tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Lexicase best errors: [1 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_min integer_swap integer_stackdepth integer_eq integer_gte in3 boolean_rot exec_rot (print_integer) (exec_stackdepth tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Zero cases best errors: [1 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 182 581 910 717 136 581 899 1000 900)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (182 182 581 910 717 136 581 899 0 900)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (integer_min integer_swap integer_stackdepth integer_eq integer_gte in3 boolean_rot exec_rot (print_integer) (exec_stackdepth tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Errors: [1 1 0 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 4.912
Median total errors in population: 4
Error averages by case: (0.818 0.818 0.419 0.09 0.283 0.864 0.419 0.101 1.0 0.1)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 33.276
Average program size in population (points): 44.222
Average percent parens in population: 0.216
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.493
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 237
Syntactic diversity (% unique Push programs):	 0.375
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 813227
--- Timings ---
Current time: 1559314420905 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 48.7%
Fitness Testing:      2.2 seconds, 43.5%
Report:               0.3 seconds,  5.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tagged_905} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup})
Lexicase best program: (integer_gt integer_empty exec_if (integer_swap boolean_or integer_fromboolean integer_flush integer_empty boolean_shove exec_dup_times (integer_shove) in2) (integer_dup_items tagged_905) integer_gte exec_empty boolean_flush integer_min print_integer exec_do*times (boolean_rot exec_yankdup))
Lexicase best errors: [0 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tagged_905} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup})
Zero cases best program: (integer_gt integer_empty exec_if (integer_swap boolean_or integer_fromboolean integer_flush integer_empty boolean_shove exec_dup_times (integer_shove) in2) (integer_dup_items tagged_905) integer_gte exec_empty boolean_flush integer_min print_integer exec_do*times (boolean_rot exec_yankdup))
Zero cases best errors: [0 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 400 316 1000 399 400 317 1000 197 316)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (316 400 316 0 399 400 317 0 197 316)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tagged_905} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup})
Best program: (integer_gt integer_empty exec_if (integer_swap boolean_or integer_fromboolean integer_flush integer_empty boolean_shove exec_dup_times (integer_shove) in2) (integer_dup_items tagged_905) integer_gte exec_empty boolean_flush integer_min print_integer exec_do*times (boolean_rot exec_yankdup))
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 7.339
Median total errors in population: 7
Error averages by case: (0.684 0.6 0.684 1.0 0.601 0.6 0.683 1.0 0.803 0.684)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 37.003
Average program size in population (points): 50.037
Average percent parens in population: 0.231
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0175
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1234309
--- Timings ---
Current time: 1559314424334 milliseconds
Total Time:           8.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.2 seconds, 60.3%
Fitness Testing:      2.8 seconds, 32.3%
Report:               0.5 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_min integer_swap integer_stackdepth integer_eq integer_gte in3 boolean_rot exec_rot (print_integer) (exec_stackdepth tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_min integer_swap integer_stackdepth integer_eq integer_gte in3 boolean_rot exec_rot (print_integer) (exec_stackdepth tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 341 889 339 146 745 1 404 1000 147)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (341 341 889 339 146 745 1 404 0 147)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not})
Best program: (boolean_not in3 integer_mod boolean_yankdup boolean_xor print_integer integer_yankdup exec_dup_items integer_dec exec_flush boolean_invert_first_then_and exec_while () integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult integer_swap exec_eq boolean_dup_items boolean_not)
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 25
Percent parens: 0.080
--- Population Statistics ---
Average total errors in population: 6.647
Median total errors in population: 7
Error averages by case: (0.659 0.659 0.111 0.661 0.854 0.255 0.999 0.596 1.0 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 31.184
Average program size in population (points): 40.918
Average percent parens in population: 0.221
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4235
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1670918
--- Timings ---
Current time: 1559314427237 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.5 seconds, 64.6%
Fitness Testing:      3.2 seconds, 28.1%
Report:               0.7 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_not in3 integer_mod boolean_yankdup boolean_xor print_integer integer_yankdup exec_dup_items integer_dec exec_flush boolean_invert_first_then_and exec_while () integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult integer_swap boolean_dup_times boolean_dup_items boolean_not)
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.080
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_not in3 integer_mod boolean_yankdup boolean_xor print_integer integer_yankdup exec_dup_items integer_dec exec_flush boolean_invert_first_then_and exec_while () integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult integer_swap boolean_dup_times boolean_dup_items boolean_not)
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.080
--- Lexicase Population Statistics ---
Count of elite individuals by case: (412 412 414 243 151 150 243 412 662 246)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (412 412 414 243 151 150 243 412 662 246)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not})
Best program: (boolean_not in3 integer_mod boolean_empty boolean_xor print_integer integer_yankdup exec_dup_items integer_dec exec_flush boolean_invert_first_then_and exec_while () integer_dup_times integer_gt integer_dup exec_empty integer_dup_times boolean_invert_first_then_and integer_mult integer_swap boolean_dup_times boolean_dup_items boolean_not)
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 25
Percent parens: 0.080
--- Population Statistics ---
Average total errors in population: 6.655
Median total errors in population: 6
Error averages by case: (0.588 0.588 0.586 0.757 0.849 0.85 0.757 0.588 0.338 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.122
Average program size in population (points): 33.757
Average percent parens in population: 0.246
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.907375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2049577
--- Timings ---
Current time: 1559314430035 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.7 seconds, 67.8%
Fitness Testing:      3.6 seconds, 25.3%
Report:               0.9 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 533
Test mean error for best: 0.53300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in2 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in2 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 195 731 305 841 200 926 305 305 306)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (639 195 731 305 841 200 926 305 305 306)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range})
Best program: (boolean_or boolean_flush in2 exec_rot (in4 exec_do*times (boolean_rot print_integer) integer_gt in2 integer_gte exec_s (in4 exec_s_when_autoconstructing (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times integer_stackdepth exec_do*while () exec_eq) (exec_dup_items boolean_shove boolean_shove exec_do*while (boolean_xor boolean_dup_times exec_yankdup boolean_dup_items integer_dup_items) integer_min exec_while (print_boolean) in3 print_exec () integer_gt exec_pop (exec_do*range (boolean_yank integer_mult exec_do*times (exec_k_when_autoconstructing (print_exec (exec_eq) in4 exec_dup_items exec_do*range ()) ())))) ()) () ()) () ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 5.247
Median total errors in population: 6
Error averages by case: (0.361 0.805 0.269 0.695 0.159 0.8 0.074 0.695 0.695 0.694)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.691
Average program size in population (points): 34.305
Average percent parens in population: 0.239
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.3093125
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2416143
--- Timings ---
Current time: 1559314432898 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.8 seconds, 69.7%
Fitness Testing:      4.0 seconds, 23.7%
Report:               1.0 seconds,  6.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output:                    
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_or boolean_flush in2 exec_rot (in4 exec_do*times (boolean_rot print_integer) integer_gt in2 integer_gte exec_s (in4 exec_s_when_autoconstructing (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times integer_stackdepth exec_do*while () exec_eq) (exec_dup_items boolean_shove boolean_shove exec_do*while (boolean_xor boolean_dup_times exec_yankdup boolean_dup_items integer_dup_items integer_min) exec_while (print_boolean) in3 print_exec () integer_gt exec_pop (exec_do*range (boolean_yank integer_mult exec_do*times (exec_k_when_autoconstructing (print_exec (exec_eq) in4 exec_dup_items exec_do*range ()) ())))) ()) () ()) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_or boolean_flush in2 exec_rot (in4 exec_do*times (boolean_rot print_integer) integer_gt in2 integer_gte exec_s (in4 exec_s_when_autoconstructing (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times integer_stackdepth exec_do*while () exec_eq) (exec_dup_items boolean_shove boolean_shove exec_do*while (boolean_xor boolean_dup_times exec_yankdup boolean_dup_items integer_dup_items integer_min) exec_while (print_boolean) in3 print_exec () integer_gt exec_pop (exec_do*range (boolean_yank integer_mult exec_do*times (exec_k_when_autoconstructing (print_exec (exec_eq) in4 exec_dup_items exec_do*range ()) ())))) ()) () ()) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (725 825 725 853 1000 843 1000 1000 1000 726)
Population mean number of elite cases: 8.70
Count of perfect (error zero) individuals by case: (725 825 725 853 0 843 0 0 0 726)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt integer_gt in2 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [0 0 0 0 1 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 47
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 5.303
Median total errors in population: 4
Error averages by case: (0.275 0.175 0.275 0.147 1.0 0.157 1.0 1.0 1.0 0.274)
Error minima by case: (0 0 0 0 1 0 1 1 1 0)
Average genome size in population (length): 37.246
Average program size in population (points): 54.358
Average percent parens in population: 0.310
Minimum age in population: 6.5
Maximum age in population: 9.90625
Average age in population: 8.39834375
Median age in population: 8.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2988194
--- Timings ---
Current time: 1559314435741 milliseconds
Total Time:          19.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 69.3%
Fitness Testing:      4.6 seconds, 23.1%
Report:               1.4 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output:                    
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output:                    
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output:                    
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (901 866 819 907 901 1000 1000 907 1 907)
Population mean number of elite cases: 8.21
Count of perfect (error zero) individuals by case: (901 866 819 907 901 0 0 907 1 907)
Population mean number of perfect (error zero) cases: 6.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 3.791
Median total errors in population: 3
Error averages by case: (0.099 0.134 0.181 0.093 0.099 1.0 1.0 0.093 0.999 0.093)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 38.893
Average program size in population (points): 57.67
Average percent parens in population: 0.329
Minimum age in population: 8.5
Maximum age in population: 11.375
Average age in population: 9.80478125
Median age in population: 9.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 237
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3498399
--- Timings ---
Current time: 1559314438491 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 69.3%
Fitness Testing:      5.1 seconds, 22.6%
Report:               1.7 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_shove exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_shove exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (758 917 16 1000 1000 755 932 1000 1000 18)
Population mean number of elite cases: 7.40
Count of perfect (error zero) individuals by case: (758 917 16 0 0 755 932 0 0 18)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction tagged_93} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (tagged_93) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 43
Percent parens: 0.372
--- Population Statistics ---
Average total errors in population: 6.604
Median total errors in population: 6
Error averages by case: (0.242 0.083 0.984 1.0 1.0 0.245 0.068 1.0 1.0 0.982)
Error minima by case: (0 0 0 1 1 0 0 1 1 0)
Average genome size in population (length): 29.886
Average program size in population (points): 45.847
Average percent parens in population: 0.348
Minimum age in population: 11.3125
Maximum age in population: 12.3125
Average age in population: 11.8115
Median age in population: 11.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 605
Genome diversity (% unique genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 608
Syntactic diversity (% unique Push programs):	 0.353
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3915998
--- Timings ---
Current time: 1559314441105 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 69.1%
Fitness Testing:      5.7 seconds, 22.4%
Report:               2.1 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output:                    
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_dup_items integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_dup_items integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (587 1000 1000 788 1000 910 910 568 914 571)
Population mean number of elite cases: 8.25
Count of perfect (error zero) individuals by case: (587 0 0 788 0 910 910 568 914 571)
Population mean number of perfect (error zero) cases: 5.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_dup_items integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 4.752
Median total errors in population: 3
Error averages by case: (0.413 1.0 1.0 0.212 1.0 0.09 0.09 0.432 0.086 0.429)
Error minima by case: (0 1 1 0 1 0 0 0 0 0)
Average genome size in population (length): 29.703
Average program size in population (points): 45.675
Average percent parens in population: 0.350
Minimum age in population: 12.3125
Maximum age in population: 14.3125
Average age in population: 13.677
Median age in population: 13.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.401
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.399
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4334836
--- Timings ---
Current time: 1559314443831 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.3 seconds, 69.2%
Fitness Testing:      6.2 seconds, 22.1%
Report:               2.3 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_dup_items integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [1 0 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_dup_items integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [1 0 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 909 1000 2 1000 763 1 761 2 1000)
Population mean number of elite cases: 6.44
Count of perfect (error zero) individuals by case: (0 909 0 2 0 763 1 761 2 0)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [1 0 1 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 27
Size: 43
Percent parens: 0.372
--- Population Statistics ---
Average total errors in population: 7.562
Median total errors in population: 7
Error averages by case: (1.0 0.091 1.0 0.998 1.0 0.237 0.999 0.239 0.998 1.0)
Error minima by case: (1 0 1 0 1 0 0 0 0 1)
Average genome size in population (length): 29.382
Average program size in population (points): 45.393
Average percent parens in population: 0.353
Minimum age in population: 13.3125
Maximum age in population: 16.3125
Average age in population: 15.19125
Median age in population: 15.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4747572
--- Timings ---
Current time: 1559314446619 milliseconds
Total Time:          30.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 69.2%
Fitness Testing:      6.7 seconds, 21.8%
Report:               2.7 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 712
Test mean error for best: 0.71200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61100             
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: -4826              
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: -7332              
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: -3550              
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: -5416              
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -237               
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -5515              
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: -8416              
Correct output: -1                  | Program output: -151               
Correct output: -41                 | Program output: -4147              
Correct output: -74                 | Program output: -1180              
Correct output: -94                 | Program output: -9435              
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -4643              
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -3397              
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -7841              
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: -1968              
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -5951              
Correct output: -84                 | Program output: -8475              
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -3715              
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 132 388 130 493 1000 130 8 18 120)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (241 132 388 130 493 0 130 8 18 120)
Population mean number of perfect (error zero) cases: 1.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [1 0 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 8.34
Median total errors in population: 9
Error averages by case: (0.759 0.868 0.612 0.87 0.507 1.0 0.87 0.992 0.982 0.88)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 29.307
Average program size in population (points): 45.28
Average percent parens in population: 0.353
Minimum age in population: 14.3125
Maximum age in population: 18.3125
Average age in population: 16.871875
Median age in population: 16.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5199155
--- Timings ---
Current time: 1559314449539 milliseconds
Total Time:          33.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.3 seconds, 69.2%
Fitness Testing:      7.3 seconds, 21.8%
Report:               2.9 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 712
Test mean error for best: 0.71200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61100             
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: -4826              
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: -7332              
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: -3550              
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: -5416              
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -237               
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -5515              
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: -8416              
Correct output: -1                  | Program output: -151               
Correct output: -41                 | Program output: -4147              
Correct output: -74                 | Program output: -1180              
Correct output: -94                 | Program output: -9435              
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -4643              
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -3397              
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -7841              
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: -1968              
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -5951              
Correct output: -84                 | Program output: -8475              
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -3715              
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [1 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [1 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 8 906 1 323 286 3 677 323 324)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (343 8 906 1 323 286 3 677 323 324)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty integer_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 46
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.806
Median total errors in population: 7
Error averages by case: (0.657 0.992 0.094 0.999 0.677 0.714 0.997 0.323 0.677 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.192
Average program size in population (points): 44.681
Average percent parens in population: 0.346
Minimum age in population: 17.1875
Maximum age in population: 19.9375
Average age in population: 18.588375
Median age in population: 18.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.394
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 249
Syntactic diversity (% unique Push programs):	 0.391
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5584972
--- Timings ---
Current time: 1559314452297 milliseconds
Total Time:          36.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 69.3%
Fitness Testing:      7.8 seconds, 21.5%
Report:               3.3 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in2 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (boolean_yankdup) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Lexicase best errors: [0 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.362
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in2 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (boolean_yankdup) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Zero cases best errors: [0 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.362
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 633 160 383 163 744 163 150 152 383)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (384 633 160 383 163 744 163 150 152 383)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in2 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Errors: [0 0 1 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 47
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 6.685
Median total errors in population: 8
Error averages by case: (0.616 0.367 0.84 0.617 0.837 0.256 0.837 0.85 0.848 0.617)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.128
Average program size in population (points): 46.055
Average percent parens in population: 0.346
Minimum age in population: 18.4375
Maximum age in population: 21.3125
Average age in population: 20.11525
Median age in population: 20.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.412
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5986525
--- Timings ---
Current time: 1559314454998 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.1 seconds, 69.3%
Fitness Testing:      8.3 seconds, 21.3%
Report:               3.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 in2 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_lte exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 in2 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_lte exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (721 936 8 728 726 421 175 936 174 936)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (721 936 8 728 726 421 175 936 174 936)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in2 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 2) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 47
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 4.239
Median total errors in population: 4
Error averages by case: (0.279 0.064 0.992 0.272 0.274 0.579 0.825 0.064 0.826 0.064)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.5
Average program size in population (points): 45.457
Average percent parens in population: 0.351
Minimum age in population: 19.4375
Maximum age in population: 23.25
Average age in population: 21.760921875
Median age in population: 21.828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.419
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6354766
--- Timings ---
Current time: 1559314457789 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 69.6%
Fitness Testing:      8.8 seconds, 21.0%
Report:               3.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty boolean_eq print_integer integer_mult tagged_31 integer_dup_items boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Lexicase best errors: [1 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty boolean_eq print_integer integer_mult tagged_31 integer_dup_items boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Zero cases best errors: [1 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 915 1 218 216 258 5 257 216 918)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (1 915 1 218 216 258 5 257 216 918)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (boolean_rot print_integer integer_gt in3 integer_gte exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times in1 integer_dup exec_empty boolean_eq print_integer integer_mult tagged_31 integer_dup_items boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) () ())
Errors: [1 0 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 40
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 8
Error averages by case: (0.999 0.085 0.999 0.782 0.784 0.742 0.995 0.743 0.784 0.082)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.203
Average program size in population (points): 43.062
Average percent parens in population: 0.343
Minimum age in population: 20.4375
Maximum age in population: 24.9453125
Average age in population: 23.5552890625
Median age in population: 23.65625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6750939
--- Timings ---
Current time: 1559314460386 milliseconds
Total Time:          44.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.0 seconds, 69.6%
Fitness Testing:      9.3 seconds, 20.8%
Report:               4.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 4} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_lte exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 4) (boolean_rot exec_rot () (exec_rot () (boolean_dup_items exec_eq) ()) ()) ())) () ()) () ())
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.407
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 4} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_lte exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 4) (boolean_rot exec_rot () (exec_rot () (boolean_dup_items exec_eq) ()) ()) ())) () ()) () ())
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.407
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 370 224 105 370 292 368 794 291 224)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (102 370 224 105 370 292 368 794 291 224)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 47
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 6.86
Median total errors in population: 7
Error averages by case: (0.898 0.63 0.776 0.895 0.63 0.708 0.632 0.206 0.709 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.167
Average program size in population (points): 45.014
Average percent parens in population: 0.351
Minimum age in population: 21.4375
Maximum age in population: 26.76171875
Average age in population: 25.0333828125
Median age in population: 25.205078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7168089
--- Timings ---
Current time: 1559314463105 milliseconds
Total Time:          47.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 69.7%
Fitness Testing:      9.8 seconds, 20.7%
Report:               4.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Lexicase best errors: [1 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.362
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Zero cases best errors: [1 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.362
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 901 776 104 116 296 776 507 1000 901)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (119 901 776 104 116 296 776 507 0 901)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [1 0 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 45
Percent parens: 0.356
--- Population Statistics ---
Average total errors in population: 5.504
Median total errors in population: 6
Error averages by case: (0.881 0.099 0.224 0.896 0.884 0.704 0.224 0.493 1.0 0.099)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 28.954
Average program size in population (points): 45.314
Average percent parens in population: 0.360
Minimum age in population: 22.4375
Maximum age in population: 28.107421875
Average age in population: 26.277408203125
Median age in population: 26.34765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7539917
--- Timings ---
Current time: 1559314465827 milliseconds
Total Time:          50.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.9 seconds, 69.9%
Fitness Testing:     10.2 seconds, 20.5%
Report:               4.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.362
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.362
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 456 456 456 384 6 915 1000 1 456)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (211 456 456 456 384 6 915 0 1 456)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 45
Percent parens: 0.356
--- Population Statistics ---
Average total errors in population: 6.659
Median total errors in population: 9
Error averages by case: (0.789 0.544 0.544 0.544 0.616 0.994 0.085 1.0 0.999 0.544)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 29.233
Average program size in population (points): 45.447
Average percent parens in population: 0.356
Minimum age in population: 25.08203125
Maximum age in population: 29.7978515625
Average age in population: 27.7392607421875
Median age in population: 27.81298828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7907437
--- Timings ---
Current time: 1559314468527 milliseconds
Total Time:          52.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.9 seconds, 70.0%
Fitness Testing:     10.7 seconds, 20.3%
Report:               5.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer in4 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Lexicase best errors: [0 1 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 46
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction tagged_95} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer in4 integer_dup_items exec_if (boolean_flush) (tagged_95) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Zero cases best errors: [0 1 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 46
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (610 1000 726 726 1000 1 816 1000 1000 1000)
Population mean number of elite cases: 7.88
Count of perfect (error zero) individuals by case: (610 0 726 726 0 1 816 0 0 0)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt exec_do*range (in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()))) () ())
Errors: [0 1 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 47
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 7.121
Median total errors in population: 6
Error averages by case: (0.39 1.0 0.274 0.274 1.0 0.999 0.184 1.0 1.0 1.0)
Error minima by case: (0 1 0 0 1 0 0 1 1 1)
Average genome size in population (length): 30.02
Average program size in population (points): 46.795
Average percent parens in population: 0.358
Minimum age in population: 26.375
Maximum age in population: 31.32373046875
Average age in population: 29.21069091796875
Median age in population: 29.23291015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 210
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8369942
--- Timings ---
Current time: 1559314471382 milliseconds
Total Time:          55.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.8 seconds, 69.9%
Fitness Testing:     11.3 seconds, 20.3%
Report:               5.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 473
Test mean error for best: 0.47300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer boolean_dup_items tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Lexicase best errors: [1 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (boolean_rot print_integer integer_gt in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer boolean_dup_items tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ())) () ())
Zero cases best errors: [1 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 1000 158 887 630 729 631 1000 1000 1000)
Population mean number of elite cases: 7.18
Count of perfect (error zero) individuals by case: (148 0 158 887 630 729 631 0 0 0)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 in3 exec_s (in4 exec_s_when_autoconstructing () (integer_dup_times integer_yankdup integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ()) ()) () ())
Errors: [1 1 1 0 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 40
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.817
Median total errors in population: 6
Error averages by case: (0.852 1.0 0.842 0.113 0.37 0.271 0.369 1.0 1.0 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 1 1)
Average genome size in population (length): 30.046
Average program size in population (points): 46.672
Average percent parens in population: 0.356
Minimum age in population: 27.375
Maximum age in population: 32.832763671875
Average age in population: 30.92605688476562
Median age in population: 31.0537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8757917
--- Timings ---
Current time: 1559314474842 milliseconds
Total Time:          59.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 70.3%
Fitness Testing:     11.8 seconds, 20.0%
Report:               5.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -5                 
Correct output: -46                 | Program output: -2                 
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 83                 
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 95                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 89                 
Correct output: 13                  | Program output: 38                 
Correct output: 13                  | Program output: 89                 
Correct output: 31                  | Program output: 86                 
Correct output: 24                  | Program output: 54                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 64                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 35                 
Correct output: 40                  | Program output: 86                 
Correct output: 32                  | Program output: 75                 
Correct output: 29                  | Program output: 86                 
Correct output: 43                  | Program output: 100                
Correct output: -48                 | Program output: -45                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 52                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: 89                 
Correct output: -51                 | Program output: 57                 
Correct output: -87                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: 39                 
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 78                 
Correct output: -47                 | Program output: 54                 
Correct output: -54                 | Program output: 76                 
Correct output: -32                 | Program output: 5                  
Correct output: -39                 | Program output: 48                 
Correct output: -23                 | Program output: 35                 
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 51                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: 3                  
Correct output: -55                 | Program output: 81                 
Correct output: -92                 | Program output: 39                 
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: 74                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 82                 
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -70                
Correct output: -27                 | Program output: 57                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 28                 
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: 5                  
Correct output: -84                 | Program output: -24                
Correct output: -93                 | Program output: 95                 
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -12                
Correct output: -63                 | Program output: 28                 
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (in2 print_integer exec_do*range (in3 exec_s (in4 integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ())))) () ())
Lexicase best errors: [1 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.354
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (in2 print_integer exec_do*range (in3 exec_s (in4 integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ())))) () ())
Zero cases best errors: [1 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.354
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 452 304 766 854 1 1000 1000 853 304)
Population mean number of elite cases: 6.53
Count of perfect (error zero) individuals by case: (0 452 304 766 854 1 0 0 853 304)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 exec_do*times (in2 print_integer exec_do*range (in3 exec_s (in4 integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ())))) () ())
Errors: [1 1 0 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 48
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 6.466
Median total errors in population: 6
Error averages by case: (1.0 0.548 0.696 0.234 0.146 0.999 1.0 1.0 0.147 0.696)
Error minima by case: (1 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 30.311
Average program size in population (points): 47.065
Average percent parens in population: 0.356
Minimum age in population: 29.701171875
Maximum age in population: 34.333984375
Average age in population: 32.53995654296875
Median age in population: 32.58575439453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9103060
--- Timings ---
Current time: 1559314477691 milliseconds
Total Time:          61.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 70.5%
Fitness Testing:     12.2 seconds, 19.8%
Report:               5.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Lexicase best errors: [0 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Zero cases best errors: [0 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (448 449 5 450 5 449 397 882 458 448)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (448 449 5 450 5 449 397 882 458 448)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 in3 integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Errors: [0 0 1 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 29
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.009
Median total errors in population: 8
Error averages by case: (0.552 0.551 0.995 0.55 0.995 0.551 0.603 0.118 0.542 0.552)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.092
Average program size in population (points): 38.023
Average percent parens in population: 0.335
Minimum age in population: 32.177001953125
Maximum age in population: 35.754150390625
Average age in population: 34.19921154785156
Median age in population: 34.32391357421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 353
Genome diversity (% unique genomes):	 0.376
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 355
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9352066
--- Timings ---
Current time: 1559314480117 milliseconds
Total Time:          64.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 70.8%
Fitness Testing:     12.6 seconds, 19.5%
Report:               6.1 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) integer_dup_items)
Lexicase best errors: [0 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) integer_dup_items)
Zero cases best errors: [0 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (576 19 1000 77 821 915 1000 578 578 1000)
Population mean number of elite cases: 6.56
Count of perfect (error zero) individuals by case: (576 19 0 77 821 915 0 578 578 0)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Best program: (exec_rot (in4 in3 integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items exec_if (boolean_flush) (integer_stackdepth) exec_yankdup) (exec_noop) (3) boolean_rot exec_rot () (boolean_dup_items exec_eq) ())
Errors: [0 1 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 29
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.436
Median total errors in population: 5
Error averages by case: (0.424 0.981 1.0 0.923 0.179 0.085 1.0 0.422 0.422 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 0 1)
Average genome size in population (length): 20.62
Average program size in population (points): 30.813
Average percent parens in population: 0.329
Minimum age in population: 34.06494140625
Maximum age in population: 37.14169311523438
Average age in population: 35.84165664672852
Median age in population: 35.88720703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 346
Genome diversity (% unique genomes):	 0.355
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 352
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9563396
--- Timings ---
Current time: 1559314482616 milliseconds
Total Time:          66.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.6 seconds, 71.1%
Fitness Testing:     12.9 seconds, 19.2%
Report:               6.3 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 exec_do*times (in2 print_integer exec_do*range (in3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ()))) () ())
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.450
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 exec_do*times (in2 print_integer exec_do*range (in3 boolean_rot exec_rot () (boolean_dup_items exec_eq) ()))) () ())
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.450
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 896 1000 754 123 894 1000 1000 753 129)
Population mean number of elite cases: 7.45
Count of perfect (error zero) individuals by case: (899 896 0 754 123 894 0 0 753 129)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) ()) () ())
Errors: [0 0 1 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 28
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 5.552
Median total errors in population: 5
Error averages by case: (0.101 0.104 1.0 0.246 0.877 0.106 1.0 1.0 0.247 0.871)
Error minima by case: (0 0 1 0 0 0 1 1 0 0)
Average genome size in population (length): 20.492
Average program size in population (points): 31.097
Average percent parens in population: 0.339
Minimum age in population: 35.16619873046875
Maximum age in population: 38.8160400390625
Average age in population: 37.39483297729492
Median age in population: 37.33213043212891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 312
Genome diversity (% unique genomes):	 0.386
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 313
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9774199
--- Timings ---
Current time: 1559314485063 milliseconds
Total Time:          69.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.5 seconds, 71.4%
Fitness Testing:     13.1 seconds, 19.0%
Report:               6.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ())) ()) () ())
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 1, :instruction 3} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 3) (boolean_rot exec_rot () (boolean_dup_items exec_eq) ())) ()) () ())
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 199 433 1000 199 238 433 194 194 194)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (194 199 433 0 199 238 433 194 194 194)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_fromboolean})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_fromboolean) ()) ()) () ())
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 18
Size: 28
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 7.722
Median total errors in population: 10
Error averages by case: (0.806 0.801 0.567 1.0 0.801 0.762 0.567 0.806 0.806 0.806)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 23.937
Average program size in population (points): 36.991
Average percent parens in population: 0.351
Minimum age in population: 36.4290771484375
Maximum age in population: 40.41969299316406
Average age in population: 38.85907597351074
Median age in population: 38.97071075439453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9977560
--- Timings ---
Current time: 1559314487422 milliseconds
Total Time:          71.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 71.7%
Fitness Testing:     13.4 seconds, 18.7%
Report:               6.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer) (integer_mult tagged_31 integer_dup_items)) ()) () ())
Lexicase best errors: [1 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer) (integer_mult tagged_31 integer_dup_items)) ()) () ())
Zero cases best errors: [1 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 914 911 1 1000 914 797 1 797 1)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (1 914 911 1 0 914 797 1 797 1)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) ()) () ())
Errors: [1 0 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 28
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 5.663
Median total errors in population: 5
Error averages by case: (0.999 0.086 0.089 0.999 1.0 0.086 0.203 0.999 0.203 0.999)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 18.423
Average program size in population (points): 28.441
Average percent parens in population: 0.352
Minimum age in population: 38.37436676025391
Maximum age in population: 42.18142700195312
Average age in population: 40.57553993225098
Median age in population: 40.66205215454102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 553
Genome diversity (% unique genomes):	 0.293
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 553
Syntactic diversity (% unique Push programs):	 0.287
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10166797
--- Timings ---
Current time: 1559314489879 milliseconds
Total Time:          74.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 71.9%
Fitness Testing:     13.7 seconds, 18.5%
Report:               7.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: 95                 
Correct output: -51                 | Program output: 65                 
Correct output: -87                 | Program output: 92                 
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: 93                 
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: 55                 
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: 61                 
Correct output: -1                  | Program output: 96                 
Correct output: -41                 | Program output: 74                 
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: 42                 
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: 98                 
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: 4                  
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: 33                 
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: 24                 
Correct output: -93                 | Program output: 68                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: 8                  
Correct output: -45                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times exec_k_when_autoconstructing (integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) ()) ()) () ())
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times exec_k_when_autoconstructing (integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) ()) ()) () ())
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 277 697 436 19 430 435 436 19 277)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (277 277 697 436 19 430 435 436 19 277)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (in1 integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) ()) () ())
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 18
Size: 28
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 6.697
Median total errors in population: 6
Error averages by case: (0.723 0.723 0.303 0.564 0.981 0.57 0.565 0.564 0.981 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.027
Average program size in population (points): 28.032
Average percent parens in population: 0.357
Minimum age in population: 39.79957580566406
Maximum age in population: 43.91158485412598
Average age in population: 42.6073194694519
Median age in population: 42.7372989654541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.254
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 274
Syntactic diversity (% unique Push programs):	 0.253
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10352014
--- Timings ---
Current time: 1559314492167 milliseconds
Total Time:          76.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 72.1%
Fitness Testing:     14.0 seconds, 18.3%
Report:               7.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 536
Test mean error for best: 0.53600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -14                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: 0                  
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -31                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) ()) () ())
Lexicase best errors: [0 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) ()) () ())
Zero cases best errors: [0 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (929 331 2 1 330 521 405 928 330 14)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (929 331 2 1 330 521 405 928 330 14)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (integer_dup_times integer_gt integer_dup exec_empty boolean_dup_times print_integer integer_flush tagged_31 integer_dup_items) ()) ()) () ())
Errors: [0 0 1 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 18
Size: 28
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 6.209
Median total errors in population: 7
Error averages by case: (0.071 0.669 0.998 0.999 0.67 0.479 0.595 0.072 0.67 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.817
Average program size in population (points): 27.788
Average percent parens in population: 0.355
Minimum age in population: 41.17608642578125
Maximum age in population: 45.81514358520508
Average age in population: 44.29329720401764
Median age in population: 44.34246635437012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.27
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.27
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10533614
--- Timings ---
Current time: 1559314494563 milliseconds
Total Time:          78.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.0 seconds, 72.4%
Fitness Testing:     14.3 seconds, 18.1%
Report:               7.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 exec_s_when_autoconstructing () (boolean_dup_items integer_gt integer_dup boolean_dup_times) (boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items))) () ())
Lexicase best errors: [0 1 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 exec_s_when_autoconstructing () (boolean_dup_items integer_gt integer_dup boolean_dup_times) (boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items))) () ())
Zero cases best errors: [0 1 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (30 152 150 234 207 747 151 343 2 150)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (30 152 150 234 207 747 151 343 2 150)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 exec_s_when_autoconstructing () (boolean_dup_items integer_gt integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ())) () ())
Errors: [0 1 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 7.834
Median total errors in population: 8
Error averages by case: (0.97 0.848 0.85 0.766 0.793 0.253 0.849 0.657 0.998 0.85)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.437
Average program size in population (points): 27.43
Average percent parens in population: 0.363
Minimum age in population: 42.48934173583984
Maximum age in population: 47.41943693161011
Average age in population: 45.57016925668716
Median age in population: 45.64214134216309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.297
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.297
Total error diversity:				 0.005
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10713719
--- Timings ---
Current time: 1559314497015 milliseconds
Total Time:          81.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.9 seconds, 72.6%
Fitness Testing:     14.5 seconds, 17.9%
Report:               7.6 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 96                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 49                 
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 92                 
Correct output: 24                  | Program output: 42                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 90                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 81                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 33                 
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 78                 
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 99                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 94                 
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 70                 
Correct output: -8                  | Program output: 57                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 46                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_yankdup in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 exec_s_when_autoconstructing () (boolean_dup_items integer_gt integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_yankdup in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 exec_s_when_autoconstructing () (boolean_dup_items integer_gt integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 167 918 717 258 260 341 292 287 376)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (283 167 918 717 258 260 341 292 287 376)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 exec_s_when_autoconstructing () (boolean_dup_items integer_gt integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ())) () ())
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.101
Median total errors in population: 6
Error averages by case: (0.717 0.833 0.082 0.283 0.742 0.74 0.659 0.708 0.713 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.189
Average program size in population (points): 31.784
Average percent parens in population: 0.361
Minimum age in population: 43.69441223144531
Maximum age in population: 49.00433111190796
Average age in population: 47.23510062909126
Median age in population: 47.33775901794434
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.327
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10942288
--- Timings ---
Current time: 1559314499557 milliseconds
Total Time:          83.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 72.7%
Fitness Testing:     14.9 seconds, 17.8%
Report:               7.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: -70                
Correct output: -61                 | Program output: 100                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 36                 
Correct output: 9                   | Program output: 97                 
Correct output: 58                  | Program output: 73                 
Correct output: 41                  | Program output: 76                 
Correct output: 4                   | Program output: 58                 
Correct output: 14                  | Program output: 36                 
Correct output: 24                  | Program output: 48                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 96                 
Correct output: 13                  | Program output: 62                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 35                 
Correct output: 2                   | Program output: 76                 
Correct output: 3                   | Program output: 47                 
Correct output: 41                  | Program output: 66                 
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 29                  | Program output: 29                 
Correct output: 43                  | Program output: 70                 
Correct output: -48                 | Program output: 26                 
Correct output: -47                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: 19                 
Correct output: -73                 | Program output: 32                 
Correct output: -51                 | Program output: -19                
Correct output: -87                 | Program output: -87                
Correct output: -79                 | Program output: 48                 
Correct output: -35                 | Program output: 50                 
Correct output: -90                 | Program output: -19                
Correct output: -48                 | Program output: 60                 
Correct output: -63                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -47                 | Program output: 64                 
Correct output: -54                 | Program output: 16                 
Correct output: -32                 | Program output: -17                
Correct output: -39                 | Program output: -39                
Correct output: -23                 | Program output: 7                  
Correct output: -77                 | Program output: 20                 
Correct output: -54                 | Program output: -47                
Correct output: 20                  | Program output: 76                 
Correct output: -84                 | Program output: -84                
Correct output: -41                 | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -55                 | Program output: 15                 
Correct output: -92                 | Program output: -76                
Correct output: -99                 | Program output: 66                 
Correct output: -84                 | Program output: 16                 
Correct output: -1                  | Program output: 51                 
Correct output: -41                 | Program output: 47                 
Correct output: -74                 | Program output: 80                 
Correct output: -94                 | Program output: 35                 
Correct output: -35                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 43                 
Correct output: -31                 | Program output: 23                 
Correct output: -84                 | Program output: -19                
Correct output: -33                 | Program output: 97                 
Correct output: -73                 | Program output: 56                 
Correct output: -8                  | Program output: -8                 
Correct output: -78                 | Program output: 41                 
Correct output: -27                 | Program output: 76                 
Correct output: -93                 | Program output: 20                 
Correct output: -70                 | Program output: 68                 
Correct output: -56                 | Program output: 31                 
Correct output: -61                 | Program output: -60                
Correct output: -73                 | Program output: -37                
Correct output: -59                 | Program output: 51                 
Correct output: -84                 | Program output: 75                 
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 85                 
Correct output: -99                 | Program output: -57                
Correct output: -21                 | Program output: -21                
Correct output: -67                 | Program output: -34                
Correct output: -48                 | Program output: -1                 
Correct output: -44                 | Program output: 15                 
Correct output: -63                 | Program output: -63                
Correct output: -45                 | Program output: -45                
Correct output: -61                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (in1 boolean_dup_times print_integer integer_eq tagged_31 integer_dup_items) ()) ()) () ())
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (in1 boolean_dup_times print_integer integer_eq tagged_31 integer_dup_items) ()) ()) () ())
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 375 83 907 178 887 173 220 243 376)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (224 375 83 907 178 887 173 220 243 376)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_80} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times integer_dup) (in4 exec_s_when_autoconstructing () (in1 boolean_dup_times print_integer integer_mult tagged_80 integer_dup_items) ()) ()) () ())
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 25
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.334
Median total errors in population: 6
Error averages by case: (0.776 0.625 0.917 0.093 0.822 0.113 0.827 0.78 0.757 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.236
Average program size in population (points): 31.527
Average percent parens in population: 0.349
Minimum age in population: 46.6245744228363
Maximum age in population: 50.69500517845154
Average age in population: 48.93452482688427
Median age in population: 48.98995018005371
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 258
Genome diversity (% unique genomes):	 0.334
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 258
Syntactic diversity (% unique Push programs):	 0.334
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11193000
--- Timings ---
Current time: 1559314501971 milliseconds
Total Time:          86.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 72.8%
Fitness Testing:     15.2 seconds, 17.6%
Report:               8.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 48                 
Correct output: -81                 | Program output: -77                
Correct output: 30                  | Program output: 66                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 81                 
Correct output: 9                   | Program output: 53                 
Correct output: 58                  | Program output: 92                 
Correct output: 41                  | Program output: 41                 
Correct output: 4                   | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 24                 
Correct output: 24                  | Program output: 77                 
Correct output: 11                  | Program output: 87                 
Correct output: 13                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 69                 
Correct output: 24                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 47                 
Correct output: 6                   | Program output: 95                 
Correct output: 40                  | Program output: 68                 
Correct output: 32                  | Program output: 62                 
Correct output: 29                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: -48                 | Program output: -5                 
Correct output: -47                 | Program output: 1                  
Correct output: -33                 | Program output: -18                
Correct output: -60                 | Program output: -60                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -48                 | Program output: -26                
Correct output: -63                 | Program output: 37                 
Correct output: -39                 | Program output: 70                 
Correct output: -47                 | Program output: -47                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 15                 
Correct output: -23                 | Program output: -13                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 20                 
Correct output: -84                 | Program output: -37                
Correct output: -41                 | Program output: -41                
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -6                 
Correct output: -92                 | Program output: -14                
Correct output: -99                 | Program output: 41                 
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -34                
Correct output: -98                 | Program output: -7                 
Correct output: -76                 | Program output: -46                
Correct output: -31                 | Program output: 100                
Correct output: -84                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: 31                 
Correct output: -8                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: -27                
Correct output: -93                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -72                
Correct output: -59                 | Program output: -4                 
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -52                
Correct output: -21                 | Program output: 49                 
Correct output: -67                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -38                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_yank integer_gt integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_yank integer_gt integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 196 329 196 196 68 341 697 328 329)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (19 196 329 196 196 68 341 697 328 329)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean integer_yank integer_gt integer_dup boolean_dup_times boolean_dup_times print_integer) integer_mult tagged_31 integer_dup_items) () ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.301
Median total errors in population: 6
Error averages by case: (0.981 0.804 0.671 0.804 0.804 0.932 0.659 0.303 0.672 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.151
Average program size in population (points): 29.528
Average percent parens in population: 0.342
Minimum age in population: 47.6245744228363
Maximum age in population: 51.96857577562332
Average age in population: 50.47112758773565
Median age in population: 50.40527185797691
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.31
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.309
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11402920
--- Timings ---
Current time: 1559314504446 milliseconds
Total Time:          88.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.7 seconds, 73.0%
Fitness Testing:     15.5 seconds, 17.5%
Report:               8.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 208 768 893 30 1000 1000 734 30 1000)
Population mean number of elite cases: 5.87
Count of perfect (error zero) individuals by case: (208 208 768 893 30 0 0 734 30 0)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_dup_items) () ())
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.129
Median total errors in population: 7
Error averages by case: (0.792 0.792 0.232 0.107 0.97 1.0 1.0 0.266 0.97 1.0)
Error minima by case: (0 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 20.125
Average program size in population (points): 28.54
Average percent parens in population: 0.285
Minimum age in population: 50.32778346538544
Maximum age in population: 53.4174861907959
Average age in population: 52.20441674780846
Median age in population: 52.2484405040741
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.304
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.303
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11647256
--- Timings ---
Current time: 1559314506913 milliseconds
Total Time:          91.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.6 seconds, 73.0%
Fitness Testing:     15.8 seconds, 17.4%
Report:               8.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 419
Test mean error for best: 0.41900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 494 494 878 492 906 879 685 545 878)
Population mean number of elite cases: 6.74
Count of perfect (error zero) individuals by case: (494 494 494 878 492 906 879 685 545 878)
Population mean number of perfect (error zero) cases: 6.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_31} {:close 0, :instruction integer_dup_items})
Best program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 3.255
Median total errors in population: 5
Error averages by case: (0.506 0.506 0.506 0.122 0.508 0.094 0.121 0.315 0.455 0.122)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.925
Average program size in population (points): 25.802
Average percent parens in population: 0.267
Minimum age in population: 51.96659648418427
Maximum age in population: 55.2484405040741
Average age in population: 53.94429019409418
Median age in population: 54.07868394255638
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.255
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.255
Total error diversity:				 0.011
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 11864255
--- Timings ---
Current time: 1559314509276 milliseconds
Total Time:          93.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 73.2%
Fitness Testing:     16.1 seconds, 17.2%
Report:               8.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 34
Successful program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 28


Auto-simplifying with starting size: 28
step: 0
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 500
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1000
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1500
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2000
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2500
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3000
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3500
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4000
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4500
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 5000
program: (exec_rot (in4 in3 integer_dup exec_s (boolean_dup_times in2) (in4 integer_gt in2) (in4 integer_fromboolean) integer_yank integer_min integer_dup boolean_dup_times boolean_dup_times print_integer integer_mult tagged_31 integer_dup_items) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 419
Test mean error for best: 0.41900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -41                 | Program output: -41                
Correct output: -46                 | Program output: -46                
Correct output: -70                 | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 10                  | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: 30                  | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: 10                  | Program output: 10                 
Correct output: 27                  | Program output: 27                 
Correct output: -67                 | Program output: -67                
Correct output: 85                  | Program output: 85                 
Correct output: -87                 | Program output: -87                
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 58                  | Program output: 58                 
Correct output: 41                  | Program output: 44                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 93                 
Correct output: 24                  | Program output: 58                 
Correct output: 24                  | Program output: 38                 
Correct output: 11                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 13                  | Program output: 30                 
Correct output: 31                  | Program output: 52                 
Correct output: 24                  | Program output: 24                 
Correct output: 2                   | Program output: 54                 
Correct output: 3                   | Program output: 57                 
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 26                 
Correct output: 40                  | Program output: 80                 
Correct output: 32                  | Program output: 56                 
Correct output: 29                  | Program output: 79                 
Correct output: 43                  | Program output: 47                 
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -33                 | Program output: 42                 
Correct output: -60                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -73                
Correct output: -79                 | Program output: -79                
Correct output: -35                 | Program output: -35                
Correct output: -90                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -63                 | Program output: -63                
Correct output: -39                 | Program output: 20                 
Correct output: -47                 | Program output: 3                  
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -39                 | Program output: 16                 
Correct output: -23                 | Program output: -23                
Correct output: -77                 | Program output: 16                 
Correct output: -54                 | Program output: -54                
Correct output: 20                  | Program output: 21                 
Correct output: -84                 | Program output: -72                
Correct output: -41                 | Program output: 34                 
Correct output: -63                 | Program output: -34                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: -84                 | Program output: -84                
Correct output: -1                  | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -35                 | Program output: -35                
Correct output: -98                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -31                 | Program output: -31                
Correct output: -84                 | Program output: -84                
Correct output: -33                 | Program output: -33                
Correct output: -73                 | Program output: -73                
Correct output: -8                  | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -27                 | Program output: 29                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -19                
Correct output: -56                 | Program output: 3                  
Correct output: -61                 | Program output: 28                 
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -84                 | Program output: -84                
Correct output: -93                 | Program output: -74                
Correct output: -61                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -21                 | Program output: 39                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -45                
Correct output: -44                 | Program output: -37                
Correct output: -63                 | Program output: -48                
Correct output: -45                 | Program output: -41                
Correct output: -61                 | Program output: -25                
;;******************************
