Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-1 66 66 66] -1] [[24 24 -4 24] -4] [[-26 -16 -16 -16] -26] [[26 26 26 17] 17] [[54 50 50 50] 50] [[13 78 78 78] 13] [[12 -69 12 12] -69] [[8 56 8 8] 8] [[35 35 35 -28] -28] [[39 -18 39 39] -18] [(-97 -97 -97 -97) -97] [(-10 -10 -10 -10) -10] [(-62 -62 -62 -62) -62] [(-9 -9 -9 -9) -9] [(26 26 26 26) 26] [(2 67 60 30) 2] [(24 43 56 17) 17] [(93 8 32 91) 8] [(9 57 60 90) 9] [(7 30 15 81) 7] [(97 49 73 64) 49] [(8 83 33 67) 8] [(72 19 98 29) 19] [(2 64 6 27) 2] [(82 78 60 22) 22] [(65 49 62 62) 49] [(37 21 12 35) 12] [(11 33 42 100) 11] [(32 82 58 36) 32] [(99 80 56 22) 22] [(54 27 7 44) 7] [(81 20 14 94) 14] [(1 64 69 91) 1] [(73 82 76 54) 54] [(78 73 12 37) 12] [(12 47 -93 100) -93] [(76 64 -30 -85) -85] [(13 -93 29 31) -93] [(14 -77 -55 72) -77] [(-63 90 42 96) -63] [(-14 15 82 91) -14] [(-20 59 -10 -63) -63] [(-37 -26 63 90) -37] [(-13 -96 -40 -47) -96] [(69 -4 11 -23) -23] [(-25 25 -72 -35) -72] [(-34 69 17 -73) -73] [(-91 -15 60 86) -91] [(79 -26 38 -9) -26] [(-65 18 -54 -23) -65] [(-4 58 72 6) -4] [(-73 87 -64 -27) -73] [(57 26 36 39) 26] [(63 -63 49 -5) -63] [(90 68 30 -80) -80] [(62 -28 18 76) -28] [(26 -42 81 88) -42] [(-88 8 -16 -20) -88] [(77 67 58 -9) -9] [(21 69 73 73) 21] [(28 -85 52 33) -85] [(-94 -28 -45 -12) -94] [(-18 -23 -70 -31) -70] [(37 49 48 -8) -8] [(-79 7 30 93) -79] [(51 -85 13 33) -85] [(-89 51 1 58) -89] [(-41 88 90 -21) -41] [(-25 12 -1 26) -25] [(-5 -10 -98 -61) -98] [(78 -3 22 37) -3] [(25 -92 -53 78) -92] [(-34 9 97 -94) -94] [(-29 23 46 -100) -100] [(99 82 93 -66) -66] [(76 -36 -98 54) -98] [(-39 67 -64 89) -64] [(-14 90 87 -65) -65] [(-97 82 -3 -2) -97] [(-71 -65 -72 73) -72] [(-69 -28 23 100) -69] [(42 -48 -61 -98) -98] [(-98 26 18 85) -98] [(2 -39 -52 71) -52] [(-81 42 49 -41) -81] [(98 -65 -31 -25) -65] [(-25 -2 27 -4) -25] [(-65 -88 91 -3) -88] [(-47 40 -9 87) -47] [(-95 51 -30 -37) -95] [(23 -16 6 66) -16] [(-8 6 -78 -32) -78] [(-82 -92 -92 -27) -92] [(-44 27 13 24) -44] [(1 -70 -22 85) -70])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-1 66 66 66] -1]
Train Case:   6 | Input/Output: [[24 24 -4 24] -4]
Train Case:   7 | Input/Output: [[-26 -16 -16 -16] -26]
Train Case:   8 | Input/Output: [[26 26 26 17] 17]
Train Case:   9 | Input/Output: [[54 50 50 50] 50]
Train Case:  10 | Input/Output: [[13 78 78 78] 13]
Train Case:  11 | Input/Output: [[12 -69 12 12] -69]
Train Case:  12 | Input/Output: [[8 56 8 8] 8]
Train Case:  13 | Input/Output: [[35 35 35 -28] -28]
Train Case:  14 | Input/Output: [[39 -18 39 39] -18]
Train Case:  15 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  16 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(-9 -9 -9 -9) -9]
Train Case:  19 | Input/Output: [(26 26 26 26) 26]
Train Case:  20 | Input/Output: [(2 67 60 30) 2]
Train Case:  21 | Input/Output: [(24 43 56 17) 17]
Train Case:  22 | Input/Output: [(93 8 32 91) 8]
Train Case:  23 | Input/Output: [(9 57 60 90) 9]
Train Case:  24 | Input/Output: [(7 30 15 81) 7]
Train Case:  25 | Input/Output: [(97 49 73 64) 49]
Train Case:  26 | Input/Output: [(8 83 33 67) 8]
Train Case:  27 | Input/Output: [(72 19 98 29) 19]
Train Case:  28 | Input/Output: [(2 64 6 27) 2]
Train Case:  29 | Input/Output: [(82 78 60 22) 22]
Train Case:  30 | Input/Output: [(65 49 62 62) 49]
Train Case:  31 | Input/Output: [(37 21 12 35) 12]
Train Case:  32 | Input/Output: [(11 33 42 100) 11]
Train Case:  33 | Input/Output: [(32 82 58 36) 32]
Train Case:  34 | Input/Output: [(99 80 56 22) 22]
Train Case:  35 | Input/Output: [(54 27 7 44) 7]
Train Case:  36 | Input/Output: [(81 20 14 94) 14]
Train Case:  37 | Input/Output: [(1 64 69 91) 1]
Train Case:  38 | Input/Output: [(73 82 76 54) 54]
Train Case:  39 | Input/Output: [(78 73 12 37) 12]
Train Case:  40 | Input/Output: [(12 47 -93 100) -93]
Train Case:  41 | Input/Output: [(76 64 -30 -85) -85]
Train Case:  42 | Input/Output: [(13 -93 29 31) -93]
Train Case:  43 | Input/Output: [(14 -77 -55 72) -77]
Train Case:  44 | Input/Output: [(-63 90 42 96) -63]
Train Case:  45 | Input/Output: [(-14 15 82 91) -14]
Train Case:  46 | Input/Output: [(-20 59 -10 -63) -63]
Train Case:  47 | Input/Output: [(-37 -26 63 90) -37]
Train Case:  48 | Input/Output: [(-13 -96 -40 -47) -96]
Train Case:  49 | Input/Output: [(69 -4 11 -23) -23]
Train Case:  50 | Input/Output: [(-25 25 -72 -35) -72]
Train Case:  51 | Input/Output: [(-34 69 17 -73) -73]
Train Case:  52 | Input/Output: [(-91 -15 60 86) -91]
Train Case:  53 | Input/Output: [(79 -26 38 -9) -26]
Train Case:  54 | Input/Output: [(-65 18 -54 -23) -65]
Train Case:  55 | Input/Output: [(-4 58 72 6) -4]
Train Case:  56 | Input/Output: [(-73 87 -64 -27) -73]
Train Case:  57 | Input/Output: [(57 26 36 39) 26]
Train Case:  58 | Input/Output: [(63 -63 49 -5) -63]
Train Case:  59 | Input/Output: [(90 68 30 -80) -80]
Train Case:  60 | Input/Output: [(62 -28 18 76) -28]
Train Case:  61 | Input/Output: [(26 -42 81 88) -42]
Train Case:  62 | Input/Output: [(-88 8 -16 -20) -88]
Train Case:  63 | Input/Output: [(77 67 58 -9) -9]
Train Case:  64 | Input/Output: [(21 69 73 73) 21]
Train Case:  65 | Input/Output: [(28 -85 52 33) -85]
Train Case:  66 | Input/Output: [(-94 -28 -45 -12) -94]
Train Case:  67 | Input/Output: [(-18 -23 -70 -31) -70]
Train Case:  68 | Input/Output: [(37 49 48 -8) -8]
Train Case:  69 | Input/Output: [(-79 7 30 93) -79]
Train Case:  70 | Input/Output: [(51 -85 13 33) -85]
Train Case:  71 | Input/Output: [(-89 51 1 58) -89]
Train Case:  72 | Input/Output: [(-41 88 90 -21) -41]
Train Case:  73 | Input/Output: [(-25 12 -1 26) -25]
Train Case:  74 | Input/Output: [(-5 -10 -98 -61) -98]
Train Case:  75 | Input/Output: [(78 -3 22 37) -3]
Train Case:  76 | Input/Output: [(25 -92 -53 78) -92]
Train Case:  77 | Input/Output: [(-34 9 97 -94) -94]
Train Case:  78 | Input/Output: [(-29 23 46 -100) -100]
Train Case:  79 | Input/Output: [(99 82 93 -66) -66]
Train Case:  80 | Input/Output: [(76 -36 -98 54) -98]
Train Case:  81 | Input/Output: [(-39 67 -64 89) -64]
Train Case:  82 | Input/Output: [(-14 90 87 -65) -65]
Train Case:  83 | Input/Output: [(-97 82 -3 -2) -97]
Train Case:  84 | Input/Output: [(-71 -65 -72 73) -72]
Train Case:  85 | Input/Output: [(-69 -28 23 100) -69]
Train Case:  86 | Input/Output: [(42 -48 -61 -98) -98]
Train Case:  87 | Input/Output: [(-98 26 18 85) -98]
Train Case:  88 | Input/Output: [(2 -39 -52 71) -52]
Train Case:  89 | Input/Output: [(-81 42 49 -41) -81]
Train Case:  90 | Input/Output: [(98 -65 -31 -25) -65]
Train Case:  91 | Input/Output: [(-25 -2 27 -4) -25]
Train Case:  92 | Input/Output: [(-65 -88 91 -3) -88]
Train Case:  93 | Input/Output: [(-47 40 -9 87) -47]
Train Case:  94 | Input/Output: [(-95 51 -30 -37) -95]
Train Case:  95 | Input/Output: [(23 -16 6 66) -16]
Train Case:  96 | Input/Output: [(-8 6 -78 -32) -78]
Train Case:  97 | Input/Output: [(-82 -92 -92 -27) -92]
Train Case:  98 | Input/Output: [(-44 27 13 24) -44]
Train Case:  99 | Input/Output: [(1 -70 -22 85) -70]
Test Case:   0 | Input/Output: [[-83 22 22 22] -83]
Test Case:   1 | Input/Output: [[-22 97 97 97] -22]
Test Case:   2 | Input/Output: [[97 -73 97 97] -73]
Test Case:   3 | Input/Output: [[31 -31 -31 -31] -31]
Test Case:   4 | Input/Output: [[91 91 13 91] 13]
Test Case:   5 | Input/Output: [[91 91 91 95] 91]
Test Case:   6 | Input/Output: [[-92 -92 -92 6] -92]
Test Case:   7 | Input/Output: [[78 -74 -74 -74] -74]
Test Case:   8 | Input/Output: [[-4 -4 -50 -4] -50]
Test Case:   9 | Input/Output: [[38 58 38 38] 38]
Test Case:  10 | Input/Output: [[-3 -88 -3 -3] -88]
Test Case:  11 | Input/Output: [[49 49 49 12] 12]
Test Case:  12 | Input/Output: [[-48 -48 -48 5] -48]
Test Case:  13 | Input/Output: [[60 60 60 -23] -23]
Test Case:  14 | Input/Output: [[-87 -87 -87 -62] -87]
Test Case:  15 | Input/Output: [[88 -95 88 88] -95]
Test Case:  16 | Input/Output: [[90 -17 90 90] -17]
Test Case:  17 | Input/Output: [[-14 -14 -50 -14] -50]
Test Case:  18 | Input/Output: [[22 33 22 22] 22]
Test Case:  19 | Input/Output: [[68 16 68 68] 16]
Test Case:  20 | Input/Output: [[0 34 0 0] 0]
Test Case:  21 | Input/Output: [[44 44 -40 44] -40]
Test Case:  22 | Input/Output: [[66 66 -56 66] -56]
Test Case:  23 | Input/Output: [[-2 83 83 83] -2]
Test Case:  24 | Input/Output: [[83 2 2 2] 2]
Test Case:  25 | Input/Output: [[-36 24 -36 -36] -36]
Test Case:  26 | Input/Output: [[82 82 20 82] 20]
Test Case:  27 | Input/Output: [[-81 -81 -81 -94] -94]
Test Case:  28 | Input/Output: [[-77 -29 -29 -29] -77]
Test Case:  29 | Input/Output: [[53 53 87 53] 53]
Test Case:  30 | Input/Output: [[26 -3 -3 -3] -3]
Test Case:  31 | Input/Output: [[97 81 97 97] 81]
Test Case:  32 | Input/Output: [[20 2 2 2] 2]
Test Case:  33 | Input/Output: [[45 45 100 45] 45]
Test Case:  34 | Input/Output: [[-8 27 -8 -8] -8]
Test Case:  35 | Input/Output: [[94 94 94 -72] -72]
Test Case:  36 | Input/Output: [[-2 -2 96 -2] -2]
Test Case:  37 | Input/Output: [[80 80 -61 80] -61]
Test Case:  38 | Input/Output: [[-23 -5 -23 -23] -23]
Test Case:  39 | Input/Output: [[-62 -62 -62 -4] -62]
Test Case:  40 | Input/Output: [[-83 14 -83 -83] -83]
Test Case:  41 | Input/Output: [[37 37 -3 37] -3]
Test Case:  42 | Input/Output: [[-19 -97 -97 -97] -97]
Test Case:  43 | Input/Output: [[-1 -88 -88 -88] -88]
Test Case:  44 | Input/Output: [[90 69 90 90] 69]
Test Case:  45 | Input/Output: [[33 33 49 33] 33]
Test Case:  46 | Input/Output: [[54 -22 -22 -22] -22]
Test Case:  47 | Input/Output: [[59 59 59 -35] -35]
Test Case:  48 | Input/Output: [[39 39 -55 39] -55]
Test Case:  49 | Input/Output: [[98 98 98 56] 56]
Test Case:  50 | Input/Output: [[67 3 67 67] 3]
Test Case:  51 | Input/Output: [[-22 -79 -79 -79] -79]
Test Case:  52 | Input/Output: [[66 66 85 66] 66]
Test Case:  53 | Input/Output: [[-77 17 17 17] -77]
Test Case:  54 | Input/Output: [[-69 -54 -69 -69] -69]
Test Case:  55 | Input/Output: [[-77 18 18 18] -77]
Test Case:  56 | Input/Output: [[-17 -52 -52 -52] -52]
Test Case:  57 | Input/Output: [[-40 -40 43 -40] -40]
Test Case:  58 | Input/Output: [[-26 -26 -26 7] -26]
Test Case:  59 | Input/Output: [[33 33 33 59] 33]
Test Case:  60 | Input/Output: [[-16 -16 -4 -16] -16]
Test Case:  61 | Input/Output: [[98 75 75 75] 75]
Test Case:  62 | Input/Output: [[49 -93 49 49] -93]
Test Case:  63 | Input/Output: [[62 -49 -49 -49] -49]
Test Case:  64 | Input/Output: [[88 88 88 -56] -56]
Test Case:  65 | Input/Output: [[61 20 20 20] 20]
Test Case:  66 | Input/Output: [[1 1 1 -99] -99]
Test Case:  67 | Input/Output: [[-28 36 -28 -28] -28]
Test Case:  68 | Input/Output: [[27 27 80 27] 27]
Test Case:  69 | Input/Output: [[-84 1 1 1] -84]
Test Case:  70 | Input/Output: [[79 26 26 26] 26]
Test Case:  71 | Input/Output: [[-94 -94 26 -94] -94]
Test Case:  72 | Input/Output: [[69 69 69 36] 36]
Test Case:  73 | Input/Output: [[-41 -41 -41 -77] -77]
Test Case:  74 | Input/Output: [[-80 -80 -80 90] -80]
Test Case:  75 | Input/Output: [[-31 -31 -31 28] -31]
Test Case:  76 | Input/Output: [[-79 -79 -54 -79] -79]
Test Case:  77 | Input/Output: [[-66 -66 -88 -66] -88]
Test Case:  78 | Input/Output: [[-39 -39 -39 71] -39]
Test Case:  79 | Input/Output: [[-86 -86 68 -86] -86]
Test Case:  80 | Input/Output: [[32 32 32 42] 32]
Test Case:  81 | Input/Output: [[-90 28 -90 -90] -90]
Test Case:  82 | Input/Output: [[3 3 3 -77] -77]
Test Case:  83 | Input/Output: [[51 51 11 51] 11]
Test Case:  84 | Input/Output: [[1 -16 -16 -16] -16]
Test Case:  85 | Input/Output: [[-91 55 55 55] -91]
Test Case:  86 | Input/Output: [[55 6 6 6] 6]
Test Case:  87 | Input/Output: [[-99 -99 -62 -99] -99]
Test Case:  88 | Input/Output: [[89 -92 -92 -92] -92]
Test Case:  89 | Input/Output: [[19 19 19 21] 19]
Test Case:  90 | Input/Output: [[-97 47 -97 -97] -97]
Test Case:  91 | Input/Output: [[-19 -19 -19 -47] -47]
Test Case:  92 | Input/Output: [[-32 42 -32 -32] -32]
Test Case:  93 | Input/Output: [[44 -36 44 44] -36]
Test Case:  94 | Input/Output: [[-77 -49 -77 -77] -77]
Test Case:  95 | Input/Output: [[-65 -53 -65 -65] -65]
Test Case:  96 | Input/Output: [[-8 -8 20 -8] -8]
Test Case:  97 | Input/Output: [[-51 93 93 93] -51]
Test Case:  98 | Input/Output: [[-96 -96 -73 -96] -96]
Test Case:  99 | Input/Output: [[-56 1 1 1] -56]
Test Case: 100 | Input/Output: [(69 69 69 69) 69]
Test Case: 101 | Input/Output: [(24 24 24 24) 24]
Test Case: 102 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 103 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 104 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 105 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 106 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 107 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 108 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 109 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 110 | Input/Output: [(3 3 3 3) 3]
Test Case: 111 | Input/Output: [(27 27 27 27) 27]
Test Case: 112 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 113 | Input/Output: [(83 83 83 83) 83]
Test Case: 114 | Input/Output: [(7 7 7 7) 7]
Test Case: 115 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 116 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 117 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 118 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 119 | Input/Output: [(66 66 66 66) 66]
Test Case: 120 | Input/Output: [(100 100 100 100) 100]
Test Case: 121 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 122 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 123 | Input/Output: [(92 92 92 92) 92]
Test Case: 124 | Input/Output: [(22 22 22 22) 22]
Test Case: 125 | Input/Output: [(63 63 63 63) 63]
Test Case: 126 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 127 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 128 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 129 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 130 | Input/Output: [(0 0 0 0) 0]
Test Case: 131 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 132 | Input/Output: [(94 94 94 94) 94]
Test Case: 133 | Input/Output: [(33 33 33 33) 33]
Test Case: 134 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 135 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 136 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 137 | Input/Output: [(39 39 39 39) 39]
Test Case: 138 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 139 | Input/Output: [(64 64 64 64) 64]
Test Case: 140 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 141 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 142 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 143 | Input/Output: [(20 20 20 20) 20]
Test Case: 144 | Input/Output: [(12 12 12 12) 12]
Test Case: 145 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 146 | Input/Output: [(95 95 95 95) 95]
Test Case: 147 | Input/Output: [(8 8 8 8) 8]
Test Case: 148 | Input/Output: [(45 45 45 45) 45]
Test Case: 149 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 150 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 151 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 152 | Input/Output: [(32 32 32 32) 32]
Test Case: 153 | Input/Output: [(91 91 91 91) 91]
Test Case: 154 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 155 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 156 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 157 | Input/Output: [(88 88 88 88) 88]
Test Case: 158 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 159 | Input/Output: [(30 30 30 30) 30]
Test Case: 160 | Input/Output: [(94 94 94 94) 94]
Test Case: 161 | Input/Output: [(15 15 15 15) 15]
Test Case: 162 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 163 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 164 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 165 | Input/Output: [(59 59 59 59) 59]
Test Case: 166 | Input/Output: [(25 25 25 25) 25]
Test Case: 167 | Input/Output: [(26 26 26 26) 26]
Test Case: 168 | Input/Output: [(76 76 76 76) 76]
Test Case: 169 | Input/Output: [(20 20 20 20) 20]
Test Case: 170 | Input/Output: [(25 25 25 25) 25]
Test Case: 171 | Input/Output: [(46 46 46 46) 46]
Test Case: 172 | Input/Output: [(79 79 79 79) 79]
Test Case: 173 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 174 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 175 | Input/Output: [(69 69 69 69) 69]
Test Case: 176 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 177 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 178 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 179 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 180 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 181 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 182 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 183 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 184 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 185 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 186 | Input/Output: [(66 66 66 66) 66]
Test Case: 187 | Input/Output: [(75 75 75 75) 75]
Test Case: 188 | Input/Output: [(93 93 93 93) 93]
Test Case: 189 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 190 | Input/Output: [(64 64 64 64) 64]
Test Case: 191 | Input/Output: [(88 88 88 88) 88]
Test Case: 192 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 193 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 194 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 195 | Input/Output: [(1 1 1 1) 1]
Test Case: 196 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 197 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 198 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 199 | Input/Output: [(54 54 54 54) 54]
Test Case: 200 | Input/Output: [(6 78 38 59) 6]
Test Case: 201 | Input/Output: [(18 21 82 3) 3]
Test Case: 202 | Input/Output: [(92 87 52 54) 52]
Test Case: 203 | Input/Output: [(33 15 12 92) 12]
Test Case: 204 | Input/Output: [(43 51 63 68) 43]
Test Case: 205 | Input/Output: [(7 26 15 4) 4]
Test Case: 206 | Input/Output: [(83 24 59 63) 24]
Test Case: 207 | Input/Output: [(31 40 61 100) 31]
Test Case: 208 | Input/Output: [(68 79 27 68) 27]
Test Case: 209 | Input/Output: [(72 49 80 33) 33]
Test Case: 210 | Input/Output: [(40 4 70 92) 4]
Test Case: 211 | Input/Output: [(98 47 36 58) 36]
Test Case: 212 | Input/Output: [(99 67 46 73) 46]
Test Case: 213 | Input/Output: [(65 0 69 46) 0]
Test Case: 214 | Input/Output: [(96 89 49 74) 49]
Test Case: 215 | Input/Output: [(54 30 70 91) 30]
Test Case: 216 | Input/Output: [(83 12 56 41) 12]
Test Case: 217 | Input/Output: [(10 87 87 83) 10]
Test Case: 218 | Input/Output: [(11 67 94 3) 3]
Test Case: 219 | Input/Output: [(10 19 51 87) 10]
Test Case: 220 | Input/Output: [(38 55 32 40) 32]
Test Case: 221 | Input/Output: [(6 24 53 96) 6]
Test Case: 222 | Input/Output: [(80 20 5 75) 5]
Test Case: 223 | Input/Output: [(47 65 24 70) 24]
Test Case: 224 | Input/Output: [(39 38 94 97) 38]
Test Case: 225 | Input/Output: [(25 30 10 3) 3]
Test Case: 226 | Input/Output: [(25 58 94 28) 25]
Test Case: 227 | Input/Output: [(36 17 37 89) 17]
Test Case: 228 | Input/Output: [(73 10 19 11) 10]
Test Case: 229 | Input/Output: [(98 58 25 0) 0]
Test Case: 230 | Input/Output: [(36 10 100 48) 10]
Test Case: 231 | Input/Output: [(57 89 3 8) 3]
Test Case: 232 | Input/Output: [(42 42 93 89) 42]
Test Case: 233 | Input/Output: [(92 0 73 0) 0]
Test Case: 234 | Input/Output: [(22 83 57 69) 22]
Test Case: 235 | Input/Output: [(15 49 0 23) 0]
Test Case: 236 | Input/Output: [(93 55 23 36) 23]
Test Case: 237 | Input/Output: [(83 71 4 50) 4]
Test Case: 238 | Input/Output: [(85 10 38 1) 1]
Test Case: 239 | Input/Output: [(20 92 39 43) 20]
Test Case: 240 | Input/Output: [(5 24 22 17) 5]
Test Case: 241 | Input/Output: [(33 43 44 71) 33]
Test Case: 242 | Input/Output: [(24 8 91 8) 8]
Test Case: 243 | Input/Output: [(57 48 3 33) 3]
Test Case: 244 | Input/Output: [(95 46 4 9) 4]
Test Case: 245 | Input/Output: [(71 91 58 21) 21]
Test Case: 246 | Input/Output: [(53 98 15 52) 15]
Test Case: 247 | Input/Output: [(70 68 71 95) 68]
Test Case: 248 | Input/Output: [(0 41 100 98) 0]
Test Case: 249 | Input/Output: [(30 73 20 86) 20]
Test Case: 250 | Input/Output: [(85 2 34 96) 2]
Test Case: 251 | Input/Output: [(25 93 26 30) 25]
Test Case: 252 | Input/Output: [(4 42 1 39) 1]
Test Case: 253 | Input/Output: [(83 25 28 15) 15]
Test Case: 254 | Input/Output: [(62 56 93 45) 45]
Test Case: 255 | Input/Output: [(62 41 57 53) 41]
Test Case: 256 | Input/Output: [(79 70 20 7) 7]
Test Case: 257 | Input/Output: [(81 9 38 33) 9]
Test Case: 258 | Input/Output: [(95 72 33 61) 33]
Test Case: 259 | Input/Output: [(87 68 31 27) 27]
Test Case: 260 | Input/Output: [(88 3 45 48) 3]
Test Case: 261 | Input/Output: [(40 50 83 82) 40]
Test Case: 262 | Input/Output: [(62 24 98 82) 24]
Test Case: 263 | Input/Output: [(21 87 20 78) 20]
Test Case: 264 | Input/Output: [(7 3 2 20) 2]
Test Case: 265 | Input/Output: [(63 42 28 57) 28]
Test Case: 266 | Input/Output: [(38 83 78 26) 26]
Test Case: 267 | Input/Output: [(69 27 49 56) 27]
Test Case: 268 | Input/Output: [(29 59 86 91) 29]
Test Case: 269 | Input/Output: [(49 1 29 4) 1]
Test Case: 270 | Input/Output: [(67 77 55 4) 4]
Test Case: 271 | Input/Output: [(68 72 14 0) 0]
Test Case: 272 | Input/Output: [(57 44 85 80) 44]
Test Case: 273 | Input/Output: [(51 27 0 9) 0]
Test Case: 274 | Input/Output: [(78 66 72 56) 56]
Test Case: 275 | Input/Output: [(100 43 74 2) 2]
Test Case: 276 | Input/Output: [(71 34 62 83) 34]
Test Case: 277 | Input/Output: [(63 84 75 87) 63]
Test Case: 278 | Input/Output: [(58 51 67 66) 51]
Test Case: 279 | Input/Output: [(7 66 31 79) 7]
Test Case: 280 | Input/Output: [(13 81 58 64) 13]
Test Case: 281 | Input/Output: [(32 76 29 42) 29]
Test Case: 282 | Input/Output: [(39 10 60 26) 10]
Test Case: 283 | Input/Output: [(12 31 80 44) 12]
Test Case: 284 | Input/Output: [(39 69 19 72) 19]
Test Case: 285 | Input/Output: [(82 87 2 98) 2]
Test Case: 286 | Input/Output: [(44 98 72 86) 44]
Test Case: 287 | Input/Output: [(31 82 44 3) 3]
Test Case: 288 | Input/Output: [(100 79 89 47) 47]
Test Case: 289 | Input/Output: [(75 69 60 39) 39]
Test Case: 290 | Input/Output: [(46 68 87 86) 46]
Test Case: 291 | Input/Output: [(7 42 68 76) 7]
Test Case: 292 | Input/Output: [(65 84 61 63) 61]
Test Case: 293 | Input/Output: [(1 31 0 83) 0]
Test Case: 294 | Input/Output: [(68 96 21 18) 18]
Test Case: 295 | Input/Output: [(28 0 26 10) 0]
Test Case: 296 | Input/Output: [(65 92 9 81) 9]
Test Case: 297 | Input/Output: [(27 8 56 38) 8]
Test Case: 298 | Input/Output: [(39 54 68 10) 10]
Test Case: 299 | Input/Output: [(51 72 91 1) 1]
Test Case: 300 | Input/Output: [(2 81 60 25) 2]
Test Case: 301 | Input/Output: [(38 88 19 34) 19]
Test Case: 302 | Input/Output: [(4 91 14 30) 4]
Test Case: 303 | Input/Output: [(72 92 88 3) 3]
Test Case: 304 | Input/Output: [(63 100 86 6) 6]
Test Case: 305 | Input/Output: [(78 17 81 23) 17]
Test Case: 306 | Input/Output: [(93 56 95 54) 54]
Test Case: 307 | Input/Output: [(92 24 35 14) 14]
Test Case: 308 | Input/Output: [(18 10 80 86) 10]
Test Case: 309 | Input/Output: [(48 9 13 79) 9]
Test Case: 310 | Input/Output: [(34 10 94 58) 10]
Test Case: 311 | Input/Output: [(97 55 74 86) 55]
Test Case: 312 | Input/Output: [(41 96 60 33) 33]
Test Case: 313 | Input/Output: [(55 29 22 88) 22]
Test Case: 314 | Input/Output: [(39 16 86 37) 16]
Test Case: 315 | Input/Output: [(76 72 71 47) 47]
Test Case: 316 | Input/Output: [(24 10 61 65) 10]
Test Case: 317 | Input/Output: [(73 14 57 44) 14]
Test Case: 318 | Input/Output: [(8 89 41 87) 8]
Test Case: 319 | Input/Output: [(97 72 22 55) 22]
Test Case: 320 | Input/Output: [(68 37 8 34) 8]
Test Case: 321 | Input/Output: [(48 51 12 49) 12]
Test Case: 322 | Input/Output: [(35 10 1 55) 1]
Test Case: 323 | Input/Output: [(99 61 83 63) 61]
Test Case: 324 | Input/Output: [(82 17 67 43) 17]
Test Case: 325 | Input/Output: [(61 93 99 75) 61]
Test Case: 326 | Input/Output: [(91 3 95 90) 3]
Test Case: 327 | Input/Output: [(51 96 27 11) 11]
Test Case: 328 | Input/Output: [(93 70 49 94) 49]
Test Case: 329 | Input/Output: [(77 3 89 29) 3]
Test Case: 330 | Input/Output: [(63 88 95 56) 56]
Test Case: 331 | Input/Output: [(72 89 63 97) 63]
Test Case: 332 | Input/Output: [(3 15 67 56) 3]
Test Case: 333 | Input/Output: [(37 84 25 81) 25]
Test Case: 334 | Input/Output: [(62 41 73 46) 41]
Test Case: 335 | Input/Output: [(58 16 86 30) 16]
Test Case: 336 | Input/Output: [(33 90 8 54) 8]
Test Case: 337 | Input/Output: [(99 68 51 75) 51]
Test Case: 338 | Input/Output: [(22 67 33 72) 22]
Test Case: 339 | Input/Output: [(95 40 48 30) 30]
Test Case: 340 | Input/Output: [(45 54 18 68) 18]
Test Case: 341 | Input/Output: [(33 16 84 44) 16]
Test Case: 342 | Input/Output: [(16 53 54 68) 16]
Test Case: 343 | Input/Output: [(20 15 62 60) 15]
Test Case: 344 | Input/Output: [(89 60 77 41) 41]
Test Case: 345 | Input/Output: [(48 60 85 2) 2]
Test Case: 346 | Input/Output: [(28 5 53 99) 5]
Test Case: 347 | Input/Output: [(46 73 6 17) 6]
Test Case: 348 | Input/Output: [(17 76 85 74) 17]
Test Case: 349 | Input/Output: [(0 44 53 70) 0]
Test Case: 350 | Input/Output: [(44 59 98 4) 4]
Test Case: 351 | Input/Output: [(95 82 44 4) 4]
Test Case: 352 | Input/Output: [(27 47 78 78) 27]
Test Case: 353 | Input/Output: [(67 58 79 87) 58]
Test Case: 354 | Input/Output: [(52 71 19 29) 19]
Test Case: 355 | Input/Output: [(54 58 55 43) 43]
Test Case: 356 | Input/Output: [(6 24 19 98) 6]
Test Case: 357 | Input/Output: [(66 100 100 41) 41]
Test Case: 358 | Input/Output: [(64 54 46 54) 46]
Test Case: 359 | Input/Output: [(3 11 78 61) 3]
Test Case: 360 | Input/Output: [(38 88 24 20) 20]
Test Case: 361 | Input/Output: [(38 62 26 66) 26]
Test Case: 362 | Input/Output: [(97 82 81 36) 36]
Test Case: 363 | Input/Output: [(2 79 12 27) 2]
Test Case: 364 | Input/Output: [(87 0 48 97) 0]
Test Case: 365 | Input/Output: [(63 18 66 71) 18]
Test Case: 366 | Input/Output: [(24 87 43 12) 12]
Test Case: 367 | Input/Output: [(66 90 21 100) 21]
Test Case: 368 | Input/Output: [(57 5 1 90) 1]
Test Case: 369 | Input/Output: [(32 88 44 34) 32]
Test Case: 370 | Input/Output: [(87 85 79 3) 3]
Test Case: 371 | Input/Output: [(14 22 100 1) 1]
Test Case: 372 | Input/Output: [(2 75 31 4) 2]
Test Case: 373 | Input/Output: [(75 14 15 97) 14]
Test Case: 374 | Input/Output: [(9 71 97 44) 9]
Test Case: 375 | Input/Output: [(77 61 32 39) 32]
Test Case: 376 | Input/Output: [(73 36 13 80) 13]
Test Case: 377 | Input/Output: [(3 55 87 26) 3]
Test Case: 378 | Input/Output: [(86 87 10 98) 10]
Test Case: 379 | Input/Output: [(16 79 81 31) 16]
Test Case: 380 | Input/Output: [(67 85 75 36) 36]
Test Case: 381 | Input/Output: [(58 87 80 33) 33]
Test Case: 382 | Input/Output: [(26 76 25 77) 25]
Test Case: 383 | Input/Output: [(4 17 53 45) 4]
Test Case: 384 | Input/Output: [(32 69 70 31) 31]
Test Case: 385 | Input/Output: [(72 61 39 27) 27]
Test Case: 386 | Input/Output: [(12 84 31 55) 12]
Test Case: 387 | Input/Output: [(100 71 79 54) 54]
Test Case: 388 | Input/Output: [(18 12 56 30) 12]
Test Case: 389 | Input/Output: [(88 97 29 75) 29]
Test Case: 390 | Input/Output: [(9 65 71 89) 9]
Test Case: 391 | Input/Output: [(20 30 20 39) 20]
Test Case: 392 | Input/Output: [(14 33 22 84) 14]
Test Case: 393 | Input/Output: [(18 94 90 96) 18]
Test Case: 394 | Input/Output: [(83 48 1 7) 1]
Test Case: 395 | Input/Output: [(22 20 88 36) 20]
Test Case: 396 | Input/Output: [(24 30 96 8) 8]
Test Case: 397 | Input/Output: [(19 50 56 95) 19]
Test Case: 398 | Input/Output: [(5 11 67 15) 5]
Test Case: 399 | Input/Output: [(29 23 47 64) 23]
Test Case: 400 | Input/Output: [(-48 -9 -21 -96) -96]
Test Case: 401 | Input/Output: [(-78 -47 92 -10) -78]
Test Case: 402 | Input/Output: [(83 99 18 58) 18]
Test Case: 403 | Input/Output: [(-3 54 12 38) -3]
Test Case: 404 | Input/Output: [(89 -7 8 -36) -36]
Test Case: 405 | Input/Output: [(50 7 98 -96) -96]
Test Case: 406 | Input/Output: [(-65 -78 -12 49) -78]
Test Case: 407 | Input/Output: [(11 -13 84 36) -13]
Test Case: 408 | Input/Output: [(-17 -4 60 -6) -17]
Test Case: 409 | Input/Output: [(-72 -81 -57 -43) -81]
Test Case: 410 | Input/Output: [(-22 82 88 -84) -84]
Test Case: 411 | Input/Output: [(-38 -26 76 -47) -47]
Test Case: 412 | Input/Output: [(29 -15 -100 90) -100]
Test Case: 413 | Input/Output: [(28 86 -88 -85) -88]
Test Case: 414 | Input/Output: [(-28 -35 -21 -86) -86]
Test Case: 415 | Input/Output: [(-54 -96 16 -73) -96]
Test Case: 416 | Input/Output: [(-64 13 3 22) -64]
Test Case: 417 | Input/Output: [(-26 -20 -55 -88) -88]
Test Case: 418 | Input/Output: [(-72 23 -25 -44) -72]
Test Case: 419 | Input/Output: [(86 -8 -72 5) -72]
Test Case: 420 | Input/Output: [(-97 71 -83 -95) -97]
Test Case: 421 | Input/Output: [(-81 -8 -88 -95) -95]
Test Case: 422 | Input/Output: [(-68 7 23 -86) -86]
Test Case: 423 | Input/Output: [(95 94 40 14) 14]
Test Case: 424 | Input/Output: [(-79 64 -60 -6) -79]
Test Case: 425 | Input/Output: [(-24 -75 -60 -97) -97]
Test Case: 426 | Input/Output: [(-83 36 -33 9) -83]
Test Case: 427 | Input/Output: [(27 -99 12 3) -99]
Test Case: 428 | Input/Output: [(81 -27 79 -35) -35]
Test Case: 429 | Input/Output: [(-86 14 -2 -3) -86]
Test Case: 430 | Input/Output: [(-45 68 -98 72) -98]
Test Case: 431 | Input/Output: [(41 98 -98 37) -98]
Test Case: 432 | Input/Output: [(55 7 60 -80) -80]
Test Case: 433 | Input/Output: [(-12 74 -41 28) -41]
Test Case: 434 | Input/Output: [(-16 61 -5 -83) -83]
Test Case: 435 | Input/Output: [(7 -54 -31 -52) -54]
Test Case: 436 | Input/Output: [(-19 42 50 2) -19]
Test Case: 437 | Input/Output: [(-31 22 -69 49) -69]
Test Case: 438 | Input/Output: [(1 -19 0 -78) -78]
Test Case: 439 | Input/Output: [(46 25 93 -79) -79]
Test Case: 440 | Input/Output: [(44 -26 -56 33) -56]
Test Case: 441 | Input/Output: [(-95 7 -61 -11) -95]
Test Case: 442 | Input/Output: [(14 78 -14 73) -14]
Test Case: 443 | Input/Output: [(-36 13 -39 51) -39]
Test Case: 444 | Input/Output: [(59 -96 -61 -71) -96]
Test Case: 445 | Input/Output: [(-34 -41 -54 12) -54]
Test Case: 446 | Input/Output: [(81 29 97 23) 23]
Test Case: 447 | Input/Output: [(43 -78 22 90) -78]
Test Case: 448 | Input/Output: [(7 -26 -1 -57) -57]
Test Case: 449 | Input/Output: [(-83 0 71 -86) -86]
Test Case: 450 | Input/Output: [(12 4 40 -92) -92]
Test Case: 451 | Input/Output: [(-77 -28 1 78) -77]
Test Case: 452 | Input/Output: [(-45 60 -78 -98) -98]
Test Case: 453 | Input/Output: [(-9 56 86 44) -9]
Test Case: 454 | Input/Output: [(8 -67 -47 87) -67]
Test Case: 455 | Input/Output: [(-4 97 -3 -69) -69]
Test Case: 456 | Input/Output: [(-93 -79 5 -28) -93]
Test Case: 457 | Input/Output: [(-3 -16 -83 16) -83]
Test Case: 458 | Input/Output: [(58 63 -17 36) -17]
Test Case: 459 | Input/Output: [(70 95 -23 -76) -76]
Test Case: 460 | Input/Output: [(100 34 28 65) 28]
Test Case: 461 | Input/Output: [(-20 29 -44 17) -44]
Test Case: 462 | Input/Output: [(-94 -52 39 -51) -94]
Test Case: 463 | Input/Output: [(-62 -70 4 45) -70]
Test Case: 464 | Input/Output: [(-82 34 68 91) -82]
Test Case: 465 | Input/Output: [(45 -86 80 55) -86]
Test Case: 466 | Input/Output: [(-11 -92 75 15) -92]
Test Case: 467 | Input/Output: [(41 44 -49 -12) -49]
Test Case: 468 | Input/Output: [(-73 -45 -15 -2) -73]
Test Case: 469 | Input/Output: [(-36 31 -50 -60) -60]
Test Case: 470 | Input/Output: [(41 -46 58 50) -46]
Test Case: 471 | Input/Output: [(86 90 100 -91) -91]
Test Case: 472 | Input/Output: [(-50 77 26 88) -50]
Test Case: 473 | Input/Output: [(-54 24 59 56) -54]
Test Case: 474 | Input/Output: [(-37 -56 -13 50) -56]
Test Case: 475 | Input/Output: [(-31 -83 -98 -1) -98]
Test Case: 476 | Input/Output: [(43 -67 -83 -91) -91]
Test Case: 477 | Input/Output: [(-27 -26 89 -37) -37]
Test Case: 478 | Input/Output: [(-26 43 42 -75) -75]
Test Case: 479 | Input/Output: [(-79 76 -94 56) -94]
Test Case: 480 | Input/Output: [(-24 70 89 35) -24]
Test Case: 481 | Input/Output: [(68 56 -67 13) -67]
Test Case: 482 | Input/Output: [(-10 71 81 -42) -42]
Test Case: 483 | Input/Output: [(-48 1 0 -26) -48]
Test Case: 484 | Input/Output: [(21 93 -60 -54) -60]
Test Case: 485 | Input/Output: [(19 21 -26 21) -26]
Test Case: 486 | Input/Output: [(43 -28 2 -73) -73]
Test Case: 487 | Input/Output: [(92 -79 84 -11) -79]
Test Case: 488 | Input/Output: [(78 100 -52 -75) -75]
Test Case: 489 | Input/Output: [(33 47 24 85) 24]
Test Case: 490 | Input/Output: [(-17 75 -88 -81) -88]
Test Case: 491 | Input/Output: [(9 66 -88 -93) -93]
Test Case: 492 | Input/Output: [(-37 96 48 90) -37]
Test Case: 493 | Input/Output: [(-19 79 79 -50) -50]
Test Case: 494 | Input/Output: [(-75 31 70 -36) -75]
Test Case: 495 | Input/Output: [(-24 34 -14 52) -24]
Test Case: 496 | Input/Output: [(-16 78 9 53) -16]
Test Case: 497 | Input/Output: [(92 25 -79 -24) -79]
Test Case: 498 | Input/Output: [(35 5 -57 -58) -58]
Test Case: 499 | Input/Output: [(-14 29 62 -95) -95]
Test Case: 500 | Input/Output: [(-42 -86 -3 -69) -86]
Test Case: 501 | Input/Output: [(-68 10 -26 -62) -68]
Test Case: 502 | Input/Output: [(-78 -82 -34 76) -82]
Test Case: 503 | Input/Output: [(30 -85 -69 -97) -97]
Test Case: 504 | Input/Output: [(60 56 -37 87) -37]
Test Case: 505 | Input/Output: [(55 20 -38 -90) -90]
Test Case: 506 | Input/Output: [(45 -95 97 16) -95]
Test Case: 507 | Input/Output: [(-49 -16 -54 3) -54]
Test Case: 508 | Input/Output: [(-52 66 46 85) -52]
Test Case: 509 | Input/Output: [(79 -97 60 -70) -97]
Test Case: 510 | Input/Output: [(-73 -46 27 50) -73]
Test Case: 511 | Input/Output: [(14 4 -22 -9) -22]
Test Case: 512 | Input/Output: [(76 -73 -67 88) -73]
Test Case: 513 | Input/Output: [(-48 48 24 -76) -76]
Test Case: 514 | Input/Output: [(-89 -61 -14 -51) -89]
Test Case: 515 | Input/Output: [(91 -97 -77 -77) -97]
Test Case: 516 | Input/Output: [(-65 -67 56 62) -67]
Test Case: 517 | Input/Output: [(60 70 27 21) 21]
Test Case: 518 | Input/Output: [(1 5 83 -90) -90]
Test Case: 519 | Input/Output: [(77 -61 -37 87) -61]
Test Case: 520 | Input/Output: [(6 -15 17 39) -15]
Test Case: 521 | Input/Output: [(31 -67 29 89) -67]
Test Case: 522 | Input/Output: [(33 -51 7 -10) -51]
Test Case: 523 | Input/Output: [(-53 -20 -66 34) -66]
Test Case: 524 | Input/Output: [(-16 -76 17 57) -76]
Test Case: 525 | Input/Output: [(-39 -5 -67 -62) -67]
Test Case: 526 | Input/Output: [(69 -29 -21 -65) -65]
Test Case: 527 | Input/Output: [(26 -37 -8 98) -37]
Test Case: 528 | Input/Output: [(-69 2 -95 -5) -95]
Test Case: 529 | Input/Output: [(98 27 -36 -66) -66]
Test Case: 530 | Input/Output: [(-17 2 -79 53) -79]
Test Case: 531 | Input/Output: [(-28 38 -67 6) -67]
Test Case: 532 | Input/Output: [(78 -81 -1 6) -81]
Test Case: 533 | Input/Output: [(13 40 64 -19) -19]
Test Case: 534 | Input/Output: [(13 -69 -5 89) -69]
Test Case: 535 | Input/Output: [(-54 18 -50 26) -54]
Test Case: 536 | Input/Output: [(31 -83 16 99) -83]
Test Case: 537 | Input/Output: [(61 -63 76 12) -63]
Test Case: 538 | Input/Output: [(-73 -23 -96 46) -96]
Test Case: 539 | Input/Output: [(-98 45 -8 -15) -98]
Test Case: 540 | Input/Output: [(1 61 -86 -68) -86]
Test Case: 541 | Input/Output: [(-25 -34 -98 -38) -98]
Test Case: 542 | Input/Output: [(-100 14 19 -65) -100]
Test Case: 543 | Input/Output: [(11 44 -19 25) -19]
Test Case: 544 | Input/Output: [(-63 -5 17 -3) -63]
Test Case: 545 | Input/Output: [(-16 -99 71 -62) -99]
Test Case: 546 | Input/Output: [(76 -94 1 -66) -94]
Test Case: 547 | Input/Output: [(-96 7 80 33) -96]
Test Case: 548 | Input/Output: [(-26 -41 -17 -31) -41]
Test Case: 549 | Input/Output: [(86 42 72 -89) -89]
Test Case: 550 | Input/Output: [(43 51 -98 -38) -98]
Test Case: 551 | Input/Output: [(-13 -70 -23 -11) -70]
Test Case: 552 | Input/Output: [(-7 -71 86 68) -71]
Test Case: 553 | Input/Output: [(71 -88 -96 -91) -96]
Test Case: 554 | Input/Output: [(-3 36 15 -42) -42]
Test Case: 555 | Input/Output: [(11 50 100 -71) -71]
Test Case: 556 | Input/Output: [(64 75 -74 -1) -74]
Test Case: 557 | Input/Output: [(-17 -7 -33 -41) -41]
Test Case: 558 | Input/Output: [(35 -3 65 51) -3]
Test Case: 559 | Input/Output: [(-90 2 74 -86) -90]
Test Case: 560 | Input/Output: [(74 -41 -29 -79) -79]
Test Case: 561 | Input/Output: [(-60 -20 -27 35) -60]
Test Case: 562 | Input/Output: [(-90 -27 0 25) -90]
Test Case: 563 | Input/Output: [(81 -81 16 46) -81]
Test Case: 564 | Input/Output: [(60 64 -24 -38) -38]
Test Case: 565 | Input/Output: [(17 32 -56 47) -56]
Test Case: 566 | Input/Output: [(-52 -55 56 0) -55]
Test Case: 567 | Input/Output: [(38 71 52 -99) -99]
Test Case: 568 | Input/Output: [(95 -86 -73 -96) -96]
Test Case: 569 | Input/Output: [(-26 72 -63 73) -63]
Test Case: 570 | Input/Output: [(57 -100 -61 61) -100]
Test Case: 571 | Input/Output: [(-66 3 -48 -43) -66]
Test Case: 572 | Input/Output: [(13 -55 34 -20) -55]
Test Case: 573 | Input/Output: [(60 -44 18 21) -44]
Test Case: 574 | Input/Output: [(31 97 -97 70) -97]
Test Case: 575 | Input/Output: [(-84 -59 -55 91) -84]
Test Case: 576 | Input/Output: [(-45 -82 90 -95) -95]
Test Case: 577 | Input/Output: [(98 -53 26 -47) -53]
Test Case: 578 | Input/Output: [(-50 -87 0 -64) -87]
Test Case: 579 | Input/Output: [(-5 -22 84 -64) -64]
Test Case: 580 | Input/Output: [(-39 -14 -11 -87) -87]
Test Case: 581 | Input/Output: [(97 89 10 15) 10]
Test Case: 582 | Input/Output: [(-52 -3 -5 45) -52]
Test Case: 583 | Input/Output: [(64 91 96 -46) -46]
Test Case: 584 | Input/Output: [(-96 79 100 4) -96]
Test Case: 585 | Input/Output: [(-27 -87 65 -43) -87]
Test Case: 586 | Input/Output: [(3 89 15 87) 3]
Test Case: 587 | Input/Output: [(32 -93 -37 -94) -94]
Test Case: 588 | Input/Output: [(3 -41 34 -50) -50]
Test Case: 589 | Input/Output: [(-30 68 -40 -28) -40]
Test Case: 590 | Input/Output: [(-36 80 -63 -48) -63]
Test Case: 591 | Input/Output: [(68 -66 94 96) -66]
Test Case: 592 | Input/Output: [(12 -7 1 33) -7]
Test Case: 593 | Input/Output: [(-94 -69 99 36) -94]
Test Case: 594 | Input/Output: [(55 -99 -70 28) -99]
Test Case: 595 | Input/Output: [(74 -91 -34 32) -91]
Test Case: 596 | Input/Output: [(18 -59 16 -95) -95]
Test Case: 597 | Input/Output: [(-44 -81 -8 -40) -81]
Test Case: 598 | Input/Output: [(5 84 -81 -52) -81]
Test Case: 599 | Input/Output: [(32 -5 31 -41) -41]
Test Case: 600 | Input/Output: [(-85 29 70 -25) -85]
Test Case: 601 | Input/Output: [(35 82 60 -77) -77]
Test Case: 602 | Input/Output: [(-5 3 -29 -26) -29]
Test Case: 603 | Input/Output: [(-44 -28 77 -19) -44]
Test Case: 604 | Input/Output: [(42 48 -82 -23) -82]
Test Case: 605 | Input/Output: [(52 39 -42 94) -42]
Test Case: 606 | Input/Output: [(7 -54 48 96) -54]
Test Case: 607 | Input/Output: [(45 -63 -8 15) -63]
Test Case: 608 | Input/Output: [(99 -59 50 -5) -59]
Test Case: 609 | Input/Output: [(15 -77 11 -19) -77]
Test Case: 610 | Input/Output: [(-41 61 -84 94) -84]
Test Case: 611 | Input/Output: [(23 -7 -44 7) -44]
Test Case: 612 | Input/Output: [(-100 -99 28 25) -100]
Test Case: 613 | Input/Output: [(66 -53 21 -95) -95]
Test Case: 614 | Input/Output: [(91 87 -36 -10) -36]
Test Case: 615 | Input/Output: [(91 -33 -50 -29) -50]
Test Case: 616 | Input/Output: [(99 92 93 66) 66]
Test Case: 617 | Input/Output: [(-70 92 -47 90) -70]
Test Case: 618 | Input/Output: [(65 -52 51 3) -52]
Test Case: 619 | Input/Output: [(-42 31 -98 -24) -98]
Test Case: 620 | Input/Output: [(23 5 -14 -18) -18]
Test Case: 621 | Input/Output: [(58 -82 65 -7) -82]
Test Case: 622 | Input/Output: [(38 62 -65 -68) -68]
Test Case: 623 | Input/Output: [(91 -80 -84 18) -84]
Test Case: 624 | Input/Output: [(91 24 -73 45) -73]
Test Case: 625 | Input/Output: [(97 -28 -51 5) -51]
Test Case: 626 | Input/Output: [(33 51 -72 -60) -72]
Test Case: 627 | Input/Output: [(-84 -44 55 -25) -84]
Test Case: 628 | Input/Output: [(59 73 2 25) 2]
Test Case: 629 | Input/Output: [(36 63 79 9) 9]
Test Case: 630 | Input/Output: [(89 92 -37 55) -37]
Test Case: 631 | Input/Output: [(-41 -18 31 93) -41]
Test Case: 632 | Input/Output: [(-89 -34 27 -78) -89]
Test Case: 633 | Input/Output: [(-85 -77 95 -96) -96]
Test Case: 634 | Input/Output: [(20 19 59 70) 19]
Test Case: 635 | Input/Output: [(76 -64 -54 -99) -99]
Test Case: 636 | Input/Output: [(-63 81 86 -52) -63]
Test Case: 637 | Input/Output: [(-47 8 47 52) -47]
Test Case: 638 | Input/Output: [(96 14 43 -86) -86]
Test Case: 639 | Input/Output: [(11 51 -67 61) -67]
Test Case: 640 | Input/Output: [(4 9 79 -50) -50]
Test Case: 641 | Input/Output: [(-90 78 36 96) -90]
Test Case: 642 | Input/Output: [(34 -58 98 -78) -78]
Test Case: 643 | Input/Output: [(41 94 -30 -42) -42]
Test Case: 644 | Input/Output: [(-95 20 -9 -48) -95]
Test Case: 645 | Input/Output: [(97 1 92 -21) -21]
Test Case: 646 | Input/Output: [(-14 -8 17 -32) -32]
Test Case: 647 | Input/Output: [(91 63 20 3) 3]
Test Case: 648 | Input/Output: [(59 -47 29 -24) -47]
Test Case: 649 | Input/Output: [(-27 48 46 -7) -27]
Test Case: 650 | Input/Output: [(53 63 87 88) 53]
Test Case: 651 | Input/Output: [(-20 -50 -17 -49) -50]
Test Case: 652 | Input/Output: [(-26 93 1 21) -26]
Test Case: 653 | Input/Output: [(-62 43 50 64) -62]
Test Case: 654 | Input/Output: [(86 6 -40 52) -40]
Test Case: 655 | Input/Output: [(98 -19 -97 -52) -97]
Test Case: 656 | Input/Output: [(-97 -82 -46 -73) -97]
Test Case: 657 | Input/Output: [(40 99 67 -20) -20]
Test Case: 658 | Input/Output: [(72 -2 -45 -40) -45]
Test Case: 659 | Input/Output: [(57 53 -3 -91) -91]
Test Case: 660 | Input/Output: [(-57 72 -12 -50) -57]
Test Case: 661 | Input/Output: [(69 94 0 56) 0]
Test Case: 662 | Input/Output: [(97 -22 17 99) -22]
Test Case: 663 | Input/Output: [(53 -42 1 1) -42]
Test Case: 664 | Input/Output: [(83 -54 86 46) -54]
Test Case: 665 | Input/Output: [(-36 -90 -55 37) -90]
Test Case: 666 | Input/Output: [(28 47 -39 84) -39]
Test Case: 667 | Input/Output: [(-37 14 -60 35) -60]
Test Case: 668 | Input/Output: [(-19 -4 -98 86) -98]
Test Case: 669 | Input/Output: [(-33 -77 33 -25) -77]
Test Case: 670 | Input/Output: [(-90 -7 61 -13) -90]
Test Case: 671 | Input/Output: [(64 -51 54 90) -51]
Test Case: 672 | Input/Output: [(86 -27 0 -75) -75]
Test Case: 673 | Input/Output: [(-84 49 68 7) -84]
Test Case: 674 | Input/Output: [(14 -60 19 -31) -60]
Test Case: 675 | Input/Output: [(51 -39 -37 94) -39]
Test Case: 676 | Input/Output: [(74 -63 -51 30) -63]
Test Case: 677 | Input/Output: [(42 27 74 -77) -77]
Test Case: 678 | Input/Output: [(19 68 40 -76) -76]
Test Case: 679 | Input/Output: [(4 41 -91 -62) -91]
Test Case: 680 | Input/Output: [(-46 -61 8 11) -61]
Test Case: 681 | Input/Output: [(70 -26 82 1) -26]
Test Case: 682 | Input/Output: [(-47 45 -43 64) -47]
Test Case: 683 | Input/Output: [(-99 -13 -60 -23) -99]
Test Case: 684 | Input/Output: [(23 89 -62 -28) -62]
Test Case: 685 | Input/Output: [(-24 76 83 -97) -97]
Test Case: 686 | Input/Output: [(49 38 15 -95) -95]
Test Case: 687 | Input/Output: [(41 -66 -75 64) -75]
Test Case: 688 | Input/Output: [(9 -100 3 -25) -100]
Test Case: 689 | Input/Output: [(-4 26 -28 -63) -63]
Test Case: 690 | Input/Output: [(-72 80 38 13) -72]
Test Case: 691 | Input/Output: [(64 82 17 -93) -93]
Test Case: 692 | Input/Output: [(-36 -70 3 29) -70]
Test Case: 693 | Input/Output: [(-75 54 -89 57) -89]
Test Case: 694 | Input/Output: [(99 -96 30 -72) -96]
Test Case: 695 | Input/Output: [(-46 -77 73 -7) -77]
Test Case: 696 | Input/Output: [(15 -37 -18 -83) -83]
Test Case: 697 | Input/Output: [(21 82 -36 90) -36]
Test Case: 698 | Input/Output: [(-100 -58 61 65) -100]
Test Case: 699 | Input/Output: [(-32 24 -10 100) -32]
Test Case: 700 | Input/Output: [(89 5 -11 -32) -32]
Test Case: 701 | Input/Output: [(-52 73 44 2) -52]
Test Case: 702 | Input/Output: [(-46 -88 -38 -3) -88]
Test Case: 703 | Input/Output: [(18 -95 -58 -23) -95]
Test Case: 704 | Input/Output: [(-23 -99 -3 90) -99]
Test Case: 705 | Input/Output: [(96 34 -51 -89) -89]
Test Case: 706 | Input/Output: [(-86 71 52 64) -86]
Test Case: 707 | Input/Output: [(78 -28 31 36) -28]
Test Case: 708 | Input/Output: [(83 -81 -93 -51) -93]
Test Case: 709 | Input/Output: [(-5 37 -51 49) -51]
Test Case: 710 | Input/Output: [(30 -75 8 83) -75]
Test Case: 711 | Input/Output: [(-81 84 86 -45) -81]
Test Case: 712 | Input/Output: [(-3 80 -59 -56) -59]
Test Case: 713 | Input/Output: [(32 -99 -91 94) -99]
Test Case: 714 | Input/Output: [(76 -25 50 26) -25]
Test Case: 715 | Input/Output: [(96 72 -77 -28) -77]
Test Case: 716 | Input/Output: [(-49 -16 41 28) -49]
Test Case: 717 | Input/Output: [(-74 14 15 -21) -74]
Test Case: 718 | Input/Output: [(21 8 -50 50) -50]
Test Case: 719 | Input/Output: [(-40 47 66 -25) -40]
Test Case: 720 | Input/Output: [(-30 99 -90 -9) -90]
Test Case: 721 | Input/Output: [(-68 33 -83 -48) -83]
Test Case: 722 | Input/Output: [(20 -53 87 40) -53]
Test Case: 723 | Input/Output: [(-29 3 -12 -25) -29]
Test Case: 724 | Input/Output: [(-44 17 -23 28) -44]
Test Case: 725 | Input/Output: [(-64 -98 22 75) -98]
Test Case: 726 | Input/Output: [(36 -27 19 -67) -67]
Test Case: 727 | Input/Output: [(31 -53 54 -92) -92]
Test Case: 728 | Input/Output: [(2 -3 90 65) -3]
Test Case: 729 | Input/Output: [(29 80 -70 57) -70]
Test Case: 730 | Input/Output: [(55 -35 64 -28) -35]
Test Case: 731 | Input/Output: [(40 28 -94 86) -94]
Test Case: 732 | Input/Output: [(-55 -1 82 30) -55]
Test Case: 733 | Input/Output: [(-66 -88 59 -1) -88]
Test Case: 734 | Input/Output: [(17 69 75 -22) -22]
Test Case: 735 | Input/Output: [(31 82 99 -19) -19]
Test Case: 736 | Input/Output: [(93 -98 -7 54) -98]
Test Case: 737 | Input/Output: [(92 66 94 95) 66]
Test Case: 738 | Input/Output: [(-81 5 -89 -49) -89]
Test Case: 739 | Input/Output: [(-19 -36 -59 -24) -59]
Test Case: 740 | Input/Output: [(-71 -99 60 -93) -99]
Test Case: 741 | Input/Output: [(-14 18 89 75) -14]
Test Case: 742 | Input/Output: [(-1 84 94 -32) -32]
Test Case: 743 | Input/Output: [(-72 -66 25 -60) -72]
Test Case: 744 | Input/Output: [(32 -66 -56 18) -66]
Test Case: 745 | Input/Output: [(-7 98 -5 47) -7]
Test Case: 746 | Input/Output: [(-94 -68 4 32) -94]
Test Case: 747 | Input/Output: [(88 -26 -22 -6) -26]
Test Case: 748 | Input/Output: [(31 51 -73 -77) -77]
Test Case: 749 | Input/Output: [(87 39 -38 0) -38]
Test Case: 750 | Input/Output: [(-46 51 -10 -65) -65]
Test Case: 751 | Input/Output: [(-99 37 -91 35) -99]
Test Case: 752 | Input/Output: [(96 -25 16 -36) -36]
Test Case: 753 | Input/Output: [(46 -93 1 -8) -93]
Test Case: 754 | Input/Output: [(61 67 29 28) 28]
Test Case: 755 | Input/Output: [(48 16 -59 -6) -59]
Test Case: 756 | Input/Output: [(-62 14 37 25) -62]
Test Case: 757 | Input/Output: [(16 -83 -99 -28) -99]
Test Case: 758 | Input/Output: [(37 48 -23 -66) -66]
Test Case: 759 | Input/Output: [(-58 -70 8 -49) -70]
Test Case: 760 | Input/Output: [(-72 17 62 30) -72]
Test Case: 761 | Input/Output: [(58 -81 63 57) -81]
Test Case: 762 | Input/Output: [(86 91 23 11) 11]
Test Case: 763 | Input/Output: [(90 -91 17 14) -91]
Test Case: 764 | Input/Output: [(-33 -83 12 24) -83]
Test Case: 765 | Input/Output: [(-6 44 -5 -21) -21]
Test Case: 766 | Input/Output: [(94 26 -14 -93) -93]
Test Case: 767 | Input/Output: [(93 80 74 44) 44]
Test Case: 768 | Input/Output: [(59 -8 -62 -74) -74]
Test Case: 769 | Input/Output: [(52 -64 71 7) -64]
Test Case: 770 | Input/Output: [(12 -98 -69 -70) -98]
Test Case: 771 | Input/Output: [(68 80 57 -28) -28]
Test Case: 772 | Input/Output: [(91 38 16 68) 16]
Test Case: 773 | Input/Output: [(-50 82 -17 -3) -50]
Test Case: 774 | Input/Output: [(59 -89 55 -13) -89]
Test Case: 775 | Input/Output: [(-93 53 -38 22) -93]
Test Case: 776 | Input/Output: [(-25 -21 0 -80) -80]
Test Case: 777 | Input/Output: [(5 -32 34 -80) -80]
Test Case: 778 | Input/Output: [(-19 84 -19 74) -19]
Test Case: 779 | Input/Output: [(91 59 -65 3) -65]
Test Case: 780 | Input/Output: [(-22 46 -9 40) -22]
Test Case: 781 | Input/Output: [(9 81 70 -40) -40]
Test Case: 782 | Input/Output: [(-90 6 49 62) -90]
Test Case: 783 | Input/Output: [(72 90 89 -23) -23]
Test Case: 784 | Input/Output: [(-67 87 26 100) -67]
Test Case: 785 | Input/Output: [(69 -13 53 -72) -72]
Test Case: 786 | Input/Output: [(-73 66 31 -26) -73]
Test Case: 787 | Input/Output: [(49 48 -78 97) -78]
Test Case: 788 | Input/Output: [(-87 83 -71 48) -87]
Test Case: 789 | Input/Output: [(96 -23 59 -2) -23]
Test Case: 790 | Input/Output: [(-91 19 38 -56) -91]
Test Case: 791 | Input/Output: [(11 -23 63 -72) -72]
Test Case: 792 | Input/Output: [(-30 17 -55 20) -55]
Test Case: 793 | Input/Output: [(-7 -97 93 -13) -97]
Test Case: 794 | Input/Output: [(-23 -54 25 -66) -66]
Test Case: 795 | Input/Output: [(-91 -49 47 -51) -91]
Test Case: 796 | Input/Output: [(-37 15 -17 14) -37]
Test Case: 797 | Input/Output: [(42 57 84 -38) -38]
Test Case: 798 | Input/Output: [(-89 -31 -2 86) -89]
Test Case: 799 | Input/Output: [(-90 21 97 -5) -90]
Test Case: 800 | Input/Output: [(-64 56 -35 96) -64]
Test Case: 801 | Input/Output: [(35 -85 -29 43) -85]
Test Case: 802 | Input/Output: [(-97 85 47 -32) -97]
Test Case: 803 | Input/Output: [(-15 96 77 -78) -78]
Test Case: 804 | Input/Output: [(67 -75 99 -75) -75]
Test Case: 805 | Input/Output: [(-52 -34 -32 -53) -53]
Test Case: 806 | Input/Output: [(12 -94 8 -29) -94]
Test Case: 807 | Input/Output: [(17 -7 -57 -43) -57]
Test Case: 808 | Input/Output: [(58 -29 -10 -85) -85]
Test Case: 809 | Input/Output: [(-73 57 -7 53) -73]
Test Case: 810 | Input/Output: [(57 99 -50 -14) -50]
Test Case: 811 | Input/Output: [(51 38 -5 -44) -44]
Test Case: 812 | Input/Output: [(23 22 -72 -33) -72]
Test Case: 813 | Input/Output: [(67 -21 -36 47) -36]
Test Case: 814 | Input/Output: [(-83 87 -58 75) -83]
Test Case: 815 | Input/Output: [(40 71 -79 26) -79]
Test Case: 816 | Input/Output: [(-11 56 10 17) -11]
Test Case: 817 | Input/Output: [(-41 -28 73 0) -41]
Test Case: 818 | Input/Output: [(69 -84 -4 78) -84]
Test Case: 819 | Input/Output: [(-33 -36 22 20) -36]
Test Case: 820 | Input/Output: [(66 -81 -63 12) -81]
Test Case: 821 | Input/Output: [(59 -55 -90 95) -90]
Test Case: 822 | Input/Output: [(-71 -82 -9 36) -82]
Test Case: 823 | Input/Output: [(94 -63 38 -14) -63]
Test Case: 824 | Input/Output: [(50 76 -55 72) -55]
Test Case: 825 | Input/Output: [(-81 -23 79 -88) -88]
Test Case: 826 | Input/Output: [(-89 87 -22 -7) -89]
Test Case: 827 | Input/Output: [(65 16 -83 56) -83]
Test Case: 828 | Input/Output: [(44 -84 60 89) -84]
Test Case: 829 | Input/Output: [(8 63 -40 -9) -40]
Test Case: 830 | Input/Output: [(-39 -9 24 6) -39]
Test Case: 831 | Input/Output: [(-33 4 53 43) -33]
Test Case: 832 | Input/Output: [(-22 3 99 -62) -62]
Test Case: 833 | Input/Output: [(80 -90 73 -50) -90]
Test Case: 834 | Input/Output: [(-85 80 -20 -67) -85]
Test Case: 835 | Input/Output: [(-95 -19 57 60) -95]
Test Case: 836 | Input/Output: [(20 -31 49 -29) -31]
Test Case: 837 | Input/Output: [(-94 60 4 31) -94]
Test Case: 838 | Input/Output: [(21 20 0 51) 0]
Test Case: 839 | Input/Output: [(66 -15 25 7) -15]
Test Case: 840 | Input/Output: [(52 85 -19 79) -19]
Test Case: 841 | Input/Output: [(100 92 80 -74) -74]
Test Case: 842 | Input/Output: [(38 71 48 16) 16]
Test Case: 843 | Input/Output: [(-78 48 -60 -98) -98]
Test Case: 844 | Input/Output: [(-4 51 -10 -52) -52]
Test Case: 845 | Input/Output: [(8 -36 89 1) -36]
Test Case: 846 | Input/Output: [(14 -43 7 28) -43]
Test Case: 847 | Input/Output: [(-65 52 47 100) -65]
Test Case: 848 | Input/Output: [(-53 -74 20 40) -74]
Test Case: 849 | Input/Output: [(94 -46 -93 -85) -93]
Test Case: 850 | Input/Output: [(40 23 -37 -35) -37]
Test Case: 851 | Input/Output: [(40 -21 -92 -84) -92]
Test Case: 852 | Input/Output: [(-62 21 80 92) -62]
Test Case: 853 | Input/Output: [(-11 -5 35 50) -11]
Test Case: 854 | Input/Output: [(39 82 64 11) 11]
Test Case: 855 | Input/Output: [(-28 57 78 -57) -57]
Test Case: 856 | Input/Output: [(35 -5 58 99) -5]
Test Case: 857 | Input/Output: [(6 -23 -78 -59) -78]
Test Case: 858 | Input/Output: [(-35 46 17 -72) -72]
Test Case: 859 | Input/Output: [(-21 52 98 19) -21]
Test Case: 860 | Input/Output: [(-96 -91 45 -55) -96]
Test Case: 861 | Input/Output: [(66 -47 24 -48) -48]
Test Case: 862 | Input/Output: [(-10 26 6 62) -10]
Test Case: 863 | Input/Output: [(-30 -74 13 -100) -100]
Test Case: 864 | Input/Output: [(-33 72 59 -38) -38]
Test Case: 865 | Input/Output: [(-61 -93 -29 -31) -93]
Test Case: 866 | Input/Output: [(-83 32 -30 43) -83]
Test Case: 867 | Input/Output: [(22 -76 -25 38) -76]
Test Case: 868 | Input/Output: [(52 -10 49 83) -10]
Test Case: 869 | Input/Output: [(-25 75 36 15) -25]
Test Case: 870 | Input/Output: [(89 -26 -35 49) -35]
Test Case: 871 | Input/Output: [(85 43 9 49) 9]
Test Case: 872 | Input/Output: [(95 -22 86 35) -22]
Test Case: 873 | Input/Output: [(-33 43 -64 59) -64]
Test Case: 874 | Input/Output: [(-58 -64 11 63) -64]
Test Case: 875 | Input/Output: [(64 -100 23 -90) -100]
Test Case: 876 | Input/Output: [(-92 -66 20 -7) -92]
Test Case: 877 | Input/Output: [(58 -22 86 22) -22]
Test Case: 878 | Input/Output: [(10 18 38 -63) -63]
Test Case: 879 | Input/Output: [(58 49 32 12) 12]
Test Case: 880 | Input/Output: [(98 22 90 15) 15]
Test Case: 881 | Input/Output: [(-26 -82 -48 -62) -82]
Test Case: 882 | Input/Output: [(92 -91 70 86) -91]
Test Case: 883 | Input/Output: [(-11 28 -79 18) -79]
Test Case: 884 | Input/Output: [(98 -71 34 3) -71]
Test Case: 885 | Input/Output: [(25 -88 52 29) -88]
Test Case: 886 | Input/Output: [(-8 -96 92 4) -96]
Test Case: 887 | Input/Output: [(10 17 -61 -35) -61]
Test Case: 888 | Input/Output: [(-45 10 -94 -67) -94]
Test Case: 889 | Input/Output: [(90 46 80 58) 46]
Test Case: 890 | Input/Output: [(-4 57 30 -89) -89]
Test Case: 891 | Input/Output: [(6 -95 79 23) -95]
Test Case: 892 | Input/Output: [(-25 13 -50 -85) -85]
Test Case: 893 | Input/Output: [(95 28 -61 90) -61]
Test Case: 894 | Input/Output: [(-54 -19 11 80) -54]
Test Case: 895 | Input/Output: [(-36 43 -98 54) -98]
Test Case: 896 | Input/Output: [(52 -63 25 28) -63]
Test Case: 897 | Input/Output: [(13 -39 -32 -36) -39]
Test Case: 898 | Input/Output: [(40 6 -84 33) -84]
Test Case: 899 | Input/Output: [(96 100 70 -30) -30]
Test Case: 900 | Input/Output: [(65 -14 -74 -57) -74]
Test Case: 901 | Input/Output: [(22 -6 -45 24) -45]
Test Case: 902 | Input/Output: [(-81 63 100 -51) -81]
Test Case: 903 | Input/Output: [(26 58 35 71) 26]
Test Case: 904 | Input/Output: [(-88 -54 -27 95) -88]
Test Case: 905 | Input/Output: [(86 97 -30 87) -30]
Test Case: 906 | Input/Output: [(72 37 -26 -29) -29]
Test Case: 907 | Input/Output: [(21 35 85 28) 21]
Test Case: 908 | Input/Output: [(6 99 -8 -32) -32]
Test Case: 909 | Input/Output: [(-89 2 -25 91) -89]
Test Case: 910 | Input/Output: [(16 -61 -42 -30) -61]
Test Case: 911 | Input/Output: [(-59 -95 -22 -8) -95]
Test Case: 912 | Input/Output: [(70 -94 19 -95) -95]
Test Case: 913 | Input/Output: [(-92 51 -53 -7) -92]
Test Case: 914 | Input/Output: [(23 66 5 100) 5]
Test Case: 915 | Input/Output: [(49 11 -9 -45) -45]
Test Case: 916 | Input/Output: [(11 21 -95 67) -95]
Test Case: 917 | Input/Output: [(17 88 -85 -68) -85]
Test Case: 918 | Input/Output: [(-96 -92 87 -42) -96]
Test Case: 919 | Input/Output: [(58 75 -70 -5) -70]
Test Case: 920 | Input/Output: [(-82 -61 -21 -25) -82]
Test Case: 921 | Input/Output: [(64 -52 38 37) -52]
Test Case: 922 | Input/Output: [(-32 2 -8 -45) -45]
Test Case: 923 | Input/Output: [(-100 -29 -77 3) -100]
Test Case: 924 | Input/Output: [(95 94 4 -34) -34]
Test Case: 925 | Input/Output: [(-71 -64 -70 91) -71]
Test Case: 926 | Input/Output: [(50 -79 8 -50) -79]
Test Case: 927 | Input/Output: [(-76 -79 -31 -98) -98]
Test Case: 928 | Input/Output: [(-56 71 32 -57) -57]
Test Case: 929 | Input/Output: [(38 -23 72 -68) -68]
Test Case: 930 | Input/Output: [(58 86 10 94) 10]
Test Case: 931 | Input/Output: [(-70 60 -43 0) -70]
Test Case: 932 | Input/Output: [(45 89 -38 53) -38]
Test Case: 933 | Input/Output: [(2 64 -46 100) -46]
Test Case: 934 | Input/Output: [(6 37 -92 -1) -92]
Test Case: 935 | Input/Output: [(95 72 -43 83) -43]
Test Case: 936 | Input/Output: [(69 -78 -31 73) -78]
Test Case: 937 | Input/Output: [(74 73 -55 89) -55]
Test Case: 938 | Input/Output: [(-81 93 86 -34) -81]
Test Case: 939 | Input/Output: [(78 -90 -24 38) -90]
Test Case: 940 | Input/Output: [(-48 -58 5 39) -58]
Test Case: 941 | Input/Output: [(9 -68 10 43) -68]
Test Case: 942 | Input/Output: [(64 30 54 50) 30]
Test Case: 943 | Input/Output: [(97 -46 -79 93) -79]
Test Case: 944 | Input/Output: [(-35 50 40 -90) -90]
Test Case: 945 | Input/Output: [(-84 -38 55 -61) -84]
Test Case: 946 | Input/Output: [(-39 91 -9 -83) -83]
Test Case: 947 | Input/Output: [(-34 -38 -10 -57) -57]
Test Case: 948 | Input/Output: [(4 44 75 8) 4]
Test Case: 949 | Input/Output: [(87 -26 80 -3) -26]
Test Case: 950 | Input/Output: [(78 -25 -62 -50) -62]
Test Case: 951 | Input/Output: [(-18 -58 -62 -73) -73]
Test Case: 952 | Input/Output: [(-69 27 -15 -8) -69]
Test Case: 953 | Input/Output: [(-45 71 86 -73) -73]
Test Case: 954 | Input/Output: [(-100 -83 -50 -62) -100]
Test Case: 955 | Input/Output: [(32 72 -89 12) -89]
Test Case: 956 | Input/Output: [(5 10 -82 -27) -82]
Test Case: 957 | Input/Output: [(-90 -14 17 33) -90]
Test Case: 958 | Input/Output: [(30 53 -4 70) -4]
Test Case: 959 | Input/Output: [(-45 -84 100 12) -84]
Test Case: 960 | Input/Output: [(25 -53 94 -33) -53]
Test Case: 961 | Input/Output: [(17 -90 63 -84) -90]
Test Case: 962 | Input/Output: [(-75 16 -85 54) -85]
Test Case: 963 | Input/Output: [(-100 91 -67 10) -100]
Test Case: 964 | Input/Output: [(86 -2 -30 73) -30]
Test Case: 965 | Input/Output: [(-72 40 -28 -2) -72]
Test Case: 966 | Input/Output: [(68 -62 -56 86) -62]
Test Case: 967 | Input/Output: [(29 6 96 92) 6]
Test Case: 968 | Input/Output: [(-20 89 -72 35) -72]
Test Case: 969 | Input/Output: [(35 -46 41 -76) -76]
Test Case: 970 | Input/Output: [(34 -1 -27 -74) -74]
Test Case: 971 | Input/Output: [(-92 72 34 -33) -92]
Test Case: 972 | Input/Output: [(-59 -48 43 -30) -59]
Test Case: 973 | Input/Output: [(29 89 9 1) 1]
Test Case: 974 | Input/Output: [(21 98 47 -45) -45]
Test Case: 975 | Input/Output: [(52 11 -17 33) -17]
Test Case: 976 | Input/Output: [(14 10 20 -57) -57]
Test Case: 977 | Input/Output: [(-88 67 36 89) -88]
Test Case: 978 | Input/Output: [(44 -43 -48 -91) -91]
Test Case: 979 | Input/Output: [(39 4 -77 70) -77]
Test Case: 980 | Input/Output: [(-48 -88 -39 62) -88]
Test Case: 981 | Input/Output: [(-74 2 -5 56) -74]
Test Case: 982 | Input/Output: [(18 29 -78 -95) -95]
Test Case: 983 | Input/Output: [(37 70 -10 68) -10]
Test Case: 984 | Input/Output: [(2 -54 23 -87) -87]
Test Case: 985 | Input/Output: [(14 19 -89 7) -89]
Test Case: 986 | Input/Output: [(-87 -44 63 10) -87]
Test Case: 987 | Input/Output: [(-89 -89 -67 -17) -89]
Test Case: 988 | Input/Output: [(-6 19 40 25) -6]
Test Case: 989 | Input/Output: [(64 -98 38 -29) -98]
Test Case: 990 | Input/Output: [(14 -79 24 84) -79]
Test Case: 991 | Input/Output: [(-77 -91 70 26) -91]
Test Case: 992 | Input/Output: [(-14 83 -10 98) -14]
Test Case: 993 | Input/Output: [(-51 17 51 -2) -51]
Test Case: 994 | Input/Output: [(-99 -91 1 85) -99]
Test Case: 995 | Input/Output: [(-1 32 -12 58) -12]
Test Case: 996 | Input/Output: [(45 52 -92 36) -92]
Test Case: 997 | Input/Output: [(13 -99 -31 -57) -99]
Test Case: 998 | Input/Output: [(0 -98 63 69) -98]
Test Case: 999 | Input/Output: [(63 69 79 20) 20]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 114 -14 -41 104 -58 -58 -123 68 -85 32 -47 33 52 -7 21 21
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-1 66 66 66] -1] [[24 24 -4 24] -4] [[-26 -16 -16 -16] -26] [[26 26 26 17] 17] [[54 50 50 50] 50] [[13 78 78 78] 13] [[12 -69 12 12] -69] [[8 56 8 8] 8] [[35 35 35 -28] -28] [[39 -18 39 39] -18] [(-97 -97 -97 -97) -97] [(-10 -10 -10 -10) -10] [(-62 -62 -62 -62) -62] [(-9 -9 -9 -9) -9] [(26 26 26 26) 26] [(2 67 60 30) 2] [(24 43 56 17) 17] [(93 8 32 91) 8] [(9 57 60 90) 9] [(7 30 15 81) 7] [(97 49 73 64) 49] [(8 83 33 67) 8] [(72 19 98 29) 19] [(2 64 6 27) 2] [(82 78 60 22) 22] [(65 49 62 62) 49] [(37 21 12 35) 12] [(11 33 42 100) 11] [(32 82 58 36) 32] [(99 80 56 22) 22] [(54 27 7 44) 7] [(81 20 14 94) 14] [(1 64 69 91) 1] [(73 82 76 54) 54] [(78 73 12 37) 12] [(12 47 -93 100) -93] [(76 64 -30 -85) -85] [(13 -93 29 31) -93] [(14 -77 -55 72) -77] [(-63 90 42 96) -63] [(-14 15 82 91) -14] [(-20 59 -10 -63) -63] [(-37 -26 63 90) -37] [(-13 -96 -40 -47) -96] [(69 -4 11 -23) -23] [(-25 25 -72 -35) -72] [(-34 69 17 -73) -73] [(-91 -15 60 86) -91] [(79 -26 38 -9) -26] [(-65 18 -54 -23) -65] [(-4 58 72 6) -4] [(-73 87 -64 -27) -73] [(57 26 36 39) 26] [(63 -63 49 -5) -63] [(90 68 30 -80) -80] [(62 -28 18 76) -28] [(26 -42 81 88) -42] [(-88 8 -16 -20) -88] [(77 67 58 -9) -9] [(21 69 73 73) 21] [(28 -85 52 33) -85] [(-94 -28 -45 -12) -94] [(-18 -23 -70 -31) -70] [(37 49 48 -8) -8] [(-79 7 30 93) -79] [(51 -85 13 33) -85] [(-89 51 1 58) -89] [(-41 88 90 -21) -41] [(-25 12 -1 26) -25] [(-5 -10 -98 -61) -98] [(78 -3 22 37) -3] [(25 -92 -53 78) -92] [(-34 9 97 -94) -94] [(-29 23 46 -100) -100] [(99 82 93 -66) -66] [(76 -36 -98 54) -98] [(-39 67 -64 89) -64] [(-14 90 87 -65) -65] [(-97 82 -3 -2) -97] [(-71 -65 -72 73) -72] [(-69 -28 23 100) -69] [(42 -48 -61 -98) -98] [(-98 26 18 85) -98] [(2 -39 -52 71) -52] [(-81 42 49 -41) -81] [(98 -65 -31 -25) -65] [(-25 -2 27 -4) -25] [(-65 -88 91 -3) -88] [(-47 40 -9 87) -47] [(-95 51 -30 -37) -95] [(23 -16 6 66) -16] [(-8 6 -78 -32) -78] [(-82 -92 -92 -27) -92] [(-44 27 13 24) -44] [(1 -70 -22 85) -70])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction 83} {:close 1, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_min) boolean_flush exec_stackdepth boolean_empty integer_stackdepth tagged_339 exec_while (exec_while () integer_yankdup) integer_eq integer_div in2 integer_yank boolean_dup exec_k_when_autoconstructing () (exec_s_when_autoconstructing () (exec_noop boolean_swap boolean_pop print_integer) (exec_eq 83 in3) boolean_shove) in2 boolean_dup_items integer_gte boolean_dup_items boolean_yank)
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction 83} {:close 1, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_min) boolean_flush exec_stackdepth boolean_empty integer_stackdepth tagged_339 exec_while (exec_while () integer_yankdup) integer_eq integer_div in2 integer_yank boolean_dup exec_k_when_autoconstructing () (exec_s_when_autoconstructing () (exec_noop boolean_swap boolean_pop print_integer) (exec_eq 83 in3) boolean_shove) in2 boolean_dup_items integer_gte boolean_dup_items boolean_yank)
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 4 5 3 5 4 3 5 5 17)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (6 4 5 3 5 4 3 5 5 17)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 2, :instruction -12} {:close 1, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 2, :instruction tagged_862} {:close 1, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_926} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_shove} {:close 2, :instruction exec_s} {:close 0, :instruction tag_exec_696} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_297} {:close 1, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 3, :instruction boolean_and} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction tag_integer_545} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc})
Best program: (integer_mod boolean_dup_times exec_stackdepth exec_while (integer_fromboolean boolean_and) exec_yank integer_mod exec_stackdepth boolean_and integer_add integer_shove -12 integer_min integer_lt exec_k (integer_pop boolean_rot boolean_pop print_boolean boolean_or exec_rot () (boolean_rot exec_swap (exec_y (in2) integer_dup_items exec_shove (integer_lte exec_swap (integer_fromboolean print_boolean tagged_862) () print_integer) exec_while () boolean_invert_first_then_and exec_while (integer_sub print_boolean) integer_add) (integer_add exec_while (tagged_926 boolean_not in1 integer_gt) exec_rot (boolean_frominteger print_integer boolean_and exec_shove (integer_mod exec_do*count (boolean_shove) exec_s () () (tag_exec_696 (integer_eq exec_swap (tag_boolean_297 exec_do*range () print_boolean exec_y_when_autoconstructing (exec_while (integer_div integer_swap)) boolean_xor) (exec_empty boolean_and))) integer_min) in1) (boolean_rot integer_empty boolean_pop integer_pop boolean_dup_items exec_if (exec_rot (boolean_dup_items integer_gte) (boolean_dup_times boolean_yank tag_integer_545) (boolean_invert_first_then_and exec_eq integer_min) exec_s_when_autoconstructing () (integer_yankdup) (integer_dec in2 print_integer exec_k_when_autoconstructing (boolean_invert_first_then_and) (exec_if (exec_pop (exec_s_when_autoconstructing (exec_dup_items exec_while (integer_inc)) () ())) ()))) ()) ())) ()) ())
Errors: [1 0 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 98
Size: 145
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 9.943
Median total errors in population: 10
Error averages by case: (0.994 0.996 0.995 0.997 0.995 0.996 0.997 0.995 0.995 0.983)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.577
Average program size in population (points): 69.798
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475865
--- Timings ---
Current time: 1559314325219 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 31.4%
Fitness Testing:      1.7 seconds, 64.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_153} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_462} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times () boolean_eq print_newline exec_do*times (boolean_rot boolean_swap exec_do*range (boolean_swap boolean_invert_second_then_and integer_dup) integer_swap print_exec (boolean_dup_items boolean_dup integer_dec boolean_pop boolean_dup_items) integer_add boolean_stackdepth in3 integer_lt exec_when (boolean_shove)) print_boolean integer_max boolean_xor integer_lt integer_max integer_min boolean_pop boolean_pop boolean_not exec_yank exec_dup_items print_exec (exec_pop () in1 exec_empty) integer_empty integer_dup_items integer_flush exec_when (exec_yankdup exec_do*count (exec_s (exec_swap (boolean_invert_second_then_and exec_while () exec_k (exec_rot (integer_yankdup exec_yank) (boolean_yankdup boolean_flush exec_dup (boolean_dup_items exec_k_when_autoconstructing () (tag_boolean_153 integer_rot) boolean_shove integer_dup boolean_yankdup boolean_dup) boolean_dup_times integer_yankdup in1 tag_exec_462 (boolean_eq integer_mod integer_swap) exec_do*count (integer_gt) integer_dup_times exec_noop exec_y_when_autoconstructing (integer_lt exec_when () exec_y_when_autoconstructing () integer_inc boolean_dup_items)) ()) ()) ()) () ()))) ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 133
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_153} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_462} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times () boolean_eq print_newline exec_do*times (boolean_rot boolean_swap exec_do*range (boolean_swap boolean_invert_second_then_and integer_dup) integer_swap print_exec (boolean_dup_items boolean_dup integer_dec boolean_pop boolean_dup_items) integer_add boolean_stackdepth in3 integer_lt exec_when (boolean_shove)) print_boolean integer_max boolean_xor integer_lt integer_max integer_min boolean_pop boolean_pop boolean_not exec_yank exec_dup_items print_exec (exec_pop () in1 exec_empty) integer_empty integer_dup_items integer_flush exec_when (exec_yankdup exec_do*count (exec_s (exec_swap (boolean_invert_second_then_and exec_while () exec_k (exec_rot (integer_yankdup exec_yank) (boolean_yankdup boolean_flush exec_dup (boolean_dup_items exec_k_when_autoconstructing () (tag_boolean_153 integer_rot) boolean_shove integer_dup boolean_yankdup boolean_dup) boolean_dup_times integer_yankdup in1 tag_exec_462 (boolean_eq integer_mod integer_swap) exec_do*count (integer_gt) integer_dup_times exec_noop exec_y_when_autoconstructing (integer_lt exec_when () exec_y_when_autoconstructing () integer_inc boolean_dup_items)) ()) ()) ()) () ()))) ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 133
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 194 194 369 194 839 194 79 195 467)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (194 194 194 369 194 839 194 79 195 467)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tagged_371} {:close 1, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_k (integer_min integer_pop integer_eq integer_dup integer_empty exec_rot (integer_add) (exec_when () integer_dup_times exec_k_when_autoconstructing () (exec_do*while (integer_pop integer_max) boolean_or) in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and integer_eq boolean_invert_first_then_and boolean_yank integer_dec boolean_swap) boolean_invert_second_then_and boolean_dup exec_when () integer_yankdup boolean_pop) (in1 integer_lt) boolean_and integer_yank boolean_swap) (boolean_dup integer_stackdepth integer_max integer_lte integer_gte integer_mod) exec_flush exec_shove (boolean_yank) integer_sub integer_pop boolean_eq boolean_frominteger integer_div exec_dup () boolean_empty boolean_flush boolean_not integer_eq boolean_frominteger tagged_371 print_newline in2 exec_swap (exec_do*count (exec_yank) integer_inc boolean_empty integer_flush exec_s (integer_dup boolean_yankdup) (boolean_xor integer_dec exec_y (integer_yankdup boolean_flush exec_y_when_autoconstructing () boolean_yankdup) integer_yankdup) (integer_gte integer_yankdup exec_y_when_autoconstructing ())) ())
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 81
Size: 104
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 7.081
Median total errors in population: 8
Error averages by case: (0.806 0.806 0.806 0.631 0.806 0.161 0.806 0.921 0.805 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.559
Average program size in population (points): 69.7
Average percent parens in population: 0.253
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.522
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 857107
--- Timings ---
Current time: 1559314327683 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.4 seconds, 42.9%
Fitness Testing:      2.2 seconds, 39.3%
Report:               0.9 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max) () (integer_min) tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max) () (integer_min) tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (466 205 93 93 93 466 465 466 177 466)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (466 205 93 93 93 466 465 466 177 466)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -4 boolean_xor boolean_pop integer_max) () (integer_min) tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.01
Median total errors in population: 6
Error averages by case: (0.534 0.795 0.907 0.907 0.907 0.534 0.535 0.534 0.823 0.534)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.882
Average program size in population (points): 65.881
Average percent parens in population: 0.238
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0185
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1180733
--- Timings ---
Current time: 1559314330467 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 53.4%
Fitness Testing:      2.7 seconds, 31.1%
Report:               1.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_y_when_autoconstructing (exec_yank in2 print_integer boolean_not boolean_dup boolean_xor) exec_flush boolean_shove exec_k_when_autoconstructing (boolean_yank print_newline) (boolean_shove) integer_add boolean_swap in4 exec_dup (print_boolean) integer_gt exec_pop (boolean_rot) integer_pop integer_pop boolean_pop print_exec (integer_yank boolean_and exec_k_when_autoconstructing (exec_stackdepth exec_s_when_autoconstructing (print_newline exec_yankdup boolean_yank) (exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (boolean_yankdup) exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing (exec_y (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (boolean_yankdup exec_eq print_boolean integer_inc) exec_flush integer_dup_times integer_max boolean_or) ()))
Lexicase best errors: [0 1 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 76
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_y_when_autoconstructing (exec_yank in2 print_integer boolean_not boolean_dup boolean_xor) exec_flush boolean_shove exec_k_when_autoconstructing (boolean_yank print_newline) (boolean_shove) integer_add boolean_swap in4 exec_dup (print_boolean) integer_gt exec_pop (boolean_rot) integer_pop integer_pop boolean_pop print_exec (integer_yank boolean_and exec_k_when_autoconstructing (exec_stackdepth exec_s_when_autoconstructing (print_newline exec_yankdup boolean_yank) (exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (boolean_yankdup) exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing (exec_y (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (boolean_yankdup exec_eq print_boolean integer_inc) exec_flush integer_dup_times integer_max boolean_or) ()))
Zero cases best errors: [0 1 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 76
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (378 90 393 393 1 378 378 1 393 1)
Population mean number of elite cases: 2.41
Count of perfect (error zero) individuals by case: (378 90 393 393 1 378 378 1 393 1)
Population mean number of perfect (error zero) cases: 2.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tagged_339} {:close 0, :instruction exec_while} {:close 1, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction 83} {:close 1, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction -94} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank})
Best program: (print_integer boolean_flush exec_dup_times (integer_min) boolean_flush exec_stackdepth boolean_empty integer_stackdepth tagged_339 exec_while (exec_while () integer_swap) integer_eq integer_yankdup in2 integer_yank boolean_dup exec_k_when_autoconstructing () (exec_s_when_autoconstructing () (exec_noop boolean_swap boolean_pop print_integer) (exec_eq 83 in3) boolean_shove) -94 boolean_dup_items integer_gte boolean_dup_items boolean_yank)
Errors: [0 1 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.594
Median total errors in population: 7
Error averages by case: (0.622 0.91 0.607 0.607 0.999 0.622 0.622 0.999 0.607 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.436
Average program size in population (points): 62.944
Average percent parens in population: 0.244
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.50175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1449312
--- Timings ---
Current time: 1559314333141 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 59.3%
Fitness Testing:      3.0 seconds, 26.7%
Report:               1.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_do*range (in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max) integer_min tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Lexicase best errors: [1 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_do*range (in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max) integer_min tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Zero cases best errors: [1 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 280 268 268 268 279 76 549 544 276)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (281 280 268 268 268 279 76 549 544 276)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items})
Best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup integer_empty) (boolean_eq print_newline exec_do*times (boolean_rot boolean_swap exec_if (integer_div integer_dup_items) (integer_max boolean_flush integer_min integer_sub integer_lt exec_dup_times (boolean_or exec_k_when_autoconstructing (boolean_shove) (integer_mult) exec_yank integer_sub) exec_do*while (boolean_dup_items integer_dec exec_swap () (integer_rot integer_eq integer_dup_items in3 integer_sub integer_div) integer_fromboolean) exec_dup (integer_div boolean_dup_times boolean_xor exec_dup_times (integer_yankdup) exec_eq exec_shove (integer_min) exec_do*range (boolean_flush) boolean_or) integer_lt exec_dup_items integer_div exec_dup (boolean_pop) integer_stackdepth integer_yankdup exec_if (exec_y_when_autoconstructing (integer_dup_items integer_dup boolean_dup_items integer_yankdup)) (print_integer boolean_eq integer_lt boolean_empty exec_do*times (exec_shove (integer_rot) integer_eq integer_empty boolean_invert_first_then_and integer_rot boolean_pop boolean_empty boolean_frominteger integer_mod in4) exec_y (exec_shove (integer_lte integer_inc integer_yankdup boolean_dup_times exec_dup_items integer_sub) integer_eq in4 boolean_dup_items)))))))
Errors: [1 1 0 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 103
Size: 130
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.911
Median total errors in population: 6
Error averages by case: (0.719 0.72 0.732 0.732 0.732 0.721 0.924 0.451 0.456 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.464
Average program size in population (points): 48.079
Average percent parens in population: 0.239
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 6.146375
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1691394
--- Timings ---
Current time: 1559314335504 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 62.4%
Fitness Testing:      3.3 seconds, 24.0%
Report:               1.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction tag_boolean_38} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_153} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult exec_yank) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (tag_boolean_38 integer_dup exec_dup_times () boolean_eq print_newline exec_do*times (boolean_rot boolean_swap exec_do*range (boolean_swap boolean_invert_second_then_and integer_dup) integer_swap print_exec (boolean_dup_items boolean_dup exec_do*times (boolean_pop boolean_dup_items) exec_pop (boolean_stackdepth in3 integer_lt exec_when (boolean_shove)) print_boolean integer_max boolean_xor integer_lt integer_max integer_min integer_dup_items boolean_pop boolean_not exec_yank exec_dup_items exec_yankdup exec_pop () in1 integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (boolean_yankdup exec_eq) print_boolean integer_inc) (exec_flush integer_dup_times exec_dup_items boolean_or integer_min) in4 boolean_stackdepth integer_flush exec_when (exec_yankdup exec_do*count (exec_s (exec_swap (boolean_invert_second_then_and exec_while () exec_k (exec_rot (integer_yankdup exec_yank) (boolean_yankdup boolean_flush exec_dup (boolean_dup_items exec_k_when_autoconstructing () (tag_boolean_153 integer_rot) boolean_shove integer_dup boolean_yankdup boolean_dup) boolean_dup_times integer_yankdup in1 exec_s (boolean_eq integer_mod boolean_empty) (exec_do*count (integer_gt) integer_rot exec_noop exec_y_when_autoconstructing (integer_lt exec_when () exec_y_when_autoconstructing () integer_inc boolean_dup_items)) ()) ()) ()) ()) () ())))) ()))
Lexicase best errors: [1 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 152
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction tag_boolean_38} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_153} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult exec_yank) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (tag_boolean_38 integer_dup exec_dup_times () boolean_eq print_newline exec_do*times (boolean_rot boolean_swap exec_do*range (boolean_swap boolean_invert_second_then_and integer_dup) integer_swap print_exec (boolean_dup_items boolean_dup exec_do*times (boolean_pop boolean_dup_items) exec_pop (boolean_stackdepth in3 integer_lt exec_when (boolean_shove)) print_boolean integer_max boolean_xor integer_lt integer_max integer_min integer_dup_items boolean_pop boolean_not exec_yank exec_dup_items exec_yankdup exec_pop () in1 integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (boolean_yankdup exec_eq) print_boolean integer_inc) (exec_flush integer_dup_times exec_dup_items boolean_or integer_min) in4 boolean_stackdepth integer_flush exec_when (exec_yankdup exec_do*count (exec_s (exec_swap (boolean_invert_second_then_and exec_while () exec_k (exec_rot (integer_yankdup exec_yank) (boolean_yankdup boolean_flush exec_dup (boolean_dup_items exec_k_when_autoconstructing () (tag_boolean_153 integer_rot) boolean_shove integer_dup boolean_yankdup boolean_dup) boolean_dup_times integer_yankdup in1 exec_s (boolean_eq integer_mod boolean_empty) (exec_do*count (integer_gt) integer_rot exec_noop exec_y_when_autoconstructing (integer_lt exec_when () exec_y_when_autoconstructing () integer_inc boolean_dup_items)) ()) ()) ()) ()) () ())))) ()))
Zero cases best errors: [1 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 152
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (64 395 64 395 509 312 709 395 395 314)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (64 395 64 395 509 312 709 395 395 314)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_153} {:close 1, :instruction integer_rot})
Best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times () boolean_eq print_newline exec_do*times (boolean_rot boolean_swap exec_do*range (boolean_swap boolean_invert_second_then_and integer_dup) integer_swap print_exec (boolean_dup_items boolean_dup integer_dec exec_s (boolean_dup_items) (integer_add boolean_stackdepth in3 integer_flush exec_when (boolean_shove)) (print_boolean integer_max boolean_xor integer_lt integer_max integer_min boolean_pop boolean_pop boolean_not exec_yank exec_dup_items print_exec (exec_pop () in1 exec_empty) integer_empty integer_dup_items integer_flush exec_when (exec_yankdup exec_do*count (exec_s (exec_swap (exec_k (exec_while () exec_k (in4 integer_yankdup exec_yank) (boolean_yankdup integer_yank exec_dup (boolean_dup_items exec_k_when_autoconstructing () (tag_boolean_153 integer_rot)))) ()) ()) () ())))))) ()))
Errors: [1 0 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 78
Size: 109
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.448
Median total errors in population: 7
Error averages by case: (0.936 0.605 0.936 0.605 0.491 0.688 0.291 0.605 0.605 0.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.215
Average program size in population (points): 49.052
Average percent parens in population: 0.240
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.5680625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1919279
--- Timings ---
Current time: 1559314338304 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 66.2%
Fitness Testing:      3.5 seconds, 21.5%
Report:               1.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_lt exec_s_when_autoconstructing (integer_lte boolean_rot boolean_swap integer_min integer_pop integer_eq integer_dup integer_empty exec_rot (integer_add) (exec_when () integer_dup_times exec_k_when_autoconstructing () (exec_do*while (integer_pop integer_max) boolean_or) in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and integer_eq boolean_invert_first_then_and boolean_yank integer_dec boolean_swap) boolean_invert_second_then_and boolean_dup exec_when () integer_yankdup boolean_pop) (in1 integer_lt)) () ())
Lexicase best errors: [1 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_lt exec_s_when_autoconstructing (integer_lte boolean_rot boolean_swap integer_min integer_pop integer_eq integer_dup integer_empty exec_rot (integer_add) (exec_when () integer_dup_times exec_k_when_autoconstructing () (exec_do*while (integer_pop integer_max) boolean_or) in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and integer_eq boolean_invert_first_then_and boolean_yank integer_dec boolean_swap) boolean_invert_second_then_and boolean_dup exec_when () integer_yankdup boolean_pop) (in1 integer_lt)) () ())
Zero cases best errors: [1 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 1000 214 1 513 513 173 513 513 214)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (214 0 214 1 513 513 173 513 513 214)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop -4 integer_gt exec_while () exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max) () (integer_min) tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove)) () ())
Errors: [1 1 1 1 0 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 7.132
Median total errors in population: 6
Error averages by case: (0.786 1.0 0.786 0.999 0.487 0.487 0.827 0.487 0.487 0.786)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.278
Average program size in population (points): 44.727
Average percent parens in population: 0.231
Minimum age in population: 6.5
Maximum age in population: 11.1875
Average age in population: 9.07746875
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2142842
--- Timings ---
Current time: 1559314340823 milliseconds
Total Time:          18.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.9 seconds, 68.3%
Fitness Testing:      3.8 seconds, 20.0%
Report:               2.1 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction -72} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction -77} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_lt exec_s_when_autoconstructing (exec_rot (boolean_rot boolean_swap boolean_rot -72 integer_yank boolean_dup_items exec_when (integer_add boolean_yank)) (boolean_rot integer_swap in4 exec_pop (integer_pop) integer_sub exec_pop () print_integer) () boolean_flush -77 integer_empty exec_swap (boolean_pop boolean_dup_times) () boolean_frominteger) () ())
Lexicase best errors: [0 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction -72} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction -77} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_lt exec_s_when_autoconstructing (exec_rot (boolean_rot boolean_swap boolean_rot -72 integer_yank boolean_dup_items exec_when (integer_add boolean_yank)) (boolean_rot integer_swap in4 exec_pop (integer_pop) integer_sub exec_pop () print_integer) () boolean_flush -77 integer_empty exec_swap (boolean_pop boolean_dup_times) () boolean_frominteger) () ())
Zero cases best errors: [0 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 1000 105 1000 100 394 1000 105 106 1000)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (105 0 105 0 100 394 0 105 106 0)
Population mean number of perfect (error zero) cases: 0.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_58} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt})
Best program: (integer_dup_items exec_when (integer_stackdepth print_boolean tag_boolean_58 exec_empty integer_yankdup in2 boolean_invert_second_then_and exec_shove () integer_fromboolean) in1 integer_div in4 print_integer exec_pop () in4 integer_eq boolean_dup integer_dup_times exec_do*count () boolean_dup_items integer_dup_items boolean_and integer_mod integer_gte integer_gt)
Errors: [0 1 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 32
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 9.085
Median total errors in population: 19/2
Error averages by case: (0.895 1.0 0.895 1.0 0.9 0.606 1.0 0.895 0.894 1.0)
Error minima by case: (0 1 0 1 0 0 1 0 0 1)
Average genome size in population (length): 31.636
Average program size in population (points): 41.355
Average percent parens in population: 0.230
Minimum age in population: 7.5
Maximum age in population: 12.484375
Average age in population: 10.5845
Median age in population: 10.6640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2342627
--- Timings ---
Current time: 1559314343225 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.8 seconds, 69.8%
Fitness Testing:      4.0 seconds, 18.9%
Report:               2.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Lexicase best program: (boolean_yank in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max integer_min tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Zero cases best program: (boolean_yank in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max integer_min tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 1000 768 156 156 1000 1000 924 2 155)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (156 0 768 156 156 0 0 924 2 155)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction -7} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_153} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_when})
Best program: (integer_gte in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (boolean_or -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times () boolean_eq print_newline exec_do*times (exec_do*times (boolean_swap exec_do*range (boolean_swap boolean_invert_second_then_and print_exec (boolean_dup_items boolean_dup integer_dec boolean_pop boolean_dup_items) integer_add boolean_swap in3 integer_lt exec_when (boolean_shove)) print_boolean integer_max boolean_xor integer_lt integer_max integer_min boolean_pop boolean_pop boolean_not integer_mod exec_dup_items print_exec (exec_pop () in1 exec_empty) -7 integer_dup_items integer_flush exec_when (exec_yankdup exec_do*count (exec_s (exec_swap (boolean_invert_second_then_and exec_while () exec_k (exec_rot (integer_yankdup exec_yank) (boolean_yankdup boolean_flush exec_dup (boolean_dup_items exec_k_when_autoconstructing () (tag_boolean_153 integer_rot) boolean_shove integer_dup integer_empty boolean_dup) boolean_dup_times integer_yankdup in1 exec_s (exec_do*while (integer_mod integer_swap) exec_do*count (integer_gt) integer_dup_times exec_noop exec_y_when_autoconstructing (integer_lt exec_when ())) () ()) ()) ()) ()) () ()))))) ()))
Errors: [0 1 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 94
Size: 131
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.683
Median total errors in population: 8
Error averages by case: (0.844 1.0 0.232 0.844 0.844 1.0 1.0 0.076 0.998 0.845)
Error minima by case: (0 1 0 0 0 1 1 0 0 0)
Average genome size in population (length): 23.029
Average program size in population (points): 29.066
Average percent parens in population: 0.207
Minimum age in population: 9.6875
Maximum age in population: 13.8984375
Average age in population: 12.1896484375
Median age in population: 12.296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2564254
--- Timings ---
Current time: 1559314345315 milliseconds
Total Time:          23.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.5 seconds, 70.4%
Fitness Testing:      4.3 seconds, 18.2%
Report:               2.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -3 integer_gt boolean_pop integer_max) () (exec_yank) tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -3 integer_gt boolean_pop integer_max) () (exec_yank) tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 626 626 626 626 626 626 1000 1000 1000)
Population mean number of elite cases: 7.76
Count of perfect (error zero) individuals by case: (0 626 626 626 626 626 626 0 0 0)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Best program: (exec_y_when_autoconstructing (-4 integer_gt exec_noop integer_max) integer_min tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Errors: [1 0 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 12
Size: 15
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.244
Median total errors in population: 4
Error averages by case: (1.0 0.374 0.374 0.374 0.374 0.374 0.374 1.0 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 27.488
Average program size in population (points): 35.543
Average percent parens in population: 0.223
Minimum age in population: 10.6875
Maximum age in population: 15.5625
Average age in population: 13.6183984375
Median age in population: 13.626953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2778937
--- Timings ---
Current time: 1559314347638 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 71.6%
Fitness Testing:      4.5 seconds, 17.5%
Report:               2.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction -85} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_empty integer_dup_times integer_pop boolean_swap -4 integer_gt boolean_pop integer_max integer_min -85 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction -85} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_empty integer_dup_times integer_pop boolean_swap -4 integer_gt boolean_pop integer_max integer_min -85 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 923 923 922 1000 923 1000 926 2)
Population mean number of elite cases: 8.62
Count of perfect (error zero) individuals by case: (0 0 923 923 922 0 923 0 926 2)
Population mean number of perfect (error zero) cases: 4.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank})
Best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_pop exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (in3) boolean_shove in2 boolean_dup_items integer_gte boolean_dup_items boolean_yank)
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 24
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 5.381
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.077 0.077 0.078 1.0 0.077 1.0 0.074 0.998)
Error minima by case: (1 1 0 0 0 1 0 1 0 0)
Average genome size in population (length): 29.421
Average program size in population (points): 37.984
Average percent parens in population: 0.221
Minimum age in population: 11.75
Maximum age in population: 17.115234375
Average age in population: 15.0627890625
Median age in population: 15.12109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2980417
--- Timings ---
Current time: 1559314349632 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.0 seconds, 72.2%
Fitness Testing:      4.8 seconds, 17.1%
Report:               2.9 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction tag_integer_706} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items integer_min integer_lte exec_when (integer_mult -20) boolean_yank exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup print_integer exec_pop () in4 integer_eq boolean_dup integer_dup_times exec_do*count () tag_integer_706 integer_dup_items boolean_and exec_dup_items integer_gte integer_gt) ()))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction tag_integer_706} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items integer_min integer_lte exec_when (integer_mult -20) boolean_yank exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup print_integer exec_pop () in4 integer_eq boolean_dup integer_dup_times exec_do*count () tag_integer_706 integer_dup_items boolean_and exec_dup_items integer_gte integer_gt) ()))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (739 158 739 1000 736 739 733 1 1 1000)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (739 158 739 0 736 739 733 1 1 0)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and})
Best program: (exec_k (integer_min integer_pop integer_eq integer_dup integer_empty exec_rot (integer_add) (exec_when () integer_dup_times exec_k_when_autoconstructing () (exec_do*while (integer_pop integer_max) boolean_or) in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and)) ()) ())
Errors: [0 1 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 34
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.154
Median total errors in population: 5
Error averages by case: (0.261 0.842 0.261 1.0 0.264 0.261 0.267 0.999 0.999 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 27.931
Average program size in population (points): 35.885
Average percent parens in population: 0.218
Minimum age in population: 13.984375
Maximum age in population: 18.548828125
Average age in population: 16.58959375
Median age in population: 16.64208984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3198967
--- Timings ---
Current time: 1559314351511 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.5 seconds, 72.5%
Fitness Testing:      5.0 seconds, 16.8%
Report:               3.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap})
Lexicase best program: (integer_fromboolean integer_empty integer_gt integer_flush boolean_xor boolean_invert_second_then_and in4 integer_add exec_s (exec_empty boolean_or) (integer_dup_times exec_k_when_autoconstructing () (exec_do*while (boolean_invert_first_then_and integer_max) boolean_or) in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and boolean_and boolean_invert_first_then_and) boolean_yank integer_dec boolean_swap) ())
Lexicase best errors: [0 1 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap})
Zero cases best program: (integer_fromboolean integer_empty integer_gt integer_flush boolean_xor boolean_invert_second_then_and in4 integer_add exec_s (exec_empty boolean_or) (integer_dup_times exec_k_when_autoconstructing () (exec_do*while (boolean_invert_first_then_and integer_max) boolean_or) in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and boolean_and boolean_invert_first_then_and) boolean_yank integer_dec boolean_swap) ())
Zero cases best errors: [0 1 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 583 1000 1000 1 219 110 219 579 111)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (110 583 0 0 1 219 110 219 579 111)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap})
Best program: (integer_fromboolean integer_empty integer_gt integer_flush boolean_xor boolean_invert_second_then_and in4 integer_add exec_s (exec_empty boolean_or) (integer_dup_times exec_k_when_autoconstructing () (exec_do*while (integer_max integer_max) boolean_or) in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and boolean_and boolean_invert_first_then_and boolean_yank integer_dec boolean_swap)) ())
Errors: [0 1 1 1 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 8.068
Median total errors in population: 8
Error averages by case: (0.89 0.417 1.0 1.0 0.999 0.781 0.89 0.781 0.421 0.889)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 22.473
Average program size in population (points): 29.056
Average percent parens in population: 0.231
Minimum age in population: 15.4609375
Maximum age in population: 19.86279296875
Average age in population: 18.2692900390625
Median age in population: 18.27734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3537397
--- Timings ---
Current time: 1559314353608 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 72.7%
Fitness Testing:      5.3 seconds, 16.8%
Report:               3.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times (boolean_eq print_newline exec_do*times (boolean_rot boolean_swap))) ()))
Lexicase best errors: [0 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times (boolean_eq print_newline exec_do*times (boolean_rot boolean_swap))) ()))
Zero cases best errors: [0 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 236 237 2 318 225 237 225 1000 783)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (237 236 237 2 318 225 237 225 0 783)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Best program: (exec_s_when_autoconstructing (in1 integer_yankdup integer_pop boolean_swap -4 exec_eq boolean_pop integer_max) () (integer_min) tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Errors: [0 0 0 1 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.5
Median total errors in population: 8
Error averages by case: (0.763 0.764 0.763 0.998 0.682 0.775 0.763 0.775 1.0 0.217)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 23.921
Average program size in population (points): 31.479
Average percent parens in population: 0.240
Minimum age in population: 16.4609375
Maximum age in population: 21.47705078125
Average age in population: 19.850677734375
Median age in population: 19.9862060546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3877929
--- Timings ---
Current time: 1559314355897 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.8 seconds, 72.9%
Fitness Testing:      5.7 seconds, 16.6%
Report:               3.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times (boolean_eq)) ()))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth integer_dup exec_dup_times (boolean_eq)) ()))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 470 477 477 1000 471 470 948 470 1000)
Population mean number of elite cases: 5.78
Count of perfect (error zero) individuals by case: (1 470 477 477 0 471 470 948 470 0)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap})
Best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items integer_gt print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times exec_k_when_autoconstructing () (exec_s_when_autoconstructing () (exec_while (boolean_swap)) ())))
Errors: [1 0 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.216
Median total errors in population: 7
Error averages by case: (0.999 0.53 0.523 0.523 1.0 0.529 0.53 0.052 0.53 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 15.617
Average program size in population (points): 20.208
Average percent parens in population: 0.227
Minimum age in population: 18.671875
Maximum age in population: 23.1431884765625
Average age in population: 21.59761669921875
Median age in population: 21.67327880859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 228
Genome diversity (% unique genomes):	 0.362
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.342
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4015935
--- Timings ---
Current time: 1559314358427 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.1 seconds, 73.9%
Fitness Testing:      5.8 seconds, 15.9%
Report:               3.6 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt print_integer boolean_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt print_integer boolean_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (492 492 292 937 492 153 492 153 784 492)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (492 492 292 937 492 153 492 153 784 492)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times (exec_rot (integer_add) (exec_when () integer_dup_times) (exec_k_when_autoconstructing () (exec_do*while (integer_pop integer_max) boolean_or in1 boolean_and integer_shove integer_sub print_integer print_boolean exec_while (boolean_and integer_eq boolean_invert_first_then_and boolean_yank integer_dec boolean_swap boolean_invert_second_then_and boolean_dup exec_when (integer_yankdup boolean_pop) in1 integer_lt boolean_and boolean_invert_first_then_and)))))
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.221
Median total errors in population: 7
Error averages by case: (0.508 0.508 0.708 0.063 0.508 0.847 0.508 0.847 0.216 0.508)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.225
Average program size in population (points): 20.987
Average percent parens in population: 0.222
Minimum age in population: 20.06884765625
Maximum age in population: 24.84326171875
Average age in population: 22.97318701171875
Median age in population: 23.03756713867188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.391
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4156840
--- Timings ---
Current time: 1559314360398 milliseconds
Total Time:          38.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.7 seconds, 74.5%
Fitness Testing:      6.0 seconds, 15.5%
Report:               3.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt integer_dup_items print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean boolean_dup_times exec_when (integer_mult -20) boolean_yankdup) boolean_xor boolean_dup_times)
Lexicase best errors: [1 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.097
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt integer_dup_items print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean boolean_dup_times exec_when (integer_mult -20) boolean_yankdup) boolean_xor boolean_dup_times)
Zero cases best errors: [1 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.097
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 329 1 599 930 598 106 106 820 600)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (106 329 1 599 930 598 106 106 820 600)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup})
Best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup))
Errors: [1 1 1 0 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 19
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 5.805
Median total errors in population: 5
Error averages by case: (0.894 0.671 0.999 0.401 0.07 0.402 0.894 0.894 0.18 0.4)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.5
Average program size in population (points): 22.583
Average percent parens in population: 0.216
Minimum age in population: 21.504638671875
Maximum age in population: 26.2265625
Average age in population: 24.38006350708008
Median age in population: 24.45391845703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4303588
--- Timings ---
Current time: 1559314362475 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 75.0%
Fitness Testing:      6.2 seconds, 15.2%
Report:               3.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in2 print_integer tag_boolean_967 exec_do*count (print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times)))
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in2 print_integer tag_boolean_967 exec_do*count (print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times)))
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 372 98 418 372 62 417 417 98 372)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (372 372 98 418 372 62 417 417 98 372)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (in2 print_integer tag_boolean_967 exec_do*count (print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times)))
Errors: [0 0 1 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.002
Median total errors in population: 7
Error averages by case: (0.628 0.628 0.902 0.582 0.628 0.938 0.583 0.583 0.902 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.211
Average program size in population (points): 18.419
Average percent parens in population: 0.223
Minimum age in population: 23.6285400390625
Maximum age in population: 28.02107238769531
Average age in population: 26.0413616027832
Median age in population: 26.10736846923828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.398
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4426696
--- Timings ---
Current time: 1559314364659 milliseconds
Total Time:          42.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 75.6%
Fitness Testing:      6.3 seconds, 14.8%
Report:               4.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Lexicase best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max) () (integer_min) tag_boolean_967 in1 print_integer)
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction -4} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Zero cases best program: (exec_s_when_autoconstructing (in1 integer_add integer_pop boolean_swap -4 integer_gt boolean_pop integer_max) () (integer_min) tag_boolean_967 in1 print_integer)
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 947 389 98 392 269 392 269 269 389)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (269 947 389 98 392 269 392 269 269 389)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (in2 integer_lte tag_boolean_967 integer_eq print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times))
Errors: [1 0 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 8
Size: 10
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.317
Median total errors in population: 5
Error averages by case: (0.731 0.053 0.611 0.902 0.608 0.731 0.608 0.731 0.731 0.611)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.233
Average program size in population (points): 15.802
Average percent parens in population: 0.221
Minimum age in population: 24.641357421875
Maximum age in population: 29.37127685546875
Average age in population: 27.53012146759033
Median age in population: 27.60351943969727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.349
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.325
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4540158
--- Timings ---
Current time: 1559314367224 milliseconds
Total Time:          45.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 76.3%
Fitness Testing:      6.5 seconds, 14.3%
Report:               4.2 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in2 integer_lte tag_boolean_967 integer_mult print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times))
Lexicase best errors: [1 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 10
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in2 integer_lte tag_boolean_967 integer_mult print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times))
Zero cases best errors: [1 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 10
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 429 1 430 400 1 399 1 429 941)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (110 429 1 430 400 1 399 1 429 941)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (in2 integer_lte tag_boolean_967 integer_eq print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times))
Errors: [1 0 1 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 8
Size: 10
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.859
Median total errors in population: 7
Error averages by case: (0.89 0.571 0.999 0.57 0.6 0.999 0.601 0.999 0.571 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.008
Average program size in population (points): 18.16
Average percent parens in population: 0.224
Minimum age in population: 25.641357421875
Maximum age in population: 30.89328384399414
Average age in population: 29.02769676971436
Median age in population: 29.08773231506348
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.391
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4668289
--- Timings ---
Current time: 1559314369692 milliseconds
Total Time:          47.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.9 seconds, 76.9%
Fitness Testing:      6.7 seconds, 13.9%
Report:               4.3 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 60                 
Correct output: 17                  | Program output: 56                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 60                 
Correct output: 7                   | Program output: 15                 
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 33                 
Correct output: 19                  | Program output: 98                 
Correct output: 2                   | Program output: 6                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 42                 
Correct output: 32                  | Program output: 58                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 69                 
Correct output: 54                  | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: 29                 
Correct output: -77                 | Program output: -55                
Correct output: -63                 | Program output: 42                 
Correct output: -14                 | Program output: 82                 
Correct output: -63                 | Program output: -10                
Correct output: -37                 | Program output: 63                 
Correct output: -96                 | Program output: -40                
Correct output: -23                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: 17                 
Correct output: -91                 | Program output: 60                 
Correct output: -26                 | Program output: 38                 
Correct output: -65                 | Program output: -54                
Correct output: -4                  | Program output: 72                 
Correct output: -73                 | Program output: -64                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: 49                 
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: 18                 
Correct output: -42                 | Program output: 81                 
Correct output: -88                 | Program output: -16                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 52                 
Correct output: -94                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 48                 
Correct output: -79                 | Program output: 30                 
Correct output: -85                 | Program output: 13                 
Correct output: -89                 | Program output: 1                  
Correct output: -41                 | Program output: 90                 
Correct output: -25                 | Program output: -1                 
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: 22                 
Correct output: -92                 | Program output: -53                
Correct output: -94                 | Program output: 97                 
Correct output: -100                | Program output: 46                 
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: 87                 
Correct output: -97                 | Program output: -3                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: 23                 
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: 18                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: 49                 
Correct output: -65                 | Program output: -31                
Correct output: -25                 | Program output: 27                 
Correct output: -88                 | Program output: 91                 
Correct output: -47                 | Program output: -9                 
Correct output: -95                 | Program output: -30                
Correct output: -16                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 13                 
Correct output: -70                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in3 integer_lte tag_boolean_967 integer_eq print_integer exec_yankdup integer_lte boolean_dup_times)
Lexicase best errors: [0 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 9
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in3 integer_lte tag_boolean_967 integer_eq print_integer exec_yankdup integer_lte boolean_dup_times)
Zero cases best errors: [0 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 9
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 626 222 92 92 92 322 92 322 312)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (948 626 222 92 92 92 322 92 322 312)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times})
Best program: (in3 integer_lte tag_boolean_967 integer_eq print_integer exec_yankdup exec_y_when_autoconstructing (boolean_dup_times))
Errors: [0 0 1 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 8
Size: 10
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 7
Error averages by case: (0.052 0.374 0.778 0.908 0.908 0.908 0.678 0.908 0.678 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.064
Average program size in population (points): 14.223
Average percent parens in population: 0.218
Minimum age in population: 27.48434448242188
Maximum age in population: 32.47293663024902
Average age in population: 30.84378516578674
Median age in population: 30.91968154907227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 285
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 291
Syntactic diversity (% unique Push programs):	 0.303
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 4778193
--- Timings ---
Current time: 1559314372051 milliseconds
Total Time:          50.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.0 seconds, 77.5%
Fitness Testing:      6.8 seconds, 13.6%
Report:               4.4 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_boolean integer_dup boolean_dup_items tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Lexicase best errors: [0 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_boolean integer_dup boolean_dup_items tag_boolean_967 in1 print_integer exec_yankdup exec_y_when_autoconstructing (boolean_shove))
Zero cases best errors: [0 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 228 115 945 115 115 115 119 119 227)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (115 228 115 945 115 115 115 119 119 227)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 2, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap})
Best program: (print_boolean in1 boolean_flush integer_gte print_integer integer_dup_items exec_dup_items print_boolean exec_dup_items print_boolean exec_dup_times (exec_when (integer_mult -20) boolean_yankdup) exec_while (exec_s_when_autoconstructing (boolean_yankdup integer_gt boolean_stackdepth integer_dup exec_dup_times () boolean_eq) (print_newline exec_do*times () integer_lt -20) () boolean_yankdup exec_swap (boolean_dup_times boolean_yankdup exec_s () (boolean_stackdepth in4 exec_dup_times ()) (boolean_eq print_newline exec_do*times (boolean_rot boolean_swap))) ()))
Errors: [0 1 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.787
Median total errors in population: 9
Error averages by case: (0.885 0.772 0.885 0.055 0.885 0.885 0.885 0.881 0.881 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.877
Average program size in population (points): 12.61
Average percent parens in population: 0.211
Minimum age in population: 28.96567153930664
Maximum age in population: 34.00382137298584
Average age in population: 32.22778467559814
Median age in population: 32.30443382263184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 296
Genome diversity (% unique genomes):	 0.273
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 324
Syntactic diversity (% unique Push programs):	 0.251
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 4874656
--- Timings ---
Current time: 1559314374500 milliseconds
Total Time:          52.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.1 seconds, 78.1%
Fitness Testing:      7.0 seconds, 13.2%
Report:               4.5 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_boolean} {:close 2, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (print_boolean in1 boolean_flush integer_lt print_integer boolean_dup_items exec_dup_items print_boolean in1 exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times))
Lexicase best errors: [1 0 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_boolean} {:close 2, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (print_boolean in1 boolean_flush integer_lt print_integer boolean_dup_items exec_dup_items print_boolean in1 exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times))
Zero cases best errors: [1 0 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 519 1 1 519 208 519 208 519 1)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (208 519 1 1 519 208 519 208 519 1)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (print_boolean in1 boolean_flush integer_lt print_integer integer_dup_items exec_dup_items print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s () (integer_mult integer_dup exec_dup_times () exec_y (boolean_flush exec_do*times (boolean_rot boolean_swap exec_do*range (boolean_swap boolean_invert_second_then_and)))) ()))
Errors: [1 0 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.297
Median total errors in population: 6
Error averages by case: (0.792 0.481 0.999 0.999 0.481 0.792 0.481 0.792 0.481 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.068
Average program size in population (points): 19.518
Average percent parens in population: 0.220
Minimum age in population: 30.88311767578125
Maximum age in population: 35.62403535842896
Average age in population: 33.70036730766296
Median age in population: 33.7653181552887
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.345
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.321
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5017522
--- Timings ---
Current time: 1559314376929 milliseconds
Total Time:          55.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 78.5%
Fitness Testing:      7.1 seconds, 13.0%
Report:               4.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 60                 
Correct output: 17                  | Program output: 56                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 60                 
Correct output: 7                   | Program output: 15                 
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 33                 
Correct output: 19                  | Program output: 98                 
Correct output: 2                   | Program output: 6                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 42                 
Correct output: 32                  | Program output: 58                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 69                 
Correct output: 54                  | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: 29                 
Correct output: -77                 | Program output: -55                
Correct output: -63                 | Program output: 42                 
Correct output: -14                 | Program output: 82                 
Correct output: -63                 | Program output: -10                
Correct output: -37                 | Program output: 63                 
Correct output: -96                 | Program output: -40                
Correct output: -23                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: 17                 
Correct output: -91                 | Program output: 60                 
Correct output: -26                 | Program output: 38                 
Correct output: -65                 | Program output: -54                
Correct output: -4                  | Program output: 72                 
Correct output: -73                 | Program output: -64                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: 49                 
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: 18                 
Correct output: -42                 | Program output: 81                 
Correct output: -88                 | Program output: -16                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 52                 
Correct output: -94                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 48                 
Correct output: -79                 | Program output: 30                 
Correct output: -85                 | Program output: 13                 
Correct output: -89                 | Program output: 1                  
Correct output: -41                 | Program output: 90                 
Correct output: -25                 | Program output: -1                 
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: 22                 
Correct output: -92                 | Program output: -53                
Correct output: -94                 | Program output: 97                 
Correct output: -100                | Program output: 46                 
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: 87                 
Correct output: -97                 | Program output: -3                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: 23                 
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: 18                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: 49                 
Correct output: -65                 | Program output: -31                
Correct output: -25                 | Program output: 27                 
Correct output: -88                 | Program output: 91                 
Correct output: -47                 | Program output: -9                 
Correct output: -95                 | Program output: -30                
Correct output: -16                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 13                 
Correct output: -70                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in3 print_integer tag_boolean_967 exec_do*count (print_integer exec_yankdup integer_min boolean_dup_times))
Lexicase best errors: [1 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 10
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in3 print_integer tag_boolean_967 exec_do*count (print_integer exec_yankdup integer_min boolean_dup_times))
Zero cases best errors: [1 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 10
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 366 1000 1000 369 292 1000 951 292 292)
Population mean number of elite cases: 6.56
Count of perfect (error zero) individuals by case: (0 366 0 0 369 292 0 951 292 292)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_967} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times})
Best program: (in3 print_integer tag_boolean_967 exec_do*count (print_integer exec_yankdup integer_min boolean_dup_times))
Errors: [1 1 1 1 1 0 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 8
Size: 10
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.438
Median total errors in population: 7
Error averages by case: (1.0 0.634 1.0 1.0 0.631 0.708 1.0 0.049 0.708 0.708)
Error minima by case: (1 0 1 1 0 0 1 0 0 0)
Average genome size in population (length): 12.943
Average program size in population (points): 16.648
Average percent parens in population: 0.212
Minimum age in population: 31.88311767578125
Maximum age in population: 37.08087348937988
Average age in population: 35.35330572199821
Median age in population: 35.36580288410187
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 271
Genome diversity (% unique genomes):	 0.314
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.293
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 5142017
--- Timings ---
Current time: 1559314378967 milliseconds
Total Time:          57.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.0 seconds, 78.8%
Fitness Testing:      7.3 seconds, 12.8%
Report:               4.7 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 387 572 572 1 1000 1000 385 1)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (1 1 387 572 572 1 0 0 385 1)
Population mean number of perfect (error zero) cases: 1.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ()))
Errors: [0 0 1 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 57
Size: 76
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.08
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.613 0.428 0.428 0.999 1.0 1.0 0.615 0.999)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 12.848
Average program size in population (points): 16.504
Average percent parens in population: 0.212
Minimum age in population: 32.88311767578125
Maximum age in population: 38.35576033592224
Average age in population: 36.89614508593082
Median age in population: 37.0395787358284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 476
Genome diversity (% unique genomes):	 0.303
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 488
Syntactic diversity (% unique Push programs):	 0.285
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 5268360
--- Timings ---
Current time: 1559314381827 milliseconds
Total Time:          59.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.3 seconds, 79.2%
Fitness Testing:      7.5 seconds, 12.5%
Report:               4.9 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (integer_dup print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (integer_dup print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (496 742 496 1000 470 496 496 969 249 1000)
Population mean number of elite cases: 6.41
Count of perfect (error zero) individuals by case: (496 742 496 0 470 496 496 969 249 0)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_empty integer_min in4 boolean_stackdepth boolean_shove in2))) ()))
Errors: [0 0 0 1 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 57
Size: 76
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.586
Median total errors in population: 6
Error averages by case: (0.504 0.258 0.504 1.0 0.53 0.504 0.504 0.031 0.751 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 33.828
Average program size in population (points): 44.877
Average percent parens in population: 0.232
Minimum age in population: 34.1634521484375
Maximum age in population: 39.99974638223648
Average age in population: 38.0834109737277
Median age in population: 38.2540745139122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 5686194
--- Timings ---
Current time: 1559314384437 milliseconds
Total Time:          62.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.9 seconds, 78.5%
Fitness Testing:      8.0 seconds, 12.8%
Report:               5.3 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ())))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 80
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ())))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 80
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1000 1 1000 641 1 952 1000)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (1 1 1 0 1 0 641 1 952 0)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ())))
Errors: [0 0 0 1 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 8.402
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.999 1.0 0.999 1.0 0.359 0.999 0.048 1.0)
Error minima by case: (0 0 0 1 0 1 0 0 0 1)
Average genome size in population (length): 37.001
Average program size in population (points): 49.415
Average percent parens in population: 0.240
Minimum age in population: 37.68808889389038
Maximum age in population: 41.37593603134155
Average age in population: 39.49874947974086
Median age in population: 39.53830516338348
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 6178900
--- Timings ---
Current time: 1559314387347 milliseconds
Total Time:          65.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 77.8%
Fitness Testing:      8.6 seconds, 13.2%
Report:               5.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup boolean_xor boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (exec_s_when_autoconstructing () (exec_flush integer_dup_times) (integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_s_when_autoconstructing (integer_yankdup integer_dup_times integer_gte exec_k (exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ()) ()) () ())) ())
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 91
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup boolean_xor boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (exec_s_when_autoconstructing () (exec_flush integer_dup_times) (integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_s_when_autoconstructing (integer_yankdup integer_dup_times integer_gte exec_k (exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times print_exec (exec_k (exec_eq print_boolean integer_inc) (exec_flush integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2))) ()) ()) () ())) ())
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 91
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 164 164 1000 164 164 1000 867 164 1000)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (0 164 164 0 164 164 0 867 164 0)
Population mean number of perfect (error zero) cases: 1.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2})
Best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add) (integer_yank) (exec_flush integer_dup_times) in2) integer_gte integer_add integer_yank exec_flush integer_dup_times integer_fromboolean exec_y_when_autoconstructing () exec_do*while (integer_stackdepth) exec_k_when_autoconstructing (integer_yankdup integer_dup_times exec_k_when_autoconstructing (exec_k (integer_dup_times integer_max boolean_or integer_min in4 boolean_stackdepth boolean_shove in2) ()) ()) ())
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 59
Size: 79
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 8.313
Median total errors in population: 9
Error averages by case: (1.0 0.836 0.836 1.0 0.836 0.836 1.0 0.133 0.836 1.0)
Error minima by case: (1 0 0 1 0 0 1 0 0 1)
Average genome size in population (length): 57.461
Average program size in population (points): 77.803
Average percent parens in population: 0.262
Minimum age in population: 39.17688119411469
Maximum age in population: 42.72983680665493
Average age in population: 41.88434342640638
Median age in population: 41.59872704744339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 336
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 6871581
--- Timings ---
Current time: 1559314390490 milliseconds
Total Time:          68.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.5 seconds, 76.9%
Fitness Testing:      9.4 seconds, 13.8%
Report:               6.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Lexicase best errors: [0 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Zero cases best errors: [0 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 1 967 968 1 1000 1 1 1)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (1 0 1 967 968 1 0 1 1 1)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Errors: [0 1 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 8.059
Median total errors in population: 8
Error averages by case: (0.999 1.0 0.999 0.033 0.032 0.999 1.0 0.999 0.999 0.999)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 50.946
Average program size in population (points): 68.256
Average percent parens in population: 0.256
Minimum age in population: 40.17688119411469
Maximum age in population: 44.61901713162661
Average age in population: 42.65117132493854
Median age in population: 42.71307757496834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 7555691
--- Timings ---
Current time: 1559314394005 milliseconds
Total Time:          71.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 76.2%
Fitness Testing:     10.3 seconds, 14.3%
Report:               6.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (753 1000 753 753 1000 1000 155 753 749 753)
Population mean number of elite cases: 7.67
Count of perfect (error zero) individuals by case: (753 0 753 753 0 0 155 753 749 753)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 5.331
Median total errors in population: 4
Error averages by case: (0.247 1.0 0.247 0.247 1.0 1.0 0.845 0.247 0.251 0.247)
Error minima by case: (0 1 0 0 1 1 0 0 0 0)
Average genome size in population (length): 31.602
Average program size in population (points): 41.703
Average percent parens in population: 0.241
Minimum age in population: 41.78246974945068
Maximum age in population: 45.9796789586544
Average age in population: 44.88829495862871
Median age in population: 44.51875951886177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 523
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 530
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 8270862
--- Timings ---
Current time: 1559314396661 milliseconds
Total Time:          74.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 75.2%
Fitness Testing:     11.1 seconds, 14.9%
Report:               7.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Lexicase best errors: [0 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Zero cases best errors: [0 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (765 155 1 155 765 155 765 920 765 921)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (765 155 1 155 765 155 765 920 765 921)
Population mean number of perfect (error zero) cases: 5.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Errors: [0 1 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 4.633
Median total errors in population: 4
Error averages by case: (0.235 0.845 0.999 0.845 0.235 0.845 0.235 0.08 0.235 0.079)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.245
Average program size in population (points): 41.314
Average percent parens in population: 0.242
Minimum age in population: 43.11920475959778
Maximum age in population: 47.64197236485779
Average age in population: 46.35531315258145
Median age in population: 46.51875951886177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 359
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 368
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 8984043
--- Timings ---
Current time: 1559314399503 milliseconds
Total Time:          77.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 74.4%
Fitness Testing:     11.9 seconds, 15.4%
Report:               7.8 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20 boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup) ()) () ()))
Lexicase best errors: [0 0 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20 boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_stackdepth boolean_flush print_newline exec_yankdup) ()) () ()))
Zero cases best errors: [0 0 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 367 2 1 478 478 478 367 441 73)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (367 367 2 1 478 478 478 367 441 73)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times in2 print_integer integer_dup_items integer_dup_items print_boolean integer_lte exec_when (integer_mult -20) exec_while (integer_div in4 exec_s (boolean_stackdepth integer_dup exec_dup_times () boolean_eq integer_dup_items) (integer_yank boolean_rot boolean_swap integer_gt boolean_swap boolean_invert_second_then_and integer_dup) ()))
Errors: [0 0 1 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.948
Median total errors in population: 7
Error averages by case: (0.633 0.633 0.998 0.999 0.522 0.522 0.522 0.633 0.559 0.927)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.89
Average program size in population (points): 45.196
Average percent parens in population: 0.248
Minimum age in population: 44.11920475959778
Maximum age in population: 49.58036594185978
Average age in population: 47.92874110591318
Median age in population: 48.01875951886177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 9692693
--- Timings ---
Current time: 1559314402411 milliseconds
Total Time:          80.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 73.8%
Fitness Testing:     12.7 seconds, 15.8%
Report:               8.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in3 integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () exec_stackdepth) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte boolean_dup_times) in4))
Lexicase best errors: [0 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in3 integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () exec_stackdepth) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte boolean_dup_times) in4))
Zero cases best errors: [0 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 95 95 277 912 350 562 191 350 277)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (95 95 95 277 912 350 562 191 350 277)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4))
Errors: [0 0 0 1 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.796
Median total errors in population: 7
Error averages by case: (0.905 0.905 0.905 0.723 0.088 0.65 0.438 0.809 0.65 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.133
Average program size in population (points): 44.355
Average percent parens in population: 0.251
Minimum age in population: 46.54500009119511
Maximum age in population: 51.19742724392563
Average age in population: 49.59409177051065
Median age in population: 49.55123506300151
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10397656
--- Timings ---
Current time: 1559314405913 milliseconds
Total Time:          83.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.7 seconds, 73.7%
Fitness Testing:     13.6 seconds, 16.2%
Report:               8.4 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) integer_yank)
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 272 296 215 125 295 295 125 612 295)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (296 272 296 215 125 295 295 125 612 295)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult integer_eq boolean_yank exec_do*count () in1) boolean_eq in2) (integer_gte integer_add) integer_yank) ())
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 33
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.174
Median total errors in population: 8
Error averages by case: (0.704 0.728 0.704 0.785 0.875 0.705 0.705 0.875 0.388 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.536
Average program size in population (points): 45.147
Average percent parens in population: 0.256
Minimum age in population: 48.3546789586544
Maximum age in population: 52.90781424054876
Average age in population: 51.26729187104572
Median age in population: 51.33298326982185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11098395
--- Timings ---
Current time: 1559314409506 milliseconds
Total Time:          87.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.9 seconds, 73.2%
Fitness Testing:     14.4 seconds, 16.5%
Report:               8.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt exec_if () (exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt exec_if () (exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 137 903 94 475 94 475 94 94 475)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (137 137 903 94 475 94 475 94 94 475)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (in4 integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4))
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 7.022
Median total errors in population: 6
Error averages by case: (0.863 0.863 0.097 0.906 0.525 0.906 0.525 0.906 0.906 0.525)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.179
Average program size in population (points): 43.389
Average percent parens in population: 0.257
Minimum age in population: 49.45785081293434
Maximum age in population: 54.55299531039782
Average age in population: 52.71992107218283
Median age in population: 52.79635160189355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 11795613
--- Timings ---
Current time: 1559314413096 milliseconds
Total Time:          90.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 72.8%
Fitness Testing:     15.3 seconds, 16.8%
Report:               9.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)))
Lexicase best errors: [0 1 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)))
Zero cases best errors: [0 1 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (400 296 14 400 14 400 400 14 208 207)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (400 296 14 400 14 400 400 14 208 207)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction in4})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)
Errors: [0 1 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.647
Median total errors in population: 8
Error averages by case: (0.6 0.704 0.986 0.6 0.986 0.6 0.6 0.986 0.792 0.793)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.115
Average program size in population (points): 46.085
Average percent parens in population: 0.259
Minimum age in population: 50.45785081293434
Maximum age in population: 56.18507364857942
Average age in population: 54.19914590531972
Median age in population: 54.28819919459056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12513610
--- Timings ---
Current time: 1559314416804 milliseconds
Total Time:          94.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 72.4%
Fitness Testing:     16.2 seconds, 17.1%
Report:               9.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean exec_k (exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean exec_k (exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 380 912 380 718 380 82 380 194 82)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (380 380 912 380 718 380 82 380 194 82)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times integer_gt print_integer integer_dup_items exec_y () print_boolean boolean_dup_times boolean_yankdup exec_do*count (print_integer integer_dup_items exec_y () print_boolean integer_mod exec_when (integer_mult -20) boolean_yankdup) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 6.112
Median total errors in population: 8
Error averages by case: (0.62 0.62 0.088 0.62 0.282 0.62 0.918 0.62 0.806 0.918)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.618
Average program size in population (points): 44.388
Average percent parens in population: 0.265
Minimum age in population: 52.37412459868938
Maximum age in population: 57.92919805791462
Average age in population: 55.83526459426066
Median age in population: 55.94063366318005
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 13209111
--- Timings ---
Current time: 1559314420205 milliseconds
Total Time:          98.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.6 seconds, 72.0%
Fitness Testing:     17.0 seconds, 17.3%
Report:              10.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yank} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_boolean_120} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_shove () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank) exec_yank)) tag_boolean_120 integer_gte in2 integer_gte integer_add integer_yank)
Lexicase best errors: [1 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yank} {:close 2, :instruction exec_yank} {:close 1, :instruction tag_boolean_120} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_shove () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank) exec_yank)) tag_boolean_120 integer_gte in2 integer_gte integer_add integer_yank)
Zero cases best errors: [1 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 621 162 914 11 621 120 793 162 619)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (11 621 162 914 11 621 120 793 162 619)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte) integer_add) in4)
Errors: [1 0 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 5.966
Median total errors in population: 5
Error averages by case: (0.989 0.379 0.838 0.086 0.989 0.379 0.88 0.207 0.838 0.381)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.695
Average program size in population (points): 44.228
Average percent parens in population: 0.260
Minimum age in population: 53.37412459868938
Maximum age in population: 59.30745321069844
Average age in population: 57.22266360282223
Median age in population: 57.30634600057965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 13896039
--- Timings ---
Current time: 1559314424012 milliseconds
Total Time:         101.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.2 seconds, 71.8%
Fitness Testing:     17.8 seconds, 17.5%
Report:              10.8 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (exec_y_when_autoconstructing (exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (exec_y_when_autoconstructing (exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 185 924 401 184 106 401 230 401 401)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (230 185 924 401 184 106 401 230 401 401)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_dup () print_boolean integer_lte print_boolean integer_lte exec_when (integer_mult integer_eq boolean_yank exec_do*count () in1) boolean_eq in2) (integer_gte integer_add) integer_yank)
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 6.537
Median total errors in population: 7
Error averages by case: (0.77 0.815 0.076 0.599 0.816 0.894 0.599 0.77 0.599 0.599)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.683
Average program size in population (points): 45.922
Average percent parens in population: 0.265
Minimum age in population: 54.55172329768538
Maximum age in population: 60.57792366155627
Average age in population: 58.73343873341323
Median age in population: 58.79334411952732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 14575390
--- Timings ---
Current time: 1559314427038 milliseconds
Total Time:         105.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.2 seconds, 71.5%
Fitness Testing:     18.6 seconds, 17.7%
Report:              11.3 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_pop (integer_mult -20) exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) exec_do*count (in1) boolean_eq in2) (integer_gte integer_add) integer_yank)
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_pop (integer_mult -20) exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) exec_do*count (in1) boolean_eq in2) (integer_gte integer_add) integer_yank)
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 408 189 113 189 113 113 113 408 204)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (317 408 189 113 189 113 113 113 408 204)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (exec_dup_times () boolean_eq boolean_dup_times boolean_yankdup boolean_flush print_newline exec_yankdup) boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add integer_yank)
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.833
Median total errors in population: 8
Error averages by case: (0.683 0.592 0.811 0.887 0.811 0.887 0.887 0.887 0.592 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.459
Average program size in population (points): 45.618
Average percent parens in population: 0.266
Minimum age in population: 55.55172329768538
Maximum age in population: 62.19661825534786
Average age in population: 60.2638971095189
Median age in population: 60.34232248829903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 15250290
--- Timings ---
Current time: 1559314430547 milliseconds
Total Time:         108.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.4 seconds, 71.4%
Fitness Testing:     19.4 seconds, 17.9%
Report:              11.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) print_exec () exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte boolean_and integer_yank)
Lexicase best errors: [0 1 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) print_exec () exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte boolean_and integer_yank)
Zero cases best errors: [0 1 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 224 108 160 108 224 442 442 108 223)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (442 224 108 160 108 224 442 442 108 223)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 88} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction 85} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2})
Best program: (integer_shove integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean integer_lte print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (exec_dup_times (88 print_newline exec_dup (exec_do*count () boolean_yank exec_do*count () 85) in3 in2) integer_gte integer_add) in1) (boolean_eq in2))
Errors: [0 1 1 1 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.519
Median total errors in population: 7
Error averages by case: (0.558 0.776 0.892 0.84 0.892 0.776 0.558 0.558 0.892 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.241
Average program size in population (points): 43.679
Average percent parens in population: 0.261
Minimum age in population: 58.86860774352681
Maximum age in population: 63.82732005443722
Average age in population: 61.7872704029053
Median age in population: 61.85393292144272
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 15963558
--- Timings ---
Current time: 1559314434553 milliseconds
Total Time:         112.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.1 seconds, 71.2%
Fitness Testing:     20.3 seconds, 18.0%
Report:              12.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () integer_dup_items print_integer integer_dup_items exec_y (print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (boolean_dup_times exec_noop exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq exec_rot () (boolean_eq exec_do*while ()) ()))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () integer_dup_items print_integer integer_dup_items exec_y (print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (boolean_dup_times exec_noop exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq exec_rot () (boolean_eq exec_do*while ()) ()))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (310 310 284 81 310 284 609 244 284 310)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (310 310 284 81 310 284 609 244 284 310)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_boolean_807} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_rot exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_mult -20) (boolean_yankdup) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult tag_boolean_807) (boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4))
Errors: [0 0 1 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.974
Median total errors in population: 6
Error averages by case: (0.69 0.69 0.716 0.919 0.69 0.716 0.391 0.756 0.716 0.69)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.359
Average program size in population (points): 44.141
Average percent parens in population: 0.266
Minimum age in population: 59.86860774352681
Maximum age in population: 65.48703385767385
Average age in population: 63.31848800182177
Median age in population: 63.38410543516466
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 16657882
--- Timings ---
Current time: 1559314437833 milliseconds
Total Time:         115.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.1 seconds, 70.9%
Fitness Testing:     21.1 seconds, 18.2%
Report:              12.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 2, :instruction exec_pop} {:close 2, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction 85} {:close 0, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (exec_pop () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_mult -20) (boolean_yankdup) exec_while (exec_dup_times () boolean_eq print_newline exec_yankdup boolean_yank exec_do*count () 85) exec_pop (in2) integer_gte integer_add integer_yank exec_flush integer_dup_times integer_fromboolean)
Lexicase best errors: [1 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 2, :instruction exec_pop} {:close 2, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction 85} {:close 0, :instruction exec_pop} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (exec_pop () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_mult -20) (boolean_yankdup) exec_while (exec_dup_times () boolean_eq print_newline exec_yankdup boolean_yank exec_do*count () 85) exec_pop (in2) integer_gte integer_add integer_yank exec_flush integer_dup_times integer_fromboolean)
Zero cases best errors: [1 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 385 387 97 324 387 110 97 324 385)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (110 385 387 97 324 387 110 97 324 385)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (exec_do*times (exec_noop) boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_do*count (in1) boolean_eq in2 integer_gte boolean_yankdup) integer_yank)) ())
Errors: [1 0 0 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.394
Median total errors in population: 8
Error averages by case: (0.89 0.615 0.613 0.903 0.676 0.613 0.89 0.903 0.676 0.615)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.328
Average program size in population (points): 42.572
Average percent parens in population: 0.264
Minimum age in population: 60.86860774352681
Maximum age in population: 66.7745447187458
Average age in population: 64.78468303085805
Median age in population: 64.83210267830827
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 17357678
--- Timings ---
Current time: 1559314441620 milliseconds
Total Time:         119.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.6 seconds, 70.8%
Fitness Testing:     21.9 seconds, 18.3%
Report:              12.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup exec_while (boolean_dup_times)))))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup exec_while (boolean_dup_times)))))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (381 569 187 187 156 381 191 191 381 381)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (381 569 187 187 156 381 191 191 381 381)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction in1})
Best program: (exec_pop () in1 boolean_flush boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (boolean_dup_times boolean_yankdup exec_do*count (integer_mult -20) boolean_yankdup) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (in1))))
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 7
Error averages by case: (0.619 0.431 0.813 0.813 0.844 0.619 0.809 0.809 0.619 0.619)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.662
Average program size in population (points): 43.308
Average percent parens in population: 0.269
Minimum age in population: 61.86860774352681
Maximum age in population: 68.63449928258433
Average age in population: 66.28073056796143
Median age in population: 66.34063148832911
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 18040986
--- Timings ---
Current time: 1559314445085 milliseconds
Total Time:         122.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.7 seconds, 70.6%
Fitness Testing:     22.7 seconds, 18.5%
Report:              13.4 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items integer_sub print_boolean integer_lte exec_when (integer_mult boolean_flush in4 boolean_dup_times) boolean_frominteger print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_empty -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank boolean_swap) in1) boolean_eq in2 integer_gte integer_add integer_pop)
Lexicase best errors: [1 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items integer_sub print_boolean integer_lte exec_when (integer_mult boolean_flush in4 boolean_dup_times) boolean_frominteger print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_empty -20) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank boolean_swap) in1) boolean_eq in2 integer_gte integer_add integer_pop)
Zero cases best errors: [1 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (447 911 183 447 73 183 447 183 183 209)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (447 911 183 447 73 183 447 183 183 209)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times})
Best program: (integer_shove exec_y_when_autoconstructing (integer_lt) in2 print_integer integer_dup_items exec_y () boolean_dup_times)
Errors: [1 0 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.734
Median total errors in population: 6
Error averages by case: (0.553 0.089 0.817 0.553 0.927 0.817 0.553 0.817 0.817 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.119
Average program size in population (points): 42.67
Average percent parens in population: 0.271
Minimum age in population: 64.89443964209931
Maximum age in population: 69.84938218912521
Average age in population: 67.77665457741918
Median age in population: 67.83414790601637
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 18720596
--- Timings ---
Current time: 1559314448672 milliseconds
Total Time:         126.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.0 seconds, 70.4%
Fitness Testing:     23.5 seconds, 18.6%
Report:              13.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in3 exec_y_when_autoconstructing (boolean_dup_times) exec_swap (print_integer integer_dup_items exec_y (print_boolean integer_lte exec_when () integer_mult exec_do*range () boolean_yankdup exec_while (exec_dup_times () exec_stackdepth) exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) () boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1 boolean_eq in2) integer_gte boolean_dup_times) in4)))) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in3 exec_y_when_autoconstructing (boolean_dup_times) exec_swap (print_integer integer_dup_items exec_y (print_boolean integer_lte exec_when () integer_mult exec_do*range () boolean_yankdup exec_while (exec_dup_times () exec_stackdepth) exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) () boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1 boolean_eq in2) integer_gte boolean_dup_times) in4)))) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 924 87 424 924 320 93 87 498 317)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (93 924 87 424 924 320 93 87 498 317)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () exec_do*range (exec_when (exec_swap (integer_lt boolean_dup_times) (integer_max print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add integer_yank))) ())
Errors: [1 0 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.233
Median total errors in population: 7
Error averages by case: (0.907 0.076 0.913 0.576 0.076 0.68 0.907 0.913 0.502 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.136
Average program size in population (points): 41.002
Average percent parens in population: 0.265
Minimum age in population: 66.39525718779078
Maximum age in population: 71.21509130177225
Average age in population: 69.23659408216182
Median age in population: 69.30964128670561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 19417822
--- Timings ---
Current time: 1559314452058 milliseconds
Total Time:         129.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.1 seconds, 70.1%
Fitness Testing:     24.4 seconds, 18.8%
Report:              14.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap in1 boolean_flush boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_lt boolean_dup_times) (exec_swap (print_integer integer_mult -20) (boolean_yankdup) exec_while ())))))
Lexicase best errors: [1 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap in1 boolean_flush boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_lt boolean_dup_times) (exec_swap (print_integer integer_mult -20) (boolean_yankdup) exec_while ())))))
Zero cases best errors: [1 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 290 290 113 259 113 235 290 290 372)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (113 290 290 113 259 113 235 290 290 372)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Best program: (exec_pop () boolean_or boolean_flush in1 boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte in1) (boolean_eq in2) integer_gte integer_add integer_yank)
Errors: [0 1 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 17
Size: 22
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.635
Median total errors in population: 8
Error averages by case: (0.887 0.71 0.71 0.887 0.741 0.887 0.765 0.71 0.71 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.74
Average program size in population (points): 43.614
Average percent parens in population: 0.272
Minimum age in population: 67.39525718779078
Maximum age in population: 72.81396108857703
Average age in population: 70.67971477483809
Median age in population: 70.80187325193955
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 20090045
--- Timings ---
Current time: 1559314455555 milliseconds
Total Time:         133.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.3 seconds, 70.0%
Fitness Testing:     25.2 seconds, 18.9%
Report:              14.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup integer_mult exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4))
Lexicase best errors: [0 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup integer_mult exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4))
Zero cases best errors: [0 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 110 346 68 67 109 346 68 399 346)
Population mean number of elite cases: 1.93
Count of perfect (error zero) individuals by case: (68 110 346 68 67 109 346 68 399 346)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_boolean_757} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (boolean_dup_times) (in4 print_integer integer_dup_items exec_y () boolean_flush integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (exec_dup_times () tag_boolean_757 exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add) in4)
Errors: [0 1 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.073
Median total errors in population: 8
Error averages by case: (0.932 0.89 0.654 0.932 0.933 0.891 0.654 0.932 0.601 0.654)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.288
Average program size in population (points): 40.071
Average percent parens in population: 0.269
Minimum age in population: 68.89128203312066
Maximum age in population: 74.1894053888233
Average age in population: 72.23353026206202
Median age in population: 72.29096233052493
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 20772938
--- Timings ---
Current time: 1559314459231 milliseconds
Total Time:         137.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.7 seconds, 69.8%
Fitness Testing:     26.0 seconds, 18.9%
Report:              15.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_pop () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_yankdup integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add integer_yank)
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_pop () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_yankdup integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte integer_add integer_yank)
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 115 192 115 297 115 114 298 115 115)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (115 115 192 115 297 115 114 298 115 115)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times () integer_dup_times exec_k_when_autoconstructing (integer_swap integer_gt exec_dup (boolean_rot exec_do*count () in1) integer_swap in2) (exec_k_when_autoconstructing (integer_add in4) ()))))
Errors: [0 0 1 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 46
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 8.409
Median total errors in population: 9
Error averages by case: (0.885 0.885 0.808 0.885 0.703 0.885 0.886 0.702 0.885 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.099
Average program size in population (points): 41.215
Average percent parens in population: 0.268
Minimum age in population: 69.89128203312066
Maximum age in population: 75.8231052383102
Average age in population: 73.65621023824372
Median age in population: 73.72740163716558
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 21477096
--- Timings ---
Current time: 1559314462502 milliseconds
Total Time:         140.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.7 seconds, 69.6%
Fitness Testing:     26.8 seconds, 19.1%
Report:              15.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 60                 
Correct output: 17                  | Program output: 56                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 60                 
Correct output: 7                   | Program output: 15                 
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 33                 
Correct output: 19                  | Program output: 98                 
Correct output: 2                   | Program output: 6                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 42                 
Correct output: 32                  | Program output: 58                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 69                 
Correct output: 54                  | Program output: 76                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: 29                 
Correct output: -77                 | Program output: -55                
Correct output: -63                 | Program output: 42                 
Correct output: -14                 | Program output: 82                 
Correct output: -63                 | Program output: -10                
Correct output: -37                 | Program output: 63                 
Correct output: -96                 | Program output: -40                
Correct output: -23                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: 17                 
Correct output: -91                 | Program output: 60                 
Correct output: -26                 | Program output: 38                 
Correct output: -65                 | Program output: -54                
Correct output: -4                  | Program output: 72                 
Correct output: -73                 | Program output: -64                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: 49                 
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: 18                 
Correct output: -42                 | Program output: 81                 
Correct output: -88                 | Program output: -16                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 52                 
Correct output: -94                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 48                 
Correct output: -79                 | Program output: 30                 
Correct output: -85                 | Program output: 13                 
Correct output: -89                 | Program output: 1                  
Correct output: -41                 | Program output: 90                 
Correct output: -25                 | Program output: -1                 
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: 22                 
Correct output: -92                 | Program output: -53                
Correct output: -94                 | Program output: 97                 
Correct output: -100                | Program output: 46                 
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: 87                 
Correct output: -97                 | Program output: -3                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: 23                 
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: 18                 
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: 49                 
Correct output: -65                 | Program output: -31                
Correct output: -25                 | Program output: 27                 
Correct output: -88                 | Program output: 91                 
Correct output: -47                 | Program output: -9                 
Correct output: -95                 | Program output: -30                
Correct output: -16                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 13                 
Correct output: -70                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline})
Lexicase best program: (exec_pop () in3 integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup boolean_dup_times boolean_dup_times boolean_yankdup exec_do*count (print_newline))))))
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline})
Zero cases best program: (exec_pop () in3 integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (exec_while (exec_dup_times (boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup boolean_dup_times boolean_dup_times boolean_yankdup exec_do*count (print_newline))))))
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (603 921 603 922 6 95 696 95 216 95)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (603 921 603 922 6 95 696 95 216 95)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when})
Best program: (exec_pop () in3 integer_lt boolean_dup_times exec_swap (print_integer integer_lte exec_when (exec_k_when_autoconstructing (-20) (boolean_yankdup exec_while (exec_dup_times () boolean_eq exec_when ())))) ())
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 15
Size: 25
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 5.748
Median total errors in population: 5
Error averages by case: (0.397 0.079 0.397 0.078 0.994 0.905 0.304 0.905 0.784 0.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.466
Average program size in population (points): 39.224
Average percent parens in population: 0.274
Minimum age in population: 71.61953488787049
Maximum age in population: 77.37315501396344
Average age in population: 75.18313571708465
Median age in population: 75.24180178919681
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 22156629
--- Timings ---
Current time: 1559314465340 milliseconds
Total Time:         143.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.6 seconds, 69.4%
Fitness Testing:     27.5 seconds, 19.2%
Report:              16.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction -20} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in3 integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (-20) boolean_yankdup) () exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte boolean_yankdup in4)
Lexicase best errors: [1 1 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction -20} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in3 integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) exec_while (-20) boolean_yankdup) () exec_while (boolean_dup_times boolean_yankdup exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte boolean_yankdup in4)
Zero cases best errors: [1 1 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 297 297 126 396 396 396 126 90 126)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (297 297 297 126 396 396 396 126 90 126)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*count} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_yank})
Best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times in2 print_integer integer_dup_items exec_y ()) print_boolean print_integer exec_while (exec_y () print_boolean integer_lte exec_when (integer_mult -20)) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_swap (print_newline exec_yankdup boolean_yank exec_do*count (in1) boolean_eq exec_do*count () exec_stackdepth) () boolean_eq) in2 integer_yank)
Errors: [1 1 1 0 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.453
Median total errors in population: 7
Error averages by case: (0.703 0.703 0.703 0.874 0.604 0.604 0.604 0.874 0.91 0.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.901
Average program size in population (points): 40.175
Average percent parens in population: 0.282
Minimum age in population: 73.19510298291632
Maximum age in population: 78.59131645870639
Average age in population: 76.57213074341549
Median age in population: 76.64188805075749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 22857463
--- Timings ---
Current time: 1559314468485 milliseconds
Total Time:         146.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.5 seconds, 69.4%
Fitness Testing:     28.3 seconds, 19.4%
Report:              16.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_do*while () exec_y ())
Lexicase best errors: [1 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_do*while () exec_y ())
Zero cases best errors: [1 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 925 288 102 246 288 246 246 246 246)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (287 925 288 102 246 288 246 246 246 246)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count})
Best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times in2 print_integer integer_dup_items) exec_y () print_boolean print_integer exec_while (exec_y () print_boolean integer_lte exec_when (integer_mult -20)) boolean_yankdup exec_while (boolean_dup_times) boolean_yankdup exec_swap (print_newline exec_yankdup boolean_yank exec_do*count ()) ())
Errors: [1 0 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 6
Error averages by case: (0.713 0.075 0.712 0.898 0.754 0.712 0.754 0.754 0.754 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.59
Average program size in population (points): 39.494
Average percent parens in population: 0.277
Minimum age in population: 74.51296676777241
Maximum age in population: 80.05433630102848
Average age in population: 78.02112510881517
Median age in population: 78.10365487496468
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 23567183
--- Timings ---
Current time: 1559314472195 milliseconds
Total Time:         150.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.0 seconds, 69.3%
Fitness Testing:     29.1 seconds, 19.4%
Report:              16.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean print_integer exec_while (exec_y () integer_div integer_lte exec_when (integer_mult -20)) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_swap (print_newline exec_yankdup boolean_yank exec_do*count (in1) boolean_eq exec_do*count () exec_stackdepth) (boolean_eq in2) integer_yank))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () print_boolean print_integer exec_while (exec_y () integer_div integer_lte exec_when (integer_mult -20)) boolean_yankdup exec_while (boolean_dup_times boolean_yankdup exec_swap (print_newline exec_yankdup boolean_yank exec_do*count (in1) boolean_eq exec_do*count () exec_stackdepth) (boolean_eq in2) integer_yank))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 4 83 84 613 326 527 937 326 527)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (326 4 83 84 613 326 527 937 326 527)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction tag_boolean_807} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush in4 boolean_rot exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_mult -20) (boolean_yankdup) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult tag_boolean_807) (boolean_yankdup exec_while (boolean_eq integer_pop) integer_gte integer_add) in4))
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.247
Median total errors in population: 6
Error averages by case: (0.674 0.996 0.917 0.916 0.387 0.674 0.473 0.063 0.674 0.473)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.183
Average program size in population (points): 37.055
Average percent parens in population: 0.267
Minimum age in population: 75.92364344204353
Maximum age in population: 81.45373659000634
Average age in population: 79.50690776588083
Median age in population: 79.5641473646139
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 24260581
--- Timings ---
Current time: 1559314475679 milliseconds
Total Time:         153.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       106.1 seconds, 69.1%
Fitness Testing:     30.0 seconds, 19.5%
Report:              17.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -19} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline})
Lexicase best program: (exec_pop () in1 boolean_or boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -19) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq print_newline)))
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -19} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_newline})
Zero cases best program: (exec_pop () in1 boolean_or boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -19) boolean_yankdup) (exec_while (exec_dup_times () boolean_eq print_newline)))
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 340 127 204 339 254 204 925 204 127)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (340 340 127 204 339 254 204 925 204 127)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush boolean_yankdup boolean_rot exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_mult -20) (boolean_yankdup) exec_while (exec_dup_times () exec_when (integer_mult -20 boolean_yankdup exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (integer_gte integer_add in4)))))
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 44
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.936
Median total errors in population: 6
Error averages by case: (0.66 0.66 0.873 0.796 0.661 0.746 0.796 0.075 0.796 0.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.466
Average program size in population (points): 36.825
Average percent parens in population: 0.282
Minimum age in population: 76.92364344204353
Maximum age in population: 82.8928136024723
Average age in population: 80.84224040864949
Median age in population: 80.91380554641812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 24949481
--- Timings ---
Current time: 1559314479049 milliseconds
Total Time:         156.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.2 seconds, 69.0%
Fitness Testing:     30.8 seconds, 19.6%
Report:              17.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 90                 
Correct output: 7                   | Program output: 81                 
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 67                 
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 100                
Correct output: 32                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 44                 
Correct output: 14                  | Program output: 94                 
Correct output: 1                   | Program output: 91                 
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 100                
Correct output: -85                 | Program output: -85                
Correct output: -93                 | Program output: 31                 
Correct output: -77                 | Program output: 72                 
Correct output: -63                 | Program output: 96                 
Correct output: -14                 | Program output: 91                 
Correct output: -63                 | Program output: -63                
Correct output: -37                 | Program output: 90                 
Correct output: -96                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: 86                 
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -23                
Correct output: -4                  | Program output: 6                  
Correct output: -73                 | Program output: -27                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 76                 
Correct output: -42                 | Program output: 88                 
Correct output: -88                 | Program output: -20                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 73                 
Correct output: -85                 | Program output: 33                 
Correct output: -94                 | Program output: -12                
Correct output: -70                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: 93                 
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: 58                 
Correct output: -41                 | Program output: -21                
Correct output: -25                 | Program output: 26                 
Correct output: -98                 | Program output: -61                
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 54                 
Correct output: -64                 | Program output: 89                 
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -2                 
Correct output: -72                 | Program output: 73                 
Correct output: -69                 | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: -98                 | Program output: 85                 
Correct output: -52                 | Program output: 71                 
Correct output: -81                 | Program output: -41                
Correct output: -65                 | Program output: -25                
Correct output: -25                 | Program output: -4                 
Correct output: -88                 | Program output: -3                 
Correct output: -47                 | Program output: 87                 
Correct output: -95                 | Program output: -37                
Correct output: -16                 | Program output: 66                 
Correct output: -78                 | Program output: -32                
Correct output: -92                 | Program output: -27                
Correct output: -44                 | Program output: 24                 
Correct output: -70                 | Program output: 85                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean exec_do*count (exec_when (integer_mult -20) boolean_yankdup exec_while (exec_yankdup boolean_yankdup) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup integer_mult exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte))) ())
Lexicase best errors: [0 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean exec_do*count (exec_when (integer_mult -20) boolean_yankdup exec_while (exec_yankdup boolean_yankdup) exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_swap integer_mult -20) (boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup integer_mult exec_do*count (print_newline exec_yankdup boolean_yank exec_do*count () in1) boolean_eq in2) integer_gte))) ())
Zero cases best errors: [0 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 209 99 317 320 318 274 275 214 274)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (907 209 99 317 320 318 274 275 214 274)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 print_boolean integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup) (integer_gt exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_yankdup boolean_yank exec_do*count () in1) (boolean_eq in2 integer_gte integer_add) in4))
Errors: [0 1 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.793
Median total errors in population: 6
Error averages by case: (0.093 0.791 0.901 0.683 0.68 0.682 0.726 0.725 0.786 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.523
Average program size in population (points): 37.259
Average percent parens in population: 0.289
Minimum age in population: 79.13940089841773
Maximum age in population: 84.34276652946188
Average age in population: 82.29456708661789
Median age in population: 82.3458131303043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 25661718
--- Timings ---
Current time: 1559314482616 milliseconds
Total Time:         160.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.5 seconds, 68.9%
Fitness Testing:     31.6 seconds, 19.7%
Report:              18.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () integer_inc exec_do*count (integer_lte)) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () integer_inc exec_do*count (integer_lte)) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 107 197 107 107 328 326 328 326 326)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (326 107 197 107 107 328 326 328 326 326)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when})
Best program: (exec_pop () in1 boolean_flush boolean_and boolean_dup_times exec_swap (print_integer integer_gt exec_y () print_boolean integer_lte exec_when ()) ())
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 12
Size: 18
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.522
Median total errors in population: 9
Error averages by case: (0.674 0.893 0.803 0.893 0.893 0.672 0.674 0.672 0.674 0.674)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.177
Average program size in population (points): 36.727
Average percent parens in population: 0.288
Minimum age in population: 80.82720132460987
Maximum age in population: 85.7243124472113
Average age in population: 83.74014453615578
Median age in population: 83.82550972862224
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 26369409
--- Timings ---
Current time: 1559314485864 milliseconds
Total Time:         163.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       112.5 seconds, 68.7%
Fitness Testing:     32.4 seconds, 19.8%
Report:              18.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -21} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_shove exec_y_when_autoconstructing (exec_swap (in2 print_integer integer_dup_items exec_y () print_boolean integer_lte) (exec_when (integer_mult -21) integer_min) integer_sub boolean_dup_times boolean_yankdup) exec_s (boolean_stackdepth integer_dup) (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_mod) (integer_dup boolean_dup_times boolean_yankdup exec_do*count (exec_while (boolean_dup_times exec_dup_items in3 print_newline exec_yankdup boolean_yank)))) ())
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -21} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_shove exec_y_when_autoconstructing (exec_swap (in2 print_integer integer_dup_items exec_y () print_boolean integer_lte) (exec_when (integer_mult -21) integer_min) integer_sub boolean_dup_times boolean_yankdup) exec_s (boolean_stackdepth integer_dup) (exec_dup_times () boolean_eq exec_k_when_autoconstructing (integer_mod) (integer_dup boolean_dup_times boolean_yankdup exec_do*count (exec_while (boolean_dup_times exec_dup_items in3 print_newline exec_yankdup boolean_yank)))) ())
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 279 539 7 539 86 912 539 279 279)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (279 279 539 7 539 86 912 539 279 279)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_dup_times})
Best program: (integer_shove exec_y_when_autoconstructing (boolean_dup_times) in2 print_integer integer_dup_items exec_y () boolean_dup_times)
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.262
Median total errors in population: 6
Error averages by case: (0.721 0.721 0.461 0.993 0.461 0.914 0.088 0.461 0.721 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.363
Average program size in population (points): 33.789
Average percent parens in population: 0.281
Minimum age in population: 81.86640620015925
Maximum age in population: 87.509784783858
Average age in population: 85.22194840712375
Median age in population: 85.28094062381064
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 27063348
--- Timings ---
Current time: 1559314489125 milliseconds
Total Time:         167.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       114.5 seconds, 68.6%
Fitness Testing:     33.2 seconds, 19.9%
Report:              19.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times integer_lt boolean_dup_times boolean_dup_times exec_swap () (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (exec_dup_times () exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_while (boolean_dup_times boolean_yankdup exec_do*count (integer_fromboolean) exec_yankdup)) ()) () ())))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.359
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times integer_lt boolean_dup_times boolean_dup_times exec_swap () (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (exec_dup_times () exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_while (boolean_dup_times boolean_yankdup exec_do*count (integer_fromboolean) exec_yankdup)) ()) () ())))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.359
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 932 315 87 87 932 87 318 318 99)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (313 932 315 87 87 932 87 318 318 99)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction -20} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (boolean_xor -20) in3 exec_while (exec_dup_times () exec_while (exec_dup_times () boolean_eq boolean_dup_times boolean_yankdup))) ())
Errors: [0 0 0 1 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.512
Median total errors in population: 7
Error averages by case: (0.687 0.068 0.685 0.913 0.913 0.068 0.913 0.682 0.682 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.337
Average program size in population (points): 33.512
Average percent parens in population: 0.275
Minimum age in population: 82.86640620015925
Maximum age in population: 88.92075113725986
Average age in population: 86.6408276455201
Median age in population: 86.73363094004856
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 27756406
--- Timings ---
Current time: 1559314492140 milliseconds
Total Time:         170.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       116.3 seconds, 68.4%
Fitness Testing:     34.0 seconds, 20.0%
Report:              19.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction -20} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_dup_items in1 boolean_or boolean_dup_times exec_swap (print_integer print_integer integer_dup_items exec_y () exec_dup (integer_yankdup exec_when (integer_mult -20) -20) exec_flush integer_dec exec_yankdup boolean_yank exec_do*count (in1) boolean_eq in2) (integer_gte integer_add) integer_yank)
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 1, :instruction -20} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_dup_items in1 boolean_or boolean_dup_times exec_swap (print_integer print_integer integer_dup_items exec_y () exec_dup (integer_yankdup exec_when (integer_mult -20) -20) exec_flush integer_dec exec_yankdup boolean_yank exec_do*count (in1) boolean_eq in2) (integer_gte integer_add) integer_yank)
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (616 2 2 502 502 499 933 502 305 502)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (616 2 2 502 502 499 933 502 305 502)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction -20} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_lte exec_when (integer_mult -20) boolean_yankdup exec_while (exec_dup_times () boolean_eq exec_k_when_autoconstructing (exec_yankdup boolean_yank exec_do*count (in1) boolean_eq) (in2) integer_gte integer_add) in4) ())
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 5.635
Median total errors in population: 5
Error averages by case: (0.384 0.998 0.998 0.498 0.498 0.501 0.067 0.498 0.695 0.498)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.757
Average program size in population (points): 36.81
Average percent parens in population: 0.275
Minimum age in population: 83.93528069646104
Maximum age in population: 90.12800315092063
Average age in population: 88.0852459414703
Median age in population: 88.17600799425792
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 28467700
--- Timings ---
Current time: 1559314495945 milliseconds
Total Time:         173.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.8 seconds, 68.4%
Fitness Testing:     34.8 seconds, 20.0%
Report:              20.1 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte})
Lexicase best program: (exec_pop () in1 boolean_flush integer_min integer_lt exec_swap (print_integer integer_dup_items exec_y (integer_lte integer_lte exec_when (integer_lte exec_when (integer_gte -20) boolean_yankdup) exec_while (exec_yankdup boolean_yank integer_gte) integer_gt) -20) (boolean_yankdup) exec_while (exec_yankdup boolean_yank integer_gte) boolean_yank integer_gte in1 boolean_eq in4 integer_gte integer_add integer_gte)
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction integer_gte})
Zero cases best program: (exec_pop () in1 boolean_flush integer_min integer_lt exec_swap (print_integer integer_dup_items exec_y (integer_lte integer_lte exec_when (integer_lte exec_when (integer_gte -20) boolean_yankdup) exec_while (exec_yankdup boolean_yank integer_gte) integer_gt) -20) (boolean_yankdup) exec_while (exec_yankdup boolean_yank integer_gte) boolean_yank integer_gte in1 boolean_eq in4 integer_gte integer_add integer_gte)
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 663 659 933 659 2 171 654 662 171)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (171 663 659 933 659 2 171 654 662 171)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*count})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (exec_when (integer_mult -20 boolean_yankdup) exec_while (exec_dup_times (-20) boolean_yankdup) exec_while () exec_yankdup exec_do*count ())) ())
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 30
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.255
Median total errors in population: 4
Error averages by case: (0.829 0.337 0.341 0.067 0.341 0.998 0.829 0.346 0.338 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.494
Average program size in population (points): 36.596
Average percent parens in population: 0.278
Minimum age in population: 84.93528069646104
Maximum age in population: 91.64414148644686
Average age in population: 89.60679882075007
Median age in population: 89.65941883003367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 29215199
--- Timings ---
Current time: 1559314499502 milliseconds
Total Time:         177.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.8 seconds, 68.2%
Fitness Testing:     35.6 seconds, 20.1%
Report:              20.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 54                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 93                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 97                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 82                 
Correct output: 49                  | Program output: 65                 
Correct output: 12                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 99                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 78                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 57                 
Correct output: -63                 | Program output: 63                 
Correct output: -80                 | Program output: 90                 
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 77                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 78                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 99                 
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 23                 
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 2, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean) integer_lte integer_lt boolean_dup_times) (exec_swap (print_integer integer_dup_items exec_y () boolean_yankdup) (exec_while (exec_dup_times (exec_k_when_autoconstructing (integer_swap integer_mult -20) () boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (boolean_yankdup -20) boolean_yankdup) exec_while (boolean_yankdup boolean_yankdup exec_do*count (print_newline))))))
Lexicase best errors: [1 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 53
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 2, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 2, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean) integer_lte integer_lt boolean_dup_times) (exec_swap (print_integer integer_dup_items exec_y () boolean_yankdup) (exec_while (exec_dup_times (exec_k_when_autoconstructing (integer_swap integer_mult -20) () boolean_yankdup) exec_while (boolean_dup_times boolean_yankdup exec_do*count (boolean_yankdup -20) boolean_yankdup) exec_while (boolean_yankdup boolean_yankdup exec_do*count (print_newline))))))
Zero cases best errors: [1 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 53
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (243 11 564 107 560 14 567 247 243 564)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (243 11 564 107 560 14 567 247 243 564)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_yank})
Best program: (integer_shove exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y () print_boolean integer_yank) ())
Errors: [1 1 0 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 6
Error averages by case: (0.757 0.989 0.436 0.893 0.44 0.986 0.433 0.753 0.757 0.436)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.004
Average program size in population (points): 37.392
Average percent parens in population: 0.279
Minimum age in population: 87.14326555955797
Maximum age in population: 92.92916912765229
Average age in population: 91.01155488847527
Median age in population: 91.18363338741091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 29994039
--- Timings ---
Current time: 1559314502617 milliseconds
Total Time:         180.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.6 seconds, 67.9%
Fitness Testing:     36.4 seconds, 20.2%
Report:              21.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -1                  | Program output: 66                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -16                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 78                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 56                 
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 67                 
Correct output: 17                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 57                 
Correct output: 7                   | Program output: 30                 
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 64                 
Correct output: 22                  | Program output: 78                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 33                 
Correct output: 32                  | Program output: 82                 
Correct output: 22                  | Program output: 80                 
Correct output: 7                   | Program output: 27                 
Correct output: 14                  | Program output: 20                 
Correct output: 1                   | Program output: 64                 
Correct output: 54                  | Program output: 82                 
Correct output: 12                  | Program output: 73                 
Correct output: -93                 | Program output: 47                 
Correct output: -85                 | Program output: 64                 
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 90                 
Correct output: -14                 | Program output: 15                 
Correct output: -63                 | Program output: 59                 
Correct output: -37                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: 25                 
Correct output: -73                 | Program output: 69                 
Correct output: -91                 | Program output: -15                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: 18                 
Correct output: -4                  | Program output: 58                 
Correct output: -73                 | Program output: 87                 
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 8                  
Correct output: -9                  | Program output: 67                 
Correct output: 21                  | Program output: 69                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -28                
Correct output: -70                 | Program output: -23                
Correct output: -8                  | Program output: 49                 
Correct output: -79                 | Program output: 7                  
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 51                 
Correct output: -41                 | Program output: 88                 
Correct output: -25                 | Program output: 12                 
Correct output: -98                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: 9                  
Correct output: -100                | Program output: 23                 
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -36                
Correct output: -64                 | Program output: 67                 
Correct output: -65                 | Program output: 90                 
Correct output: -97                 | Program output: 82                 
Correct output: -72                 | Program output: -65                
Correct output: -69                 | Program output: -28                
Correct output: -98                 | Program output: -48                
Correct output: -98                 | Program output: 26                 
Correct output: -52                 | Program output: -39                
Correct output: -81                 | Program output: 42                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -2                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: 40                 
Correct output: -95                 | Program output: 51                 
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: 6                  
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 2, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction -20} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_newline} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k})
Lexicase best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean) integer_lte exec_when (boolean_xor -20) in3 exec_while (exec_dup_times () exec_while (exec_dup_times () boolean_eq boolean_dup_times boolean_yankdup boolean_flush print_newline) exec_yankdup) boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add exec_k () ())
Lexicase best errors: [0 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 2, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction -20} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_newline} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k})
Zero cases best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean) integer_lte exec_when (boolean_xor -20) in3 exec_while (exec_dup_times () exec_while (exec_dup_times () boolean_eq boolean_dup_times boolean_yankdup boolean_flush print_newline) exec_yankdup) boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add exec_k () ())
Zero cases best errors: [0 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 219 164 120 429 648 120 219 931 164)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (219 219 164 120 429 648 120 219 931 164)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 2, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction -20} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_newline} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k})
Best program: (exec_pop () in1 boolean_flush integer_lt boolean_dup_times exec_swap (print_integer integer_dup_items exec_y (print_boolean) integer_lte exec_when (boolean_xor -20) in3 exec_while (exec_dup_times () exec_while (exec_dup_times () boolean_eq boolean_dup_times boolean_yankdup boolean_flush print_newline) integer_dup_times) boolean_yank exec_do*count () in1) (boolean_eq in2) integer_gte integer_add exec_k () ())
Errors: [0 0 1 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 46
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.767
Median total errors in population: 7
Error averages by case: (0.781 0.781 0.836 0.88 0.571 0.352 0.88 0.781 0.069 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.867
Average program size in population (points): 38.36
Average percent parens in population: 0.275
Minimum age in population: 88.14326555955797
Maximum age in population: 94.35254876437018
Average age in population: 92.2818352587284
Median age in population: 92.4363101896048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 30742633
--- Timings ---
Current time: 1559314505840 milliseconds
Total Time:         183.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.4 seconds, 67.8%
Fitness Testing:     37.3 seconds, 20.3%
Report:              21.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -40                
Correct output: -23                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 38                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: 49                 
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: 18                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: 22                 
Correct output: -92                 | Program output: -53                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -31                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count})
Lexicase best program: (exec_pop () in3 exec_pop () in1 boolean_flush integer_min integer_lt exec_swap (print_integer integer_dup_items exec_y () integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) (print_boolean) integer_mult exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () in1) boolean_eq in2 integer_gte integer_add exec_do*count ())
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count})
Zero cases best program: (exec_pop () in3 exec_pop () in1 boolean_flush integer_min integer_lt exec_swap (print_integer integer_dup_items exec_y () integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) (print_boolean) integer_mult exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () in1) boolean_eq in2 integer_gte integer_add exec_do*count ())
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 351 352 351 202 190 202 165 354 199)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (202 351 352 351 202 190 202 165 354 199)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count})
Best program: (exec_pop () in3 exec_pop () in1 boolean_flush integer_min integer_lt exec_s (print_integer integer_dup_items exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) (integer_mult exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () in1) boolean_eq in2) (integer_gte integer_add) exec_do*count ())
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.432
Median total errors in population: 7
Error averages by case: (0.798 0.649 0.648 0.649 0.798 0.81 0.798 0.835 0.646 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.926
Average program size in population (points): 39.75
Average percent parens in population: 0.272
Minimum age in population: 89.4972514759121
Maximum age in population: 96.09820563741286
Average age in population: 93.64261330141974
Median age in population: 93.82795653311
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 31523340
--- Timings ---
Current time: 1559314509480 milliseconds
Total Time:         187.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.5 seconds, 67.6%
Fitness Testing:     38.2 seconds, 20.4%
Report:              22.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -40                
Correct output: -23                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 38                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: 49                 
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: 18                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: 22                 
Correct output: -92                 | Program output: -53                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -31                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_noop})
Lexicase best program: (exec_pop () in3 exec_pop () in1 boolean_flush integer_min integer_lt exec_s (print_integer integer_dup_items exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) (boolean_shove exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () in1) boolean_eq in2) (integer_gte integer_add) exec_noop)
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_noop})
Zero cases best program: (exec_pop () in3 exec_pop () in1 boolean_flush integer_min integer_lt exec_s (print_integer integer_dup_items exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) (boolean_shove exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () in1) boolean_eq in2) (integer_gte integer_add) exec_noop)
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 497 70 503 509 509 932 453 787 333)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (334 497 70 503 509 509 932 453 787 333)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count})
Best program: (exec_pop () in3 exec_pop () in1 boolean_flush integer_min integer_lt exec_s (print_integer integer_dup_items exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) (integer_mult exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () in1) exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () in1) boolean_eq in2) (integer_gte integer_add) exec_do*count ())
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 5.073
Median total errors in population: 6
Error averages by case: (0.666 0.503 0.93 0.497 0.491 0.491 0.068 0.547 0.213 0.667)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.366
Average program size in population (points): 40.198
Average percent parens in population: 0.269
Minimum age in population: 91.94323499393263
Maximum age in population: 97.0778926970417
Average age in population: 94.28306967604082
Median age in population: 94.35282300244859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 139
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 32457760
--- Timings ---
Current time: 1559314513211 milliseconds
Total Time:         190.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.6 seconds, 67.4%
Fitness Testing:     39.1 seconds, 20.5%
Report:              23.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 499
Test mean error for best: 0.49900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output: 37                 
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: -23                
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 33                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: 37                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 88 935 204 87 204 622 583 615 204)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (88 88 935 204 87 204 622 583 615 204)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.37
Median total errors in population: 6
Error averages by case: (0.912 0.912 0.065 0.796 0.913 0.796 0.378 0.417 0.385 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.714
Average program size in population (points): 40.645
Average percent parens in population: 0.269
Minimum age in population: 92.94323499393263
Maximum age in population: 98.0123599947193
Average age in population: 95.54122549654137
Median age in population: 95.60820214989441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 33412059
--- Timings ---
Current time: 1559314516672 milliseconds
Total Time:         194.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.4 seconds, 67.1%
Fitness Testing:     40.1 seconds, 20.6%
Report:              23.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 73                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 72                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -40                
Correct output: -23                 | Program output: 11                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: 38                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 36                 
Correct output: -63                 | Program output: 49                 
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: 18                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 13                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: 22                 
Correct output: -92                 | Program output: -53                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -31                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Lexicase best errors: [0 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Zero cases best errors: [0 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (476 476 374 481 284 487 476 281 144 186)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (476 476 374 481 284 487 476 281 144 186)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction exec_do*count})
Best program: (exec_pop () in3 exec_pop () in1 boolean_flush integer_min integer_lt exec_s (print_integer integer_dup_items exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) (exec_do*count (exec_when (boolean_yankdup) integer_fromboolean exec_yankdup integer_lt exec_do*count () in1) boolean_eq in2) (integer_gte integer_add) exec_do*count ())
Errors: [0 0 1 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.335
Median total errors in population: 8
Error averages by case: (0.524 0.524 0.626 0.519 0.716 0.513 0.524 0.719 0.856 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.035
Average program size in population (points): 39.147
Average percent parens in population: 0.258
Minimum age in population: 94.37892806664458
Maximum age in population: 99.53744741314569
Average age in population: 97.15932708750731
Median age in population: 97.23198003359809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 34394463
--- Timings ---
Current time: 1559314520281 milliseconds
Total Time:         197.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.4 seconds, 66.9%
Fitness Testing:     41.0 seconds, 20.7%
Report:              24.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: 24                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output:                    
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: -28                
Correct output: -18                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 17                 
Correct output: 8                   | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 64                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 29                 
Correct output: 2                   | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 49                  | Program output: 62                 
Correct output: 12                  | Program output:                    
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 7                   | Program output: 54                 
Correct output: 14                  | Program output: 81                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 12                  | Program output:                    
Correct output: -93                 | Program output: 12                 
Correct output: -85                 | Program output: 76                 
Correct output: -93                 | Program output: 13                 
Correct output: -77                 | Program output: 14                 
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -13                
Correct output: -23                 | Program output: 69                 
Correct output: -72                 | Program output: -25                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -9                 
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 39                 
Correct output: -63                 | Program output: -5                 
Correct output: -80                 | Program output: -80                
Correct output: -28                 | Program output: 62                 
Correct output: -42                 | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: 28                 
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -5                 
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: 25                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -100               
Correct output: -66                 | Program output: -66                
Correct output: -98                 | Program output: 76                 
Correct output: -64                 | Program output: -39                
Correct output: -65                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 42                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: 98                 
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output:                    
Correct output: -78                 | Program output: -8                 
Correct output: -92                 | Program output: -82                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt print_integer integer_dup_items exec_y () print_boolean integer_mult exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () boolean_flush) boolean_eq in2 integer_gte boolean_dup_times boolean_yankdup integer_stackdepth in1 boolean_eq in2 integer_gte integer_add in4)
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt print_integer integer_dup_items exec_y () print_boolean integer_mult exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () boolean_flush) boolean_eq in2 integer_gte boolean_dup_times boolean_yankdup integer_stackdepth in1 boolean_eq in2 integer_gte integer_add in4)
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 366 649 638 648 153 327 366 153 643)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (154 366 649 638 648 153 327 366 153 643)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (exec_pop () in3 exec_yank in1 boolean_flush integer_min integer_lt print_integer integer_dup_items exec_y () print_boolean integer_mult exec_when (boolean_yankdup) exec_while (exec_yankdup integer_lt exec_do*count () boolean_flush) boolean_eq in2 integer_gte boolean_dup_times boolean_yankdup integer_stackdepth in1 boolean_eq in2 integer_gte integer_add in4)
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 5.903
Median total errors in population: 5
Error averages by case: (0.846 0.634 0.351 0.362 0.352 0.847 0.673 0.634 0.847 0.357)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.482
Average program size in population (points): 39.659
Average percent parens in population: 0.256
Minimum age in population: 95.37892806664458
Maximum age in population: 100.8410660373791
Average age in population: 98.44897998177358
Median age in population: 98.5376566549038
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 35446727
--- Timings ---
Current time: 1559314523545 milliseconds
Total Time:         201.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.1 seconds, 66.6%
Fitness Testing:     42.0 seconds, 20.9%
Report:              25.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Lexicase best program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Zero cases best program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 875 293 874 650 499 874 192 501 291)
Population mean number of elite cases: 5.93
Count of perfect (error zero) individuals by case: (884 875 293 874 650 499 874 192 501 291)
Population mean number of perfect (error zero) cases: 5.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 4.067
Median total errors in population: 3
Error averages by case: (0.116 0.125 0.707 0.126 0.35 0.501 0.126 0.808 0.499 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.759
Average program size in population (points): 38.433
Average percent parens in population: 0.198
Minimum age in population: 97.31770670852877
Maximum age in population: 101.3914611006296
Average age in population: 100.0868284604434
Median age in population: 100.0811543446245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 277
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 301
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.009
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 36458489
--- Timings ---
Current time: 1559314527345 milliseconds
Total Time:         205.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.3 seconds, 66.5%
Fitness Testing:     43.0 seconds, 21.0%
Report:              25.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in4})
Lexicase best program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add in4))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in4})
Zero cases best program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add in4))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (709 708 711 634 501 501 712 719 719 638)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (709 708 711 634 501 501 712 719 719 638)
Population mean number of perfect (error zero) cases: 6.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction -20} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 1, :instruction in4})
Best program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 3.448
Median total errors in population: 4
Error averages by case: (0.291 0.292 0.289 0.366 0.499 0.499 0.288 0.281 0.281 0.362)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.428
Average program size in population (points): 37.988
Average percent parens in population: 0.198
Minimum age in population: 99.97544002046753
Maximum age in population: 102.7370632481724
Average age in population: 101.4987912396743
Median age in population: 101.6463432097676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 272
Genome diversity (% unique genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.01
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 37656422
--- Timings ---
Current time: 1559314530881 milliseconds
Total Time:         208.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.1 seconds, 66.2%
Fitness Testing:     44.1 seconds, 21.2%
Report:              26.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 68
Successful program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 38


Auto-simplifying with starting size: 38
step: 0
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 500
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1000
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1500
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2000
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2500
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3000
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3500
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4000
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4500
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 5000
program: (in2 in3 integer_min in1 boolean_flush integer_min integer_yankdup exec_s (print_integer exec_do*while (exec_y (integer_lte integer_lte exec_when (integer_gte -20) boolean_yankdup) print_boolean) integer_mult exec_when (boolean_yankdup) boolean_dup_times boolean_yankdup integer_stackdepth in1) (boolean_eq in2) (integer_gte integer_add) in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -1                  | Program output: -1                 
Correct output: -4                  | Program output: -4                 
Correct output: -26                 | Program output: -26                
Correct output: 17                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: 8                   | Program output: 8                  
Correct output: -28                 | Program output: 35                 
Correct output: -18                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -10                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: 26                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 17                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 49                  | Program output: 49                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 22                  | Program output: 60                 
Correct output: 49                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -14                 | Program output: -14                
Correct output: -63                 | Program output: -20                
Correct output: -37                 | Program output: -37                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -4                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -34                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -4                  | Program output: -4                 
Correct output: -73                 | Program output: -73                
Correct output: 26                  | Program output: 26                 
Correct output: -63                 | Program output: -63                
Correct output: -80                 | Program output: 30                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: 58                 
Correct output: 21                  | Program output: 21                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 37                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: -41                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -3                  | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -94                 | Program output: -34                
Correct output: -100                | Program output: -29                
Correct output: -66                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -61                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -16                 | Program output: -16                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -44                 | Program output: -44                
Correct output: -70                 | Program output: -70                
;;******************************
